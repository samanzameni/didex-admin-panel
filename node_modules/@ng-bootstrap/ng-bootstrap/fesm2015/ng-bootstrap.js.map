{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js"],"names":[],"mappingscA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8HC,yEAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyBD,8FAGC;;;;;;;;;;;;;;;;;;;;;;CAiBD,8FAGC;;;;;;;;;;;;;;;;;;;;CAeD,8FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCD,aAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiMD,aA6BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCD,aAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiBD,sLAGC;;;;;;;;;;;;;;;;;;;;;;CAiBD,mFAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgDD,8DAgBC;;;;;;;;;;;;;;;;;;;;;;;;;CAkBD,0KAGC;;;;;;;;;;;;;;;;;;;;;;;;CAOD,mBAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoGD,0KAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmID,oSAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmGD,aAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,qJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,wKAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyBD,aAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+QD,aAkCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyCD,mLAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgBD,aAOC;;;;;;;;;;;;;;;;;CAUD,wJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyID,mBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsHD,kKAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoWD,+EAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4CD,yMAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyYD,6WAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCD,uKAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BD,mBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuiUD,aAkDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0HD,iCAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqDD,yDA+BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2CD,aAukBD,mBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCD,wCAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,kqaD,aAiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuDD,aAiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsDD,aA0BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkkigBD,sMAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyDD,0KAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgDD,qFAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCD,yDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAOD,sMAWC;;;;;;;;;;;;;;;;;;;;;;CAiBD,sFAGC;;;;;;;;;;;;;CAQD,mBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,2BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoBD,aAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCD,mIAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,gEAmBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2VD,aAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BD,wJAGC;;;;;;;;;;;;;;;;;;;;;;;;CAmBD,oFAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkLD,yHAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAYD,aAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmTD,aAoBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8WD,2qBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmED,2QAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;CAeD,sKAOC;;;;;;;;;;;;;;;;;;;;;;;;;CAoBD,uGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BD,8FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8DD,aAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoGD,aAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuCD,uIAmBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkBD,aAmBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAaD,oKAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,kKAGC;;;;;;;;;;;;;;;;;;;;;;;;CAmBD,8FAGC;;;;;;;;;;;;;;;;;;;;;;CAiBD,8FAGC;;;;;;;;;;;;;;;;;;;;;;CAiBD,8FAGC;;;;;;;;;;;;;;;;;;;;;;CAiBD,8FAGC;;;;;;;;;;;;;;;;;;;;;;CAiBD,8FAGC;;;;;;;;;;;;;;;;;;;;;;CAiBD,8FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0MD,aAoEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCD,yLAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwPD,uJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAcD,aAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0KD,aAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCD,gLAQC;;;;;;;;;;;;;;;;;;;;;;;;CAmBD,2GAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmDD,0DAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,4LAGC;;;;;;;;;;;;;;;;;;;;;;;CAkBD,+FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmND,aA+BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuBD,6KAGC;;;;;;;;;;;;;;;;;;;;;;;CAkBD,gGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,8FAGC;;;;;;;;;;;;;;;;;;;;CAeD,8FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCD,aAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyFD,aA8BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,2LAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyGD,2LAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD,mBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuBD,6CAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoBD,mBAGC;;;;;;;;;;;;;;;;;;;;;;;;;CAkBD,sGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqPD,wZAyFC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,yLAGC;;;;;;;;;;;;;;;;;;;;;;;;CAmBD,+FAGC;;;;;;;;;;;;;;;;;;;CAcD,mBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8ED,aA+BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmBD,0KAGC;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,uJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAUD,aAUC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsKD,uLAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCD,qJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0CD,aAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+FD,aAuBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmFD,+FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyBD,mHAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiXD,aAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCD,sLAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAaD,8BAGC","file":"ng-bootstrap.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, Directive, TemplateRef, Input, ContentChildren, EventEmitter, Component, ViewEncapsulation, Output, Optional, Host, NgModule, ChangeDetectionStrategy, Renderer2, ElementRef, forwardRef, ChangeDetectorRef, Inject, PLATFORM_ID, NgZone, HostListener, LOCALE_ID, ɵɵinject, ViewChild, ContentChild, ViewContainerRef, ComponentFactoryResolver, Injector, ApplicationRef, RendererFactory2, INJECTOR, Attribute, InjectionToken } from '@angular/core';\r\nimport { CommonModule, isPlatformBrowser, getLocaleDayNames, FormStyle, TranslationWidth, getLocaleMonthNames, formatDate, DOCUMENT, getLocaleDayPeriods } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\r\nimport { Subject, BehaviorSubject, combineLatest, timer, NEVER, fromEvent, merge, race, Observable } from 'rxjs';\r\nimport { map, startWith, distinctUntilChanged, switchMap, takeUntil, filter, take, tap, withLatestFrom, delay, share } from 'rxjs/operators';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction toInteger(value) {\r\n    return parseInt(`${value}`, 10);\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction toString(value) {\r\n    return (value !== undefined && value !== null) ? `${value}` : '';\r\n}\r\n/**\r\n * @param {?} value\r\n * @param {?} max\r\n * @param {?=} min\r\n * @return {?}\r\n */\r\nfunction getValueInRange(value, max, min = 0) {\r\n    return Math.max(Math.min(value, max), min);\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isNumber(value) {\r\n    return !isNaN(toInteger(value));\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isDefined(value) {\r\n    return value !== undefined && value !== null;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction padNumber(value) {\r\n    if (isNumber(value)) {\r\n        return `0${value}`.slice(-2);\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction regExpEscape(text) {\r\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n/**\r\n * @param {?} element\r\n * @param {?} className\r\n * @return {?}\r\n */\r\nfunction hasClassName(element, className) {\r\n    return element && element.className && element.className.split &&\r\n        element.className.split(/\\s+/).indexOf(className) >= 0;\r\n}\r\nif (typeof Element !== 'undefined' && !Element.prototype.closest) {\r\n    // Polyfill for ie10+\r\n    if (!Element.prototype.matches) {\r\n        // IE uses the non-standard name: msMatchesSelector\r\n        Element.prototype.matches = ((/** @type {?} */ (Element.prototype))).msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\n    }\r\n    Element.prototype.closest = (/**\r\n     * @param {?} s\r\n     * @return {?}\r\n     */\r\n    function (s) {\r\n        /** @type {?} */\r\n        let el = this;\r\n        if (!document.documentElement.contains(el)) {\r\n            return null;\r\n        }\r\n        do {\r\n            if (el.matches(s)) {\r\n                return el;\r\n            }\r\n            el = el.parentElement || el.parentNode;\r\n        } while (el !== null && el.nodeType === 1);\r\n        return null;\r\n    });\r\n}\r\n/**\r\n * @param {?} element\r\n * @param {?} selector\r\n * @return {?}\r\n */\r\nfunction closest(element, selector) {\r\n    if (!selector) {\r\n        return null;\r\n    }\r\n    return element.closest(selector);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [NgbAccordion](#/components/accordion/api#NgbAccordion) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize its properties\r\n * to provide default values for all accordions used in the application.\r\n */\r\nclass NgbAccordionConfig {\r\n    constructor() {\r\n        this.closeOthers = false;\r\n    }\r\n}\r\nNgbAccordionConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbAccordionConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbAccordionConfig_Factory() { return new NgbAccordionConfig(); }, token: NgbAccordionConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nlet nextId = 0;\r\n/**\r\n * A directive that wraps an accordion panel header with any HTML markup and a toggling button\r\n * marked with [`NgbPanelToggle`](#/components/accordion/api#NgbPanelToggle).\r\n * See the [header customization demo](#/components/accordion/examples#header) for more details.\r\n *\r\n * You can also use [`NgbPanelTitle`](#/components/accordion/api#NgbPanelTitle) to customize only the panel title.\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPanelHeader {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPanelHeader.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPanelHeader]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPanelHeader.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive that wraps only the panel title with HTML markup inside.\r\n *\r\n * You can also use [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader) to customize the full panel header.\r\n */\r\nclass NgbPanelTitle {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPanelTitle.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPanelTitle]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPanelTitle.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive that wraps the accordion panel content.\r\n */\r\nclass NgbPanelContent {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPanelContent.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPanelContent]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPanelContent.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive that wraps an individual accordion panel with title and collapsible content.\r\n */\r\nclass NgbPanel {\r\n    constructor() {\r\n        /**\r\n         *  If `true`, the panel is disabled an can't be toggled.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         *  An optional id for the panel that must be unique on the page.\r\n         *\r\n         *  If not provided, it will be auto-generated in the `ngb-panel-xxx` format.\r\n         */\r\n        this.id = `ngb-panel-${nextId++}`;\r\n        this.isOpen = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\r\n        // only @ContentChildren allows us to specify the {descendants: false} option.\r\n        // Without {descendants: false} we are hitting bugs described in:\r\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n        this.titleTpl = this.titleTpls.first;\r\n        this.headerTpl = this.headerTpls.first;\r\n        this.contentTpl = this.contentTpls.first;\r\n    }\r\n}\r\nNgbPanel.decorators = [\r\n    { type: Directive, args: [{ selector: 'ngb-panel' },] }\r\n];\r\nNgbPanel.propDecorators = {\r\n    disabled: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    title: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    cardClass: [{ type: Input }],\r\n    titleTpls: [{ type: ContentChildren, args: [NgbPanelTitle, { descendants: false },] }],\r\n    headerTpls: [{ type: ContentChildren, args: [NgbPanelHeader, { descendants: false },] }],\r\n    contentTpls: [{ type: ContentChildren, args: [NgbPanelContent, { descendants: false },] }]\r\n};\r\n/**\r\n * Accordion is a collection of collapsible panels (bootstrap cards).\r\n *\r\n * It can ensure only one panel is opened at a time and allows to customize panel\r\n * headers.\r\n */\r\nclass NgbAccordion {\r\n    /**\r\n     * @param {?} config\r\n     */\r\n    constructor(config) {\r\n        /**\r\n         * An array or comma separated strings of panel ids that should be opened **initially**.\r\n         *\r\n         * For subsequent changes use methods like `expand()`, `collapse()`, etc. and\r\n         * the `(panelChange)` event.\r\n         */\r\n        this.activeIds = [];\r\n        /**\r\n         * If `true`, panel content will be detached from DOM and not simply hidden when the panel is collapsed.\r\n         */\r\n        this.destroyOnHide = true;\r\n        /**\r\n         * Event emitted right before the panel toggle happens.\r\n         *\r\n         * See [NgbPanelChangeEvent](#/components/accordion/api#NgbPanelChangeEvent) for payload details.\r\n         */\r\n        this.panelChange = new EventEmitter();\r\n        this.type = config.type;\r\n        this.closeOtherPanels = config.closeOthers;\r\n    }\r\n    /**\r\n     * Checks if a panel with a given id is expanded.\r\n     * @param {?} panelId\r\n     * @return {?}\r\n     */\r\n    isExpanded(panelId) { return this.activeIds.indexOf(panelId) > -1; }\r\n    /**\r\n     * Expands a panel with a given id.\r\n     *\r\n     * Has no effect if the panel is already expanded or disabled.\r\n     * @param {?} panelId\r\n     * @return {?}\r\n     */\r\n    expand(panelId) { this._changeOpenState(this._findPanelById(panelId), true); }\r\n    /**\r\n     * Expands all panels, if `[closeOthers]` is `false`.\r\n     *\r\n     * If `[closeOthers]` is `true`, it will expand the first panel, unless there is already a panel opened.\r\n     * @return {?}\r\n     */\r\n    expandAll() {\r\n        if (this.closeOtherPanels) {\r\n            if (this.activeIds.length === 0 && this.panels.length) {\r\n                this._changeOpenState(this.panels.first, true);\r\n            }\r\n        }\r\n        else {\r\n            this.panels.forEach((/**\r\n             * @param {?} panel\r\n             * @return {?}\r\n             */\r\n            panel => this._changeOpenState(panel, true)));\r\n        }\r\n    }\r\n    /**\r\n     * Collapses a panel with the given id.\r\n     *\r\n     * Has no effect if the panel is already collapsed or disabled.\r\n     * @param {?} panelId\r\n     * @return {?}\r\n     */\r\n    collapse(panelId) { this._changeOpenState(this._findPanelById(panelId), false); }\r\n    /**\r\n     * Collapses all opened panels.\r\n     * @return {?}\r\n     */\r\n    collapseAll() {\r\n        this.panels.forEach((/**\r\n         * @param {?} panel\r\n         * @return {?}\r\n         */\r\n        (panel) => { this._changeOpenState(panel, false); }));\r\n    }\r\n    /**\r\n     * Toggles a panel with the given id.\r\n     *\r\n     * Has no effect if the panel is disabled.\r\n     * @param {?} panelId\r\n     * @return {?}\r\n     */\r\n    toggle(panelId) {\r\n        /** @type {?} */\r\n        const panel = this._findPanelById(panelId);\r\n        if (panel) {\r\n            this._changeOpenState(panel, !panel.isOpen);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        // active id updates\r\n        if (isString(this.activeIds)) {\r\n            this.activeIds = this.activeIds.split(/\\s*,\\s*/);\r\n        }\r\n        // update panels open states\r\n        this.panels.forEach((/**\r\n         * @param {?} panel\r\n         * @return {?}\r\n         */\r\n        panel => panel.isOpen = !panel.disabled && this.activeIds.indexOf(panel.id) > -1));\r\n        // closeOthers updates\r\n        if (this.activeIds.length > 1 && this.closeOtherPanels) {\r\n            this._closeOthers(this.activeIds[0]);\r\n            this._updateActiveIds();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} panel\r\n     * @param {?} nextState\r\n     * @return {?}\r\n     */\r\n    _changeOpenState(panel, nextState) {\r\n        if (panel && !panel.disabled && panel.isOpen !== nextState) {\r\n            /** @type {?} */\r\n            let defaultPrevented = false;\r\n            this.panelChange.emit({ panelId: panel.id, nextState: nextState, preventDefault: (/**\r\n                 * @return {?}\r\n                 */\r\n                () => { defaultPrevented = true; }) });\r\n            if (!defaultPrevented) {\r\n                panel.isOpen = nextState;\r\n                if (nextState && this.closeOtherPanels) {\r\n                    this._closeOthers(panel.id);\r\n                }\r\n                this._updateActiveIds();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} panelId\r\n     * @return {?}\r\n     */\r\n    _closeOthers(panelId) {\r\n        this.panels.forEach((/**\r\n         * @param {?} panel\r\n         * @return {?}\r\n         */\r\n        panel => {\r\n            if (panel.id !== panelId) {\r\n                panel.isOpen = false;\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} panelId\r\n     * @return {?}\r\n     */\r\n    _findPanelById(panelId) { return this.panels.find((/**\r\n     * @param {?} p\r\n     * @return {?}\r\n     */\r\n    p => p.id === panelId)); }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateActiveIds() {\r\n        this.activeIds = this.panels.filter((/**\r\n         * @param {?} panel\r\n         * @return {?}\r\n         */\r\n        panel => panel.isOpen && !panel.disabled)).map((/**\r\n         * @param {?} panel\r\n         * @return {?}\r\n         */\r\n        panel => panel.id));\r\n    }\r\n}\r\nNgbAccordion.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-accordion',\r\n                exportAs: 'ngbAccordion',\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: { 'class': 'accordion', 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },\r\n                template: `\r\n    <ng-template #t ngbPanelHeader let-panel>\r\n      <button class=\"btn btn-link\" [ngbPanelToggle]=\"panel\">\r\n        {{panel.title}}<ng-template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></ng-template>\r\n      </button>\r\n    </ng-template>\r\n    <ng-template ngFor let-panel [ngForOf]=\"panels\">\r\n      <div [class]=\"'card ' + (panel.cardClass || '')\">\r\n        <div role=\"tab\" id=\"{{panel.id}}-header\" [class]=\"'card-header ' + (panel.type ? 'bg-'+panel.type: type ? 'bg-'+type : '')\">\r\n          <ng-template [ngTemplateOutlet]=\"panel.headerTpl?.templateRef || t\"\r\n                       [ngTemplateOutletContext]=\"{$implicit: panel, opened: panel.isOpen}\"></ng-template>\r\n        </div>\r\n        <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\"\r\n             class=\"collapse\" [class.show]=\"panel.isOpen\" *ngIf=\"!destroyOnHide || panel.isOpen\">\r\n          <div class=\"card-body\">\r\n               <ng-template [ngTemplateOutlet]=\"panel.contentTpl?.templateRef\"></ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n  `\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbAccordion.ctorParameters = () => [\r\n    { type: NgbAccordionConfig }\r\n];\r\nNgbAccordion.propDecorators = {\r\n    panels: [{ type: ContentChildren, args: [NgbPanel,] }],\r\n    activeIds: [{ type: Input }],\r\n    closeOtherPanels: [{ type: Input, args: ['closeOthers',] }],\r\n    destroyOnHide: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    panelChange: [{ type: Output }]\r\n};\r\n/**\r\n * A directive to put on a button that toggles panel opening and closing.\r\n *\r\n * To be used inside the [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader)\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPanelToggle {\r\n    /**\r\n     * @param {?} accordion\r\n     * @param {?} panel\r\n     */\r\n    constructor(accordion, panel) {\r\n        this.accordion = accordion;\r\n        this.panel = panel;\r\n    }\r\n    /**\r\n     * @param {?} panel\r\n     * @return {?}\r\n     */\r\n    set ngbPanelToggle(panel) {\r\n        if (panel) {\r\n            this.panel = panel;\r\n        }\r\n    }\r\n}\r\nNgbPanelToggle.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'button[ngbPanelToggle]',\r\n                host: {\r\n                    'type': 'button',\r\n                    '[disabled]': 'panel.disabled',\r\n                    '[class.collapsed]': '!panel.isOpen',\r\n                    '[attr.aria-expanded]': 'panel.isOpen',\r\n                    '[attr.aria-controls]': 'panel.id',\r\n                    '(click)': 'accordion.toggle(panel.id)'\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbPanelToggle.ctorParameters = () => [\r\n    { type: NgbAccordion },\r\n    { type: NgbPanel, decorators: [{ type: Optional }, { type: Host }] }\r\n];\r\nNgbPanelToggle.propDecorators = {\r\n    ngbPanelToggle: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent, NgbPanelHeader, NgbPanelToggle];\r\nclass NgbAccordionModule {\r\n}\r\nNgbAccordionModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [CommonModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [NgbAlert](#/components/alert/api#NgbAlert) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize its properties\r\n * to provide default values for all alerts used in the application.\r\n */\r\nclass NgbAlertConfig {\r\n    constructor() {\r\n        this.dismissible = true;\r\n        this.type = 'warning';\r\n    }\r\n}\r\nNgbAlertConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbAlertConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbAlertConfig_Factory() { return new NgbAlertConfig(); }, token: NgbAlertConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Alert is a component to provide contextual feedback messages for user.\r\n *\r\n * It supports several alert types and can be dismissed.\r\n */\r\nclass NgbAlert {\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} _renderer\r\n     * @param {?} _element\r\n     */\r\n    constructor(config, _renderer, _element) {\r\n        this._renderer = _renderer;\r\n        this._element = _element;\r\n        /**\r\n         * An event emitted when the close button is clicked. It has no payload and only relevant for dismissible alerts.\r\n         */\r\n        this.close = new EventEmitter();\r\n        this.dismissible = config.dismissible;\r\n        this.type = config.type;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    closeHandler() { this.close.emit(null); }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        /** @type {?} */\r\n        const typeChange = changes['type'];\r\n        if (typeChange && !typeChange.firstChange) {\r\n            this._renderer.removeClass(this._element.nativeElement, `alert-${typeChange.previousValue}`);\r\n            this._renderer.addClass(this._element.nativeElement, `alert-${typeChange.currentValue}`);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() { this._renderer.addClass(this._element.nativeElement, `alert-${this.type}`); }\r\n}\r\nNgbAlert.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-alert',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: { 'role': 'alert', 'class': 'alert', '[class.alert-dismissible]': 'dismissible' },\r\n                template: `\r\n    <ng-content></ng-content>\r\n    <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" i18n-aria-label=\"@@ngb.alert.close\"\r\n      (click)=\"closeHandler()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n    `,\r\n                styles: [\"ngb-alert{display:block}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbAlert.ctorParameters = () => [\r\n    { type: NgbAlertConfig },\r\n    { type: Renderer2 },\r\n    { type: ElementRef }\r\n];\r\nNgbAlert.propDecorators = {\r\n    dismissible: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    close: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbAlertModule {\r\n}\r\nNgbAlertModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: [NgbAlert], exports: [NgbAlert], imports: [CommonModule], entryComponents: [NgbAlert] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbButtonLabel {\r\n}\r\nNgbButtonLabel.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbButtonLabel]',\r\n                host: { '[class.btn]': 'true', '[class.active]': 'active', '[class.disabled]': 'disabled', '[class.focus]': 'focused' }\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_CHECKBOX_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbCheckBox)),\r\n    multi: true\r\n};\r\n/**\r\n * Allows to easily create Bootstrap-style checkbox buttons.\r\n *\r\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\r\n * either in a reactive or template-driven way.\r\n */\r\nclass NgbCheckBox {\r\n    /**\r\n     * @param {?} _label\r\n     * @param {?} _cd\r\n     */\r\n    constructor(_label, _cd) {\r\n        this._label = _label;\r\n        this._cd = _cd;\r\n        /**\r\n         * If `true`, the checkbox button will be disabled\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * The form control value when the checkbox is checked.\r\n         */\r\n        this.valueChecked = true;\r\n        /**\r\n         * The form control value when the checkbox is unchecked.\r\n         */\r\n        this.valueUnChecked = false;\r\n        this.onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this.onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n    }\r\n    /**\r\n     * @param {?} isFocused\r\n     * @return {?}\r\n     */\r\n    set focused(isFocused) {\r\n        this._label.focused = isFocused;\r\n        if (!isFocused) {\r\n            this.onTouched();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    onInputChange($event) {\r\n        /** @type {?} */\r\n        const modelToPropagate = $event.target.checked ? this.valueChecked : this.valueUnChecked;\r\n        this.onChange(modelToPropagate);\r\n        this.onTouched();\r\n        this.writeValue(modelToPropagate);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this.onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._label.disabled = isDisabled;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.checked = value === this.valueChecked;\r\n        this._label.active = this.checked;\r\n        // label won't be updated, if it is inside the OnPush component when [ngModel] changes\r\n        this._cd.markForCheck();\r\n    }\r\n}\r\nNgbCheckBox.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbButton][type=checkbox]',\r\n                host: {\r\n                    '[checked]': 'checked',\r\n                    '[disabled]': 'disabled',\r\n                    '(change)': 'onInputChange($event)',\r\n                    '(focus)': 'focused = true',\r\n                    '(blur)': 'focused = false'\r\n                },\r\n                providers: [NGB_CHECKBOX_VALUE_ACCESSOR]\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbCheckBox.ctorParameters = () => [\r\n    { type: NgbButtonLabel },\r\n    { type: ChangeDetectorRef }\r\n];\r\nNgbCheckBox.propDecorators = {\r\n    disabled: [{ type: Input }],\r\n    valueChecked: [{ type: Input }],\r\n    valueUnChecked: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_RADIO_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbRadioGroup)),\r\n    multi: true\r\n};\r\n/** @type {?} */\r\nlet nextId$1 = 0;\r\n/**\r\n * Allows to easily create Bootstrap-style radio buttons.\r\n *\r\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\r\n * either in a reactive or template-driven way.\r\n */\r\nclass NgbRadioGroup {\r\n    constructor() {\r\n        this._radios = new Set();\r\n        this._value = null;\r\n        /**\r\n         * Name of the radio group applied to radio input elements.\r\n         *\r\n         * Will be applied to all radio input elements inside the group,\r\n         * unless [`NgbRadio`](#/components/buttons/api#NgbRadio)'s specify names themselves.\r\n         *\r\n         * If not provided, will be generated in the `ngb-radio-xx` format.\r\n         */\r\n        this.name = `ngb-radio-${nextId$1++}`;\r\n        this.onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this.onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    set disabled(isDisabled) { this.setDisabledState(isDisabled); }\r\n    /**\r\n     * @param {?} radio\r\n     * @return {?}\r\n     */\r\n    onRadioChange(radio) {\r\n        this.writeValue(radio.value);\r\n        this.onChange(radio.value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onRadioValueUpdate() { this._updateRadiosValue(); }\r\n    /**\r\n     * @param {?} radio\r\n     * @return {?}\r\n     */\r\n    register(radio) { this._radios.add(radio); }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this.onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._disabled = isDisabled;\r\n        this._updateRadiosDisabled();\r\n    }\r\n    /**\r\n     * @param {?} radio\r\n     * @return {?}\r\n     */\r\n    unregister(radio) { this._radios.delete(radio); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._value = value;\r\n        this._updateRadiosValue();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateRadiosValue() { this._radios.forEach((/**\r\n     * @param {?} radio\r\n     * @return {?}\r\n     */\r\n    (radio) => radio.updateValue(this._value))); }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateRadiosDisabled() { this._radios.forEach((/**\r\n     * @param {?} radio\r\n     * @return {?}\r\n     */\r\n    (radio) => radio.updateDisabled())); }\r\n}\r\nNgbRadioGroup.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngbRadioGroup]', host: { 'role': 'radiogroup' }, providers: [NGB_RADIO_VALUE_ACCESSOR] },] }\r\n];\r\nNgbRadioGroup.propDecorators = {\r\n    name: [{ type: Input }]\r\n};\r\n/**\r\n * A directive that marks an input of type \"radio\" as a part of the\r\n * [`NgbRadioGroup`](#/components/buttons/api#NgbRadioGroup).\r\n */\r\nclass NgbRadio {\r\n    /**\r\n     * @param {?} _group\r\n     * @param {?} _label\r\n     * @param {?} _renderer\r\n     * @param {?} _element\r\n     * @param {?} _cd\r\n     */\r\n    constructor(_group, _label, _renderer, _element, _cd) {\r\n        this._group = _group;\r\n        this._label = _label;\r\n        this._renderer = _renderer;\r\n        this._element = _element;\r\n        this._cd = _cd;\r\n        this._value = null;\r\n        this._group.register(this);\r\n        this.updateDisabled();\r\n    }\r\n    /**\r\n     * The form control value when current radio button is checked.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set value(value) {\r\n        this._value = value;\r\n        /** @type {?} */\r\n        const stringValue = value ? value.toString() : '';\r\n        this._renderer.setProperty(this._element.nativeElement, 'value', stringValue);\r\n        this._group.onRadioValueUpdate();\r\n    }\r\n    /**\r\n     * If `true`, current radio button will be disabled.\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    set disabled(isDisabled) {\r\n        this._disabled = isDisabled !== false;\r\n        this.updateDisabled();\r\n    }\r\n    /**\r\n     * @param {?} isFocused\r\n     * @return {?}\r\n     */\r\n    set focused(isFocused) {\r\n        if (this._label) {\r\n            this._label.focused = isFocused;\r\n        }\r\n        if (!isFocused) {\r\n            this._group.onTouched();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get checked() { return this._checked; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._group.disabled || this._disabled; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get value() { return this._value; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get nameAttr() { return this.name || this._group.name; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this._group.unregister(this); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onChange() { this._group.onRadioChange(this); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    updateValue(value) {\r\n        // label won't be updated, if it is inside the OnPush component when [ngModel] changes\r\n        if (this.value !== value) {\r\n            this._cd.markForCheck();\r\n        }\r\n        this._checked = this.value === value;\r\n        this._label.active = this._checked;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateDisabled() { this._label.disabled = this.disabled; }\r\n}\r\nNgbRadio.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbButton][type=radio]',\r\n                host: {\r\n                    '[checked]': 'checked',\r\n                    '[disabled]': 'disabled',\r\n                    '[name]': 'nameAttr',\r\n                    '(change)': 'onChange()',\r\n                    '(focus)': 'focused = true',\r\n                    '(blur)': 'focused = false'\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbRadio.ctorParameters = () => [\r\n    { type: NgbRadioGroup },\r\n    { type: NgbButtonLabel },\r\n    { type: Renderer2 },\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef }\r\n];\r\nNgbRadio.propDecorators = {\r\n    name: [{ type: Input }],\r\n    value: [{ type: Input, args: ['value',] }],\r\n    disabled: [{ type: Input, args: ['disabled',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_BUTTON_DIRECTIVES = [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio];\r\nclass NgbButtonsModule {\r\n}\r\nNgbButtonsModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: NGB_BUTTON_DIRECTIVES, exports: NGB_BUTTON_DIRECTIVES },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [NgbCarousel](#/components/carousel/api#NgbCarousel) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize its properties\r\n * to provide default values for all carousels used in the application.\r\n */\r\nclass NgbCarouselConfig {\r\n    constructor() {\r\n        this.interval = 5000;\r\n        this.wrap = true;\r\n        this.keyboard = true;\r\n        this.pauseOnHover = true;\r\n        this.showNavigationArrows = true;\r\n        this.showNavigationIndicators = true;\r\n    }\r\n}\r\nNgbCarouselConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbCarouselConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbCarouselConfig_Factory() { return new NgbCarouselConfig(); }, token: NgbCarouselConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nlet nextId$2 = 0;\r\n/**\r\n * A directive that wraps the individual carousel slide.\r\n */\r\nclass NgbSlide {\r\n    /**\r\n     * @param {?} tplRef\r\n     */\r\n    constructor(tplRef) {\r\n        this.tplRef = tplRef;\r\n        /**\r\n         * Slide id that must be unique for the entire document.\r\n         *\r\n         * If not provided, will be generated in the `ngb-slide-xx` format.\r\n         */\r\n        this.id = `ngb-slide-${nextId$2++}`;\r\n    }\r\n}\r\nNgbSlide.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbSlide]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbSlide.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\nNgbSlide.propDecorators = {\r\n    id: [{ type: Input }]\r\n};\r\n/**\r\n * Carousel is a component to easily create and control slideshows.\r\n *\r\n * Allows to set intervals, change the way user interacts with the slides and provides a programmatic API.\r\n */\r\nclass NgbCarousel {\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} _platformId\r\n     * @param {?} _ngZone\r\n     * @param {?} _cd\r\n     */\r\n    constructor(config, _platformId, _ngZone, _cd) {\r\n        this._platformId = _platformId;\r\n        this._ngZone = _ngZone;\r\n        this._cd = _cd;\r\n        this.NgbSlideEventSource = NgbSlideEventSource;\r\n        this._destroy$ = new Subject();\r\n        this._interval$ = new BehaviorSubject(0);\r\n        this._mouseHover$ = new BehaviorSubject(false);\r\n        this._pauseOnHover$ = new BehaviorSubject(false);\r\n        this._pause$ = new BehaviorSubject(false);\r\n        this._wrap$ = new BehaviorSubject(false);\r\n        /**\r\n         * An event emitted right after the slide transition is completed.\r\n         *\r\n         * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\r\n         */\r\n        this.slide = new EventEmitter();\r\n        this.interval = config.interval;\r\n        this.wrap = config.wrap;\r\n        this.keyboard = config.keyboard;\r\n        this.pauseOnHover = config.pauseOnHover;\r\n        this.showNavigationArrows = config.showNavigationArrows;\r\n        this.showNavigationIndicators = config.showNavigationIndicators;\r\n    }\r\n    /**\r\n     * Time in milliseconds before the next slide is shown.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set interval(value) {\r\n        this._interval$.next(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get interval() { return this._interval$.value; }\r\n    /**\r\n     * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set wrap(value) {\r\n        this._wrap$.next(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get wrap() { return this._wrap$.value; }\r\n    /**\r\n     * If `true`, will pause slide switching when mouse cursor hovers the slide.\r\n     *\r\n     * \\@since 2.2.0\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set pauseOnHover(value) {\r\n        this._pauseOnHover$.next(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get pauseOnHover() { return this._pauseOnHover$.value; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    mouseEnter() {\r\n        this._mouseHover$.next(true);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    mouseLeave() {\r\n        this._mouseHover$.next(false);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        // setInterval() doesn't play well with SSR and protractor,\r\n        // so we should run it in the browser and outside Angular\r\n        if (isPlatformBrowser(this._platformId)) {\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                /** @type {?} */\r\n                const hasNextSlide$ = combineLatest(this.slide.pipe(map((/**\r\n                 * @param {?} slideEvent\r\n                 * @return {?}\r\n                 */\r\n                slideEvent => slideEvent.current)), startWith(this.activeId)), this._wrap$, this.slides.changes.pipe(startWith(null)))\r\n                    .pipe(map((/**\r\n                 * @param {?} __0\r\n                 * @return {?}\r\n                 */\r\n                ([currentSlideId, wrap]) => {\r\n                    /** @type {?} */\r\n                    const slideArr = this.slides.toArray();\r\n                    /** @type {?} */\r\n                    const currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n                    return wrap ? slideArr.length > 1 : currentSlideIdx < slideArr.length - 1;\r\n                })), distinctUntilChanged());\r\n                combineLatest(this._pause$, this._pauseOnHover$, this._mouseHover$, this._interval$, hasNextSlide$)\r\n                    .pipe(map((/**\r\n                 * @param {?} __0\r\n                 * @return {?}\r\n                 */\r\n                ([pause, pauseOnHover, mouseHover, interval, hasNextSlide]) => ((pause || (pauseOnHover && mouseHover) || !hasNextSlide) ? 0 : interval))), distinctUntilChanged(), switchMap((/**\r\n                 * @param {?} interval\r\n                 * @return {?}\r\n                 */\r\n                interval => interval > 0 ? timer(interval, interval) : NEVER)), takeUntil(this._destroy$))\r\n                    .subscribe((/**\r\n                 * @return {?}\r\n                 */\r\n                () => this._ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                () => this.next(NgbSlideEventSource.TIMER)))));\r\n            }));\r\n        }\r\n        this.slides.changes.pipe(takeUntil(this._destroy$)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this._cd.markForCheck()));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        /** @type {?} */\r\n        let activeSlide = this._getSlideById(this.activeId);\r\n        this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this._destroy$.next(); }\r\n    /**\r\n     * Navigates to a slide with the specified identifier.\r\n     * @param {?} slideId\r\n     * @param {?=} source\r\n     * @return {?}\r\n     */\r\n    select(slideId, source) {\r\n        this._cycleToSelected(slideId, this._getSlideEventDirection(this.activeId, slideId), source);\r\n    }\r\n    /**\r\n     * Navigates to the previous slide.\r\n     * @param {?=} source\r\n     * @return {?}\r\n     */\r\n    prev(source) {\r\n        this._cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT, source);\r\n    }\r\n    /**\r\n     * Navigates to the next slide.\r\n     * @param {?=} source\r\n     * @return {?}\r\n     */\r\n    next(source) {\r\n        this._cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT, source);\r\n    }\r\n    /**\r\n     * Pauses cycling through the slides.\r\n     * @return {?}\r\n     */\r\n    pause() { this._pause$.next(true); }\r\n    /**\r\n     * Restarts cycling through the slides from left to right.\r\n     * @return {?}\r\n     */\r\n    cycle() { this._pause$.next(false); }\r\n    /**\r\n     * @private\r\n     * @param {?} slideIdx\r\n     * @param {?} direction\r\n     * @param {?=} source\r\n     * @return {?}\r\n     */\r\n    _cycleToSelected(slideIdx, direction, source) {\r\n        /** @type {?} */\r\n        let selectedSlide = this._getSlideById(slideIdx);\r\n        if (selectedSlide && selectedSlide.id !== this.activeId) {\r\n            this.slide.emit({ prev: this.activeId, current: selectedSlide.id, direction: direction, paused: this._pause$.value, source });\r\n            this.activeId = selectedSlide.id;\r\n        }\r\n        // we get here after the interval fires or any external API call like next(), prev() or select()\r\n        this._cd.markForCheck();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} currentActiveSlideId\r\n     * @param {?} nextActiveSlideId\r\n     * @return {?}\r\n     */\r\n    _getSlideEventDirection(currentActiveSlideId, nextActiveSlideId) {\r\n        /** @type {?} */\r\n        const currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);\r\n        /** @type {?} */\r\n        const nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);\r\n        return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} slideId\r\n     * @return {?}\r\n     */\r\n    _getSlideById(slideId) { return this.slides.find((/**\r\n     * @param {?} slide\r\n     * @return {?}\r\n     */\r\n    slide => slide.id === slideId)); }\r\n    /**\r\n     * @private\r\n     * @param {?} slideId\r\n     * @return {?}\r\n     */\r\n    _getSlideIdxById(slideId) {\r\n        return this.slides.toArray().indexOf(this._getSlideById(slideId));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} currentSlideId\r\n     * @return {?}\r\n     */\r\n    _getNextSlide(currentSlideId) {\r\n        /** @type {?} */\r\n        const slideArr = this.slides.toArray();\r\n        /** @type {?} */\r\n        const currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n        /** @type {?} */\r\n        const isLastSlide = currentSlideIdx === slideArr.length - 1;\r\n        return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\r\n            slideArr[currentSlideIdx + 1].id;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} currentSlideId\r\n     * @return {?}\r\n     */\r\n    _getPrevSlide(currentSlideId) {\r\n        /** @type {?} */\r\n        const slideArr = this.slides.toArray();\r\n        /** @type {?} */\r\n        const currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n        /** @type {?} */\r\n        const isFirstSlide = currentSlideIdx === 0;\r\n        return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\r\n            slideArr[currentSlideIdx - 1].id;\r\n    }\r\n}\r\nNgbCarousel.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-carousel',\r\n                exportAs: 'ngbCarousel',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: {\r\n                    'class': 'carousel slide',\r\n                    '[style.display]': '\"block\"',\r\n                    'tabIndex': '0',\r\n                    '(keydown.arrowLeft)': 'keyboard && prev(NgbSlideEventSource.ARROW_LEFT)',\r\n                    '(keydown.arrowRight)': 'keyboard && next(NgbSlideEventSource.ARROW_RIGHT)'\r\n                },\r\n                template: `\r\n    <ol class=\"carousel-indicators\" *ngIf=\"showNavigationIndicators\">\r\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\"\r\n          (click)=\"select(slide.id, NgbSlideEventSource.INDICATOR)\"></li>\r\n    </ol>\r\n    <div class=\"carousel-inner\">\r\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\r\n        <ng-template [ngTemplateOutlet]=\"slide.tplRef\"></ng-template>\r\n      </div>\r\n    </div>\r\n    <a class=\"carousel-control-prev\" role=\"button\" (click)=\"prev(NgbSlideEventSource.ARROW_LEFT)\" *ngIf=\"showNavigationArrows\">\r\n      <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n      <span class=\"sr-only\" i18n=\"@@ngb.carousel.previous\">Previous</span>\r\n    </a>\r\n    <a class=\"carousel-control-next\" role=\"button\" (click)=\"next(NgbSlideEventSource.ARROW_RIGHT)\" *ngIf=\"showNavigationArrows\">\r\n      <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n      <span class=\"sr-only\" i18n=\"@@ngb.carousel.next\">Next</span>\r\n    </a>\r\n  `\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbCarousel.ctorParameters = () => [\r\n    { type: NgbCarouselConfig },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: NgZone },\r\n    { type: ChangeDetectorRef }\r\n];\r\nNgbCarousel.propDecorators = {\r\n    slides: [{ type: ContentChildren, args: [NgbSlide,] }],\r\n    activeId: [{ type: Input }],\r\n    interval: [{ type: Input }],\r\n    wrap: [{ type: Input }],\r\n    keyboard: [{ type: Input }],\r\n    pauseOnHover: [{ type: Input }],\r\n    showNavigationArrows: [{ type: Input }],\r\n    showNavigationIndicators: [{ type: Input }],\r\n    slide: [{ type: Output }],\r\n    mouseEnter: [{ type: HostListener, args: ['mouseenter',] }],\r\n    mouseLeave: [{ type: HostListener, args: ['mouseleave',] }]\r\n};\r\n/** @enum {string} */\r\nconst NgbSlideEventDirection = {\r\n    LEFT: (/** @type {?} */ ('left')),\r\n    RIGHT: (/** @type {?} */ ('right')),\r\n};\r\n/** @enum {string} */\r\nconst NgbSlideEventSource = {\r\n    TIMER: 'timer',\r\n    ARROW_LEFT: 'arrowLeft',\r\n    ARROW_RIGHT: 'arrowRight',\r\n    INDICATOR: 'indicator',\r\n};\r\n/** @type {?} */\r\nconst NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbCarouselModule {\r\n}\r\nNgbCarouselModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: NGB_CAROUSEL_DIRECTIVES, exports: NGB_CAROUSEL_DIRECTIVES, imports: [CommonModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A directive to provide a simple way of hiding and showing elements on the page.\r\n */\r\nclass NgbCollapse {\r\n    constructor() {\r\n        /**\r\n         * If `true`, will collapse the element or show it otherwise.\r\n         */\r\n        this.collapsed = false;\r\n    }\r\n}\r\nNgbCollapse.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbCollapse]',\r\n                exportAs: 'ngbCollapse',\r\n                host: { '[class.collapse]': 'true', '[class.show]': '!collapsed' }\r\n            },] }\r\n];\r\nNgbCollapse.propDecorators = {\r\n    collapsed: [{ type: Input, args: ['ngbCollapse',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbCollapseModule {\r\n}\r\nNgbCollapseModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: [NgbCollapse], exports: [NgbCollapse] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A simple class that represents a date that datepicker also uses internally.\r\n *\r\n * It is the implementation of the `NgbDateStruct` interface that adds some convenience methods,\r\n * like `.equals()`, `.before()`, etc.\r\n *\r\n * All datepicker APIs consume `NgbDateStruct`, but return `NgbDate`.\r\n *\r\n * In many cases it is simpler to manipulate these objects together with\r\n * [`NgbCalendar`](#/components/datepicker/api#NgbCalendar) than native JS Dates.\r\n *\r\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details.\r\n *\r\n * \\@since 3.0.0\r\n */\r\nclass NgbDate {\r\n    /**\r\n     * A **static method** that creates a new date object from the `NgbDateStruct`,\r\n     *\r\n     * ex. `NgbDate.from({year: 2000, month: 5, day: 1})`.\r\n     *\r\n     * If the `date` is already of `NgbDate` type, the method will return the same object.\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    static from(date) {\r\n        if (date instanceof NgbDate) {\r\n            return date;\r\n        }\r\n        return date ? new NgbDate(date.year, date.month, date.day) : null;\r\n    }\r\n    /**\r\n     * @param {?} year\r\n     * @param {?} month\r\n     * @param {?} day\r\n     */\r\n    constructor(year, month, day) {\r\n        this.year = isInteger(year) ? year : null;\r\n        this.month = isInteger(month) ? month : null;\r\n        this.day = isInteger(day) ? day : null;\r\n    }\r\n    /**\r\n     * Checks if the current date is equal to another date.\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    equals(other) {\r\n        return other && this.year === other.year && this.month === other.month && this.day === other.day;\r\n    }\r\n    /**\r\n     * Checks if the current date is before another date.\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    before(other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this.year === other.year) {\r\n            if (this.month === other.month) {\r\n                return this.day === other.day ? false : this.day < other.day;\r\n            }\r\n            else {\r\n                return this.month < other.month;\r\n            }\r\n        }\r\n        else {\r\n            return this.year < other.year;\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the current date is after another date.\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    after(other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this.year === other.year) {\r\n            if (this.month === other.month) {\r\n                return this.day === other.day ? false : this.day > other.day;\r\n            }\r\n            else {\r\n                return this.month > other.month;\r\n            }\r\n        }\r\n        else {\r\n            return this.year > other.year;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} jsDate\r\n * @return {?}\r\n */\r\nfunction fromJSDate(jsDate) {\r\n    return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\r\n}\r\n/**\r\n * @param {?} date\r\n * @return {?}\r\n */\r\nfunction toJSDate(date) {\r\n    /** @type {?} */\r\n    const jsDate = new Date(date.year, date.month - 1, date.day, 12);\r\n    // this is done avoid 30 -> 1930 conversion\r\n    if (!isNaN(jsDate.getTime())) {\r\n        jsDate.setFullYear(date.year);\r\n    }\r\n    return jsDate;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction NGB_DATEPICKER_CALENDAR_FACTORY() {\r\n    return new NgbCalendarGregorian();\r\n}\r\n/**\r\n * A service that represents the calendar used by the datepicker.\r\n *\r\n * The default implementation uses the Gregorian calendar. You can inject it in your own\r\n * implementations if necessary to simplify `NgbDate` calculations.\r\n * @abstract\r\n */\r\nclass NgbCalendar {\r\n}\r\nNgbCalendar.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_CALENDAR_FACTORY },] }\r\n];\r\n/** @nocollapse */ NgbCalendar.ngInjectableDef = ɵɵdefineInjectable({ factory: NGB_DATEPICKER_CALENDAR_FACTORY, token: NgbCalendar, providedIn: \"root\" });\r\nclass NgbCalendarGregorian extends NgbCalendar {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDaysPerWeek() { return 7; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMonths() { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getWeeksPerMonth() { return 6; }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getNext(date, period = 'd', number = 1) {\r\n        /** @type {?} */\r\n        let jsDate = toJSDate(date);\r\n        /** @type {?} */\r\n        let checkMonth = true;\r\n        /** @type {?} */\r\n        let expectedMonth = jsDate.getMonth();\r\n        switch (period) {\r\n            case 'y':\r\n                jsDate.setFullYear(jsDate.getFullYear() + number);\r\n                break;\r\n            case 'm':\r\n                expectedMonth += number;\r\n                jsDate.setMonth(expectedMonth);\r\n                expectedMonth = expectedMonth % 12;\r\n                if (expectedMonth < 0) {\r\n                    expectedMonth = expectedMonth + 12;\r\n                }\r\n                break;\r\n            case 'd':\r\n                jsDate.setDate(jsDate.getDate() + number);\r\n                checkMonth = false;\r\n                break;\r\n            default:\r\n                return date;\r\n        }\r\n        if (checkMonth && jsDate.getMonth() !== expectedMonth) {\r\n            // this means the destination month has less days than the initial month\r\n            // let's go back to the end of the previous month:\r\n            jsDate.setDate(0);\r\n        }\r\n        return fromJSDate(jsDate);\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getPrev(date, period = 'd', number = 1) { return this.getNext(date, period, -number); }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getWeekday(date) {\r\n        /** @type {?} */\r\n        let jsDate = toJSDate(date);\r\n        /** @type {?} */\r\n        let day = jsDate.getDay();\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        return day === 0 ? 7 : day;\r\n    }\r\n    /**\r\n     * @param {?} week\r\n     * @param {?} firstDayOfWeek\r\n     * @return {?}\r\n     */\r\n    getWeekNumber(week, firstDayOfWeek) {\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        if (firstDayOfWeek === 7) {\r\n            firstDayOfWeek = 0;\r\n        }\r\n        /** @type {?} */\r\n        const thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n        /** @type {?} */\r\n        let date = week[thursdayIndex];\r\n        /** @type {?} */\r\n        const jsDate = toJSDate(date);\r\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n        // Thursday\r\n        /** @type {?} */\r\n        const time = jsDate.getTime();\r\n        jsDate.setMonth(0); // Compare with Jan 1\r\n        jsDate.setDate(1);\r\n        return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getToday() { return fromJSDate(new Date()); }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    isValid(date) {\r\n        if (!date || !isInteger(date.year) || !isInteger(date.month) || !isInteger(date.day)) {\r\n            return false;\r\n        }\r\n        // year 0 doesn't exist in Gregorian calendar\r\n        if (date.year === 0) {\r\n            return false;\r\n        }\r\n        /** @type {?} */\r\n        const jsDate = toJSDate(date);\r\n        return !isNaN(jsDate.getTime()) && jsDate.getFullYear() === date.year && jsDate.getMonth() + 1 === date.month &&\r\n            jsDate.getDate() === date.day;\r\n    }\r\n}\r\nNgbCalendarGregorian.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} prev\r\n * @param {?} next\r\n * @return {?}\r\n */\r\nfunction isChangedDate(prev, next) {\r\n    return !dateComparator(prev, next);\r\n}\r\n/**\r\n * @param {?} prev\r\n * @param {?} next\r\n * @return {?}\r\n */\r\nfunction isChangedMonth(prev, next) {\r\n    return !prev && !next ? false : !prev || !next ? true : prev.year !== next.year || prev.month !== next.month;\r\n}\r\n/**\r\n * @param {?} prev\r\n * @param {?} next\r\n * @return {?}\r\n */\r\nfunction dateComparator(prev, next) {\r\n    return (!prev && !next) || (!!prev && !!next && prev.equals(next));\r\n}\r\n/**\r\n * @param {?} minDate\r\n * @param {?} maxDate\r\n * @return {?}\r\n */\r\nfunction checkMinBeforeMax(minDate, maxDate) {\r\n    if (maxDate && minDate && maxDate.before(minDate)) {\r\n        throw new Error(`'maxDate' ${maxDate} should be greater than 'minDate' ${minDate}`);\r\n    }\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} minDate\r\n * @param {?} maxDate\r\n * @return {?}\r\n */\r\nfunction checkDateInRange(date, minDate, maxDate) {\r\n    if (date && minDate && date.before(minDate)) {\r\n        return minDate;\r\n    }\r\n    if (date && maxDate && date.after(maxDate)) {\r\n        return maxDate;\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} state\r\n * @return {?}\r\n */\r\nfunction isDateSelectable(date, state) {\r\n    const { minDate, maxDate, disabled, markDisabled } = state;\r\n    // clang-format off\r\n    return !(!isDefined(date) ||\r\n        disabled ||\r\n        (markDisabled && markDisabled(date, { year: date.year, month: date.month })) ||\r\n        (minDate && date.before(minDate)) ||\r\n        (maxDate && date.after(maxDate)));\r\n    // clang-format on\r\n}\r\n/**\r\n * @param {?} calendar\r\n * @param {?} date\r\n * @param {?} minDate\r\n * @param {?} maxDate\r\n * @return {?}\r\n */\r\nfunction generateSelectBoxMonths(calendar, date, minDate, maxDate) {\r\n    if (!date) {\r\n        return [];\r\n    }\r\n    /** @type {?} */\r\n    let months = calendar.getMonths(date.year);\r\n    if (minDate && date.year === minDate.year) {\r\n        /** @type {?} */\r\n        const index = months.findIndex((/**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        month => month === minDate.month));\r\n        months = months.slice(index);\r\n    }\r\n    if (maxDate && date.year === maxDate.year) {\r\n        /** @type {?} */\r\n        const index = months.findIndex((/**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        month => month === maxDate.month));\r\n        months = months.slice(0, index + 1);\r\n    }\r\n    return months;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} minDate\r\n * @param {?} maxDate\r\n * @return {?}\r\n */\r\nfunction generateSelectBoxYears(date, minDate, maxDate) {\r\n    if (!date) {\r\n        return [];\r\n    }\r\n    /** @type {?} */\r\n    const start = minDate ? Math.max(minDate.year, date.year - 500) : date.year - 10;\r\n    /** @type {?} */\r\n    const end = maxDate ? Math.min(maxDate.year, date.year + 500) : date.year + 10;\r\n    /** @type {?} */\r\n    const length = end - start + 1;\r\n    /** @type {?} */\r\n    const numbers = Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        numbers[i] = start + i;\r\n    }\r\n    return numbers;\r\n}\r\n/**\r\n * @param {?} calendar\r\n * @param {?} date\r\n * @param {?} maxDate\r\n * @return {?}\r\n */\r\nfunction nextMonthDisabled(calendar, date, maxDate) {\r\n    /** @type {?} */\r\n    const nextDate = Object.assign(calendar.getNext(date, 'm'), { day: 1 });\r\n    return maxDate && nextDate.after(maxDate);\r\n}\r\n/**\r\n * @param {?} calendar\r\n * @param {?} date\r\n * @param {?} minDate\r\n * @return {?}\r\n */\r\nfunction prevMonthDisabled(calendar, date, minDate) {\r\n    /** @type {?} */\r\n    const prevDate = Object.assign(calendar.getPrev(date, 'm'), { day: 1 });\r\n    return minDate && (prevDate.year === minDate.year && prevDate.month < minDate.month ||\r\n        prevDate.year < minDate.year && minDate.month === 1);\r\n}\r\n/**\r\n * @param {?} calendar\r\n * @param {?} date\r\n * @param {?} state\r\n * @param {?} i18n\r\n * @param {?} force\r\n * @return {?}\r\n */\r\nfunction buildMonths(calendar, date, state, i18n, force) {\r\n    const { displayMonths, months } = state;\r\n    // move old months to a temporary array\r\n    /** @type {?} */\r\n    const monthsToReuse = months.splice(0, months.length);\r\n    // generate new first dates, nullify or reuse months\r\n    /** @type {?} */\r\n    const firstDates = Array.from({ length: displayMonths }, (/**\r\n     * @param {?} _\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    (_, i) => {\r\n        /** @type {?} */\r\n        const firstDate = Object.assign(calendar.getNext(date, 'm', i), { day: 1 });\r\n        months[i] = null;\r\n        if (!force) {\r\n            /** @type {?} */\r\n            const reusedIndex = monthsToReuse.findIndex((/**\r\n             * @param {?} month\r\n             * @return {?}\r\n             */\r\n            month => month.firstDate.equals(firstDate)));\r\n            // move reused month back to months\r\n            if (reusedIndex !== -1) {\r\n                months[i] = monthsToReuse.splice(reusedIndex, 1)[0];\r\n            }\r\n        }\r\n        return firstDate;\r\n    }));\r\n    // rebuild nullified months\r\n    firstDates.forEach((/**\r\n     * @param {?} firstDate\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    (firstDate, i) => {\r\n        if (months[i] === null) {\r\n            months[i] = buildMonth(calendar, firstDate, state, i18n, monthsToReuse.shift() || (/** @type {?} */ ({})));\r\n        }\r\n    }));\r\n    return months;\r\n}\r\n/**\r\n * @param {?} calendar\r\n * @param {?} date\r\n * @param {?} state\r\n * @param {?} i18n\r\n * @param {?=} month\r\n * @return {?}\r\n */\r\nfunction buildMonth(calendar, date, state, i18n, month = (/** @type {?} */ ({}))) {\r\n    const { dayTemplateData, minDate, maxDate, firstDayOfWeek, markDisabled, outsideDays } = state;\r\n    /** @type {?} */\r\n    const calendarToday = calendar.getToday();\r\n    month.firstDate = null;\r\n    month.lastDate = null;\r\n    month.number = date.month;\r\n    month.year = date.year;\r\n    month.weeks = month.weeks || [];\r\n    month.weekdays = month.weekdays || [];\r\n    date = getFirstViewDate(calendar, date, firstDayOfWeek);\r\n    // month has weeks\r\n    for (let week = 0; week < calendar.getWeeksPerMonth(); week++) {\r\n        /** @type {?} */\r\n        let weekObject = month.weeks[week];\r\n        if (!weekObject) {\r\n            weekObject = month.weeks[week] = { number: 0, days: [], collapsed: true };\r\n        }\r\n        /** @type {?} */\r\n        const days = weekObject.days;\r\n        // week has days\r\n        for (let day = 0; day < calendar.getDaysPerWeek(); day++) {\r\n            if (week === 0) {\r\n                month.weekdays[day] = calendar.getWeekday(date);\r\n            }\r\n            /** @type {?} */\r\n            const newDate = new NgbDate(date.year, date.month, date.day);\r\n            /** @type {?} */\r\n            const nextDate = calendar.getNext(newDate);\r\n            /** @type {?} */\r\n            const ariaLabel = i18n.getDayAriaLabel(newDate);\r\n            // marking date as disabled\r\n            /** @type {?} */\r\n            let disabled = !!((minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate)));\r\n            if (!disabled && markDisabled) {\r\n                disabled = markDisabled(newDate, { month: month.number, year: month.year });\r\n            }\r\n            // today\r\n            /** @type {?} */\r\n            let today = newDate.equals(calendarToday);\r\n            // adding user-provided data to the context\r\n            /** @type {?} */\r\n            let contextUserData = dayTemplateData ? dayTemplateData(newDate, { month: month.number, year: month.year }) : undefined;\r\n            // saving first date of the month\r\n            if (month.firstDate === null && newDate.month === month.number) {\r\n                month.firstDate = newDate;\r\n            }\r\n            // saving last date of the month\r\n            if (newDate.month === month.number && nextDate.month !== month.number) {\r\n                month.lastDate = newDate;\r\n            }\r\n            /** @type {?} */\r\n            let dayObject = days[day];\r\n            if (!dayObject) {\r\n                dayObject = days[day] = (/** @type {?} */ ({}));\r\n            }\r\n            dayObject.date = newDate;\r\n            dayObject.context = Object.assign(dayObject.context || {}, {\r\n                $implicit: newDate,\r\n                date: newDate,\r\n                data: contextUserData,\r\n                currentMonth: month.number,\r\n                currentYear: month.year, disabled,\r\n                focused: false,\r\n                selected: false, today\r\n            });\r\n            dayObject.tabindex = -1;\r\n            dayObject.ariaLabel = ariaLabel;\r\n            dayObject.hidden = false;\r\n            date = nextDate;\r\n        }\r\n        weekObject.number = calendar.getWeekNumber(days.map((/**\r\n         * @param {?} day\r\n         * @return {?}\r\n         */\r\n        day => day.date)), firstDayOfWeek);\r\n        // marking week as collapsed\r\n        weekObject.collapsed = outsideDays === 'collapsed' && days[0].date.month !== month.number &&\r\n            days[days.length - 1].date.month !== month.number;\r\n    }\r\n    return month;\r\n}\r\n/**\r\n * @param {?} calendar\r\n * @param {?} date\r\n * @param {?} firstDayOfWeek\r\n * @return {?}\r\n */\r\nfunction getFirstViewDate(calendar, date, firstDayOfWeek) {\r\n    /** @type {?} */\r\n    const daysPerWeek = calendar.getDaysPerWeek();\r\n    /** @type {?} */\r\n    const firstMonthDate = new NgbDate(date.year, date.month, 1);\r\n    /** @type {?} */\r\n    const dayOfWeek = calendar.getWeekday(firstMonthDate) % daysPerWeek;\r\n    return calendar.getPrev(firstMonthDate, 'd', (daysPerWeek + dayOfWeek - firstDayOfWeek) % daysPerWeek);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction NGB_DATEPICKER_18N_FACTORY(locale) {\r\n    return new NgbDatepickerI18nDefault(locale);\r\n}\r\n/**\r\n * A service supplying i18n data to the datepicker component.\r\n *\r\n * The default implementation of this service uses the Angular locale and registered locale data for\r\n * weekdays and month names (as explained in the Angular i18n guide).\r\n *\r\n * It also provides a way to i18n data that depends on calendar calculations, like aria labels, day, week and year\r\n * numerals. For other static labels the datepicker uses the default Angular i18n.\r\n *\r\n * See the [i18n demo](#/components/datepicker/examples#i18n) and\r\n * [Hebrew calendar demo](#/components/datepicker/calendars#hebrew) on how to extend this class and define\r\n * a custom provider for i18n.\r\n * @abstract\r\n */\r\nclass NgbDatepickerI18n {\r\n    /**\r\n     * Returns the textual representation of a day that is rendered in a day cell.\r\n     *\r\n     * \\@since 3.0.0\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getDayNumerals(date) { return `${date.day}`; }\r\n    /**\r\n     * Returns the textual representation of a week number rendered by datepicker.\r\n     *\r\n     * \\@since 3.0.0\r\n     * @param {?} weekNumber\r\n     * @return {?}\r\n     */\r\n    getWeekNumerals(weekNumber) { return `${weekNumber}`; }\r\n    /**\r\n     * Returns the textual representation of a year that is rendered in the datepicker year select box.\r\n     *\r\n     * \\@since 3.0.0\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    getYearNumerals(year) { return `${year}`; }\r\n}\r\nNgbDatepickerI18n.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_18N_FACTORY, deps: [LOCALE_ID] },] }\r\n];\r\n/** @nocollapse */ NgbDatepickerI18n.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbDatepickerI18n_Factory() { return NGB_DATEPICKER_18N_FACTORY(ɵɵinject(LOCALE_ID)); }, token: NgbDatepickerI18n, providedIn: \"root\" });\r\nclass NgbDatepickerI18nDefault extends NgbDatepickerI18n {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        super();\r\n        this._locale = _locale;\r\n        /** @type {?} */\r\n        const weekdaysStartingOnSunday = getLocaleDayNames(_locale, FormStyle.Standalone, TranslationWidth.Short);\r\n        this._weekdaysShort = weekdaysStartingOnSunday.map((/**\r\n         * @param {?} day\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        (day, index) => weekdaysStartingOnSunday[(index + 1) % 7]));\r\n        this._monthsShort = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Abbreviated);\r\n        this._monthsFull = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Wide);\r\n    }\r\n    /**\r\n     * @param {?} weekday\r\n     * @return {?}\r\n     */\r\n    getWeekdayShortName(weekday) { return this._weekdaysShort[weekday - 1]; }\r\n    /**\r\n     * @param {?} month\r\n     * @return {?}\r\n     */\r\n    getMonthShortName(month) { return this._monthsShort[month - 1]; }\r\n    /**\r\n     * @param {?} month\r\n     * @return {?}\r\n     */\r\n    getMonthFullName(month) { return this._monthsFull[month - 1]; }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getDayAriaLabel(date) {\r\n        /** @type {?} */\r\n        const jsDate = new Date(date.year, date.month - 1, date.day);\r\n        return formatDate(jsDate, 'fullDate', this._locale);\r\n    }\r\n}\r\nNgbDatepickerI18nDefault.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgbDatepickerI18nDefault.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbDatepickerService {\r\n    /**\r\n     * @param {?} _calendar\r\n     * @param {?} _i18n\r\n     */\r\n    constructor(_calendar, _i18n) {\r\n        this._calendar = _calendar;\r\n        this._i18n = _i18n;\r\n        this._VALIDATORS = {\r\n            dayTemplateData: (/**\r\n             * @param {?} dayTemplateData\r\n             * @return {?}\r\n             */\r\n            (dayTemplateData) => {\r\n                if (this._state.dayTemplateData !== dayTemplateData) {\r\n                    return { dayTemplateData };\r\n                }\r\n            }),\r\n            displayMonths: (/**\r\n             * @param {?} displayMonths\r\n             * @return {?}\r\n             */\r\n            (displayMonths) => {\r\n                displayMonths = toInteger(displayMonths);\r\n                if (isInteger(displayMonths) && displayMonths > 0 && this._state.displayMonths !== displayMonths) {\r\n                    return { displayMonths };\r\n                }\r\n            }),\r\n            disabled: (/**\r\n             * @param {?} disabled\r\n             * @return {?}\r\n             */\r\n            (disabled) => {\r\n                if (this._state.disabled !== disabled) {\r\n                    return { disabled };\r\n                }\r\n            }),\r\n            firstDayOfWeek: (/**\r\n             * @param {?} firstDayOfWeek\r\n             * @return {?}\r\n             */\r\n            (firstDayOfWeek) => {\r\n                firstDayOfWeek = toInteger(firstDayOfWeek);\r\n                if (isInteger(firstDayOfWeek) && firstDayOfWeek >= 0 && this._state.firstDayOfWeek !== firstDayOfWeek) {\r\n                    return { firstDayOfWeek };\r\n                }\r\n            }),\r\n            focusVisible: (/**\r\n             * @param {?} focusVisible\r\n             * @return {?}\r\n             */\r\n            (focusVisible) => {\r\n                if (this._state.focusVisible !== focusVisible && !this._state.disabled) {\r\n                    return { focusVisible };\r\n                }\r\n            }),\r\n            markDisabled: (/**\r\n             * @param {?} markDisabled\r\n             * @return {?}\r\n             */\r\n            (markDisabled) => {\r\n                if (this._state.markDisabled !== markDisabled) {\r\n                    return { markDisabled };\r\n                }\r\n            }),\r\n            maxDate: (/**\r\n             * @param {?} date\r\n             * @return {?}\r\n             */\r\n            (date) => {\r\n                /** @type {?} */\r\n                const maxDate = this.toValidDate(date, null);\r\n                if (isChangedDate(this._state.maxDate, maxDate)) {\r\n                    return { maxDate };\r\n                }\r\n            }),\r\n            minDate: (/**\r\n             * @param {?} date\r\n             * @return {?}\r\n             */\r\n            (date) => {\r\n                /** @type {?} */\r\n                const minDate = this.toValidDate(date, null);\r\n                if (isChangedDate(this._state.minDate, minDate)) {\r\n                    return { minDate };\r\n                }\r\n            }),\r\n            navigation: (/**\r\n             * @param {?} navigation\r\n             * @return {?}\r\n             */\r\n            (navigation) => {\r\n                if (this._state.navigation !== navigation) {\r\n                    return { navigation };\r\n                }\r\n            }),\r\n            outsideDays: (/**\r\n             * @param {?} outsideDays\r\n             * @return {?}\r\n             */\r\n            (outsideDays) => {\r\n                if (this._state.outsideDays !== outsideDays) {\r\n                    return { outsideDays };\r\n                }\r\n            })\r\n        };\r\n        this._model$ = new Subject();\r\n        this._dateSelect$ = new Subject();\r\n        this._state = {\r\n            disabled: false,\r\n            displayMonths: 1,\r\n            firstDayOfWeek: 1,\r\n            focusVisible: false,\r\n            months: [],\r\n            navigation: 'select',\r\n            outsideDays: 'visible',\r\n            prevDisabled: false,\r\n            nextDisabled: false,\r\n            selectBoxes: { years: [], months: [] },\r\n            selectedDate: null\r\n        };\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get model$() { return this._model$.pipe(filter((/**\r\n     * @param {?} model\r\n     * @return {?}\r\n     */\r\n    model => model.months.length > 0))); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get dateSelect$() { return this._dateSelect$.pipe(filter((/**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    date => date !== null))); }\r\n    /**\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    set(options) {\r\n        /** @type {?} */\r\n        let patch = Object.keys(options)\r\n            .map((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        key => this._VALIDATORS[key](options[key])))\r\n            .reduce((/**\r\n         * @param {?} obj\r\n         * @param {?} part\r\n         * @return {?}\r\n         */\r\n        (obj, part) => (Object.assign({}, obj, part))), {});\r\n        if (Object.keys(patch).length > 0) {\r\n            this._nextState(patch);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    focus(date) {\r\n        if (!this._state.disabled && this._calendar.isValid(date) && isChangedDate(this._state.focusDate, date)) {\r\n            this._nextState({ focusDate: date });\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    focusSelect() {\r\n        if (isDateSelectable(this._state.focusDate, this._state)) {\r\n            this.select(this._state.focusDate, { emitEvent: true });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    open(date) {\r\n        /** @type {?} */\r\n        const firstDate = this.toValidDate(date, this._calendar.getToday());\r\n        if (!this._state.disabled && (!this._state.firstDate || isChangedMonth(this._state.firstDate, date))) {\r\n            this._nextState({ firstDate });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    select(date, options = {}) {\r\n        /** @type {?} */\r\n        const selectedDate = this.toValidDate(date, null);\r\n        if (!this._state.disabled) {\r\n            if (isChangedDate(this._state.selectedDate, selectedDate)) {\r\n                this._nextState({ selectedDate });\r\n            }\r\n            if (options.emitEvent && isDateSelectable(selectedDate, this._state)) {\r\n                this._dateSelect$.next(selectedDate);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} defaultValue\r\n     * @return {?}\r\n     */\r\n    toValidDate(date, defaultValue) {\r\n        /** @type {?} */\r\n        const ngbDate = NgbDate.from(date);\r\n        if (defaultValue === undefined) {\r\n            defaultValue = this._calendar.getToday();\r\n        }\r\n        return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;\r\n    }\r\n    /**\r\n     * @param {?} struct\r\n     * @return {?}\r\n     */\r\n    getMonth(struct) {\r\n        for (let month of this._state.months) {\r\n            if (struct.month === month.number && struct.year === month.year) {\r\n                return month;\r\n            }\r\n        }\r\n        throw new Error(`month ${struct.month} of year ${struct.year} not found`);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} patch\r\n     * @return {?}\r\n     */\r\n    _nextState(patch) {\r\n        /** @type {?} */\r\n        const newState = this._updateState(patch);\r\n        this._patchContexts(newState);\r\n        this._state = newState;\r\n        this._model$.next(this._state);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    _patchContexts(state) {\r\n        const { months, displayMonths, selectedDate, focusDate, focusVisible, disabled, outsideDays } = state;\r\n        state.months.forEach((/**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        month => {\r\n            month.weeks.forEach((/**\r\n             * @param {?} week\r\n             * @return {?}\r\n             */\r\n            week => {\r\n                week.days.forEach((/**\r\n                 * @param {?} day\r\n                 * @return {?}\r\n                 */\r\n                day => {\r\n                    // patch focus flag\r\n                    if (focusDate) {\r\n                        day.context.focused = focusDate.equals(day.date) && focusVisible;\r\n                    }\r\n                    // calculating tabindex\r\n                    day.tabindex = !disabled && day.date.equals(focusDate) && focusDate.month === month.number ? 0 : -1;\r\n                    // override context disabled\r\n                    if (disabled === true) {\r\n                        day.context.disabled = true;\r\n                    }\r\n                    // patch selection flag\r\n                    if (selectedDate !== undefined) {\r\n                        day.context.selected = selectedDate !== null && selectedDate.equals(day.date);\r\n                    }\r\n                    // visibility\r\n                    if (month.number !== day.date.month) {\r\n                        day.hidden = outsideDays === 'hidden' || outsideDays === 'collapsed' ||\r\n                            (displayMonths > 1 && day.date.after(months[0].firstDate) &&\r\n                                day.date.before(months[displayMonths - 1].lastDate));\r\n                    }\r\n                }));\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} patch\r\n     * @return {?}\r\n     */\r\n    _updateState(patch) {\r\n        // patching fields\r\n        /** @type {?} */\r\n        const state = Object.assign({}, this._state, patch);\r\n        /** @type {?} */\r\n        let startDate = state.firstDate;\r\n        // min/max dates changed\r\n        if ('minDate' in patch || 'maxDate' in patch) {\r\n            checkMinBeforeMax(state.minDate, state.maxDate);\r\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\r\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\r\n            startDate = state.focusDate;\r\n        }\r\n        // disabled\r\n        if ('disabled' in patch) {\r\n            state.focusVisible = false;\r\n        }\r\n        // initial rebuild via 'select()'\r\n        if ('selectedDate' in patch && this._state.months.length === 0) {\r\n            startDate = state.selectedDate;\r\n        }\r\n        // terminate early if only focus visibility was changed\r\n        if ('focusVisible' in patch) {\r\n            return state;\r\n        }\r\n        // focus date changed\r\n        if ('focusDate' in patch) {\r\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\r\n            startDate = state.focusDate;\r\n            // nothing to rebuild if only focus changed and it is still visible\r\n            if (state.months.length !== 0 && !state.focusDate.before(state.firstDate) &&\r\n                !state.focusDate.after(state.lastDate)) {\r\n                return state;\r\n            }\r\n        }\r\n        // first date changed\r\n        if ('firstDate' in patch) {\r\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\r\n            startDate = state.firstDate;\r\n        }\r\n        // rebuilding months\r\n        if (startDate) {\r\n            /** @type {?} */\r\n            const forceRebuild = 'dayTemplateData' in patch || 'firstDayOfWeek' in patch || 'markDisabled' in patch ||\r\n                'minDate' in patch || 'maxDate' in patch || 'disabled' in patch || 'outsideDays' in patch;\r\n            /** @type {?} */\r\n            const months = buildMonths(this._calendar, startDate, state, this._i18n, forceRebuild);\r\n            // updating months and boundary dates\r\n            state.months = months;\r\n            state.firstDate = months.length > 0 ? months[0].firstDate : undefined;\r\n            state.lastDate = months.length > 0 ? months[months.length - 1].lastDate : undefined;\r\n            // reset selected date if 'markDisabled' returns true\r\n            if ('selectedDate' in patch && !isDateSelectable(state.selectedDate, state)) {\r\n                state.selectedDate = null;\r\n            }\r\n            // adjusting focus after months were built\r\n            if ('firstDate' in patch) {\r\n                if (state.focusDate === undefined || state.focusDate.before(state.firstDate) ||\r\n                    state.focusDate.after(state.lastDate)) {\r\n                    state.focusDate = startDate;\r\n                }\r\n            }\r\n            // adjusting months/years for the select box navigation\r\n            /** @type {?} */\r\n            const yearChanged = !this._state.firstDate || this._state.firstDate.year !== state.firstDate.year;\r\n            /** @type {?} */\r\n            const monthChanged = !this._state.firstDate || this._state.firstDate.month !== state.firstDate.month;\r\n            if (state.navigation === 'select') {\r\n                // years ->  boundaries (min/max were changed)\r\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.years.length === 0 || yearChanged) {\r\n                    state.selectBoxes.years = generateSelectBoxYears(state.firstDate, state.minDate, state.maxDate);\r\n                }\r\n                // months -> when current year or boundaries change\r\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.months.length === 0 || yearChanged) {\r\n                    state.selectBoxes.months =\r\n                        generateSelectBoxMonths(this._calendar, state.firstDate, state.minDate, state.maxDate);\r\n                }\r\n            }\r\n            else {\r\n                state.selectBoxes = { years: [], months: [] };\r\n            }\r\n            // updating navigation arrows -> boundaries change (min/max) or month/year changes\r\n            if ((state.navigation === 'arrows' || state.navigation === 'select') &&\r\n                (monthChanged || yearChanged || 'minDate' in patch || 'maxDate' in patch || 'disabled' in patch)) {\r\n                state.prevDisabled = state.disabled || prevMonthDisabled(this._calendar, state.firstDate, state.minDate);\r\n                state.nextDisabled = state.disabled || nextMonthDisabled(this._calendar, state.lastDate, state.maxDate);\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n}\r\nNgbDatepickerService.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgbDatepickerService.ctorParameters = () => [\r\n    { type: NgbCalendar },\r\n    { type: NgbDatepickerI18n }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst NavigationEvent = {\r\n    PREV: 0,\r\n    NEXT: 1,\r\n};\r\nNavigationEvent[NavigationEvent.PREV] = 'PREV';\r\nNavigationEvent[NavigationEvent.NEXT] = 'NEXT';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbDatepicker`](#/components/datepicker/api#NgbDatepicker) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the datepickers used in the application.\r\n */\r\nclass NgbDatepickerConfig {\r\n    constructor() {\r\n        this.displayMonths = 1;\r\n        this.firstDayOfWeek = 1;\r\n        this.navigation = 'select';\r\n        this.outsideDays = 'visible';\r\n        this.showWeekdays = true;\r\n        this.showWeekNumbers = false;\r\n    }\r\n}\r\nNgbDatepickerConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbDatepickerConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbDatepickerConfig_Factory() { return new NgbDatepickerConfig(); }, token: NgbDatepickerConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction NGB_DATEPICKER_DATE_ADAPTER_FACTORY() {\r\n    return new NgbDateStructAdapter();\r\n}\r\n/**\r\n * An abstract service that does the conversion between the internal datepicker `NgbDateStruct` model and\r\n * any provided user date model `D`, ex. a string, a native date, etc.\r\n *\r\n * The adapter is used **only** for conversion when binding datepicker to a form control,\r\n * ex. `[(ngModel)]=\"userDateModel\"`. Here `userDateModel` can be of any type.\r\n *\r\n * The default datepicker implementation assumes we use `NgbDateStruct` as a user model.\r\n *\r\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details\r\n * and the [custom adapter demo](#/components/datepicker/examples#adapter) for an example.\r\n * @abstract\r\n * @template D\r\n */\r\nclass NgbDateAdapter {\r\n}\r\nNgbDateAdapter.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY },] }\r\n];\r\n/** @nocollapse */ NgbDateAdapter.ngInjectableDef = ɵɵdefineInjectable({ factory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY, token: NgbDateAdapter, providedIn: \"root\" });\r\nclass NgbDateStructAdapter extends NgbDateAdapter {\r\n    /**\r\n     * Converts a NgbDateStruct value into NgbDateStruct value\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    fromModel(date) {\r\n        return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\r\n            { year: date.year, month: date.month, day: date.day } :\r\n            null;\r\n    }\r\n    /**\r\n     * Converts a NgbDateStruct value into NgbDateStruct value\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    toModel(date) {\r\n        return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\r\n            { year: date.year, month: date.month, day: date.day } :\r\n            null;\r\n    }\r\n}\r\nNgbDateStructAdapter.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_DATEPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbDatepicker)),\r\n    multi: true\r\n};\r\n/**\r\n * A directive that marks the content template that customizes the way datepicker months are displayed\r\n *\r\n * \\@since 5.3.0\r\n */\r\nclass NgbDatepickerContent {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbDatepickerContent.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbDatepickerContent]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbDatepickerContent.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A highly configurable component that helps you with selecting calendar dates.\r\n *\r\n * `NgbDatepicker` is meant to be displayed inline on a page or put inside a popup.\r\n */\r\nclass NgbDatepicker {\r\n    /**\r\n     * @param {?} _service\r\n     * @param {?} _calendar\r\n     * @param {?} i18n\r\n     * @param {?} config\r\n     * @param {?} cd\r\n     * @param {?} _elementRef\r\n     * @param {?} _ngbDateAdapter\r\n     * @param {?} _ngZone\r\n     */\r\n    constructor(_service, _calendar, i18n, config, cd, _elementRef, _ngbDateAdapter, _ngZone) {\r\n        this._service = _service;\r\n        this._calendar = _calendar;\r\n        this.i18n = i18n;\r\n        this._elementRef = _elementRef;\r\n        this._ngbDateAdapter = _ngbDateAdapter;\r\n        this._ngZone = _ngZone;\r\n        this._destroyed$ = new Subject();\r\n        this._publicState = (/** @type {?} */ ({}));\r\n        /**\r\n         * An event emitted right before the navigation happens and displayed month changes.\r\n         *\r\n         * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\r\n         */\r\n        this.navigate = new EventEmitter();\r\n        /**\r\n         * An event emitted when user selects a date using keyboard or mouse.\r\n         *\r\n         * The payload of the event is currently selected `NgbDate`.\r\n         *\r\n         * \\@since 5.2.0\r\n         */\r\n        this.dateSelect = new EventEmitter();\r\n        /**\r\n         * An event emitted when user selects a date using keyboard or mouse.\r\n         *\r\n         * The payload of the event is currently selected `NgbDate`.\r\n         *\r\n         * Please use 'dateSelect' output instead, this will be deprecated in version 6.0 due to collision with native\r\n         * 'select' event.\r\n         */\r\n        this.select = this.dateSelect;\r\n        this.onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this.onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\r\n            'maxDate', 'navigation', 'outsideDays', 'showWeekdays', 'showWeekNumbers', 'startDate']\r\n            .forEach((/**\r\n         * @param {?} input\r\n         * @return {?}\r\n         */\r\n        input => this[input] = config[input]));\r\n        _service.dateSelect$.pipe(takeUntil(this._destroyed$)).subscribe((/**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        date => { this.dateSelect.emit(date); }));\r\n        _service.model$.pipe(takeUntil(this._destroyed$)).subscribe((/**\r\n         * @param {?} model\r\n         * @return {?}\r\n         */\r\n        model => {\r\n            /** @type {?} */\r\n            const newDate = model.firstDate;\r\n            /** @type {?} */\r\n            const oldDate = this.model ? this.model.firstDate : null;\r\n            // update public state\r\n            this._publicState = {\r\n                maxDate: model.maxDate,\r\n                minDate: model.minDate,\r\n                firstDate: model.firstDate,\r\n                lastDate: model.lastDate,\r\n                focusedDate: model.focusDate,\r\n                months: model.months.map((/**\r\n                 * @param {?} viewModel\r\n                 * @return {?}\r\n                 */\r\n                viewModel => viewModel.firstDate))\r\n            };\r\n            /** @type {?} */\r\n            let navigationPrevented = false;\r\n            // emitting navigation event if the first month changes\r\n            if (!newDate.equals(oldDate)) {\r\n                this.navigate.emit({\r\n                    current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,\r\n                    next: { year: newDate.year, month: newDate.month },\r\n                    preventDefault: (/**\r\n                     * @return {?}\r\n                     */\r\n                    () => navigationPrevented = true)\r\n                });\r\n                // can't prevent the very first navigation\r\n                if (navigationPrevented && oldDate !== null) {\r\n                    this._service.open(oldDate);\r\n                    return;\r\n                }\r\n            }\r\n            /** @type {?} */\r\n            const newSelectedDate = model.selectedDate;\r\n            /** @type {?} */\r\n            const newFocusedDate = model.focusDate;\r\n            /** @type {?} */\r\n            const oldFocusedDate = this.model ? this.model.focusDate : null;\r\n            this.model = model;\r\n            // handling selection change\r\n            if (isChangedDate(newSelectedDate, this._controlValue)) {\r\n                this._controlValue = newSelectedDate;\r\n                this.onTouched();\r\n                this.onChange(this._ngbDateAdapter.toModel(newSelectedDate));\r\n            }\r\n            // handling focus change\r\n            if (isChangedDate(newFocusedDate, oldFocusedDate) && oldFocusedDate && model.focusVisible) {\r\n                this.focus();\r\n            }\r\n            cd.markForCheck();\r\n        }));\r\n    }\r\n    /**\r\n     *  Returns the readonly public state of the datepicker\r\n     *\r\n     * \\@since 5.2.0\r\n     * @return {?}\r\n     */\r\n    get state() { return this._publicState; }\r\n    /**\r\n     *  Returns the calendar service used in the specific datepicker instance.\r\n     *\r\n     * \\@since 5.3.0\r\n     * @return {?}\r\n     */\r\n    get calendar() { return this._calendar; }\r\n    /**\r\n     *  Focuses on given date.\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    focusDate(date) { this._service.focus(NgbDate.from(date)); }\r\n    /**\r\n     *  Selects focused date.\r\n     * @return {?}\r\n     */\r\n    focusSelect() { this._service.focusSelect(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    focus() {\r\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const elementToFocus = this._elementRef.nativeElement.querySelector('div.ngb-dp-day[tabindex=\"0\"]');\r\n            if (elementToFocus) {\r\n                elementToFocus.focus();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Navigates to the provided date.\r\n     *\r\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n     * If nothing or invalid date provided calendar will open current month.\r\n     *\r\n     * Use the `[startDate]` input as an alternative.\r\n     * @param {?=} date\r\n     * @return {?}\r\n     */\r\n    navigateTo(date) {\r\n        this._service.open(NgbDate.from(date ? date.day ? (/** @type {?} */ (date)) : Object.assign({}, date, { day: 1 }) : null));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const focusIns$ = fromEvent(this._contentEl.nativeElement, 'focusin');\r\n            /** @type {?} */\r\n            const focusOuts$ = fromEvent(this._contentEl.nativeElement, 'focusout');\r\n            const { nativeElement } = this._elementRef;\r\n            // we're changing 'focusVisible' only when entering or leaving months view\r\n            // and ignoring all focus events where both 'target' and 'related' target are day cells\r\n            merge(focusIns$, focusOuts$)\r\n                .pipe(filter((/**\r\n             * @param {?} __0\r\n             * @return {?}\r\n             */\r\n            ({ target, relatedTarget }) => !(hasClassName(target, 'ngb-dp-day') && hasClassName(relatedTarget, 'ngb-dp-day') &&\r\n                nativeElement.contains((/** @type {?} */ (target))) && nativeElement.contains((/** @type {?} */ (relatedTarget)))))), takeUntil(this._destroyed$))\r\n                .subscribe((/**\r\n             * @param {?} __0\r\n             * @return {?}\r\n             */\r\n            ({ type }) => this._ngZone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this._service.set({ focusVisible: type === 'focusin' })))));\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this._destroyed$.next(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (this.model === undefined) {\r\n            /** @type {?} */\r\n            const inputs = {};\r\n            ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\r\n                'outsideDays']\r\n                .forEach((/**\r\n             * @param {?} name\r\n             * @return {?}\r\n             */\r\n            name => inputs[name] = this[name]));\r\n            this._service.set(inputs);\r\n            this.navigateTo(this.startDate);\r\n        }\r\n        if (!this.dayTemplate) {\r\n            this.dayTemplate = this._defaultDayTemplate;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        /** @type {?} */\r\n        const inputs = {};\r\n        ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\r\n            'outsideDays']\r\n            .filter((/**\r\n         * @param {?} name\r\n         * @return {?}\r\n         */\r\n        name => name in changes))\r\n            .forEach((/**\r\n         * @param {?} name\r\n         * @return {?}\r\n         */\r\n        name => inputs[name] = this[name]));\r\n        this._service.set(inputs);\r\n        if ('startDate' in changes) {\r\n            const { currentValue, previousValue } = changes.startDate;\r\n            if (isChangedMonth(previousValue, currentValue)) {\r\n                this.navigateTo(this.startDate);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    onDateSelect(date) {\r\n        this._service.focus(date);\r\n        this._service.select(date, { emitEvent: true });\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    onNavigateDateSelect(date) { this._service.open(date); }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onNavigateEvent(event) {\r\n        switch (event) {\r\n            case NavigationEvent.PREV:\r\n                this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));\r\n                break;\r\n            case NavigationEvent.NEXT:\r\n                this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this.onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} disabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(disabled) { this._service.set({ disabled }); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._controlValue = NgbDate.from(this._ngbDateAdapter.fromModel(value));\r\n        this._service.select(this._controlValue);\r\n    }\r\n}\r\nNgbDatepicker.decorators = [\r\n    { type: Component, args: [{\r\n                exportAs: 'ngbDatepicker',\r\n                selector: 'ngb-datepicker',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <ng-template #defaultDayTemplate let-date=\"date\" let-currentMonth=\"currentMonth\" let-selected=\"selected\" let-disabled=\"disabled\" let-focused=\"focused\">\r\n      <div ngbDatepickerDayView\r\n        [date]=\"date\"\r\n        [currentMonth]=\"currentMonth\"\r\n        [selected]=\"selected\"\r\n        [disabled]=\"disabled\"\r\n        [focused]=\"focused\">\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template #defaultContentTemplate>\r\n      <div *ngFor=\"let month of model.months; let i = index;\" class=\"ngb-dp-month\">\r\n        <div *ngIf=\"navigation === 'none' || (displayMonths > 1 && navigation === 'select')\" class=\"ngb-dp-month-name\">\r\n          {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\r\n        </div>\r\n        <ngb-datepicker-month [month]=\"month.firstDate\"></ngb-datepicker-month>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <div class=\"ngb-dp-header\">\r\n      <ngb-datepicker-navigation *ngIf=\"navigation !== 'none'\"\r\n        [date]=\"model.firstDate\"\r\n        [months]=\"model.months\"\r\n        [disabled]=\"model.disabled\"\r\n        [showSelect]=\"model.navigation === 'select'\"\r\n        [prevDisabled]=\"model.prevDisabled\"\r\n        [nextDisabled]=\"model.nextDisabled\"\r\n        [selectBoxes]=\"model.selectBoxes\"\r\n        (navigate)=\"onNavigateEvent($event)\"\r\n        (select)=\"onNavigateDateSelect($event)\">\r\n      </ngb-datepicker-navigation>\r\n    </div>\r\n\r\n    <div class=\"ngb-dp-content\" [class.ngb-dp-months]=\"!contentTemplate\" #content>\r\n      <ng-template [ngTemplateOutlet]=\"contentTemplate?.templateRef || defaultContentTemplate\"></ng-template>\r\n    </div>\r\n\r\n    <ng-template [ngTemplateOutlet]=\"footerTemplate\"></ng-template>\r\n  `,\r\n                providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService],\r\n                styles: [\"ngb-datepicker{border:1px solid #dfdfdf;border-radius:.25rem;display:inline-block}ngb-datepicker-month{pointer-events:auto}ngb-datepicker.dropdown-menu{padding:0}.ngb-dp-body{z-index:1050}.ngb-dp-header{border-bottom:0;border-radius:.25rem .25rem 0 0;padding-top:.25rem;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-months{display:-ms-flexbox;display:flex}.ngb-dp-month{pointer-events:none}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-month+.ngb-dp-month .ngb-dp-month-name,.ngb-dp-month+.ngb-dp-month .ngb-dp-week{padding-left:1rem}.ngb-dp-month:last-child .ngb-dp-week{padding-right:.25rem}.ngb-dp-month:first-child .ngb-dp-week{padding-left:.25rem}.ngb-dp-month .ngb-dp-week:last-child{padding-bottom:.25rem}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbDatepicker.ctorParameters = () => [\r\n    { type: NgbDatepickerService },\r\n    { type: NgbCalendar },\r\n    { type: NgbDatepickerI18n },\r\n    { type: NgbDatepickerConfig },\r\n    { type: ChangeDetectorRef },\r\n    { type: ElementRef },\r\n    { type: NgbDateAdapter },\r\n    { type: NgZone }\r\n];\r\nNgbDatepicker.propDecorators = {\r\n    _defaultDayTemplate: [{ type: ViewChild, args: ['defaultDayTemplate', { static: true },] }],\r\n    _contentEl: [{ type: ViewChild, args: ['content', { static: true },] }],\r\n    contentTemplate: [{ type: ContentChild, args: [NgbDatepickerContent, { static: true },] }],\r\n    dayTemplate: [{ type: Input }],\r\n    dayTemplateData: [{ type: Input }],\r\n    displayMonths: [{ type: Input }],\r\n    firstDayOfWeek: [{ type: Input }],\r\n    footerTemplate: [{ type: Input }],\r\n    markDisabled: [{ type: Input }],\r\n    maxDate: [{ type: Input }],\r\n    minDate: [{ type: Input }],\r\n    navigation: [{ type: Input }],\r\n    outsideDays: [{ type: Input }],\r\n    showWeekdays: [{ type: Input }],\r\n    showWeekNumbers: [{ type: Input }],\r\n    startDate: [{ type: Input }],\r\n    navigate: [{ type: Output }],\r\n    dateSelect: [{ type: Output }],\r\n    select: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst Key = {\r\n    Tab: 9,\r\n    Enter: 13,\r\n    Escape: 27,\r\n    Space: 32,\r\n    PageUp: 33,\r\n    PageDown: 34,\r\n    End: 35,\r\n    Home: 36,\r\n    ArrowLeft: 37,\r\n    ArrowUp: 38,\r\n    ArrowRight: 39,\r\n    ArrowDown: 40,\r\n};\r\nKey[Key.Tab] = 'Tab';\r\nKey[Key.Enter] = 'Enter';\r\nKey[Key.Escape] = 'Escape';\r\nKey[Key.Space] = 'Space';\r\nKey[Key.PageUp] = 'PageUp';\r\nKey[Key.PageDown] = 'PageDown';\r\nKey[Key.End] = 'End';\r\nKey[Key.Home] = 'Home';\r\nKey[Key.ArrowLeft] = 'ArrowLeft';\r\nKey[Key.ArrowUp] = 'ArrowUp';\r\nKey[Key.ArrowRight] = 'ArrowRight';\r\nKey[Key.ArrowDown] = 'ArrowDown';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A service that represents the keyboard navigation.\r\n *\r\n * Default keyboard shortcuts [are documented in the overview](#/components/datepicker/overview#keyboard-shortcuts)\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbDatepickerKeyboardService {\r\n    /**\r\n     * Processes a keyboard event.\r\n     * @param {?} event\r\n     * @param {?} datepicker\r\n     * @return {?}\r\n     */\r\n    processKey(event, datepicker) {\r\n        const { state, calendar } = datepicker;\r\n        // tslint:disable-next-line:deprecation\r\n        switch (event.which) {\r\n            case Key.PageUp:\r\n                datepicker.focusDate(calendar.getPrev(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));\r\n                break;\r\n            case Key.PageDown:\r\n                datepicker.focusDate(calendar.getNext(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));\r\n                break;\r\n            case Key.End:\r\n                datepicker.focusDate(event.shiftKey ? state.maxDate : state.lastDate);\r\n                break;\r\n            case Key.Home:\r\n                datepicker.focusDate(event.shiftKey ? state.minDate : state.firstDate);\r\n                break;\r\n            case Key.ArrowLeft:\r\n                datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', 1));\r\n                break;\r\n            case Key.ArrowUp:\r\n                datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', calendar.getDaysPerWeek()));\r\n                break;\r\n            case Key.ArrowRight:\r\n                datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', 1));\r\n                break;\r\n            case Key.ArrowDown:\r\n                datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', calendar.getDaysPerWeek()));\r\n                break;\r\n            case Key.Enter:\r\n            case Key.Space:\r\n                datepicker.focusSelect();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n}\r\nNgbDatepickerKeyboardService.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbDatepickerKeyboardService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbDatepickerKeyboardService_Factory() { return new NgbDatepickerKeyboardService(); }, token: NgbDatepickerKeyboardService, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A component that renders one month including all the days, weekdays and week numbers. Can be used inside\r\n * the `<ng-template ngbDatepickerMonths></ng-template>` when you want to customize months layout.\r\n *\r\n * For a usage example, see [custom month layout demo](#/components/datepicker/examples#custommonth)\r\n *\r\n * \\@since 5.3.0\r\n */\r\nclass NgbDatepickerMonth {\r\n    /**\r\n     * @param {?} i18n\r\n     * @param {?} datepicker\r\n     * @param {?} _keyboardService\r\n     * @param {?} _service\r\n     */\r\n    constructor(i18n, datepicker, _keyboardService, _service) {\r\n        this.i18n = i18n;\r\n        this.datepicker = datepicker;\r\n        this._keyboardService = _keyboardService;\r\n        this._service = _service;\r\n    }\r\n    /**\r\n     * The first date of month to be rendered.\r\n     *\r\n     * This month must one of the months present in the\r\n     * [datepicker state](#/components/datepicker/api#NgbDatepickerState).\r\n     * @param {?} month\r\n     * @return {?}\r\n     */\r\n    set month(month) {\r\n        this.viewModel = this._service.getMonth(month);\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onKeyDown(event) { this._keyboardService.processKey(event, this.datepicker); }\r\n    /**\r\n     * @param {?} day\r\n     * @return {?}\r\n     */\r\n    doSelect(day) {\r\n        if (!day.context.disabled && !day.hidden) {\r\n            this.datepicker.onDateSelect(day.date);\r\n        }\r\n    }\r\n}\r\nNgbDatepickerMonth.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-datepicker-month',\r\n                host: { 'role': 'grid', '(keydown)': 'onKeyDown($event)' },\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <div *ngIf=\"datepicker.showWeekdays\" class=\"ngb-dp-week ngb-dp-weekdays\" role=\"row\">\r\n      <div *ngIf=\"datepicker.showWeekNumbers\" class=\"ngb-dp-weekday ngb-dp-showweek\"></div>\r\n      <div *ngFor=\"let w of viewModel.weekdays\" class=\"ngb-dp-weekday small\" role=\"columnheader\">\r\n        {{ i18n.getWeekdayShortName(w) }}\r\n      </div>\r\n    </div>\r\n    <ng-template ngFor let-week [ngForOf]=\"viewModel.weeks\">\r\n      <div *ngIf=\"!week.collapsed\" class=\"ngb-dp-week\" role=\"row\">\r\n        <div *ngIf=\"datepicker.showWeekNumbers\" class=\"ngb-dp-week-number small text-muted\">{{ i18n.getWeekNumerals(week.number) }}</div>\r\n        <div *ngFor=\"let day of week.days\" (click)=\"doSelect(day); $event.preventDefault()\" class=\"ngb-dp-day\" role=\"gridcell\"\r\n          [class.disabled]=\"day.context.disabled\"\r\n          [tabindex]=\"day.tabindex\"\r\n          [class.hidden]=\"day.hidden\"\r\n          [class.ngb-dp-today]=\"day.context.today\"\r\n          [attr.aria-label]=\"day.ariaLabel\">\r\n          <ng-template [ngIf]=\"!day.hidden\">\r\n            <ng-template [ngTemplateOutlet]=\"datepicker.dayTemplate\" [ngTemplateOutletContext]=\"day.context\"></ng-template>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n  `,\r\n                styles: [\"ngb-datepicker-month{display:block}.ngb-dp-week-number,.ngb-dp-weekday{line-height:2rem;text-align:center;font-style:italic}.ngb-dp-weekday{color:#5bc0de;color:var(--info)}.ngb-dp-week{border-radius:.25rem;display:-ms-flexbox;display:flex}.ngb-dp-weekdays{border-bottom:1px solid rgba(0,0,0,.125);border-radius:0;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-day,.ngb-dp-week-number,.ngb-dp-weekday{width:2rem;height:2rem}.ngb-dp-day{cursor:pointer}.ngb-dp-day.disabled,.ngb-dp-day.hidden{cursor:default}.ngb-dp-day[tabindex=\\\"0\\\"]{z-index:1}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbDatepickerMonth.ctorParameters = () => [\r\n    { type: NgbDatepickerI18n },\r\n    { type: NgbDatepicker },\r\n    { type: NgbDatepickerKeyboardService },\r\n    { type: NgbDatepickerService }\r\n];\r\nNgbDatepickerMonth.propDecorators = {\r\n    month: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbDatepickerNavigation {\r\n    /**\r\n     * @param {?} i18n\r\n     */\r\n    constructor(i18n) {\r\n        this.i18n = i18n;\r\n        this.navigation = NavigationEvent;\r\n        this.months = [];\r\n        this.navigate = new EventEmitter();\r\n        this.select = new EventEmitter();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onClickPrev(event) {\r\n        ((/** @type {?} */ (event.currentTarget))).focus();\r\n        this.navigate.emit(this.navigation.PREV);\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onClickNext(event) {\r\n        ((/** @type {?} */ (event.currentTarget))).focus();\r\n        this.navigate.emit(this.navigation.NEXT);\r\n    }\r\n}\r\nNgbDatepickerNavigation.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-datepicker-navigation',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <div class=\"ngb-dp-arrow\">\r\n      <button type=\"button\" class=\"btn btn-link ngb-dp-arrow-btn\" (click)=\"onClickPrev($event)\" [disabled]=\"prevDisabled\"\r\n              i18n-aria-label=\"@@ngb.datepicker.previous-month\" aria-label=\"Previous month\"\r\n              i18n-title=\"@@ngb.datepicker.previous-month\" title=\"Previous month\">\r\n        <span class=\"ngb-dp-navigation-chevron\"></span>\r\n      </button>\r\n    </div>\r\n    <ngb-datepicker-navigation-select *ngIf=\"showSelect\" class=\"ngb-dp-navigation-select\"\r\n      [date]=\"date\"\r\n      [disabled] = \"disabled\"\r\n      [months]=\"selectBoxes.months\"\r\n      [years]=\"selectBoxes.years\"\r\n      (select)=\"select.emit($event)\">\r\n    </ngb-datepicker-navigation-select>\r\n\r\n    <ng-template *ngIf=\"!showSelect\" ngFor let-month [ngForOf]=\"months\" let-i=\"index\">\r\n      <div class=\"ngb-dp-arrow\" *ngIf=\"i > 0\"></div>\r\n      <div class=\"ngb-dp-month-name\">\r\n        {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\r\n      </div>\r\n      <div class=\"ngb-dp-arrow\" *ngIf=\"i !== months.length - 1\"></div>\r\n    </ng-template>\r\n    <div class=\"ngb-dp-arrow right\">\r\n      <button type=\"button\" class=\"btn btn-link ngb-dp-arrow-btn\" (click)=\"onClickNext($event)\" [disabled]=\"nextDisabled\"\r\n              i18n-aria-label=\"@@ngb.datepicker.next-month\" aria-label=\"Next month\"\r\n              i18n-title=\"@@ngb.datepicker.next-month\" title=\"Next month\">\r\n        <span class=\"ngb-dp-navigation-chevron\"></span>\r\n      </button>\r\n    </div>\r\n    `,\r\n                styles: [\"ngb-datepicker-navigation{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-dp-navigation-chevron{border-style:solid;border-width:.2em .2em 0 0;display:inline-block;width:.75em;height:.75em;margin-left:.25em;margin-right:.15em;-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}.right .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg);margin-left:.15em;margin-right:.25em}.ngb-dp-arrow{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;padding-right:0;padding-left:0;margin:0;width:2rem;height:2rem}.ngb-dp-arrow.right{-ms-flex-pack:end;justify-content:flex-end}.ngb-dp-arrow-btn{padding:0 .25rem;margin:0 .5rem;border:none;background-color:transparent;z-index:1}.ngb-dp-arrow-btn:focus{outline-width:1px;outline-style:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.ngb-dp-arrow-btn:focus{outline-style:solid}}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center}.ngb-dp-navigation-select{display:-ms-flexbox;display:flex;-ms-flex:1 1 9rem;flex:1 1 9rem}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbDatepickerNavigation.ctorParameters = () => [\r\n    { type: NgbDatepickerI18n }\r\n];\r\nNgbDatepickerNavigation.propDecorators = {\r\n    date: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    months: [{ type: Input }],\r\n    showSelect: [{ type: Input }],\r\n    prevDisabled: [{ type: Input }],\r\n    nextDisabled: [{ type: Input }],\r\n    selectBoxes: [{ type: Input }],\r\n    navigate: [{ type: Output }],\r\n    select: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst isContainedIn = (/**\r\n * @param {?} element\r\n * @param {?=} array\r\n * @return {?}\r\n */\r\n(element, array) => array ? array.some((/**\r\n * @param {?} item\r\n * @return {?}\r\n */\r\nitem => item.contains(element))) : false);\r\n/** @type {?} */\r\nconst matchesSelectorIfAny = (/**\r\n * @param {?} element\r\n * @param {?=} selector\r\n * @return {?}\r\n */\r\n(element, selector) => !selector || closest(element, selector) != null);\r\n// we have to add a more significant delay to avoid re-opening when handling (click) on a toggling element\r\n// TODO: use proper Angular platform detection when NgbAutoClose becomes a service and we can inject PLATFORM_ID\r\nconst ɵ2 = /**\r\n * @return {?}\r\n */\r\n() => {\r\n    /** @type {?} */\r\n    const isIOS = (/**\r\n     * @return {?}\r\n     */\r\n    () => /iPad|iPhone|iPod/.test(navigator.userAgent) ||\r\n        (/Macintosh/.test(navigator.userAgent) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2));\r\n    /** @type {?} */\r\n    const isAndroid = (/**\r\n     * @return {?}\r\n     */\r\n    () => /Android/.test(navigator.userAgent));\r\n    return typeof navigator !== 'undefined' ? !!navigator.userAgent && (isIOS() || isAndroid()) : false;\r\n};\r\n/** @type {?} */\r\nconst isMobile = ((ɵ2))();\r\n// setting 'ngbAutoClose' synchronously on mobile results in immediate popup closing\r\n// when tapping on the triggering element\r\n/** @type {?} */\r\nconst wrapAsyncForMobile = (/**\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfn => isMobile ? (/**\r\n * @return {?}\r\n */\r\n() => setTimeout((/**\r\n * @return {?}\r\n */\r\n() => fn()), 100)) : fn);\r\n/**\r\n * @param {?} zone\r\n * @param {?} document\r\n * @param {?} type\r\n * @param {?} close\r\n * @param {?} closed$\r\n * @param {?} insideElements\r\n * @param {?=} ignoreElements\r\n * @param {?=} insideSelector\r\n * @return {?}\r\n */\r\nfunction ngbAutoClose(zone, document, type, close, closed$, insideElements, ignoreElements, insideSelector) {\r\n    // closing on ESC and outside clicks\r\n    if (type) {\r\n        zone.runOutsideAngular(wrapAsyncForMobile((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const shouldCloseOnClick = (/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            (event) => {\r\n                /** @type {?} */\r\n                const element = (/** @type {?} */ (event.target));\r\n                if (event.button === 2 || isContainedIn(element, ignoreElements)) {\r\n                    return false;\r\n                }\r\n                if (type === 'inside') {\r\n                    return isContainedIn(element, insideElements) && matchesSelectorIfAny(element, insideSelector);\r\n                }\r\n                else if (type === 'outside') {\r\n                    return !isContainedIn(element, insideElements);\r\n                }\r\n                else /* if (type === true) */ {\r\n                    return matchesSelectorIfAny(element, insideSelector) || !isContainedIn(element, insideElements);\r\n                }\r\n            });\r\n            /** @type {?} */\r\n            const escapes$ = fromEvent(document, 'keydown')\r\n                .pipe(takeUntil(closed$), \r\n            // tslint:disable-next-line:deprecation\r\n            filter((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.which === Key.Escape)), tap((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.preventDefault())));\r\n            // we have to pre-calculate 'shouldCloseOnClick' on 'mousedown',\r\n            // because on 'mouseup' DOM nodes might be detached\r\n            /** @type {?} */\r\n            const mouseDowns$ = fromEvent(document, 'mousedown').pipe(map(shouldCloseOnClick), takeUntil(closed$));\r\n            /** @type {?} */\r\n            const closeableClicks$ = (/** @type {?} */ (fromEvent(document, 'mouseup')\r\n                .pipe(withLatestFrom(mouseDowns$), filter((/**\r\n             * @param {?} __0\r\n             * @return {?}\r\n             */\r\n            ([_, shouldClose]) => shouldClose)), delay(0), takeUntil(closed$))));\r\n            race([escapes$, closeableClicks$]).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => zone.run(close)));\r\n        })));\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst FOCUSABLE_ELEMENTS_SELECTOR = [\r\n    'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\r\n    'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\r\n].join(', ');\r\n/**\r\n * Returns first and last focusable elements inside of a given element based on specific CSS selector\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction getFocusableBoundaryElements(element) {\r\n    /** @type {?} */\r\n    const list = Array.from((/** @type {?} */ (element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR))))\r\n        .filter((/**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    el => el.tabIndex !== -1));\r\n    return [list[0], list[list.length - 1]];\r\n}\r\n/**\r\n * Function that enforces browser focus to be trapped inside a DOM element.\r\n *\r\n * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\r\n *\r\n * \\@param zone Angular zone\r\n * \\@param element The element around which focus will be trapped inside\r\n * \\@param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\r\n * and free internal resources\r\n * \\@param refocusOnClick Put the focus back to the last focused element whenever a click occurs on element (default to\r\n * false)\r\n * @type {?}\r\n */\r\nconst ngbFocusTrap = (/**\r\n * @param {?} zone\r\n * @param {?} element\r\n * @param {?} stopFocusTrap$\r\n * @param {?=} refocusOnClick\r\n * @return {?}\r\n */\r\n(zone, element, stopFocusTrap$, refocusOnClick = false) => {\r\n    zone.runOutsideAngular((/**\r\n     * @return {?}\r\n     */\r\n    () => {\r\n        // last focused element\r\n        /** @type {?} */\r\n        const lastFocusedElement$ = fromEvent(element, 'focusin').pipe(takeUntil(stopFocusTrap$), map((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.target)));\r\n        // 'tab' / 'shift+tab' stream\r\n        fromEvent(element, 'keydown')\r\n            .pipe(takeUntil(stopFocusTrap$), \r\n        // tslint:disable:deprecation\r\n        filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.which === Key.Tab)), \r\n        // tslint:enable:deprecation\r\n        withLatestFrom(lastFocusedElement$))\r\n            .subscribe((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        ([tabEvent, focusedElement]) => {\r\n            const [first, last] = getFocusableBoundaryElements(element);\r\n            if ((focusedElement === first || focusedElement === element) && tabEvent.shiftKey) {\r\n                last.focus();\r\n                tabEvent.preventDefault();\r\n            }\r\n            if (focusedElement === last && !tabEvent.shiftKey) {\r\n                first.focus();\r\n                tabEvent.preventDefault();\r\n            }\r\n        }));\r\n        // inside click\r\n        if (refocusOnClick) {\r\n            fromEvent(element, 'click')\r\n                .pipe(takeUntil(stopFocusTrap$), withLatestFrom(lastFocusedElement$), map((/**\r\n             * @param {?} arr\r\n             * @return {?}\r\n             */\r\n            arr => (/** @type {?} */ (arr[1])))))\r\n                .subscribe((/**\r\n             * @param {?} lastFocusedElement\r\n             * @return {?}\r\n             */\r\n            lastFocusedElement => lastFocusedElement.focus()));\r\n        }\r\n    }));\r\n});\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\nclass Positioning {\r\n    /**\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    getAllStyles(element) { return window.getComputedStyle(element); }\r\n    /**\r\n     * @private\r\n     * @param {?} element\r\n     * @param {?} prop\r\n     * @return {?}\r\n     */\r\n    getStyle(element, prop) { return this.getAllStyles(element)[prop]; }\r\n    /**\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    isStaticPositioned(element) {\r\n        return (this.getStyle(element, 'position') || 'static') === 'static';\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    offsetParent(element) {\r\n        /** @type {?} */\r\n        let offsetParentEl = (/** @type {?} */ (element.offsetParent)) || document.documentElement;\r\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\r\n            offsetParentEl = (/** @type {?} */ (offsetParentEl.offsetParent));\r\n        }\r\n        return offsetParentEl || document.documentElement;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?=} round\r\n     * @return {?}\r\n     */\r\n    position(element, round = true) {\r\n        /** @type {?} */\r\n        let elPosition;\r\n        /** @type {?} */\r\n        let parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\r\n        if (this.getStyle(element, 'position') === 'fixed') {\r\n            elPosition = element.getBoundingClientRect();\r\n            elPosition = {\r\n                top: elPosition.top,\r\n                bottom: elPosition.bottom,\r\n                left: elPosition.left,\r\n                right: elPosition.right,\r\n                height: elPosition.height,\r\n                width: elPosition.width\r\n            };\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            const offsetParentEl = this.offsetParent(element);\r\n            elPosition = this.offset(element, false);\r\n            if (offsetParentEl !== document.documentElement) {\r\n                parentOffset = this.offset(offsetParentEl, false);\r\n            }\r\n            parentOffset.top += offsetParentEl.clientTop;\r\n            parentOffset.left += offsetParentEl.clientLeft;\r\n        }\r\n        elPosition.top -= parentOffset.top;\r\n        elPosition.bottom -= parentOffset.top;\r\n        elPosition.left -= parentOffset.left;\r\n        elPosition.right -= parentOffset.left;\r\n        if (round) {\r\n            elPosition.top = Math.round(elPosition.top);\r\n            elPosition.bottom = Math.round(elPosition.bottom);\r\n            elPosition.left = Math.round(elPosition.left);\r\n            elPosition.right = Math.round(elPosition.right);\r\n        }\r\n        return elPosition;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?=} round\r\n     * @return {?}\r\n     */\r\n    offset(element, round = true) {\r\n        /** @type {?} */\r\n        const elBcr = element.getBoundingClientRect();\r\n        /** @type {?} */\r\n        const viewportOffset = {\r\n            top: window.pageYOffset - document.documentElement.clientTop,\r\n            left: window.pageXOffset - document.documentElement.clientLeft\r\n        };\r\n        /** @type {?} */\r\n        let elOffset = {\r\n            height: elBcr.height || element.offsetHeight,\r\n            width: elBcr.width || element.offsetWidth,\r\n            top: elBcr.top + viewportOffset.top,\r\n            bottom: elBcr.bottom + viewportOffset.top,\r\n            left: elBcr.left + viewportOffset.left,\r\n            right: elBcr.right + viewportOffset.left\r\n        };\r\n        if (round) {\r\n            elOffset.height = Math.round(elOffset.height);\r\n            elOffset.width = Math.round(elOffset.width);\r\n            elOffset.top = Math.round(elOffset.top);\r\n            elOffset.bottom = Math.round(elOffset.bottom);\r\n            elOffset.left = Math.round(elOffset.left);\r\n            elOffset.right = Math.round(elOffset.right);\r\n        }\r\n        return elOffset;\r\n    }\r\n    /*\r\n        Return false if the element to position is outside the viewport\r\n      */\r\n    /**\r\n     * @param {?} hostElement\r\n     * @param {?} targetElement\r\n     * @param {?} placement\r\n     * @param {?=} appendToBody\r\n     * @return {?}\r\n     */\r\n    positionElements(hostElement, targetElement, placement, appendToBody) {\r\n        const [placementPrimary = 'top', placementSecondary = 'center'] = placement.split('-');\r\n        /** @type {?} */\r\n        const hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\r\n        /** @type {?} */\r\n        const targetElStyles = this.getAllStyles(targetElement);\r\n        /** @type {?} */\r\n        const marginTop = parseFloat(targetElStyles.marginTop);\r\n        /** @type {?} */\r\n        const marginBottom = parseFloat(targetElStyles.marginBottom);\r\n        /** @type {?} */\r\n        const marginLeft = parseFloat(targetElStyles.marginLeft);\r\n        /** @type {?} */\r\n        const marginRight = parseFloat(targetElStyles.marginRight);\r\n        /** @type {?} */\r\n        let topPosition = 0;\r\n        /** @type {?} */\r\n        let leftPosition = 0;\r\n        switch (placementPrimary) {\r\n            case 'top':\r\n                topPosition = (hostElPosition.top - (targetElement.offsetHeight + marginTop + marginBottom));\r\n                break;\r\n            case 'bottom':\r\n                topPosition = (hostElPosition.top + hostElPosition.height);\r\n                break;\r\n            case 'left':\r\n                leftPosition = (hostElPosition.left - (targetElement.offsetWidth + marginLeft + marginRight));\r\n                break;\r\n            case 'right':\r\n                leftPosition = (hostElPosition.left + hostElPosition.width);\r\n                break;\r\n        }\r\n        switch (placementSecondary) {\r\n            case 'top':\r\n                topPosition = hostElPosition.top;\r\n                break;\r\n            case 'bottom':\r\n                topPosition = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\r\n                break;\r\n            case 'left':\r\n                leftPosition = hostElPosition.left;\r\n                break;\r\n            case 'right':\r\n                leftPosition = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\r\n                break;\r\n            case 'center':\r\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\r\n                    leftPosition = (hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2);\r\n                }\r\n                else {\r\n                    topPosition = (hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2);\r\n                }\r\n                break;\r\n        }\r\n        /// The translate3d/gpu acceleration render a blurry text on chrome, the next line is commented until a browser fix\r\n        // targetElement.style.transform = `translate3d(${Math.round(leftPosition)}px, ${Math.floor(topPosition)}px, 0px)`;\r\n        targetElement.style.transform = `translate(${Math.round(leftPosition)}px, ${Math.round(topPosition)}px)`;\r\n        // Check if the targetElement is inside the viewport\r\n        /** @type {?} */\r\n        const targetElBCR = targetElement.getBoundingClientRect();\r\n        /** @type {?} */\r\n        const html = document.documentElement;\r\n        /** @type {?} */\r\n        const windowHeight = window.innerHeight || html.clientHeight;\r\n        /** @type {?} */\r\n        const windowWidth = window.innerWidth || html.clientWidth;\r\n        return targetElBCR.left >= 0 && targetElBCR.top >= 0 && targetElBCR.right <= windowWidth &&\r\n            targetElBCR.bottom <= windowHeight;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst placementSeparator = /\\s+/;\r\n/** @type {?} */\r\nconst positionService = new Positioning();\r\n/*\r\n * Accept the placement array and applies the appropriate placement dependent on the viewport.\r\n * Returns the applied placement.\r\n * In case of auto placement, placements are selected in order\r\n *   'top', 'bottom', 'left', 'right',\r\n *   'top-left', 'top-right',\r\n *   'bottom-left', 'bottom-right',\r\n *   'left-top', 'left-bottom',\r\n *   'right-top', 'right-bottom'.\r\n * */\r\n/**\r\n * @param {?} hostElement\r\n * @param {?} targetElement\r\n * @param {?} placement\r\n * @param {?=} appendToBody\r\n * @param {?=} baseClass\r\n * @return {?}\r\n */\r\nfunction positionElements(hostElement, targetElement, placement, appendToBody, baseClass) {\r\n    /** @type {?} */\r\n    let placementVals = Array.isArray(placement) ? placement : (/** @type {?} */ (placement.split(placementSeparator)));\r\n    /** @type {?} */\r\n    const allowedPlacements = [\r\n        'top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top', 'left-bottom',\r\n        'right-top', 'right-bottom'\r\n    ];\r\n    /** @type {?} */\r\n    const classList = targetElement.classList;\r\n    /** @type {?} */\r\n    const addClassesToTarget = (/**\r\n     * @param {?} targetPlacement\r\n     * @return {?}\r\n     */\r\n    (targetPlacement) => {\r\n        const [primary, secondary] = targetPlacement.split('-');\r\n        /** @type {?} */\r\n        const classes = [];\r\n        if (baseClass) {\r\n            classes.push(`${baseClass}-${primary}`);\r\n            if (secondary) {\r\n                classes.push(`${baseClass}-${primary}-${secondary}`);\r\n            }\r\n            classes.forEach((/**\r\n             * @param {?} classname\r\n             * @return {?}\r\n             */\r\n            (classname) => { classList.add(classname); }));\r\n        }\r\n        return classes;\r\n    });\r\n    // Remove old placement classes to avoid issues\r\n    if (baseClass) {\r\n        allowedPlacements.forEach((/**\r\n         * @param {?} placementToRemove\r\n         * @return {?}\r\n         */\r\n        (placementToRemove) => { classList.remove(`${baseClass}-${placementToRemove}`); }));\r\n    }\r\n    // replace auto placement with other placements\r\n    /** @type {?} */\r\n    let hasAuto = placementVals.findIndex((/**\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    val => val === 'auto'));\r\n    if (hasAuto >= 0) {\r\n        allowedPlacements.forEach((/**\r\n         * @param {?} obj\r\n         * @return {?}\r\n         */\r\n        function (obj) {\r\n            if (placementVals.find((/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            val => val.search('^' + obj) !== -1)) == null) {\r\n                placementVals.splice(hasAuto++, 1, (/** @type {?} */ (obj)));\r\n            }\r\n        }));\r\n    }\r\n    // coordinates where to position\r\n    // Required for transform:\r\n    /** @type {?} */\r\n    const style = targetElement.style;\r\n    style.position = 'absolute';\r\n    style.top = '0';\r\n    style.left = '0';\r\n    style['will-change'] = 'transform';\r\n    /** @type {?} */\r\n    let testPlacement;\r\n    /** @type {?} */\r\n    let isInViewport = false;\r\n    for (testPlacement of placementVals) {\r\n        /** @type {?} */\r\n        let addedClasses = addClassesToTarget(testPlacement);\r\n        if (positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody)) {\r\n            isInViewport = true;\r\n            break;\r\n        }\r\n        // Remove the baseClasses for further calculation\r\n        if (baseClass) {\r\n            addedClasses.forEach((/**\r\n             * @param {?} classname\r\n             * @return {?}\r\n             */\r\n            (classname) => { classList.remove(classname); }));\r\n        }\r\n    }\r\n    if (!isInViewport) {\r\n        // If nothing match, the first placement is the default one\r\n        testPlacement = placementVals[0];\r\n        addClassesToTarget(testPlacement);\r\n        positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody);\r\n    }\r\n    return testPlacement;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction NGB_DATEPICKER_PARSER_FORMATTER_FACTORY() {\r\n    return new NgbDateISOParserFormatter();\r\n}\r\n/**\r\n * An abstract service for parsing and formatting dates for the\r\n * [`NgbInputDatepicker`](#/components/datepicker/api#NgbInputDatepicker) directive.\r\n * Converts between the internal `NgbDateStruct` model presentation and a `string` that is displayed in the\r\n * input element.\r\n *\r\n * When user types something in the input this service attempts to parse it into a `NgbDateStruct` object.\r\n * And vice versa, when users selects a date in the calendar with the mouse, it must be displayed as a `string`\r\n * in the input.\r\n *\r\n * Default implementation uses the ISO 8601 format, but you can provide another implementation via DI\r\n * to use an alternative string format or a custom parsing logic.\r\n *\r\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details.\r\n * @abstract\r\n */\r\nclass NgbDateParserFormatter {\r\n}\r\nNgbDateParserFormatter.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY },] }\r\n];\r\n/** @nocollapse */ NgbDateParserFormatter.ngInjectableDef = ɵɵdefineInjectable({ factory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY, token: NgbDateParserFormatter, providedIn: \"root\" });\r\nclass NgbDateISOParserFormatter extends NgbDateParserFormatter {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    parse(value) {\r\n        if (value) {\r\n            /** @type {?} */\r\n            const dateParts = value.trim().split('-');\r\n            if (dateParts.length === 1 && isNumber(dateParts[0])) {\r\n                return { year: toInteger(dateParts[0]), month: null, day: null };\r\n            }\r\n            else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\r\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null };\r\n            }\r\n            else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\r\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2]) };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    format(date) {\r\n        return date ?\r\n            `${date.year}-${isNumber(date.month) ? padNumber(date.month) : ''}-${isNumber(date.day) ? padNumber(date.day) : ''}` :\r\n            '';\r\n    }\r\n}\r\nNgbDateISOParserFormatter.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbDatepickerInput`](#/components/datepicker/api#NgbDatepicker) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the datepicker inputs used in the application.\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbInputDatepickerConfig extends NgbDatepickerConfig {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.autoClose = true;\r\n        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\r\n        this.restoreFocus = true;\r\n    }\r\n}\r\nNgbInputDatepickerConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbInputDatepickerConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbInputDatepickerConfig_Factory() { return new NgbInputDatepickerConfig(); }, token: NgbInputDatepickerConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_DATEPICKER_VALUE_ACCESSOR$1 = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbInputDatepicker)),\r\n    multi: true\r\n};\r\n/** @type {?} */\r\nconst NGB_DATEPICKER_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbInputDatepicker)),\r\n    multi: true\r\n};\r\n/**\r\n * A directive that allows to stick a datepicker popup to an input field.\r\n *\r\n * Manages interaction with the input field itself, does value formatting and provides forms integration.\r\n */\r\nclass NgbInputDatepicker {\r\n    /**\r\n     * @param {?} _parserFormatter\r\n     * @param {?} _elRef\r\n     * @param {?} _vcRef\r\n     * @param {?} _renderer\r\n     * @param {?} _cfr\r\n     * @param {?} _ngZone\r\n     * @param {?} _calendar\r\n     * @param {?} _dateAdapter\r\n     * @param {?} _document\r\n     * @param {?} _changeDetector\r\n     * @param {?} config\r\n     */\r\n    constructor(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, _ngZone, _calendar, _dateAdapter, _document, _changeDetector, config) {\r\n        this._parserFormatter = _parserFormatter;\r\n        this._elRef = _elRef;\r\n        this._vcRef = _vcRef;\r\n        this._renderer = _renderer;\r\n        this._cfr = _cfr;\r\n        this._ngZone = _ngZone;\r\n        this._calendar = _calendar;\r\n        this._dateAdapter = _dateAdapter;\r\n        this._document = _document;\r\n        this._changeDetector = _changeDetector;\r\n        this._cRef = null;\r\n        this._disabled = false;\r\n        this._elWithFocus = null;\r\n        /**\r\n         * An event emitted when user selects a date using keyboard or mouse.\r\n         *\r\n         * The payload of the event is currently selected `NgbDate`.\r\n         *\r\n         * \\@since 1.1.1\r\n         */\r\n        this.dateSelect = new EventEmitter();\r\n        /**\r\n         * Event emitted right after the navigation happens and displayed month changes.\r\n         *\r\n         * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\r\n         */\r\n        this.navigate = new EventEmitter();\r\n        /**\r\n         * An event fired after closing datepicker window.\r\n         *\r\n         * \\@since 4.2.0\r\n         */\r\n        this.closed = new EventEmitter();\r\n        this._onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._validatorChange = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        ['autoClose', 'container', 'positionTarget', 'placement'].forEach((/**\r\n         * @param {?} input\r\n         * @return {?}\r\n         */\r\n        input => this[input] = config[input]));\r\n        this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this._updatePopupPosition()));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = value === '' || (value && value !== 'false');\r\n        if (this.isOpen()) {\r\n            this._cRef.instance.setDisabledState(this._disabled);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this._onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this._onTouched = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnValidatorChange(fn) { this._validatorChange = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) { this.disabled = isDisabled; }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) {\r\n        /** @type {?} */\r\n        const value = c.value;\r\n        if (value === null || value === undefined) {\r\n            return null;\r\n        }\r\n        /** @type {?} */\r\n        const ngbDate = this._fromDateStruct(this._dateAdapter.fromModel(value));\r\n        if (!this._calendar.isValid(ngbDate)) {\r\n            return { 'ngbDate': { invalid: c.value } };\r\n        }\r\n        if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {\r\n            return { 'ngbDate': { requiredBefore: this.minDate } };\r\n        }\r\n        if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {\r\n            return { 'ngbDate': { requiredAfter: this.maxDate } };\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._model = this._fromDateStruct(this._dateAdapter.fromModel(value));\r\n        this._writeModelValue(this._model);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} updateView\r\n     * @return {?}\r\n     */\r\n    manualDateChange(value, updateView = false) {\r\n        /** @type {?} */\r\n        const inputValueChanged = value !== this._inputValue;\r\n        if (inputValueChanged) {\r\n            this._inputValue = value;\r\n            this._model = this._fromDateStruct(this._parserFormatter.parse(value));\r\n        }\r\n        if (inputValueChanged || !updateView) {\r\n            this._onChange(this._model ? this._dateAdapter.toModel(this._model) : (value === '' ? null : value));\r\n        }\r\n        if (updateView && this._model) {\r\n            this._writeModelValue(this._model);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isOpen() { return !!this._cRef; }\r\n    /**\r\n     * Opens the datepicker popup.\r\n     *\r\n     * If the related form control contains a valid date, the corresponding month will be opened.\r\n     * @return {?}\r\n     */\r\n    open() {\r\n        if (!this.isOpen()) {\r\n            /** @type {?} */\r\n            const cf = this._cfr.resolveComponentFactory(NgbDatepicker);\r\n            this._cRef = this._vcRef.createComponent(cf);\r\n            this._applyPopupStyling(this._cRef.location.nativeElement);\r\n            this._applyDatepickerInputs(this._cRef.instance);\r\n            this._subscribeForDatepickerOutputs(this._cRef.instance);\r\n            this._cRef.instance.ngOnInit();\r\n            this._cRef.instance.writeValue(this._dateAdapter.toModel(this._model));\r\n            // date selection event handling\r\n            this._cRef.instance.registerOnChange((/**\r\n             * @param {?} selectedDate\r\n             * @return {?}\r\n             */\r\n            (selectedDate) => {\r\n                this.writeValue(selectedDate);\r\n                this._onChange(selectedDate);\r\n                this._onTouched();\r\n            }));\r\n            this._cRef.changeDetectorRef.detectChanges();\r\n            this._cRef.instance.setDisabledState(this.disabled);\r\n            if (this.container === 'body') {\r\n                window.document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);\r\n            }\r\n            // focus handling\r\n            this._elWithFocus = this._document.activeElement;\r\n            ngbFocusTrap(this._ngZone, this._cRef.location.nativeElement, this.closed, true);\r\n            this._cRef.instance.focus();\r\n            ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n             * @return {?}\r\n             */\r\n            () => this.close()), this.closed, [], [this._elRef.nativeElement, this._cRef.location.nativeElement]);\r\n        }\r\n    }\r\n    /**\r\n     * Closes the datepicker popup.\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (this.isOpen()) {\r\n            this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\r\n            this._cRef = null;\r\n            this.closed.emit();\r\n            this._changeDetector.markForCheck();\r\n            // restore focus\r\n            /** @type {?} */\r\n            let elementToFocus = this._elWithFocus;\r\n            if (isString(this.restoreFocus)) {\r\n                elementToFocus = this._document.querySelector(this.restoreFocus);\r\n            }\r\n            else if (this.restoreFocus !== undefined) {\r\n                elementToFocus = this.restoreFocus;\r\n            }\r\n            // in IE document.activeElement can contain an object without 'focus()' sometimes\r\n            if (elementToFocus && elementToFocus['focus']) {\r\n                elementToFocus.focus();\r\n            }\r\n            else {\r\n                this._document.body.focus();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Toggles the datepicker popup.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        if (this.isOpen()) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    }\r\n    /**\r\n     * Navigates to the provided date.\r\n     *\r\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n     * If nothing or invalid date provided calendar will open current month.\r\n     *\r\n     * Use the `[startDate]` input as an alternative.\r\n     * @param {?=} date\r\n     * @return {?}\r\n     */\r\n    navigateTo(date) {\r\n        if (this.isOpen()) {\r\n            this._cRef.instance.navigateTo(date);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onBlur() { this._onTouched(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onFocus() { this._elWithFocus = this._elRef.nativeElement; }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes['minDate'] || changes['maxDate']) {\r\n            this._validatorChange();\r\n            if (this.isOpen()) {\r\n                if (changes['minDate']) {\r\n                    this._cRef.instance.minDate = this.minDate;\r\n                }\r\n                if (changes['maxDate']) {\r\n                    this._cRef.instance.maxDate = this.maxDate;\r\n                }\r\n                this._cRef.instance.ngOnChanges(changes);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.close();\r\n        this._zoneSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} datepickerInstance\r\n     * @return {?}\r\n     */\r\n    _applyDatepickerInputs(datepickerInstance) {\r\n        ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\r\n            'maxDate', 'navigation', 'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\r\n            .forEach((/**\r\n         * @param {?} optionName\r\n         * @return {?}\r\n         */\r\n        (optionName) => {\r\n            if (this[optionName] !== undefined) {\r\n                datepickerInstance[optionName] = this[optionName];\r\n            }\r\n        }));\r\n        datepickerInstance.startDate = this.startDate || this._model;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} nativeElement\r\n     * @return {?}\r\n     */\r\n    _applyPopupStyling(nativeElement) {\r\n        this._renderer.addClass(nativeElement, 'dropdown-menu');\r\n        this._renderer.addClass(nativeElement, 'show');\r\n        if (this.container === 'body') {\r\n            this._renderer.addClass(nativeElement, 'ngb-dp-body');\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} datepickerInstance\r\n     * @return {?}\r\n     */\r\n    _subscribeForDatepickerOutputs(datepickerInstance) {\r\n        datepickerInstance.navigate.subscribe((/**\r\n         * @param {?} navigateEvent\r\n         * @return {?}\r\n         */\r\n        navigateEvent => this.navigate.emit(navigateEvent)));\r\n        datepickerInstance.dateSelect.subscribe((/**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        date => {\r\n            this.dateSelect.emit(date);\r\n            if (this.autoClose === true || this.autoClose === 'inside') {\r\n                this.close();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} model\r\n     * @return {?}\r\n     */\r\n    _writeModelValue(model) {\r\n        /** @type {?} */\r\n        const value = this._parserFormatter.format(model);\r\n        this._inputValue = value;\r\n        this._renderer.setProperty(this._elRef.nativeElement, 'value', value);\r\n        if (this.isOpen()) {\r\n            this._cRef.instance.writeValue(this._dateAdapter.toModel(model));\r\n            this._onTouched();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    _fromDateStruct(date) {\r\n        /** @type {?} */\r\n        const ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;\r\n        return this._calendar.isValid(ngbDate) ? ngbDate : null;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updatePopupPosition() {\r\n        if (!this._cRef) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        let hostElement;\r\n        if (isString(this.positionTarget)) {\r\n            hostElement = this._document.querySelector(this.positionTarget);\r\n        }\r\n        else if (this.positionTarget instanceof HTMLElement) {\r\n            hostElement = this.positionTarget;\r\n        }\r\n        else {\r\n            hostElement = this._elRef.nativeElement;\r\n        }\r\n        if (this.positionTarget && !hostElement) {\r\n            throw new Error('ngbDatepicker could not find element declared in [positionTarget] to position against.');\r\n        }\r\n        positionElements(hostElement, this._cRef.location.nativeElement, this.placement, this.container === 'body');\r\n    }\r\n}\r\nNgbInputDatepicker.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input[ngbDatepicker]',\r\n                exportAs: 'ngbDatepicker',\r\n                host: {\r\n                    '(input)': 'manualDateChange($event.target.value)',\r\n                    '(change)': 'manualDateChange($event.target.value, true)',\r\n                    '(focus)': 'onFocus()',\r\n                    '(blur)': 'onBlur()',\r\n                    '[disabled]': 'disabled'\r\n                },\r\n                providers: [\r\n                    NGB_DATEPICKER_VALUE_ACCESSOR$1, NGB_DATEPICKER_VALIDATOR,\r\n                    { provide: NgbDatepickerConfig, useExisting: NgbInputDatepickerConfig }\r\n                ],\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbInputDatepicker.ctorParameters = () => [\r\n    { type: NgbDateParserFormatter },\r\n    { type: ElementRef },\r\n    { type: ViewContainerRef },\r\n    { type: Renderer2 },\r\n    { type: ComponentFactoryResolver },\r\n    { type: NgZone },\r\n    { type: NgbCalendar },\r\n    { type: NgbDateAdapter },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgbInputDatepickerConfig }\r\n];\r\nNgbInputDatepicker.propDecorators = {\r\n    autoClose: [{ type: Input }],\r\n    dayTemplate: [{ type: Input }],\r\n    dayTemplateData: [{ type: Input }],\r\n    displayMonths: [{ type: Input }],\r\n    firstDayOfWeek: [{ type: Input }],\r\n    footerTemplate: [{ type: Input }],\r\n    markDisabled: [{ type: Input }],\r\n    minDate: [{ type: Input }],\r\n    maxDate: [{ type: Input }],\r\n    navigation: [{ type: Input }],\r\n    outsideDays: [{ type: Input }],\r\n    placement: [{ type: Input }],\r\n    restoreFocus: [{ type: Input }],\r\n    showWeekdays: [{ type: Input }],\r\n    showWeekNumbers: [{ type: Input }],\r\n    startDate: [{ type: Input }],\r\n    container: [{ type: Input }],\r\n    positionTarget: [{ type: Input }],\r\n    dateSelect: [{ type: Output }],\r\n    navigate: [{ type: Output }],\r\n    closed: [{ type: Output }],\r\n    disabled: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbDatepickerDayView {\r\n    /**\r\n     * @param {?} i18n\r\n     */\r\n    constructor(i18n) {\r\n        this.i18n = i18n;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isMuted() { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); }\r\n}\r\nNgbDatepickerDayView.decorators = [\r\n    { type: Component, args: [{\r\n                selector: '[ngbDatepickerDayView]',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: {\r\n                    'class': 'btn-light',\r\n                    '[class.bg-primary]': 'selected',\r\n                    '[class.text-white]': 'selected',\r\n                    '[class.text-muted]': 'isMuted()',\r\n                    '[class.outside]': 'isMuted()',\r\n                    '[class.active]': 'focused'\r\n                },\r\n                template: `{{ i18n.getDayNumerals(date) }}`,\r\n                styles: [\"[ngbDatepickerDayView]{text-align:center;width:2rem;height:2rem;line-height:2rem;border-radius:.25rem;background:0 0}[ngbDatepickerDayView].outside{opacity:.5}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbDatepickerDayView.ctorParameters = () => [\r\n    { type: NgbDatepickerI18n }\r\n];\r\nNgbDatepickerDayView.propDecorators = {\r\n    currentMonth: [{ type: Input }],\r\n    date: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    focused: [{ type: Input }],\r\n    selected: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbDatepickerNavigationSelect {\r\n    /**\r\n     * @param {?} i18n\r\n     * @param {?} _renderer\r\n     */\r\n    constructor(i18n, _renderer) {\r\n        this.i18n = i18n;\r\n        this._renderer = _renderer;\r\n        this.select = new EventEmitter();\r\n        this._month = -1;\r\n        this._year = -1;\r\n    }\r\n    /**\r\n     * @param {?} month\r\n     * @return {?}\r\n     */\r\n    changeMonth(month) { this.select.emit(new NgbDate(this.date.year, toInteger(month), 1)); }\r\n    /**\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    changeYear(year) { this.select.emit(new NgbDate(toInteger(year), this.date.month, 1)); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewChecked() {\r\n        if (this.date) {\r\n            if (this.date.month !== this._month) {\r\n                this._month = this.date.month;\r\n                this._renderer.setProperty(this.monthSelect.nativeElement, 'value', this._month);\r\n            }\r\n            if (this.date.year !== this._year) {\r\n                this._year = this.date.year;\r\n                this._renderer.setProperty(this.yearSelect.nativeElement, 'value', this._year);\r\n            }\r\n        }\r\n    }\r\n}\r\nNgbDatepickerNavigationSelect.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-datepicker-navigation-select',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <select #month\r\n      [disabled]=\"disabled\"\r\n      class=\"custom-select\"\r\n      i18n-aria-label=\"@@ngb.datepicker.select-month\" aria-label=\"Select month\"\r\n      i18n-title=\"@@ngb.datepicker.select-month\" title=\"Select month\"\r\n      (change)=\"changeMonth($event.target.value)\">\r\n        <option *ngFor=\"let m of months\" [attr.aria-label]=\"i18n.getMonthFullName(m, date?.year)\"\r\n                [value]=\"m\">{{ i18n.getMonthShortName(m, date?.year) }}</option>\r\n    </select><select #year\r\n      [disabled]=\"disabled\"\r\n      class=\"custom-select\"\r\n      i18n-aria-label=\"@@ngb.datepicker.select-year\" aria-label=\"Select year\"\r\n      i18n-title=\"@@ngb.datepicker.select-year\" title=\"Select year\"\r\n      (change)=\"changeYear($event.target.value)\">\r\n        <option *ngFor=\"let y of years\" [value]=\"y\">{{ i18n.getYearNumerals(y) }}</option>\r\n    </select>\r\n  `,\r\n                styles: [\"ngb-datepicker-navigation-select>.custom-select{-ms-flex:1 1 auto;flex:1 1 auto;padding:0 .5rem;font-size:.875rem;height:1.85rem}ngb-datepicker-navigation-select>.custom-select:focus{z-index:1}ngb-datepicker-navigation-select>.custom-select::-ms-value{background-color:transparent!important}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbDatepickerNavigationSelect.ctorParameters = () => [\r\n    { type: NgbDatepickerI18n },\r\n    { type: Renderer2 }\r\n];\r\nNgbDatepickerNavigationSelect.propDecorators = {\r\n    date: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    months: [{ type: Input }],\r\n    years: [{ type: Input }],\r\n    select: [{ type: Output }],\r\n    monthSelect: [{ type: ViewChild, args: ['month', { static: true, read: ElementRef },] }],\r\n    yearSelect: [{ type: ViewChild, args: ['year', { static: true, read: ElementRef },] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass NgbCalendarHijri extends NgbCalendar {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDaysPerWeek() { return 7; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMonths() { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getWeeksPerMonth() { return 6; }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getNext(date, period = 'd', number = 1) {\r\n        date = new NgbDate(date.year, date.month, date.day);\r\n        switch (period) {\r\n            case 'y':\r\n                date = this._setYear(date, date.year + number);\r\n                date.month = 1;\r\n                date.day = 1;\r\n                return date;\r\n            case 'm':\r\n                date = this._setMonth(date, date.month + number);\r\n                date.day = 1;\r\n                return date;\r\n            case 'd':\r\n                return this._setDay(date, date.day + number);\r\n            default:\r\n                return date;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getPrev(date, period = 'd', number = 1) { return this.getNext(date, period, -number); }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getWeekday(date) {\r\n        /** @type {?} */\r\n        const day = this.toGregorian(date).getDay();\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        return day === 0 ? 7 : day;\r\n    }\r\n    /**\r\n     * @param {?} week\r\n     * @param {?} firstDayOfWeek\r\n     * @return {?}\r\n     */\r\n    getWeekNumber(week, firstDayOfWeek) {\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        if (firstDayOfWeek === 7) {\r\n            firstDayOfWeek = 0;\r\n        }\r\n        /** @type {?} */\r\n        const thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n        /** @type {?} */\r\n        const date = week[thursdayIndex];\r\n        /** @type {?} */\r\n        const jsDate = this.toGregorian(date);\r\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n        // Thursday\r\n        /** @type {?} */\r\n        const time = jsDate.getTime();\r\n        /** @type {?} */\r\n        const MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1));\r\n        return Math.floor(Math.round((time - MuhDate.getTime()) / 86400000) / 7) + 1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getToday() { return this.fromGregorian(new Date()); }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    isValid(date) {\r\n        return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\r\n            !isNaN(this.toGregorian(date).getTime());\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} date\r\n     * @param {?} day\r\n     * @return {?}\r\n     */\r\n    _setDay(date, day) {\r\n        day = +day;\r\n        /** @type {?} */\r\n        let mDays = this.getDaysPerMonth(date.month, date.year);\r\n        if (day <= 0) {\r\n            while (day <= 0) {\r\n                date = this._setMonth(date, date.month - 1);\r\n                mDays = this.getDaysPerMonth(date.month, date.year);\r\n                day += mDays;\r\n            }\r\n        }\r\n        else if (day > mDays) {\r\n            while (day > mDays) {\r\n                day -= mDays;\r\n                date = this._setMonth(date, date.month + 1);\r\n                mDays = this.getDaysPerMonth(date.month, date.year);\r\n            }\r\n        }\r\n        date.day = day;\r\n        return date;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} date\r\n     * @param {?} month\r\n     * @return {?}\r\n     */\r\n    _setMonth(date, month) {\r\n        month = +month;\r\n        date.year = date.year + Math.floor((month - 1) / 12);\r\n        date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\r\n        return date;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} date\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    _setYear(date, year) {\r\n        date.year = +year;\r\n        return date;\r\n    }\r\n}\r\nNgbCalendarHijri.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Checks if islamic year is a leap year\r\n * @param {?} hYear\r\n * @return {?}\r\n */\r\nfunction isIslamicLeapYear(hYear) {\r\n    return (14 + 11 * hYear) % 30 < 11;\r\n}\r\n/**\r\n * Checks if gregorian years is a leap year\r\n * @param {?} gDate\r\n * @return {?}\r\n */\r\nfunction isGregorianLeapYear(gDate) {\r\n    /** @type {?} */\r\n    const year = gDate.getFullYear();\r\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\r\n}\r\n/**\r\n * Returns the start of Hijri Month.\r\n * `hMonth` is 0 for Muharram, 1 for Safar, etc.\r\n * `hYear` is any Hijri hYear.\r\n * @param {?} hYear\r\n * @param {?} hMonth\r\n * @return {?}\r\n */\r\nfunction getIslamicMonthStart(hYear, hMonth) {\r\n    return Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30.0);\r\n}\r\n/**\r\n * Returns the start of Hijri year.\r\n * `year` is any Hijri year.\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction getIslamicYearStart(year) {\r\n    return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction mod(a, b) {\r\n    return a - b * Math.floor(a / b);\r\n}\r\n/**\r\n * The civil calendar is one type of Hijri calendars used in islamic countries.\r\n * Uses a fixed cycle of alternating 29- and 30-day months,\r\n * with a leap day added to the last month of 11 out of every 30 years.\r\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\r\n * All the calculations here are based on the equations from \"Calendrical Calculations\" By Edward M. Reingold, Nachum\r\n * Dershowitz.\r\n * @type {?}\r\n */\r\nconst GREGORIAN_EPOCH = 1721425.5;\r\n/** @type {?} */\r\nconst ISLAMIC_EPOCH = 1948439.5;\r\nclass NgbCalendarIslamicCivil extends NgbCalendarHijri {\r\n    /**\r\n     * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\r\n     * `gDate` is a JS Date to be converted to Hijri.\r\n     * @param {?} gDate\r\n     * @return {?}\r\n     */\r\n    fromGregorian(gDate) {\r\n        /** @type {?} */\r\n        const gYear = gDate.getFullYear();\r\n        /** @type {?} */\r\n        const gMonth = gDate.getMonth();\r\n        /** @type {?} */\r\n        const gDay = gDate.getDate();\r\n        /** @type {?} */\r\n        let julianDay = GREGORIAN_EPOCH - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) +\r\n            -Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\r\n            Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear(gDate) ? -1 : -2) + gDay);\r\n        julianDay = Math.floor(julianDay) + 0.5;\r\n        /** @type {?} */\r\n        const days = julianDay - ISLAMIC_EPOCH;\r\n        /** @type {?} */\r\n        const hYear = Math.floor((30 * days + 10646) / 10631.0);\r\n        /** @type {?} */\r\n        let hMonth = Math.ceil((days - 29 - getIslamicYearStart(hYear)) / 29.5);\r\n        hMonth = Math.min(hMonth, 11);\r\n        /** @type {?} */\r\n        const hDay = Math.ceil(days - getIslamicMonthStart(hYear, hMonth)) + 1;\r\n        return new NgbDate(hYear, hMonth + 1, hDay);\r\n    }\r\n    /**\r\n     * Returns the equivalent JS date value for a give input islamic(civil) date.\r\n     * `hDate` is an islamic(civil) date to be converted to Gregorian.\r\n     * @param {?} hDate\r\n     * @return {?}\r\n     */\r\n    toGregorian(hDate) {\r\n        /** @type {?} */\r\n        const hYear = hDate.year;\r\n        /** @type {?} */\r\n        const hMonth = hDate.month - 1;\r\n        /** @type {?} */\r\n        const hDay = hDate.day;\r\n        /** @type {?} */\r\n        const julianDay = hDay + Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30) + ISLAMIC_EPOCH - 1;\r\n        /** @type {?} */\r\n        const wjd = Math.floor(julianDay - 0.5) + 0.5;\r\n        /** @type {?} */\r\n        const depoch = wjd - GREGORIAN_EPOCH;\r\n        /** @type {?} */\r\n        const quadricent = Math.floor(depoch / 146097);\r\n        /** @type {?} */\r\n        const dqc = mod(depoch, 146097);\r\n        /** @type {?} */\r\n        const cent = Math.floor(dqc / 36524);\r\n        /** @type {?} */\r\n        const dcent = mod(dqc, 36524);\r\n        /** @type {?} */\r\n        const quad = Math.floor(dcent / 1461);\r\n        /** @type {?} */\r\n        const dquad = mod(dcent, 1461);\r\n        /** @type {?} */\r\n        const yindex = Math.floor(dquad / 365);\r\n        /** @type {?} */\r\n        let year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\r\n        if (!(cent === 4 || yindex === 4)) {\r\n            year++;\r\n        }\r\n        /** @type {?} */\r\n        const gYearStart = GREGORIAN_EPOCH + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n            Math.floor((year - 1) / 400);\r\n        /** @type {?} */\r\n        const yearday = wjd - gYearStart;\r\n        /** @type {?} */\r\n        const tjd = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n            Math.floor((year - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(new Date(year, 3, 1)) ? -1 : -2) + 1);\r\n        /** @type {?} */\r\n        const leapadj = wjd < tjd ? 0 : isGregorianLeapYear(new Date(year, 3, 1)) ? 1 : 2;\r\n        /** @type {?} */\r\n        const month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\r\n        /** @type {?} */\r\n        const tjd2 = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n            Math.floor((year - 1) / 400) +\r\n            Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : isGregorianLeapYear(new Date(year, month - 1, 1)) ? -1 : -2) +\r\n                1);\r\n        /** @type {?} */\r\n        const day = wjd - tjd2 + 1;\r\n        return new Date(year, month - 1, day);\r\n    }\r\n    /**\r\n     * Returns the number of days in a specific Hijri month.\r\n     * `month` is 1 for Muharram, 2 for Safar, etc.\r\n     * `year` is any Hijri year.\r\n     * @param {?} month\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    getDaysPerMonth(month, year) {\r\n        year = year + Math.floor(month / 13);\r\n        month = ((month - 1) % 12) + 1;\r\n        /** @type {?} */\r\n        let length = 29 + month % 2;\r\n        if (month === 12 && isIslamicLeapYear(year)) {\r\n            length++;\r\n        }\r\n        return length;\r\n    }\r\n}\r\nNgbCalendarIslamicCivil.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Umalqura calendar is one type of Hijri calendars used in islamic countries.\r\n * This Calendar is used by Saudi Arabia for administrative purpose.\r\n * Unlike tabular calendars, the algorithm involves astronomical calculation, but it's still deterministic.\r\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\r\n * @type {?}\r\n */\r\nconst GREGORIAN_FIRST_DATE = new Date(1882, 10, 12);\r\n/** @type {?} */\r\nconst GREGORIAN_LAST_DATE = new Date(2174, 10, 25);\r\n/** @type {?} */\r\nconst HIJRI_BEGIN = 1300;\r\n/** @type {?} */\r\nconst HIJRI_END = 1600;\r\n/** @type {?} */\r\nconst ONE_DAY = 1000 * 60 * 60 * 24;\r\n/** @type {?} */\r\nconst MONTH_LENGTH = [\r\n    // 1300-1304\r\n    '101010101010', '110101010100', '111011001001', '011011010100', '011011101010',\r\n    // 1305-1309\r\n    '001101101100', '101010101101', '010101010101', '011010101001', '011110010010',\r\n    // 1310-1314\r\n    '101110101001', '010111010100', '101011011010', '010101011100', '110100101101',\r\n    // 1315-1319\r\n    '011010010101', '011101001010', '101101010100', '101101101010', '010110101101',\r\n    // 1320-1324\r\n    '010010101110', '101001001111', '010100010111', '011010001011', '011010100101',\r\n    // 1325-1329\r\n    '101011010101', '001011010110', '100101011011', '010010011101', '101001001101',\r\n    // 1330-1334\r\n    '110100100110', '110110010101', '010110101100', '100110110110', '001010111010',\r\n    // 1335-1339\r\n    '101001011011', '010100101011', '101010010101', '011011001010', '101011101001',\r\n    // 1340-1344\r\n    '001011110100', '100101110110', '001010110110', '100101010110', '101011001010',\r\n    // 1345-1349\r\n    '101110100100', '101111010010', '010111011001', '001011011100', '100101101101',\r\n    // 1350-1354\r\n    '010101001101', '101010100101', '101101010010', '101110100101', '010110110100',\r\n    // 1355-1359\r\n    '100110110110', '010101010111', '001010010111', '010101001011', '011010100011',\r\n    // 1360-1364\r\n    '011101010010', '101101100101', '010101101010', '101010101011', '010100101011',\r\n    // 1365-1369\r\n    '110010010101', '110101001010', '110110100101', '010111001010', '101011010110',\r\n    // 1370-1374\r\n    '100101010111', '010010101011', '100101001011', '101010100101', '101101010010',\r\n    // 1375-1379\r\n    '101101101010', '010101110101', '001001110110', '100010110111', '010001011011',\r\n    // 1380-1384\r\n    '010101010101', '010110101001', '010110110100', '100111011010', '010011011101',\r\n    // 1385-1389\r\n    '001001101110', '100100110110', '101010101010', '110101010100', '110110110010',\r\n    // 1390-1394\r\n    '010111010101', '001011011010', '100101011011', '010010101011', '101001010101',\r\n    // 1395-1399\r\n    '101101001001', '101101100100', '101101110001', '010110110100', '101010110101',\r\n    // 1400-1404\r\n    '101001010101', '110100100101', '111010010010', '111011001001', '011011010100',\r\n    // 1405-1409\r\n    '101011101001', '100101101011', '010010101011', '101010010011', '110101001001',\r\n    // 1410-1414\r\n    '110110100100', '110110110010', '101010111001', '010010111010', '101001011011',\r\n    // 1415-1419\r\n    '010100101011', '101010010101', '101100101010', '101101010101', '010101011100',\r\n    // 1420-1424\r\n    '010010111101', '001000111101', '100100011101', '101010010101', '101101001010',\r\n    // 1425-1429\r\n    '101101011010', '010101101101', '001010110110', '100100111011', '010010011011',\r\n    // 1430-1434\r\n    '011001010101', '011010101001', '011101010100', '101101101010', '010101101100',\r\n    // 1435-1439\r\n    '101010101101', '010101010101', '101100101001', '101110010010', '101110101001',\r\n    // 1440-1444\r\n    '010111010100', '101011011010', '010101011010', '101010101011', '010110010101',\r\n    // 1445-1449\r\n    '011101001001', '011101100100', '101110101010', '010110110101', '001010110110',\r\n    // 1450-1454\r\n    '101001010110', '111001001101', '101100100101', '101101010010', '101101101010',\r\n    // 1455-1459\r\n    '010110101101', '001010101110', '100100101111', '010010010111', '011001001011',\r\n    // 1460-1464\r\n    '011010100101', '011010101100', '101011010110', '010101011101', '010010011101',\r\n    // 1465-1469\r\n    '101001001101', '110100010110', '110110010101', '010110101010', '010110110101',\r\n    // 1470-1474\r\n    '001011011010', '100101011011', '010010101101', '010110010101', '011011001010',\r\n    // 1475-1479\r\n    '011011100100', '101011101010', '010011110101', '001010110110', '100101010110',\r\n    // 1480-1484\r\n    '101010101010', '101101010100', '101111010010', '010111011001', '001011101010',\r\n    // 1485-1489\r\n    '100101101101', '010010101101', '101010010101', '101101001010', '101110100101',\r\n    // 1490-1494\r\n    '010110110010', '100110110101', '010011010110', '101010010111', '010101000111',\r\n    // 1495-1499\r\n    '011010010011', '011101001001', '101101010101', '010101101010', '101001101011',\r\n    // 1500-1504\r\n    '010100101011', '101010001011', '110101000110', '110110100011', '010111001010',\r\n    // 1505-1509\r\n    '101011010110', '010011011011', '001001101011', '100101001011', '101010100101',\r\n    // 1510-1514\r\n    '101101010010', '101101101001', '010101110101', '000101110110', '100010110111',\r\n    // 1515-1519\r\n    '001001011011', '010100101011', '010101100101', '010110110100', '100111011010',\r\n    // 1520-1524\r\n    '010011101101', '000101101101', '100010110110', '101010100110', '110101010010',\r\n    // 1525-1529\r\n    '110110101001', '010111010100', '101011011010', '100101011011', '010010101011',\r\n    // 1530-1534\r\n    '011001010011', '011100101001', '011101100010', '101110101001', '010110110010',\r\n    // 1535-1539\r\n    '101010110101', '010101010101', '101100100101', '110110010010', '111011001001',\r\n    // 1540-1544\r\n    '011011010010', '101011101001', '010101101011', '010010101011', '101001010101',\r\n    // 1545-1549\r\n    '110100101001', '110101010100', '110110101010', '100110110101', '010010111010',\r\n    // 1550-1554\r\n    '101000111011', '010010011011', '101001001101', '101010101010', '101011010101',\r\n    // 1555-1559\r\n    '001011011010', '100101011101', '010001011110', '101000101110', '110010011010',\r\n    // 1560-1564\r\n    '110101010101', '011010110010', '011010111001', '010010111010', '101001011101',\r\n    // 1565-1569\r\n    '010100101101', '101010010101', '101101010010', '101110101000', '101110110100',\r\n    // 1570-1574\r\n    '010110111001', '001011011010', '100101011010', '101101001010', '110110100100',\r\n    // 1575-1579\r\n    '111011010001', '011011101000', '101101101010', '010101101101', '010100110101',\r\n    // 1580-1584\r\n    '011010010101', '110101001010', '110110101000', '110111010100', '011011011010',\r\n    // 1585-1589\r\n    '010101011011', '001010011101', '011000101011', '101100010101', '101101001010',\r\n    // 1590-1594\r\n    '101110010101', '010110101010', '101010101110', '100100101110', '110010001111',\r\n    // 1595-1599\r\n    '010100100111', '011010010101', '011010101010', '101011010110', '010101011101',\r\n    // 1600\r\n    '001010011101'\r\n];\r\n/**\r\n * @param {?} date1\r\n * @param {?} date2\r\n * @return {?}\r\n */\r\nfunction getDaysDiff(date1, date2) {\r\n    // Ignores the time part in date1 and date2:\r\n    /** @type {?} */\r\n    const time1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());\r\n    /** @type {?} */\r\n    const time2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());\r\n    /** @type {?} */\r\n    const diff = Math.abs(time1 - time2);\r\n    return Math.round(diff / ONE_DAY);\r\n}\r\nclass NgbCalendarIslamicUmalqura extends NgbCalendarIslamicCivil {\r\n    /**\r\n     * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\r\n     * `gdate` is s JS Date to be converted to Hijri.\r\n     * @param {?} gDate\r\n     * @return {?}\r\n     */\r\n    fromGregorian(gDate) {\r\n        /** @type {?} */\r\n        let hDay = 1;\r\n        /** @type {?} */\r\n        let hMonth = 0;\r\n        /** @type {?} */\r\n        let hYear = 1300;\r\n        /** @type {?} */\r\n        let daysDiff = getDaysDiff(gDate, GREGORIAN_FIRST_DATE);\r\n        if (gDate.getTime() - GREGORIAN_FIRST_DATE.getTime() >= 0 && gDate.getTime() - GREGORIAN_LAST_DATE.getTime() <= 0) {\r\n            /** @type {?} */\r\n            let year = 1300;\r\n            for (let i = 0; i < MONTH_LENGTH.length; i++, year++) {\r\n                for (let j = 0; j < 12; j++) {\r\n                    /** @type {?} */\r\n                    let numOfDays = +MONTH_LENGTH[i][j] + 29;\r\n                    if (daysDiff <= numOfDays) {\r\n                        hDay = daysDiff + 1;\r\n                        if (hDay > numOfDays) {\r\n                            hDay = 1;\r\n                            j++;\r\n                        }\r\n                        if (j > 11) {\r\n                            j = 0;\r\n                            year++;\r\n                        }\r\n                        hMonth = j;\r\n                        hYear = year;\r\n                        return new NgbDate(hYear, hMonth + 1, hDay);\r\n                    }\r\n                    daysDiff = daysDiff - numOfDays;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return super.fromGregorian(gDate);\r\n        }\r\n    }\r\n    /**\r\n     * Converts the current Hijri date to Gregorian.\r\n     * @param {?} hDate\r\n     * @return {?}\r\n     */\r\n    toGregorian(hDate) {\r\n        /** @type {?} */\r\n        const hYear = hDate.year;\r\n        /** @type {?} */\r\n        const hMonth = hDate.month - 1;\r\n        /** @type {?} */\r\n        const hDay = hDate.day;\r\n        /** @type {?} */\r\n        let gDate = new Date(GREGORIAN_FIRST_DATE);\r\n        /** @type {?} */\r\n        let dayDiff = hDay - 1;\r\n        if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\r\n            for (let y = 0; y < hYear - HIJRI_BEGIN; y++) {\r\n                for (let m = 0; m < 12; m++) {\r\n                    dayDiff += +MONTH_LENGTH[y][m] + 29;\r\n                }\r\n            }\r\n            for (let m = 0; m < hMonth; m++) {\r\n                dayDiff += +MONTH_LENGTH[hYear - HIJRI_BEGIN][m] + 29;\r\n            }\r\n            gDate.setDate(GREGORIAN_FIRST_DATE.getDate() + dayDiff);\r\n        }\r\n        else {\r\n            gDate = super.toGregorian(hDate);\r\n        }\r\n        return gDate;\r\n    }\r\n    /**\r\n     * Returns the number of days in a specific Hijri hMonth.\r\n     * `hMonth` is 1 for Muharram, 2 for Safar, etc.\r\n     * `hYear` is any Hijri hYear.\r\n     * @param {?} hMonth\r\n     * @param {?} hYear\r\n     * @return {?}\r\n     */\r\n    getDaysPerMonth(hMonth, hYear) {\r\n        if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\r\n            /** @type {?} */\r\n            const pos = hYear - HIJRI_BEGIN;\r\n            return +MONTH_LENGTH[pos][hMonth - 1] + 29;\r\n        }\r\n        return super.getDaysPerMonth(hMonth, hYear);\r\n    }\r\n}\r\nNgbCalendarIslamicUmalqura.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Returns the equivalent JS date value for a give input Jalali date.\r\n * `jalaliDate` is an Jalali date to be converted to Gregorian.\r\n * @param {?} jalaliDate\r\n * @return {?}\r\n */\r\nfunction toGregorian(jalaliDate) {\r\n    /** @type {?} */\r\n    let jdn = jalaliToJulian(jalaliDate.year, jalaliDate.month, jalaliDate.day);\r\n    /** @type {?} */\r\n    let date = julianToGregorian(jdn);\r\n    date.setHours(6, 30, 3, 200);\r\n    return date;\r\n}\r\n/**\r\n * Returns the equivalent jalali date value for a give input Gregorian date.\r\n * `gdate` is a JS Date to be converted to jalali.\r\n * utc to local\r\n * @param {?} gdate\r\n * @return {?}\r\n */\r\nfunction fromGregorian(gdate) {\r\n    /** @type {?} */\r\n    let g2d = gregorianToJulian(gdate.getFullYear(), gdate.getMonth() + 1, gdate.getDate());\r\n    return julianToJalali(g2d);\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} yearValue\r\n * @return {?}\r\n */\r\nfunction setJalaliYear(date, yearValue) {\r\n    date.year = +yearValue;\r\n    return date;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} month\r\n * @return {?}\r\n */\r\nfunction setJalaliMonth(date, month) {\r\n    month = +month;\r\n    date.year = date.year + Math.floor((month - 1) / 12);\r\n    date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\r\n    return date;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} day\r\n * @return {?}\r\n */\r\nfunction setJalaliDay(date, day) {\r\n    /** @type {?} */\r\n    let mDays = getDaysPerMonth(date.month, date.year);\r\n    if (day <= 0) {\r\n        while (day <= 0) {\r\n            date = setJalaliMonth(date, date.month - 1);\r\n            mDays = getDaysPerMonth(date.month, date.year);\r\n            day += mDays;\r\n        }\r\n    }\r\n    else if (day > mDays) {\r\n        while (day > mDays) {\r\n            day -= mDays;\r\n            date = setJalaliMonth(date, date.month + 1);\r\n            mDays = getDaysPerMonth(date.month, date.year);\r\n        }\r\n    }\r\n    date.day = day;\r\n    return date;\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction mod$1(a, b) {\r\n    return a - b * Math.floor(a / b);\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction div(a, b) {\r\n    return Math.trunc(a / b);\r\n}\r\n/*\r\n This function determines if the Jalali (Persian) year is\r\n leap (366-day long) or is the common year (365 days), and\r\n finds the day in March (Gregorian calendar) of the first\r\n day of the Jalali year (jalaliYear).\r\n @param jalaliYear Jalali calendar year (-61 to 3177)\r\n @return\r\n leap: number of years since the last leap year (0 to 4)\r\n gYear: Gregorian year of the beginning of Jalali year\r\n march: the March day of Farvardin the 1st (1st day of jalaliYear)\r\n @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\r\n @see: http://www.fourmilab.ch/documents/calendar/\r\n */\r\n/**\r\n * @param {?} jalaliYear\r\n * @return {?}\r\n */\r\nfunction jalCal(jalaliYear) {\r\n    // Jalali years starting the 33-year rule.\r\n    /** @type {?} */\r\n    let breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];\r\n    /** @type {?} */\r\n    const breaksLength = breaks.length;\r\n    /** @type {?} */\r\n    const gYear = jalaliYear + 621;\r\n    /** @type {?} */\r\n    let leapJ = -14;\r\n    /** @type {?} */\r\n    let jp = breaks[0];\r\n    if (jalaliYear < jp || jalaliYear >= breaks[breaksLength - 1]) {\r\n        throw new Error('Invalid Jalali year ' + jalaliYear);\r\n    }\r\n    // Find the limiting years for the Jalali year jalaliYear.\r\n    /** @type {?} */\r\n    let jump;\r\n    for (let i = 1; i < breaksLength; i += 1) {\r\n        /** @type {?} */\r\n        const jm = breaks[i];\r\n        jump = jm - jp;\r\n        if (jalaliYear < jm) {\r\n            break;\r\n        }\r\n        leapJ = leapJ + div(jump, 33) * 8 + div(mod$1(jump, 33), 4);\r\n        jp = jm;\r\n    }\r\n    /** @type {?} */\r\n    let n = jalaliYear - jp;\r\n    // Find the number of leap years from AD 621 to the beginning\r\n    // of the current Jalali year in the Persian calendar.\r\n    leapJ = leapJ + div(n, 33) * 8 + div(mod$1(n, 33) + 3, 4);\r\n    if (mod$1(jump, 33) === 4 && jump - n === 4) {\r\n        leapJ += 1;\r\n    }\r\n    // And the same in the Gregorian calendar (until the year gYear).\r\n    /** @type {?} */\r\n    const leapG = div(gYear, 4) - div((div(gYear, 100) + 1) * 3, 4) - 150;\r\n    // Determine the Gregorian date of Farvardin the 1st.\r\n    /** @type {?} */\r\n    const march = 20 + leapJ - leapG;\r\n    // Find how many years have passed since the last leap year.\r\n    if (jump - n < 6) {\r\n        n = n - jump + div(jump + 4, 33) * 33;\r\n    }\r\n    /** @type {?} */\r\n    let leap = mod$1(mod$1(n + 1, 33) - 1, 4);\r\n    if (leap === -1) {\r\n        leap = 4;\r\n    }\r\n    return { leap: leap, gy: gYear, march: march };\r\n}\r\n/*\r\n Calculates Gregorian and Julian calendar dates from the Julian Day number\r\n (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\r\n calendars) to some millions years ahead of the present.\r\n @param jdn Julian Day number\r\n @return\r\n gYear: Calendar year (years BC numbered 0, -1, -2, ...)\r\n gMonth: Calendar month (1 to 12)\r\n gDay: Calendar day of the month M (1 to 28/29/30/31)\r\n */\r\n/**\r\n * @param {?} julianDayNumber\r\n * @return {?}\r\n */\r\nfunction julianToGregorian(julianDayNumber) {\r\n    /** @type {?} */\r\n    let j = 4 * julianDayNumber + 139361631;\r\n    j = j + div(div(4 * julianDayNumber + 183187720, 146097) * 3, 4) * 4 - 3908;\r\n    /** @type {?} */\r\n    const i = div(mod$1(j, 1461), 4) * 5 + 308;\r\n    /** @type {?} */\r\n    const gDay = div(mod$1(i, 153), 5) + 1;\r\n    /** @type {?} */\r\n    const gMonth = mod$1(div(i, 153), 12) + 1;\r\n    /** @type {?} */\r\n    const gYear = div(j, 1461) - 100100 + div(8 - gMonth, 6);\r\n    return new Date(gYear, gMonth - 1, gDay);\r\n}\r\n/*\r\n Converts a date of the Jalali calendar to the Julian Day number.\r\n @param jy Jalali year (1 to 3100)\r\n @param jm Jalali month (1 to 12)\r\n @param jd Jalali day (1 to 29/31)\r\n @return Julian Day number\r\n */\r\n/**\r\n * @param {?} gy\r\n * @param {?} gm\r\n * @param {?} gd\r\n * @return {?}\r\n */\r\nfunction gregorianToJulian(gy, gm, gd) {\r\n    /** @type {?} */\r\n    let d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod$1(gm + 9, 12) + 2, 5) + gd - 34840408;\r\n    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\r\n    return d;\r\n}\r\n/*\r\n Converts the Julian Day number to a date in the Jalali calendar.\r\n @param julianDayNumber Julian Day number\r\n @return\r\n jalaliYear: Jalali year (1 to 3100)\r\n jalaliMonth: Jalali month (1 to 12)\r\n jalaliDay: Jalali day (1 to 29/31)\r\n */\r\n/**\r\n * @param {?} julianDayNumber\r\n * @return {?}\r\n */\r\nfunction julianToJalali(julianDayNumber) {\r\n    /** @type {?} */\r\n    let gy = julianToGregorian(julianDayNumber).getFullYear() // Calculate Gregorian year (gy).\r\n    ;\r\n    /** @type {?} */\r\n    let jalaliYear = gy - 621;\r\n    /** @type {?} */\r\n    let r = jalCal(jalaliYear);\r\n    /** @type {?} */\r\n    let gregorianDay = gregorianToJulian(gy, 3, r.march);\r\n    /** @type {?} */\r\n    let jalaliDay;\r\n    /** @type {?} */\r\n    let jalaliMonth;\r\n    /** @type {?} */\r\n    let numberOfDays;\r\n    // Find number of days that passed since 1 Farvardin.\r\n    numberOfDays = julianDayNumber - gregorianDay;\r\n    if (numberOfDays >= 0) {\r\n        if (numberOfDays <= 185) {\r\n            // The first 6 months.\r\n            jalaliMonth = 1 + div(numberOfDays, 31);\r\n            jalaliDay = mod$1(numberOfDays, 31) + 1;\r\n            return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\r\n        }\r\n        else {\r\n            // The remaining months.\r\n            numberOfDays -= 186;\r\n        }\r\n    }\r\n    else {\r\n        // Previous Jalali year.\r\n        jalaliYear -= 1;\r\n        numberOfDays += 179;\r\n        if (r.leap === 1) {\r\n            numberOfDays += 1;\r\n        }\r\n    }\r\n    jalaliMonth = 7 + div(numberOfDays, 30);\r\n    jalaliDay = mod$1(numberOfDays, 30) + 1;\r\n    return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\r\n}\r\n/*\r\n Converts a date of the Jalali calendar to the Julian Day number.\r\n @param jYear Jalali year (1 to 3100)\r\n @param jMonth Jalali month (1 to 12)\r\n @param jDay Jalali day (1 to 29/31)\r\n @return Julian Day number\r\n */\r\n/**\r\n * @param {?} jYear\r\n * @param {?} jMonth\r\n * @param {?} jDay\r\n * @return {?}\r\n */\r\nfunction jalaliToJulian(jYear, jMonth, jDay) {\r\n    /** @type {?} */\r\n    let r = jalCal(jYear);\r\n    return gregorianToJulian(r.gy, 3, r.march) + (jMonth - 1) * 31 - div(jMonth, 7) * (jMonth - 7) + jDay - 1;\r\n}\r\n/**\r\n * Returns the number of days in a specific jalali month.\r\n * @param {?} month\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction getDaysPerMonth(month, year) {\r\n    if (month <= 6) {\r\n        return 31;\r\n    }\r\n    if (month <= 11) {\r\n        return 30;\r\n    }\r\n    if (jalCal(year).leap === 0) {\r\n        return 30;\r\n    }\r\n    return 29;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbCalendarPersian extends NgbCalendar {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDaysPerWeek() { return 7; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMonths() { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getWeeksPerMonth() { return 6; }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getNext(date, period = 'd', number = 1) {\r\n        date = new NgbDate(date.year, date.month, date.day);\r\n        switch (period) {\r\n            case 'y':\r\n                date = setJalaliYear(date, date.year + number);\r\n                date.month = 1;\r\n                date.day = 1;\r\n                return date;\r\n            case 'm':\r\n                date = setJalaliMonth(date, date.month + number);\r\n                date.day = 1;\r\n                return date;\r\n            case 'd':\r\n                return setJalaliDay(date, date.day + number);\r\n            default:\r\n                return date;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getPrev(date, period = 'd', number = 1) { return this.getNext(date, period, -number); }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getWeekday(date) {\r\n        /** @type {?} */\r\n        const day = toGregorian(date).getDay();\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        return day === 0 ? 7 : day;\r\n    }\r\n    /**\r\n     * @param {?} week\r\n     * @param {?} firstDayOfWeek\r\n     * @return {?}\r\n     */\r\n    getWeekNumber(week, firstDayOfWeek) {\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        if (firstDayOfWeek === 7) {\r\n            firstDayOfWeek = 0;\r\n        }\r\n        /** @type {?} */\r\n        const thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n        /** @type {?} */\r\n        const date = week[thursdayIndex];\r\n        /** @type {?} */\r\n        const jsDate = toGregorian(date);\r\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n        // Thursday\r\n        /** @type {?} */\r\n        const time = jsDate.getTime();\r\n        /** @type {?} */\r\n        const startDate = toGregorian(new NgbDate(date.year, 1, 1));\r\n        return Math.floor(Math.round((time - startDate.getTime()) / 86400000) / 7) + 1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getToday() { return fromGregorian(new Date()); }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    isValid(date) {\r\n        return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) &&\r\n            !isNaN(toGregorian(date).getTime());\r\n    }\r\n}\r\nNgbCalendarPersian.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst PARTS_PER_HOUR = 1080;\r\n/** @type {?} */\r\nconst PARTS_PER_DAY = 24 * PARTS_PER_HOUR;\r\n/** @type {?} */\r\nconst PARTS_FRACTIONAL_MONTH = 12 * PARTS_PER_HOUR + 793;\r\n/** @type {?} */\r\nconst PARTS_PER_MONTH = 29 * PARTS_PER_DAY + PARTS_FRACTIONAL_MONTH;\r\n/** @type {?} */\r\nconst BAHARAD = 11 * PARTS_PER_HOUR + 204;\r\n/** @type {?} */\r\nconst HEBREW_DAY_ON_JAN_1_1970 = 2092591;\r\n/** @type {?} */\r\nconst GREGORIAN_EPOCH$1 = 1721425.5;\r\n/**\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction isGregorianLeapYear$1(year) {\r\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\r\n}\r\n/**\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction numberOfFirstDayInYear(year) {\r\n    /** @type {?} */\r\n    let monthsBeforeYear = Math.floor((235 * year - 234) / 19);\r\n    /** @type {?} */\r\n    let fractionalMonthsBeforeYear = monthsBeforeYear * PARTS_FRACTIONAL_MONTH + BAHARAD;\r\n    /** @type {?} */\r\n    let dayNumber = monthsBeforeYear * 29 + Math.floor(fractionalMonthsBeforeYear / PARTS_PER_DAY);\r\n    /** @type {?} */\r\n    let timeOfDay = fractionalMonthsBeforeYear % PARTS_PER_DAY;\r\n    /** @type {?} */\r\n    let dayOfWeek = dayNumber % 7;\r\n    if (dayOfWeek === 2 || dayOfWeek === 4 || dayOfWeek === 6) {\r\n        dayNumber++;\r\n        dayOfWeek = dayNumber % 7;\r\n    }\r\n    if (dayOfWeek === 1 && timeOfDay > 15 * PARTS_PER_HOUR + 204 && !isHebrewLeapYear(year)) {\r\n        dayNumber += 2;\r\n    }\r\n    else if (dayOfWeek === 0 && timeOfDay > 21 * PARTS_PER_HOUR + 589 && isHebrewLeapYear(year - 1)) {\r\n        dayNumber++;\r\n    }\r\n    return dayNumber;\r\n}\r\n/**\r\n * @param {?} month\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction getDaysInGregorianMonth(month, year) {\r\n    /** @type {?} */\r\n    let days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n    if (isGregorianLeapYear$1(year)) {\r\n        days[1]++;\r\n    }\r\n    return days[month - 1];\r\n}\r\n/**\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction getHebrewMonths(year) {\r\n    return isHebrewLeapYear(year) ? 13 : 12;\r\n}\r\n/**\r\n * Returns the number of days in a specific Hebrew year.\r\n * `year` is any Hebrew year.\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction getDaysInHebrewYear(year) {\r\n    return numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\r\n}\r\n/**\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction isHebrewLeapYear(year) {\r\n    /** @type {?} */\r\n    let b = (year * 12 + 17) % 19;\r\n    return b >= ((b < 0) ? -7 : 12);\r\n}\r\n/**\r\n * Returns the number of days in a specific Hebrew month.\r\n * `month` is 1 for Nisan, 2 for Iyar etc. Note: Hebrew leap year contains 13 months.\r\n * `year` is any Hebrew year.\r\n * @param {?} month\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction getDaysInHebrewMonth(month, year) {\r\n    /** @type {?} */\r\n    let yearLength = numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\r\n    /** @type {?} */\r\n    let yearType = (yearLength <= 380 ? yearLength : (yearLength - 30)) - 353;\r\n    /** @type {?} */\r\n    let leapYear = isHebrewLeapYear(year);\r\n    /** @type {?} */\r\n    let daysInMonth = leapYear ? [30, 29, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29] :\r\n        [30, 29, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29];\r\n    if (yearType > 0) {\r\n        daysInMonth[2]++; // Kislev gets an extra day in normal or complete years.\r\n    }\r\n    if (yearType > 1) {\r\n        daysInMonth[1]++; // Heshvan gets an extra day in complete years only.\r\n    }\r\n    return daysInMonth[month - 1];\r\n}\r\n/**\r\n * @param {?} date\r\n * @return {?}\r\n */\r\nfunction getDayNumberInHebrewYear(date) {\r\n    /** @type {?} */\r\n    let numberOfDay = 0;\r\n    for (let i = 1; i < date.month; i++) {\r\n        numberOfDay += getDaysInHebrewMonth(i, date.year);\r\n    }\r\n    return numberOfDay + date.day;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} val\r\n * @return {?}\r\n */\r\nfunction setHebrewMonth(date, val) {\r\n    /** @type {?} */\r\n    let after = val >= 0;\r\n    if (!after) {\r\n        val = -val;\r\n    }\r\n    while (val > 0) {\r\n        if (after) {\r\n            if (val > getHebrewMonths(date.year) - date.month) {\r\n                val -= getHebrewMonths(date.year) - date.month + 1;\r\n                date.year++;\r\n                date.month = 1;\r\n            }\r\n            else {\r\n                date.month += val;\r\n                val = 0;\r\n            }\r\n        }\r\n        else {\r\n            if (val >= date.month) {\r\n                date.year--;\r\n                val -= date.month;\r\n                date.month = getHebrewMonths(date.year);\r\n            }\r\n            else {\r\n                date.month -= val;\r\n                val = 0;\r\n            }\r\n        }\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} val\r\n * @return {?}\r\n */\r\nfunction setHebrewDay(date, val) {\r\n    /** @type {?} */\r\n    let after = val >= 0;\r\n    if (!after) {\r\n        val = -val;\r\n    }\r\n    while (val > 0) {\r\n        if (after) {\r\n            if (val > getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date)) {\r\n                val -= getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date) + 1;\r\n                date.year++;\r\n                date.month = 1;\r\n                date.day = 1;\r\n            }\r\n            else if (val > getDaysInHebrewMonth(date.month, date.year) - date.day) {\r\n                val -= getDaysInHebrewMonth(date.month, date.year) - date.day + 1;\r\n                date.month++;\r\n                date.day = 1;\r\n            }\r\n            else {\r\n                date.day += val;\r\n                val = 0;\r\n            }\r\n        }\r\n        else {\r\n            if (val >= date.day) {\r\n                val -= date.day;\r\n                date.month--;\r\n                if (date.month === 0) {\r\n                    date.year--;\r\n                    date.month = getHebrewMonths(date.year);\r\n                }\r\n                date.day = getDaysInHebrewMonth(date.month, date.year);\r\n            }\r\n            else {\r\n                date.day -= val;\r\n                val = 0;\r\n            }\r\n        }\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * Returns the equivalent Hebrew date value for a give input Gregorian date.\r\n * `gdate` is a JS Date to be converted to Hebrew date.\r\n * @param {?} gdate\r\n * @return {?}\r\n */\r\nfunction fromGregorian$1(gdate) {\r\n    /** @type {?} */\r\n    const date = new Date(gdate);\r\n    /** @type {?} */\r\n    const gYear = date.getFullYear();\r\n    /** @type {?} */\r\n    const gMonth = date.getMonth();\r\n    /** @type {?} */\r\n    const gDay = date.getDate();\r\n    /** @type {?} */\r\n    let julianDay = GREGORIAN_EPOCH$1 - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) -\r\n        Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\r\n        Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear$1(gYear) ? -1 : -2) + gDay);\r\n    julianDay = Math.floor(julianDay + 0.5);\r\n    /** @type {?} */\r\n    let daysSinceHebEpoch = julianDay - 347997;\r\n    /** @type {?} */\r\n    let monthsSinceHebEpoch = Math.floor(daysSinceHebEpoch * PARTS_PER_DAY / PARTS_PER_MONTH);\r\n    /** @type {?} */\r\n    let hYear = Math.floor((monthsSinceHebEpoch * 19 + 234) / 235) + 1;\r\n    /** @type {?} */\r\n    let firstDayOfThisYear = numberOfFirstDayInYear(hYear);\r\n    /** @type {?} */\r\n    let dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\r\n    while (dayOfYear < 1) {\r\n        hYear--;\r\n        firstDayOfThisYear = numberOfFirstDayInYear(hYear);\r\n        dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\r\n    }\r\n    /** @type {?} */\r\n    let hMonth = 1;\r\n    /** @type {?} */\r\n    let hDay = dayOfYear;\r\n    while (hDay > getDaysInHebrewMonth(hMonth, hYear)) {\r\n        hDay -= getDaysInHebrewMonth(hMonth, hYear);\r\n        hMonth++;\r\n    }\r\n    return new NgbDate(hYear, hMonth, hDay);\r\n}\r\n/**\r\n * Returns the equivalent JS date value for a given Hebrew date.\r\n * `hebrewDate` is an Hebrew date to be converted to Gregorian.\r\n * @param {?} hebrewDate\r\n * @return {?}\r\n */\r\nfunction toGregorian$1(hebrewDate) {\r\n    /** @type {?} */\r\n    const hYear = hebrewDate.year;\r\n    /** @type {?} */\r\n    const hMonth = hebrewDate.month;\r\n    /** @type {?} */\r\n    const hDay = hebrewDate.day;\r\n    /** @type {?} */\r\n    let days = numberOfFirstDayInYear(hYear);\r\n    for (let i = 1; i < hMonth; i++) {\r\n        days += getDaysInHebrewMonth(i, hYear);\r\n    }\r\n    days += hDay;\r\n    /** @type {?} */\r\n    let diffDays = days - HEBREW_DAY_ON_JAN_1_1970;\r\n    /** @type {?} */\r\n    let after = diffDays >= 0;\r\n    if (!after) {\r\n        diffDays = -diffDays;\r\n    }\r\n    /** @type {?} */\r\n    let gYear = 1970;\r\n    /** @type {?} */\r\n    let gMonth = 1;\r\n    /** @type {?} */\r\n    let gDay = 1;\r\n    while (diffDays > 0) {\r\n        if (after) {\r\n            if (diffDays >= (isGregorianLeapYear$1(gYear) ? 366 : 365)) {\r\n                diffDays -= isGregorianLeapYear$1(gYear) ? 366 : 365;\r\n                gYear++;\r\n            }\r\n            else if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\r\n                diffDays -= getDaysInGregorianMonth(gMonth, gYear);\r\n                gMonth++;\r\n            }\r\n            else {\r\n                gDay += diffDays;\r\n                diffDays = 0;\r\n            }\r\n        }\r\n        else {\r\n            if (diffDays >= (isGregorianLeapYear$1(gYear - 1) ? 366 : 365)) {\r\n                diffDays -= isGregorianLeapYear$1(gYear - 1) ? 366 : 365;\r\n                gYear--;\r\n            }\r\n            else {\r\n                if (gMonth > 1) {\r\n                    gMonth--;\r\n                }\r\n                else {\r\n                    gMonth = 12;\r\n                    gYear--;\r\n                }\r\n                if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\r\n                    diffDays -= getDaysInGregorianMonth(gMonth, gYear);\r\n                }\r\n                else {\r\n                    gDay = getDaysInGregorianMonth(gMonth, gYear) - diffDays + 1;\r\n                    diffDays = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Date(gYear, gMonth - 1, gDay);\r\n}\r\n/**\r\n * @param {?} numerals\r\n * @return {?}\r\n */\r\nfunction hebrewNumerals(numerals) {\r\n    if (!numerals) {\r\n        return '';\r\n    }\r\n    /** @type {?} */\r\n    const hArray0_9 = ['', '\\u05d0', '\\u05d1', '\\u05d2', '\\u05d3', '\\u05d4', '\\u05d5', '\\u05d6', '\\u05d7', '\\u05d8'];\r\n    /** @type {?} */\r\n    const hArray10_19 = [\r\n        '\\u05d9', '\\u05d9\\u05d0', '\\u05d9\\u05d1', '\\u05d9\\u05d2', '\\u05d9\\u05d3', '\\u05d8\\u05d5', '\\u05d8\\u05d6',\r\n        '\\u05d9\\u05d6', '\\u05d9\\u05d7', '\\u05d9\\u05d8'\r\n    ];\r\n    /** @type {?} */\r\n    const hArray20_90 = ['', '', '\\u05db', '\\u05dc', '\\u05de', '\\u05e0', '\\u05e1', '\\u05e2', '\\u05e4', '\\u05e6'];\r\n    /** @type {?} */\r\n    const hArray100_900 = [\r\n        '', '\\u05e7', '\\u05e8', '\\u05e9', '\\u05ea', '\\u05ea\\u05e7', '\\u05ea\\u05e8', '\\u05ea\\u05e9', '\\u05ea\\u05ea',\r\n        '\\u05ea\\u05ea\\u05e7'\r\n    ];\r\n    /** @type {?} */\r\n    const hArray1000_9000 = [\r\n        '', '\\u05d0', '\\u05d1', '\\u05d1\\u05d0', '\\u05d1\\u05d1', '\\u05d4', '\\u05d4\\u05d0', '\\u05d4\\u05d1',\r\n        '\\u05d4\\u05d1\\u05d0', '\\u05d4\\u05d1\\u05d1'\r\n    ];\r\n    /** @type {?} */\r\n    const geresh = '\\u05f3';\r\n    /** @type {?} */\r\n    const gershaim = '\\u05f4';\r\n    /** @type {?} */\r\n    let mem = 0;\r\n    /** @type {?} */\r\n    let result = [];\r\n    /** @type {?} */\r\n    let step = 0;\r\n    while (numerals > 0) {\r\n        /** @type {?} */\r\n        let m = numerals % 10;\r\n        if (step === 0) {\r\n            mem = m;\r\n        }\r\n        else if (step === 1) {\r\n            if (m !== 1) {\r\n                result.unshift(hArray20_90[m], hArray0_9[mem]);\r\n            }\r\n            else {\r\n                result.unshift(hArray10_19[mem]);\r\n            }\r\n        }\r\n        else if (step === 2) {\r\n            result.unshift(hArray100_900[m]);\r\n        }\r\n        else {\r\n            if (m !== 5) {\r\n                result.unshift(hArray1000_9000[m], geresh, ' ');\r\n            }\r\n            break;\r\n        }\r\n        numerals = Math.floor(numerals / 10);\r\n        if (step === 0 && numerals === 0) {\r\n            result.unshift(hArray0_9[m]);\r\n        }\r\n        step++;\r\n    }\r\n    result = result.join('').split('');\r\n    if (result.length === 1) {\r\n        result.push(geresh);\r\n    }\r\n    else if (result.length > 1) {\r\n        result.splice(result.length - 1, 0, gershaim);\r\n    }\r\n    return result.join('');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@since 3.2.0\r\n */\r\nclass NgbCalendarHebrew extends NgbCalendar {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDaysPerWeek() { return 7; }\r\n    /**\r\n     * @param {?=} year\r\n     * @return {?}\r\n     */\r\n    getMonths(year) {\r\n        if (year && isHebrewLeapYear(year)) {\r\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n        }\r\n        else {\r\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getWeeksPerMonth() { return 6; }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    isValid(date) {\r\n        /** @type {?} */\r\n        let b = date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day);\r\n        b = b && date.month > 0 && date.month <= (isHebrewLeapYear(date.year) ? 13 : 12);\r\n        b = b && date.day > 0 && date.day <= getDaysInHebrewMonth(date.month, date.year);\r\n        return b && !isNaN(toGregorian$1(date).getTime());\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getNext(date, period = 'd', number = 1) {\r\n        date = new NgbDate(date.year, date.month, date.day);\r\n        switch (period) {\r\n            case 'y':\r\n                date.year += number;\r\n                date.month = 1;\r\n                date.day = 1;\r\n                return date;\r\n            case 'm':\r\n                date = setHebrewMonth(date, number);\r\n                date.day = 1;\r\n                return date;\r\n            case 'd':\r\n                return setHebrewDay(date, number);\r\n            default:\r\n                return date;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?=} period\r\n     * @param {?=} number\r\n     * @return {?}\r\n     */\r\n    getPrev(date, period = 'd', number = 1) { return this.getNext(date, period, -number); }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getWeekday(date) {\r\n        /** @type {?} */\r\n        const day = toGregorian$1(date).getDay();\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        return day === 0 ? 7 : day;\r\n    }\r\n    /**\r\n     * @param {?} week\r\n     * @param {?} firstDayOfWeek\r\n     * @return {?}\r\n     */\r\n    getWeekNumber(week, firstDayOfWeek) {\r\n        /** @type {?} */\r\n        const date = week[week.length - 1];\r\n        return Math.ceil(getDayNumberInHebrewYear(date) / 7);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getToday() { return fromGregorian$1(new Date()); }\r\n    /**\r\n     * \\@since 3.4.0\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    toGregorian(date) { return fromJSDate(toGregorian$1(date)); }\r\n    /**\r\n     * \\@since 3.4.0\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    fromGregorian(date) { return fromGregorian$1(toJSDate(date)); }\r\n}\r\nNgbCalendarHebrew.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst WEEKDAYS = ['שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת', 'ראשון'];\r\n/** @type {?} */\r\nconst MONTHS = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];\r\n/** @type {?} */\r\nconst MONTHS_LEAP = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר א׳', 'אדר ב׳', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];\r\n/**\r\n * \\@since 3.2.0\r\n */\r\nclass NgbDatepickerI18nHebrew extends NgbDatepickerI18n {\r\n    /**\r\n     * @param {?} month\r\n     * @param {?=} year\r\n     * @return {?}\r\n     */\r\n    getMonthShortName(month, year) { return this.getMonthFullName(month, year); }\r\n    /**\r\n     * @param {?} month\r\n     * @param {?=} year\r\n     * @return {?}\r\n     */\r\n    getMonthFullName(month, year) {\r\n        return isHebrewLeapYear(year) ? MONTHS_LEAP[month - 1] : MONTHS[month - 1];\r\n    }\r\n    /**\r\n     * @param {?} weekday\r\n     * @return {?}\r\n     */\r\n    getWeekdayShortName(weekday) { return WEEKDAYS[weekday - 1]; }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getDayAriaLabel(date) {\r\n        return `${hebrewNumerals(date.day)} ${this.getMonthFullName(date.month, date.year)} ${hebrewNumerals(date.year)}`;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getDayNumerals(date) { return hebrewNumerals(date.day); }\r\n    /**\r\n     * @param {?} weekNumber\r\n     * @return {?}\r\n     */\r\n    getWeekNumerals(weekNumber) { return hebrewNumerals(weekNumber); }\r\n    /**\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    getYearNumerals(year) { return hebrewNumerals(year); }\r\n}\r\nNgbDatepickerI18nHebrew.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * [`NgbDateAdapter`](#/components/datepicker/api#NgbDateAdapter) implementation that uses\r\n * native javascript dates as a user date model.\r\n */\r\nclass NgbDateNativeAdapter extends NgbDateAdapter {\r\n    /**\r\n     * Converts a native `Date` to a `NgbDateStruct`.\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    fromModel(date) {\r\n        return (date instanceof Date && !isNaN(date.getTime())) ? this._fromNativeDate(date) : null;\r\n    }\r\n    /**\r\n     * Converts a `NgbDateStruct` to a native `Date`.\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    toModel(date) {\r\n        return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) ? this._toNativeDate(date) :\r\n            null;\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    _fromNativeDate(date) {\r\n        return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    _toNativeDate(date) {\r\n        /** @type {?} */\r\n        const jsDate = new Date(date.year, date.month - 1, date.day, 12);\r\n        // avoid 30 -> 1930 conversion\r\n        jsDate.setFullYear(date.year);\r\n        return jsDate;\r\n    }\r\n}\r\nNgbDateNativeAdapter.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Same as [`NgbDateNativeAdapter`](#/components/datepicker/api#NgbDateNativeAdapter), but with UTC dates.\r\n *\r\n * \\@since 3.2.0\r\n */\r\nclass NgbDateNativeUTCAdapter extends NgbDateNativeAdapter {\r\n    /**\r\n     * @protected\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    _fromNativeDate(date) {\r\n        return { year: date.getUTCFullYear(), month: date.getUTCMonth() + 1, day: date.getUTCDate() };\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    _toNativeDate(date) {\r\n        /** @type {?} */\r\n        const jsDate = new Date(Date.UTC(date.year, date.month - 1, date.day));\r\n        // avoid 30 -> 1930 conversion\r\n        jsDate.setUTCFullYear(date.year);\r\n        return jsDate;\r\n    }\r\n}\r\nNgbDateNativeUTCAdapter.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbDatepickerModule {\r\n}\r\nNgbDatepickerModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [\r\n                    NgbDatepicker, NgbDatepickerContent, NgbDatepickerMonth, NgbDatepickerNavigation, NgbDatepickerNavigationSelect,\r\n                    NgbDatepickerDayView, NgbInputDatepicker\r\n                ],\r\n                exports: [NgbDatepicker, NgbDatepickerContent, NgbInputDatepicker, NgbDatepickerMonth],\r\n                imports: [CommonModule, FormsModule],\r\n                entryComponents: [NgbDatepicker]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbDropdown`](#/components/dropdown/api#NgbDropdown) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the dropdowns used in the application.\r\n */\r\nclass NgbDropdownConfig {\r\n    constructor() {\r\n        this.autoClose = true;\r\n        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\r\n    }\r\n}\r\nNgbDropdownConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbDropdownConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbDropdownConfig_Factory() { return new NgbDropdownConfig(); }, token: NgbDropdownConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbNavbar {\r\n}\r\nNgbNavbar.decorators = [\r\n    { type: Directive, args: [{ selector: '.navbar' },] }\r\n];\r\n/**\r\n * A directive you should put on a dropdown item to enable keyboard navigation.\r\n * Arrow keys will move focus between items marked with this directive.\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbDropdownItem {\r\n    /**\r\n     * @param {?} elementRef\r\n     */\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this._disabled = false;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = (/** @type {?} */ (value)) === '' || value === true; // accept an empty attribute as true\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n}\r\nNgbDropdownItem.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngbDropdownItem]', host: { 'class': 'dropdown-item', '[class.disabled]': 'disabled' } },] }\r\n];\r\n/** @nocollapse */\r\nNgbDropdownItem.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\nNgbDropdownItem.propDecorators = {\r\n    disabled: [{ type: Input }]\r\n};\r\n/**\r\n * A directive that wraps dropdown menu content and dropdown items.\r\n */\r\nclass NgbDropdownMenu {\r\n    /**\r\n     * @param {?} dropdown\r\n     */\r\n    constructor(dropdown) {\r\n        this.dropdown = dropdown;\r\n        this.placement = 'bottom';\r\n        this.isOpen = false;\r\n    }\r\n}\r\nNgbDropdownMenu.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbDropdownMenu]',\r\n                host: {\r\n                    '[class.dropdown-menu]': 'true',\r\n                    '[class.show]': 'dropdown.isOpen()',\r\n                    '[attr.x-placement]': 'placement',\r\n                    '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.Home)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.End)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.Enter)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.Space)': 'dropdown.onKeyDown($event)'\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbDropdownMenu.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => NgbDropdown)),] }] }\r\n];\r\nNgbDropdownMenu.propDecorators = {\r\n    menuItems: [{ type: ContentChildren, args: [NgbDropdownItem,] }]\r\n};\r\n/**\r\n * A directive to mark an element to which dropdown menu will be anchored.\r\n *\r\n * This is a simple version of the `NgbDropdownToggle` directive.\r\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\r\n * for events other than click.\r\n *\r\n * \\@since 1.1.0\r\n */\r\nclass NgbDropdownAnchor {\r\n    /**\r\n     * @param {?} dropdown\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(dropdown, _elementRef) {\r\n        this.dropdown = dropdown;\r\n        this._elementRef = _elementRef;\r\n        this.anchorEl = _elementRef.nativeElement;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getNativeElement() { return this._elementRef.nativeElement; }\r\n}\r\nNgbDropdownAnchor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbDropdownAnchor]',\r\n                host: { 'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': 'dropdown.isOpen()' }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbDropdownAnchor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => NgbDropdown)),] }] },\r\n    { type: ElementRef }\r\n];\r\n/**\r\n * A directive to mark an element that will toggle dropdown via the `click` event.\r\n *\r\n * You can also use `NgbDropdownAnchor` as an alternative.\r\n */\r\nclass NgbDropdownToggle extends NgbDropdownAnchor {\r\n    /**\r\n     * @param {?} dropdown\r\n     * @param {?} elementRef\r\n     */\r\n    constructor(dropdown, elementRef) {\r\n        super(dropdown, elementRef);\r\n    }\r\n}\r\nNgbDropdownToggle.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbDropdownToggle]',\r\n                host: {\r\n                    'class': 'dropdown-toggle',\r\n                    'aria-haspopup': 'true',\r\n                    '[attr.aria-expanded]': 'dropdown.isOpen()',\r\n                    '(click)': 'dropdown.toggle()',\r\n                    '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.Home)': 'dropdown.onKeyDown($event)',\r\n                    '(keydown.End)': 'dropdown.onKeyDown($event)'\r\n                },\r\n                providers: [{ provide: NgbDropdownAnchor, useExisting: forwardRef((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => NgbDropdownToggle)) }]\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbDropdownToggle.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => NgbDropdown)),] }] },\r\n    { type: ElementRef }\r\n];\r\n/**\r\n * A directive that provides contextual overlays for displaying lists of links and more.\r\n */\r\nclass NgbDropdown {\r\n    /**\r\n     * @param {?} _changeDetector\r\n     * @param {?} config\r\n     * @param {?} _document\r\n     * @param {?} _ngZone\r\n     * @param {?} _elementRef\r\n     * @param {?} _renderer\r\n     * @param {?} ngbNavbar\r\n     */\r\n    constructor(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, ngbNavbar) {\r\n        this._changeDetector = _changeDetector;\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        this._closed$ = new Subject();\r\n        /**\r\n         * Defines whether or not the dropdown menu is opened initially.\r\n         */\r\n        this._open = false;\r\n        /**\r\n         * An event fired when the dropdown is opened or closed.\r\n         *\r\n         * The event payload is a `boolean`:\r\n         * * `true` - the dropdown was opened\r\n         * * `false` - the dropdown was closed\r\n         */\r\n        this.openChange = new EventEmitter();\r\n        this.placement = config.placement;\r\n        this.container = config.container;\r\n        this.autoClose = config.autoClose;\r\n        this.display = ngbNavbar ? 'static' : 'dynamic';\r\n        this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => { this._positionMenu(); }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._ngZone.onStable.pipe(take(1)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._applyPlacementClasses();\r\n            if (this._open) {\r\n                this._setCloseHandlers();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes.container && this._open) {\r\n            this._applyContainer(this.container);\r\n        }\r\n        if (changes.placement && !changes.placement.isFirstChange) {\r\n            this._applyPlacementClasses();\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the dropdown menu is open.\r\n     * @return {?}\r\n     */\r\n    isOpen() { return this._open; }\r\n    /**\r\n     * Opens the dropdown menu.\r\n     * @return {?}\r\n     */\r\n    open() {\r\n        if (!this._open) {\r\n            this._open = true;\r\n            this._applyContainer(this.container);\r\n            this.openChange.emit(true);\r\n            this._setCloseHandlers();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _setCloseHandlers() {\r\n        /** @type {?} */\r\n        const anchor = this._anchor;\r\n        ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n         * @return {?}\r\n         */\r\n        () => this.close()), this._closed$, this._menu ? [this._menuElement.nativeElement] : [], anchor ? [anchor.getNativeElement()] : [], '.dropdown-item,.dropdown-divider');\r\n    }\r\n    /**\r\n     * Closes the dropdown menu.\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (this._open) {\r\n            this._open = false;\r\n            this._resetContainer();\r\n            this._closed$.next();\r\n            this.openChange.emit(false);\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Toggles the dropdown menu.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        if (this.isOpen()) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._resetContainer();\r\n        this._closed$.next();\r\n        this._zoneSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onKeyDown(event) {\r\n        // tslint:disable-next-line:deprecation\r\n        /** @type {?} */\r\n        const key = event.which;\r\n        /** @type {?} */\r\n        const itemElements = this._getMenuElements();\r\n        /** @type {?} */\r\n        let position = -1;\r\n        /** @type {?} */\r\n        let isEventFromItems = false;\r\n        /** @type {?} */\r\n        let itemElement = null;\r\n        /** @type {?} */\r\n        const isEventFromToggle = this._isEventFromToggle(event);\r\n        if (!isEventFromToggle && itemElements.length) {\r\n            itemElements.forEach((/**\r\n             * @param {?} item\r\n             * @param {?} index\r\n             * @return {?}\r\n             */\r\n            (item, index) => {\r\n                if (item.contains((/** @type {?} */ (event.target)))) {\r\n                    isEventFromItems = true;\r\n                    itemElement = item;\r\n                }\r\n                if (item === this._document.activeElement) {\r\n                    position = index;\r\n                }\r\n            }));\r\n        }\r\n        // closing on Enter / Space\r\n        if (key === Key.Space || key === Key.Enter) {\r\n            if (isEventFromItems && (this.autoClose === true || this.autoClose === 'inside')) {\r\n                // Item is either a button or a link, so click will be triggered by the browser on Enter or Space.\r\n                // So we have to register a one-time click handler that will fire after any user defined click handlers\r\n                // to close the dropdown\r\n                fromEvent(itemElement, 'click').pipe(take(1)).subscribe((/**\r\n                 * @return {?}\r\n                 */\r\n                () => this.close()));\r\n            }\r\n            return;\r\n        }\r\n        // opening / navigating\r\n        if (isEventFromToggle || isEventFromItems) {\r\n            this.open();\r\n            if (itemElements.length) {\r\n                switch (key) {\r\n                    case Key.ArrowDown:\r\n                        position = Math.min(position + 1, itemElements.length - 1);\r\n                        break;\r\n                    case Key.ArrowUp:\r\n                        if (this._isDropup() && position === -1) {\r\n                            position = itemElements.length - 1;\r\n                            break;\r\n                        }\r\n                        position = Math.max(position - 1, 0);\r\n                        break;\r\n                    case Key.Home:\r\n                        position = 0;\r\n                        break;\r\n                    case Key.End:\r\n                        position = itemElements.length - 1;\r\n                        break;\r\n                }\r\n                itemElements[position].focus();\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _isDropup() { return this._elementRef.nativeElement.classList.contains('dropup'); }\r\n    /**\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _isEventFromToggle(event) {\r\n        return this._anchor.getNativeElement().contains((/** @type {?} */ (event.target)));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getMenuElements() {\r\n        /** @type {?} */\r\n        const menu = this._menu;\r\n        if (menu == null) {\r\n            return [];\r\n        }\r\n        return menu.menuItems.filter((/**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        item => !item.disabled)).map((/**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        item => item.elementRef.nativeElement));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _positionMenu() {\r\n        /** @type {?} */\r\n        const menu = this._menu;\r\n        if (this.isOpen() && menu) {\r\n            this._applyPlacementClasses(this.display === 'dynamic' ?\r\n                positionElements(this._anchor.anchorEl, this._bodyContainer || this._menuElement.nativeElement, this.placement, this.container === 'body') :\r\n                this._getFirstPlacement(this.placement));\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} placement\r\n     * @return {?}\r\n     */\r\n    _getFirstPlacement(placement) {\r\n        return Array.isArray(placement) ? placement[0] : (/** @type {?} */ (placement.split(' ')[0]));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _resetContainer() {\r\n        /** @type {?} */\r\n        const renderer = this._renderer;\r\n        /** @type {?} */\r\n        const menuElement = this._menuElement;\r\n        if (menuElement) {\r\n            /** @type {?} */\r\n            const dropdownElement = this._elementRef.nativeElement;\r\n            /** @type {?} */\r\n            const dropdownMenuElement = menuElement.nativeElement;\r\n            renderer.appendChild(dropdownElement, dropdownMenuElement);\r\n            renderer.removeStyle(dropdownMenuElement, 'position');\r\n            renderer.removeStyle(dropdownMenuElement, 'transform');\r\n        }\r\n        if (this._bodyContainer) {\r\n            renderer.removeChild(this._document.body, this._bodyContainer);\r\n            this._bodyContainer = null;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?=} container\r\n     * @return {?}\r\n     */\r\n    _applyContainer(container = null) {\r\n        this._resetContainer();\r\n        if (container === 'body') {\r\n            /** @type {?} */\r\n            const renderer = this._renderer;\r\n            /** @type {?} */\r\n            const dropdownMenuElement = this._menuElement.nativeElement;\r\n            /** @type {?} */\r\n            const bodyContainer = this._bodyContainer = this._bodyContainer || renderer.createElement('div');\r\n            // Override some styles to have the positionning working\r\n            renderer.setStyle(bodyContainer, 'position', 'absolute');\r\n            renderer.setStyle(dropdownMenuElement, 'position', 'static');\r\n            renderer.setStyle(bodyContainer, 'z-index', '1050');\r\n            renderer.appendChild(bodyContainer, dropdownMenuElement);\r\n            renderer.appendChild(this._document.body, bodyContainer);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?=} placement\r\n     * @return {?}\r\n     */\r\n    _applyPlacementClasses(placement) {\r\n        /** @type {?} */\r\n        const menu = this._menu;\r\n        if (menu) {\r\n            if (!placement) {\r\n                placement = this._getFirstPlacement(this.placement);\r\n            }\r\n            /** @type {?} */\r\n            const renderer = this._renderer;\r\n            /** @type {?} */\r\n            const dropdownElement = this._elementRef.nativeElement;\r\n            // remove the current placement classes\r\n            renderer.removeClass(dropdownElement, 'dropup');\r\n            renderer.removeClass(dropdownElement, 'dropdown');\r\n            menu.placement = this.display === 'static' ? null : placement;\r\n            /*\r\n                  * apply the new placement\r\n                  * in case of top use up-arrow or down-arrow otherwise\r\n                  */\r\n            /** @type {?} */\r\n            const dropdownClass = placement.search('^top') !== -1 ? 'dropup' : 'dropdown';\r\n            renderer.addClass(dropdownElement, dropdownClass);\r\n            /** @type {?} */\r\n            const bodyContainer = this._bodyContainer;\r\n            if (bodyContainer) {\r\n                renderer.removeClass(bodyContainer, 'dropup');\r\n                renderer.removeClass(bodyContainer, 'dropdown');\r\n                renderer.addClass(bodyContainer, dropdownClass);\r\n            }\r\n        }\r\n    }\r\n}\r\nNgbDropdown.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngbDropdown]', exportAs: 'ngbDropdown', host: { '[class.show]': 'isOpen()' } },] }\r\n];\r\n/** @nocollapse */\r\nNgbDropdown.ctorParameters = () => [\r\n    { type: ChangeDetectorRef },\r\n    { type: NgbDropdownConfig },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: NgZone },\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: NgbNavbar, decorators: [{ type: Optional }] }\r\n];\r\nNgbDropdown.propDecorators = {\r\n    _menu: [{ type: ContentChild, args: [NgbDropdownMenu, { static: false },] }],\r\n    _menuElement: [{ type: ContentChild, args: [NgbDropdownMenu, { read: ElementRef, static: false },] }],\r\n    _anchor: [{ type: ContentChild, args: [NgbDropdownAnchor, { static: false },] }],\r\n    autoClose: [{ type: Input }],\r\n    _open: [{ type: Input, args: ['open',] }],\r\n    placement: [{ type: Input }],\r\n    container: [{ type: Input }],\r\n    display: [{ type: Input }],\r\n    openChange: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_DROPDOWN_DIRECTIVES = [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownItem, NgbNavbar];\r\nclass NgbDropdownModule {\r\n}\r\nNgbDropdownModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all modals used in the application.\r\n *\r\n * \\@since 3.1.0\r\n */\r\nclass NgbModalConfig {\r\n    constructor() {\r\n        this.backdrop = true;\r\n        this.keyboard = true;\r\n    }\r\n}\r\nNgbModalConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbModalConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ContentRef {\r\n    /**\r\n     * @param {?} nodes\r\n     * @param {?=} viewRef\r\n     * @param {?=} componentRef\r\n     */\r\n    constructor(nodes, viewRef, componentRef) {\r\n        this.nodes = nodes;\r\n        this.viewRef = viewRef;\r\n        this.componentRef = componentRef;\r\n    }\r\n}\r\n/**\r\n * @template T\r\n */\r\nclass PopupService {\r\n    /**\r\n     * @param {?} _type\r\n     * @param {?} _injector\r\n     * @param {?} _viewContainerRef\r\n     * @param {?} _renderer\r\n     * @param {?} _componentFactoryResolver\r\n     * @param {?} _applicationRef\r\n     */\r\n    constructor(_type, _injector, _viewContainerRef, _renderer, _componentFactoryResolver, _applicationRef) {\r\n        this._type = _type;\r\n        this._injector = _injector;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._renderer = _renderer;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n        this._applicationRef = _applicationRef;\r\n    }\r\n    /**\r\n     * @param {?=} content\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    open(content, context) {\r\n        if (!this._windowRef) {\r\n            this._contentRef = this._getContentRef(content, context);\r\n            this._windowRef = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type), 0, this._injector, this._contentRef.nodes);\r\n        }\r\n        return this._windowRef;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (this._windowRef) {\r\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\r\n            this._windowRef = null;\r\n            if (this._contentRef.viewRef) {\r\n                this._applicationRef.detachView(this._contentRef.viewRef);\r\n                this._contentRef.viewRef.destroy();\r\n                this._contentRef = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} content\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    _getContentRef(content, context) {\r\n        if (!content) {\r\n            return new ContentRef([]);\r\n        }\r\n        else if (content instanceof TemplateRef) {\r\n            /** @type {?} */\r\n            const viewRef = content.createEmbeddedView(context);\r\n            this._applicationRef.attachView(viewRef);\r\n            return new ContentRef([viewRef.rootNodes], viewRef);\r\n        }\r\n        else {\r\n            return new ContentRef([[this._renderer.createText(`${content}`)]]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst noop = (/**\r\n * @return {?}\r\n */\r\n() => { });\r\n/**\r\n * Utility to handle the scrollbar.\r\n *\r\n * It allows to compensate the lack of a vertical scrollbar by adding an\r\n * equivalent padding on the right of the body, and to remove this compensation.\r\n */\r\nclass ScrollBar {\r\n    /**\r\n     * @param {?} _document\r\n     */\r\n    constructor(_document) {\r\n        this._document = _document;\r\n    }\r\n    /**\r\n     * To be called right before a potential vertical scrollbar would be removed:\r\n     *\r\n     * - if there was a scrollbar, adds some compensation padding to the body\r\n     * to keep the same layout as when the scrollbar is there\r\n     * - if there was none, there is nothing to do\r\n     *\r\n     * @return {?} a callback used to revert the compensation (noop if there was none,\r\n     * otherwise a function removing the padding)\r\n     */\r\n    compensate() {\r\n        /** @type {?} */\r\n        const width = this._getWidth();\r\n        return !this._isPresent(width) ? noop : this._adjustBody(width);\r\n    }\r\n    /**\r\n     * Adds a padding of the given width on the right of the body.\r\n     *\r\n     * @private\r\n     * @param {?} scrollbarWidth\r\n     * @return {?} a callback used to revert the padding to its previous value\r\n     */\r\n    _adjustBody(scrollbarWidth) {\r\n        /** @type {?} */\r\n        const body = this._document.body;\r\n        /** @type {?} */\r\n        const userSetPaddingStyle = body.style.paddingRight;\r\n        /** @type {?} */\r\n        const actualPadding = parseFloat(window.getComputedStyle(body)['padding-right']);\r\n        body.style['padding-right'] = `${actualPadding + scrollbarWidth}px`;\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        () => body.style['padding-right'] = userSetPaddingStyle);\r\n    }\r\n    /**\r\n     * Tells whether a scrollbar is currently present on the body.\r\n     *\r\n     * @private\r\n     * @param {?} scrollbarWidth\r\n     * @return {?} true if scrollbar is present, false otherwise\r\n     */\r\n    _isPresent(scrollbarWidth) {\r\n        /** @type {?} */\r\n        const rect = this._document.body.getBoundingClientRect();\r\n        /** @type {?} */\r\n        const bodyToViewportGap = window.innerWidth - (rect.left + rect.right);\r\n        /** @type {?} */\r\n        const uncertainty = 0.1 * scrollbarWidth;\r\n        return bodyToViewportGap >= scrollbarWidth - uncertainty;\r\n    }\r\n    /**\r\n     * Calculates and returns the width of a scrollbar.\r\n     *\r\n     * @private\r\n     * @return {?} the width of a scrollbar on this page\r\n     */\r\n    _getWidth() {\r\n        /** @type {?} */\r\n        const measurer = this._document.createElement('div');\r\n        measurer.className = 'modal-scrollbar-measure';\r\n        /** @type {?} */\r\n        const body = this._document.body;\r\n        body.appendChild(measurer);\r\n        /** @type {?} */\r\n        const width = measurer.getBoundingClientRect().width - measurer.clientWidth;\r\n        body.removeChild(measurer);\r\n        return width;\r\n    }\r\n}\r\nScrollBar.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nScrollBar.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n/** @nocollapse */ ScrollBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollBar_Factory() { return new ScrollBar(ɵɵinject(DOCUMENT)); }, token: ScrollBar, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbModalBackdrop {\r\n}\r\nNgbModalBackdrop.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-modal-backdrop',\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: '',\r\n                host: { '[class]': '\"modal-backdrop fade show\" + (backdropClass ? \" \" + backdropClass : \"\")', 'style': 'z-index: 1050' }\r\n            }] }\r\n];\r\nNgbModalBackdrop.propDecorators = {\r\n    backdropClass: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A reference to the currently opened (active) modal.\r\n *\r\n * Instances of this class can be injected into your component passed as modal content.\r\n * So you can `.close()` or `.dismiss()` the modal window from your component.\r\n */\r\nclass NgbActiveModal {\r\n    /**\r\n     * Closes the modal with an optional `result` value.\r\n     *\r\n     * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n     * @param {?=} result\r\n     * @return {?}\r\n     */\r\n    close(result) { }\r\n    /**\r\n     * Dismisses the modal with an optional `reason` value.\r\n     *\r\n     * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n     * @param {?=} reason\r\n     * @return {?}\r\n     */\r\n    dismiss(reason) { }\r\n}\r\n/**\r\n * A reference to the newly opened modal returned by the `NgbModal.open()` method.\r\n */\r\nclass NgbModalRef {\r\n    /**\r\n     * @param {?} _windowCmptRef\r\n     * @param {?} _contentRef\r\n     * @param {?=} _backdropCmptRef\r\n     * @param {?=} _beforeDismiss\r\n     */\r\n    constructor(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {\r\n        this._windowCmptRef = _windowCmptRef;\r\n        this._contentRef = _contentRef;\r\n        this._backdropCmptRef = _backdropCmptRef;\r\n        this._beforeDismiss = _beforeDismiss;\r\n        _windowCmptRef.instance.dismissEvent.subscribe((/**\r\n         * @param {?} reason\r\n         * @return {?}\r\n         */\r\n        (reason) => { this.dismiss(reason); }));\r\n        this.result = new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        }));\r\n        this.result.then(null, (/**\r\n         * @return {?}\r\n         */\r\n        () => { }));\r\n    }\r\n    /**\r\n     * The instance of a component used for the modal content.\r\n     *\r\n     * When a `TemplateRef` is used as the content or when the modal is closed, will return `undefined`.\r\n     * @return {?}\r\n     */\r\n    get componentInstance() {\r\n        if (this._contentRef && this._contentRef.componentRef) {\r\n            return this._contentRef.componentRef.instance;\r\n        }\r\n    }\r\n    /**\r\n     * Closes the modal with an optional `result` value.\r\n     *\r\n     * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n     * @param {?=} result\r\n     * @return {?}\r\n     */\r\n    close(result) {\r\n        if (this._windowCmptRef) {\r\n            this._resolve(result);\r\n            this._removeModalElements();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?=} reason\r\n     * @return {?}\r\n     */\r\n    _dismiss(reason) {\r\n        this._reject(reason);\r\n        this._removeModalElements();\r\n    }\r\n    /**\r\n     * Dismisses the modal with an optional `reason` value.\r\n     *\r\n     * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n     * @param {?=} reason\r\n     * @return {?}\r\n     */\r\n    dismiss(reason) {\r\n        if (this._windowCmptRef) {\r\n            if (!this._beforeDismiss) {\r\n                this._dismiss(reason);\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                const dismiss = this._beforeDismiss();\r\n                if (dismiss && dismiss.then) {\r\n                    dismiss.then((/**\r\n                     * @param {?} result\r\n                     * @return {?}\r\n                     */\r\n                    result => {\r\n                        if (result !== false) {\r\n                            this._dismiss(reason);\r\n                        }\r\n                    }), (/**\r\n                     * @return {?}\r\n                     */\r\n                    () => { }));\r\n                }\r\n                else if (dismiss !== false) {\r\n                    this._dismiss(reason);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _removeModalElements() {\r\n        /** @type {?} */\r\n        const windowNativeEl = this._windowCmptRef.location.nativeElement;\r\n        windowNativeEl.parentNode.removeChild(windowNativeEl);\r\n        this._windowCmptRef.destroy();\r\n        if (this._backdropCmptRef) {\r\n            /** @type {?} */\r\n            const backdropNativeEl = this._backdropCmptRef.location.nativeElement;\r\n            backdropNativeEl.parentNode.removeChild(backdropNativeEl);\r\n            this._backdropCmptRef.destroy();\r\n        }\r\n        if (this._contentRef && this._contentRef.viewRef) {\r\n            this._contentRef.viewRef.destroy();\r\n        }\r\n        this._windowCmptRef = null;\r\n        this._backdropCmptRef = null;\r\n        this._contentRef = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst ModalDismissReasons = {\r\n    BACKDROP_CLICK: 0,\r\n    ESC: 1,\r\n};\r\nModalDismissReasons[ModalDismissReasons.BACKDROP_CLICK] = 'BACKDROP_CLICK';\r\nModalDismissReasons[ModalDismissReasons.ESC] = 'ESC';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbModalWindow {\r\n    /**\r\n     * @param {?} _document\r\n     * @param {?} _elRef\r\n     * @param {?} _zone\r\n     */\r\n    constructor(_document, _elRef, _zone) {\r\n        this._document = _document;\r\n        this._elRef = _elRef;\r\n        this._zone = _zone;\r\n        this._closed$ = new Subject();\r\n        this.backdrop = true;\r\n        this.keyboard = true;\r\n        this.dismissEvent = new EventEmitter();\r\n    }\r\n    /**\r\n     * @param {?} reason\r\n     * @return {?}\r\n     */\r\n    dismiss(reason) { this.dismissEvent.emit(reason); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() { this._elWithFocus = this._document.activeElement; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        const { nativeElement } = this._elRef;\r\n        this._zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            fromEvent(nativeElement, 'keydown')\r\n                .pipe(takeUntil(this._closed$), \r\n            // tslint:disable-next-line:deprecation\r\n            filter((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.which === Key.Escape && this.keyboard)))\r\n                .subscribe((/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            event => requestAnimationFrame((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                if (!event.defaultPrevented) {\r\n                    this._zone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => this.dismiss(ModalDismissReasons.ESC)));\r\n                }\r\n            }))));\r\n            // We're listening to 'mousedown' and 'mouseup' to prevent modal from closing when pressing the mouse\r\n            // inside the modal dialog and releasing it outside\r\n            /** @type {?} */\r\n            let preventClose = false;\r\n            fromEvent(this._dialogEl.nativeElement, 'mousedown')\r\n                .pipe(takeUntil(this._closed$), tap((/**\r\n             * @return {?}\r\n             */\r\n            () => preventClose = false)), switchMap((/**\r\n             * @return {?}\r\n             */\r\n            () => fromEvent(nativeElement, 'mouseup').pipe(takeUntil(this._closed$), take(1)))), filter((/**\r\n             * @param {?} __0\r\n             * @return {?}\r\n             */\r\n            ({ target }) => nativeElement === target)))\r\n                .subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => { preventClose = true; }));\r\n            // We're listening to 'click' to dismiss modal on modal window click, except when:\r\n            // 1. clicking on modal dialog itself\r\n            // 2. closing was prevented by mousedown/up handlers\r\n            // 3. clicking on scrollbar when the viewport is too small and modal doesn't fit (click is not triggered at all)\r\n            fromEvent(nativeElement, 'click').pipe(takeUntil(this._closed$)).subscribe((/**\r\n             * @param {?} __0\r\n             * @return {?}\r\n             */\r\n            ({ target }) => {\r\n                if (this.backdrop === true && nativeElement === target && !preventClose) {\r\n                    this._zone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => this.dismiss(ModalDismissReasons.BACKDROP_CLICK)));\r\n                }\r\n                preventClose = false;\r\n            }));\r\n        }));\r\n        if (!nativeElement.contains(document.activeElement)) {\r\n            /** @type {?} */\r\n            const autoFocusable = (/** @type {?} */ (nativeElement.querySelector(`[ngbAutofocus]`)));\r\n            /** @type {?} */\r\n            const firstFocusable = getFocusableBoundaryElements(nativeElement)[0];\r\n            /** @type {?} */\r\n            const elementToFocus = autoFocusable || firstFocusable || nativeElement;\r\n            elementToFocus.focus();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        /** @type {?} */\r\n        const body = this._document.body;\r\n        /** @type {?} */\r\n        const elWithFocus = this._elWithFocus;\r\n        /** @type {?} */\r\n        let elementToFocus;\r\n        if (elWithFocus && elWithFocus['focus'] && body.contains(elWithFocus)) {\r\n            elementToFocus = elWithFocus;\r\n        }\r\n        else {\r\n            elementToFocus = body;\r\n        }\r\n        this._zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            setTimeout((/**\r\n             * @return {?}\r\n             */\r\n            () => elementToFocus.focus()));\r\n            this._elWithFocus = null;\r\n        }));\r\n        this._closed$.next();\r\n    }\r\n}\r\nNgbModalWindow.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-modal-window',\r\n                host: {\r\n                    '[class]': '\"modal fade show d-block\" + (windowClass ? \" \" + windowClass : \"\")',\r\n                    'role': 'dialog',\r\n                    'tabindex': '-1',\r\n                    '[attr.aria-modal]': 'true',\r\n                    '[attr.aria-labelledby]': 'ariaLabelledBy',\r\n                },\r\n                template: `\r\n    <div #dialog [class]=\"'modal-dialog' + (size ? ' modal-' + size : '') + (centered ? ' modal-dialog-centered' : '') +\r\n     (scrollable ? ' modal-dialog-scrollable' : '')\" role=\"document\">\r\n        <div class=\"modal-content\"><ng-content></ng-content></div>\r\n    </div>\r\n    `,\r\n                encapsulation: ViewEncapsulation.None,\r\n                styles: [\"ngb-modal-window .component-host-scrollable{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbModalWindow.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\nNgbModalWindow.propDecorators = {\r\n    _dialogEl: [{ type: ViewChild, args: ['dialog', { static: true },] }],\r\n    ariaLabelledBy: [{ type: Input }],\r\n    backdrop: [{ type: Input }],\r\n    centered: [{ type: Input }],\r\n    keyboard: [{ type: Input }],\r\n    scrollable: [{ type: Input }],\r\n    size: [{ type: Input }],\r\n    windowClass: [{ type: Input }],\r\n    dismissEvent: [{ type: Output, args: ['dismiss',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbModalStack {\r\n    /**\r\n     * @param {?} _applicationRef\r\n     * @param {?} _injector\r\n     * @param {?} _document\r\n     * @param {?} _scrollBar\r\n     * @param {?} _rendererFactory\r\n     * @param {?} _ngZone\r\n     */\r\n    constructor(_applicationRef, _injector, _document, _scrollBar, _rendererFactory, _ngZone) {\r\n        this._applicationRef = _applicationRef;\r\n        this._injector = _injector;\r\n        this._document = _document;\r\n        this._scrollBar = _scrollBar;\r\n        this._rendererFactory = _rendererFactory;\r\n        this._ngZone = _ngZone;\r\n        this._activeWindowCmptHasChanged = new Subject();\r\n        this._ariaHiddenValues = new Map();\r\n        this._backdropAttributes = ['backdropClass'];\r\n        this._modalRefs = [];\r\n        this._windowAttributes = ['ariaLabelledBy', 'backdrop', 'centered', 'keyboard', 'scrollable', 'size', 'windowClass'];\r\n        this._windowCmpts = [];\r\n        // Trap focus on active WindowCmpt\r\n        this._activeWindowCmptHasChanged.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this._windowCmpts.length) {\r\n                /** @type {?} */\r\n                const activeWindowCmpt = this._windowCmpts[this._windowCmpts.length - 1];\r\n                ngbFocusTrap(this._ngZone, activeWindowCmpt.location.nativeElement, this._activeWindowCmptHasChanged);\r\n                this._revertAriaHidden();\r\n                this._setAriaHidden(activeWindowCmpt.location.nativeElement);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} moduleCFR\r\n     * @param {?} contentInjector\r\n     * @param {?} content\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    open(moduleCFR, contentInjector, content, options) {\r\n        /** @type {?} */\r\n        const containerEl = options.container instanceof HTMLElement ? options.container : isDefined(options.container) ?\r\n            this._document.querySelector(options.container) :\r\n            this._document.body;\r\n        /** @type {?} */\r\n        const renderer = this._rendererFactory.createRenderer(null, null);\r\n        /** @type {?} */\r\n        const revertPaddingForScrollBar = this._scrollBar.compensate();\r\n        /** @type {?} */\r\n        const removeBodyClass = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (!this._modalRefs.length) {\r\n                renderer.removeClass(this._document.body, 'modal-open');\r\n                this._revertAriaHidden();\r\n            }\r\n        });\r\n        if (!containerEl) {\r\n            throw new Error(`The specified modal container \"${options.container || 'body'}\" was not found in the DOM.`);\r\n        }\r\n        /** @type {?} */\r\n        const activeModal = new NgbActiveModal();\r\n        /** @type {?} */\r\n        const contentRef = this._getContentRef(moduleCFR, options.injector || contentInjector, content, activeModal, options);\r\n        /** @type {?} */\r\n        let backdropCmptRef = options.backdrop !== false ? this._attachBackdrop(moduleCFR, containerEl) : null;\r\n        /** @type {?} */\r\n        let windowCmptRef = this._attachWindowComponent(moduleCFR, containerEl, contentRef);\r\n        /** @type {?} */\r\n        let ngbModalRef = new NgbModalRef(windowCmptRef, contentRef, backdropCmptRef, options.beforeDismiss);\r\n        this._registerModalRef(ngbModalRef);\r\n        this._registerWindowCmpt(windowCmptRef);\r\n        ngbModalRef.result.then(revertPaddingForScrollBar, revertPaddingForScrollBar);\r\n        ngbModalRef.result.then(removeBodyClass, removeBodyClass);\r\n        activeModal.close = (/**\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        (result) => { ngbModalRef.close(result); });\r\n        activeModal.dismiss = (/**\r\n         * @param {?} reason\r\n         * @return {?}\r\n         */\r\n        (reason) => { ngbModalRef.dismiss(reason); });\r\n        this._applyWindowOptions(windowCmptRef.instance, options);\r\n        if (this._modalRefs.length === 1) {\r\n            renderer.addClass(this._document.body, 'modal-open');\r\n        }\r\n        if (backdropCmptRef && backdropCmptRef.instance) {\r\n            this._applyBackdropOptions(backdropCmptRef.instance, options);\r\n        }\r\n        return ngbModalRef;\r\n    }\r\n    /**\r\n     * @param {?=} reason\r\n     * @return {?}\r\n     */\r\n    dismissAll(reason) { this._modalRefs.forEach((/**\r\n     * @param {?} ngbModalRef\r\n     * @return {?}\r\n     */\r\n    ngbModalRef => ngbModalRef.dismiss(reason))); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasOpenModals() { return this._modalRefs.length > 0; }\r\n    /**\r\n     * @private\r\n     * @param {?} moduleCFR\r\n     * @param {?} containerEl\r\n     * @return {?}\r\n     */\r\n    _attachBackdrop(moduleCFR, containerEl) {\r\n        /** @type {?} */\r\n        let backdropFactory = moduleCFR.resolveComponentFactory(NgbModalBackdrop);\r\n        /** @type {?} */\r\n        let backdropCmptRef = backdropFactory.create(this._injector);\r\n        this._applicationRef.attachView(backdropCmptRef.hostView);\r\n        containerEl.appendChild(backdropCmptRef.location.nativeElement);\r\n        return backdropCmptRef;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} moduleCFR\r\n     * @param {?} containerEl\r\n     * @param {?} contentRef\r\n     * @return {?}\r\n     */\r\n    _attachWindowComponent(moduleCFR, containerEl, contentRef) {\r\n        /** @type {?} */\r\n        let windowFactory = moduleCFR.resolveComponentFactory(NgbModalWindow);\r\n        /** @type {?} */\r\n        let windowCmptRef = windowFactory.create(this._injector, contentRef.nodes);\r\n        this._applicationRef.attachView(windowCmptRef.hostView);\r\n        containerEl.appendChild(windowCmptRef.location.nativeElement);\r\n        return windowCmptRef;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} windowInstance\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    _applyWindowOptions(windowInstance, options) {\r\n        this._windowAttributes.forEach((/**\r\n         * @param {?} optionName\r\n         * @return {?}\r\n         */\r\n        (optionName) => {\r\n            if (isDefined(options[optionName])) {\r\n                windowInstance[optionName] = options[optionName];\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} backdropInstance\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    _applyBackdropOptions(backdropInstance, options) {\r\n        this._backdropAttributes.forEach((/**\r\n         * @param {?} optionName\r\n         * @return {?}\r\n         */\r\n        (optionName) => {\r\n            if (isDefined(options[optionName])) {\r\n                backdropInstance[optionName] = options[optionName];\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} moduleCFR\r\n     * @param {?} contentInjector\r\n     * @param {?} content\r\n     * @param {?} activeModal\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    _getContentRef(moduleCFR, contentInjector, content, activeModal, options) {\r\n        if (!content) {\r\n            return new ContentRef([]);\r\n        }\r\n        else if (content instanceof TemplateRef) {\r\n            return this._createFromTemplateRef(content, activeModal);\r\n        }\r\n        else if (isString(content)) {\r\n            return this._createFromString(content);\r\n        }\r\n        else {\r\n            return this._createFromComponent(moduleCFR, contentInjector, content, activeModal, options);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} content\r\n     * @param {?} activeModal\r\n     * @return {?}\r\n     */\r\n    _createFromTemplateRef(content, activeModal) {\r\n        /** @type {?} */\r\n        const context = {\r\n            $implicit: activeModal,\r\n            /**\r\n             * @param {?} result\r\n             * @return {?}\r\n             */\r\n            close(result) { activeModal.close(result); },\r\n            /**\r\n             * @param {?} reason\r\n             * @return {?}\r\n             */\r\n            dismiss(reason) { activeModal.dismiss(reason); }\r\n        };\r\n        /** @type {?} */\r\n        const viewRef = content.createEmbeddedView(context);\r\n        this._applicationRef.attachView(viewRef);\r\n        return new ContentRef([viewRef.rootNodes], viewRef);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    _createFromString(content) {\r\n        /** @type {?} */\r\n        const component = this._document.createTextNode(`${content}`);\r\n        return new ContentRef([[component]]);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} moduleCFR\r\n     * @param {?} contentInjector\r\n     * @param {?} content\r\n     * @param {?} context\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    _createFromComponent(moduleCFR, contentInjector, content, context, options) {\r\n        /** @type {?} */\r\n        const contentCmptFactory = moduleCFR.resolveComponentFactory(content);\r\n        /** @type {?} */\r\n        const modalContentInjector = Injector.create({ providers: [{ provide: NgbActiveModal, useValue: context }], parent: contentInjector });\r\n        /** @type {?} */\r\n        const componentRef = contentCmptFactory.create(modalContentInjector);\r\n        /** @type {?} */\r\n        const componentNativeEl = componentRef.location.nativeElement;\r\n        if (options.scrollable) {\r\n            ((/** @type {?} */ (componentNativeEl))).classList.add('component-host-scrollable');\r\n        }\r\n        this._applicationRef.attachView(componentRef.hostView);\r\n        // FIXME: we should here get rid of the component nativeElement\r\n        // and use `[Array.from(componentNativeEl.childNodes)]` instead and remove the above CSS class.\r\n        return new ContentRef([[componentNativeEl]], componentRef.hostView, componentRef);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    _setAriaHidden(element) {\r\n        /** @type {?} */\r\n        const parent = element.parentElement;\r\n        if (parent && element !== this._document.body) {\r\n            Array.from(parent.children).forEach((/**\r\n             * @param {?} sibling\r\n             * @return {?}\r\n             */\r\n            sibling => {\r\n                if (sibling !== element && sibling.nodeName !== 'SCRIPT') {\r\n                    this._ariaHiddenValues.set(sibling, sibling.getAttribute('aria-hidden'));\r\n                    sibling.setAttribute('aria-hidden', 'true');\r\n                }\r\n            }));\r\n            this._setAriaHidden(parent);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _revertAriaHidden() {\r\n        this._ariaHiddenValues.forEach((/**\r\n         * @param {?} value\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        (value, element) => {\r\n            if (value) {\r\n                element.setAttribute('aria-hidden', value);\r\n            }\r\n            else {\r\n                element.removeAttribute('aria-hidden');\r\n            }\r\n        }));\r\n        this._ariaHiddenValues.clear();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ngbModalRef\r\n     * @return {?}\r\n     */\r\n    _registerModalRef(ngbModalRef) {\r\n        /** @type {?} */\r\n        const unregisterModalRef = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const index = this._modalRefs.indexOf(ngbModalRef);\r\n            if (index > -1) {\r\n                this._modalRefs.splice(index, 1);\r\n            }\r\n        });\r\n        this._modalRefs.push(ngbModalRef);\r\n        ngbModalRef.result.then(unregisterModalRef, unregisterModalRef);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ngbWindowCmpt\r\n     * @return {?}\r\n     */\r\n    _registerWindowCmpt(ngbWindowCmpt) {\r\n        this._windowCmpts.push(ngbWindowCmpt);\r\n        this._activeWindowCmptHasChanged.next();\r\n        ngbWindowCmpt.onDestroy((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const index = this._windowCmpts.indexOf(ngbWindowCmpt);\r\n            if (index > -1) {\r\n                this._windowCmpts.splice(index, 1);\r\n                this._activeWindowCmptHasChanged.next();\r\n            }\r\n        }));\r\n    }\r\n}\r\nNgbModalStack.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nNgbModalStack.ctorParameters = () => [\r\n    { type: ApplicationRef },\r\n    { type: Injector },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: ScrollBar },\r\n    { type: RendererFactory2 },\r\n    { type: NgZone }\r\n];\r\n/** @nocollapse */ NgbModalStack.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbModalStack_Factory() { return new NgbModalStack(ɵɵinject(ApplicationRef), ɵɵinject(INJECTOR), ɵɵinject(DOCUMENT), ɵɵinject(ScrollBar), ɵɵinject(RendererFactory2), ɵɵinject(NgZone)); }, token: NgbModalStack, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A service for opening modal windows.\r\n *\r\n * Creating a modal is straightforward: create a component or a template and pass it as an argument to\r\n * the `.open()` method.\r\n */\r\nclass NgbModal {\r\n    /**\r\n     * @param {?} _moduleCFR\r\n     * @param {?} _injector\r\n     * @param {?} _modalStack\r\n     * @param {?} _config\r\n     */\r\n    constructor(_moduleCFR, _injector, _modalStack, _config) {\r\n        this._moduleCFR = _moduleCFR;\r\n        this._injector = _injector;\r\n        this._modalStack = _modalStack;\r\n        this._config = _config;\r\n    }\r\n    /**\r\n     * Opens a new modal window with the specified content and supplied options.\r\n     *\r\n     * Content can be provided as a `TemplateRef` or a component type. If you pass a component type as content,\r\n     * then instances of those components can be injected with an instance of the `NgbActiveModal` class. You can then\r\n     * use `NgbActiveModal` methods to close / dismiss modals from \"inside\" of your component.\r\n     *\r\n     * Also see the [`NgbModalOptions`](#/components/modal/api#NgbModalOptions) for the list of supported options.\r\n     * @param {?} content\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    open(content, options = {}) {\r\n        /** @type {?} */\r\n        const combinedOptions = Object.assign({}, this._config, options);\r\n        return this._modalStack.open(this._moduleCFR, this._injector, content, combinedOptions);\r\n    }\r\n    /**\r\n     * Dismisses all currently displayed modal windows with the supplied reason.\r\n     *\r\n     * \\@since 3.1.0\r\n     * @param {?=} reason\r\n     * @return {?}\r\n     */\r\n    dismissAll(reason) { this._modalStack.dismissAll(reason); }\r\n    /**\r\n     * Indicates if there are currently any open modal windows in the application.\r\n     *\r\n     * \\@since 3.3.0\r\n     * @return {?}\r\n     */\r\n    hasOpenModals() { return this._modalStack.hasOpenModals(); }\r\n}\r\nNgbModal.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nNgbModal.ctorParameters = () => [\r\n    { type: ComponentFactoryResolver },\r\n    { type: Injector },\r\n    { type: NgbModalStack },\r\n    { type: NgbModalConfig }\r\n];\r\n/** @nocollapse */ NgbModal.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbModal_Factory() { return new NgbModal(ɵɵinject(ComponentFactoryResolver), ɵɵinject(INJECTOR), ɵɵinject(NgbModalStack), ɵɵinject(NgbModalConfig)); }, token: NgbModal, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbModalModule {\r\n}\r\nNgbModalModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [NgbModalBackdrop, NgbModalWindow],\r\n                entryComponents: [NgbModalBackdrop, NgbModalWindow],\r\n                providers: [NgbModal]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbNav`](#/components/nav/api#NgbNav) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the navs used in the application.\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbNavConfig {\r\n    constructor() {\r\n        this.destroyOnHide = true;\r\n        this.orientation = 'horizontal';\r\n        this.roles = 'tablist';\r\n    }\r\n}\r\nNgbNavConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbNavConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbNavConfig_Factory() { return new NgbNavConfig(); }, token: NgbNavConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst isValidNavId = (/**\r\n * @param {?} id\r\n * @return {?}\r\n */\r\n(id) => isDefined(id) && id !== '');\r\n/** @type {?} */\r\nlet navCounter = 0;\r\n/**\r\n * This directive must be used to wrap content to be displayed in the nav.\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbNavContent {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbNavContent.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbNavContent]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbNavContent.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * The directive used to group nav link and related nav content. As well as set nav identifier and some options.\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbNavItem {\r\n    /**\r\n     * @param {?} nav\r\n     * @param {?} elementRef\r\n     */\r\n    constructor(nav, elementRef) {\r\n        this.elementRef = elementRef;\r\n        /**\r\n         * If `true`, the current nav item is disabled and can't be toggled by user.\r\n         *\r\n         * Nevertheless disabled nav can be selected programmatically via the `.select()` method and the `[activeId]` binding.\r\n         */\r\n        this.disabled = false;\r\n        // TODO: cf https://github.com/angular/angular/issues/30106\r\n        this._nav = nav;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\r\n        // only @ContentChildren allows us to specify the {descendants: false} option.\r\n        // Without {descendants: false} we are hitting bugs described in:\r\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n        this.contentTpl = this.contentTpls.first;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (!isDefined(this.domId)) {\r\n            this.domId = `ngb-nav-${navCounter++}`;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get active() { return this._nav.activeId === this.id; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get id() { return isValidNavId(this._id) ? this._id : this.domId; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get panelDomId() { return `${this.domId}-panel`; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isPanelInDom() {\r\n        return (isDefined(this.destroyOnHide) ? !this.destroyOnHide : !this._nav.destroyOnHide) || this.active;\r\n    }\r\n}\r\nNgbNavItem.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngbNavItem]', exportAs: 'ngbNavItem', host: { '[class.nav-item]': 'true' } },] }\r\n];\r\n/** @nocollapse */\r\nNgbNavItem.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => NgbNav)),] }] },\r\n    { type: ElementRef }\r\n];\r\nNgbNavItem.propDecorators = {\r\n    destroyOnHide: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    domId: [{ type: Input }],\r\n    _id: [{ type: Input, args: ['ngbNavItem',] }],\r\n    contentTpls: [{ type: ContentChildren, args: [NgbNavContent, { descendants: false },] }]\r\n};\r\n/**\r\n * A nav directive that helps with implementing tabbed navigation components.\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbNav {\r\n    /**\r\n     * @param {?} role\r\n     * @param {?} config\r\n     * @param {?} _cd\r\n     */\r\n    constructor(role, config, _cd) {\r\n        this.role = role;\r\n        this._cd = _cd;\r\n        /**\r\n         * The event emitted after the active nav changes\r\n         * The payload of the event is the newly active nav id\r\n         *\r\n         * If you want to prevent nav change, you should use `(navChange)` event\r\n         */\r\n        this.activeIdChange = new EventEmitter();\r\n        /**\r\n         * The nav change event emitted right before the nav change happens on user click.\r\n         *\r\n         * This event won't be emitted if nav is changed programmatically via `[activeId]` or `.select()`.\r\n         *\r\n         * See [`NgbNavChangeEvent`](#/components/nav/api#NgbNavChangeEvent) for payload details.\r\n         */\r\n        this.navChange = new EventEmitter();\r\n        this.destroyOnHide = config.destroyOnHide;\r\n        this.orientation = config.orientation;\r\n        this.roles = config.roles;\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    click(item) {\r\n        if (!item.disabled) {\r\n            this._updateActiveId(item.id);\r\n        }\r\n    }\r\n    /**\r\n     * Selects the nav with the given id and shows its associated pane.\r\n     * Any other nav that was previously selected becomes unselected and its associated pane is hidden.\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    select(id) { this._updateActiveId(id, false); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        if (!isDefined(this.activeId)) {\r\n            /** @type {?} */\r\n            const nextId = this.items.first ? this.items.first.id : null;\r\n            if (isValidNavId(nextId)) {\r\n                this._updateActiveId(nextId, false);\r\n                this._cd.detectChanges();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} nextId\r\n     * @param {?=} emitNavChange\r\n     * @return {?}\r\n     */\r\n    _updateActiveId(nextId, emitNavChange = true) {\r\n        if (this.activeId !== nextId) {\r\n            /** @type {?} */\r\n            let defaultPrevented = false;\r\n            if (emitNavChange) {\r\n                this.navChange.emit({ activeId: this.activeId, nextId, preventDefault: (/**\r\n                     * @return {?}\r\n                     */\r\n                    () => { defaultPrevented = true; }) });\r\n            }\r\n            if (!defaultPrevented) {\r\n                this.activeId = nextId;\r\n                this.activeIdChange.emit(nextId);\r\n            }\r\n        }\r\n    }\r\n}\r\nNgbNav.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngbNav]',\r\n                exportAs: 'ngbNav',\r\n                host: {\r\n                    '[class.nav]': 'true',\r\n                    '[class.flex-column]': `orientation === 'vertical'`,\r\n                    '[attr.aria-orientation]': `orientation === 'vertical' && roles === 'tablist' ? 'vertical' : undefined`,\r\n                    '[attr.role]': `role ? role : roles ? 'tablist' : undefined`,\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbNav.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\r\n    { type: NgbNavConfig },\r\n    { type: ChangeDetectorRef }\r\n];\r\nNgbNav.propDecorators = {\r\n    activeId: [{ type: Input }],\r\n    activeIdChange: [{ type: Output }],\r\n    destroyOnHide: [{ type: Input }],\r\n    orientation: [{ type: Input }],\r\n    roles: [{ type: Input }],\r\n    items: [{ type: ContentChildren, args: [NgbNavItem,] }],\r\n    navChange: [{ type: Output }]\r\n};\r\n/**\r\n * A directive to put on the nav link.\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbNavLink {\r\n    /**\r\n     * @param {?} role\r\n     * @param {?} navItem\r\n     * @param {?} nav\r\n     */\r\n    constructor(role, navItem, nav) {\r\n        this.role = role;\r\n        this.navItem = navItem;\r\n        this.nav = nav;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasNavItemClass() {\r\n        // with alternative markup we have to add `.nav-item` class, because `ngbNavItem` is on the ng-container\r\n        return this.navItem.elementRef.nativeElement.nodeType === Node.COMMENT_NODE;\r\n    }\r\n}\r\nNgbNavLink.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'a[ngbNavLink]',\r\n                host: {\r\n                    '[id]': 'navItem.domId',\r\n                    '[class.nav-link]': 'true',\r\n                    '[class.nav-item]': 'hasNavItemClass()',\r\n                    '[attr.role]': `role ? role : nav.roles ? 'tab' : undefined`,\r\n                    'href': '',\r\n                    '[class.active]': 'navItem.active',\r\n                    '[class.disabled]': 'navItem.disabled',\r\n                    '[attr.tabindex]': 'navItem.disabled ? -1 : undefined',\r\n                    '[attr.aria-controls]': 'navItem.isPanelInDom() ? navItem.panelDomId : null',\r\n                    '[attr.aria-selected]': 'navItem.active',\r\n                    '[attr.aria-disabled]': 'navItem.disabled',\r\n                    '(click)': 'nav.click(navItem); $event.preventDefault()'\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbNavLink.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\r\n    { type: NgbNavItem },\r\n    { type: NgbNav }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The outlet where currently active nav content will be displayed.\r\n *\r\n * \\@since 5.2.0\r\n */\r\nclass NgbNavOutlet {\r\n}\r\nNgbNavOutlet.decorators = [\r\n    { type: Component, args: [{\r\n                selector: '[ngbNavOutlet]',\r\n                host: { '[class.tab-content]': 'true' },\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n      <ng-template ngFor let-item [ngForOf]=\"nav.items\">\r\n          <div class=\"tab-pane\"\r\n               *ngIf=\"item.isPanelInDom()\"\r\n               [id]=\"item.panelDomId\"\r\n               [class.active]=\"item.active\"\r\n               [attr.role]=\"paneRole ? paneRole : nav.roles ? 'tabpanel' : undefined\"\r\n               [attr.aria-labelledby]=\"item.domId\">\r\n              <ng-template [ngTemplateOutlet]=\"item.contentTpl?.templateRef\" [ngTemplateOutletContext]=\"{$implicit: item.active}\"></ng-template>\r\n          </div>\r\n      </ng-template>\r\n  `\r\n            }] }\r\n];\r\nNgbNavOutlet.propDecorators = {\r\n    paneRole: [{ type: Input }],\r\n    nav: [{ type: Input, args: ['ngbNavOutlet',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_NAV_DIRECTIVES = [NgbNavContent, NgbNav, NgbNavItem, NgbNavLink, NgbNavOutlet];\r\nclass NgbNavModule {\r\n}\r\nNgbNavModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: NGB_NAV_DIRECTIVES, exports: NGB_NAV_DIRECTIVES, imports: [CommonModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbPagination`](#/components/pagination/api#NgbPagination) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the paginations used in the application.\r\n */\r\nclass NgbPaginationConfig {\r\n    constructor() {\r\n        this.disabled = false;\r\n        this.boundaryLinks = false;\r\n        this.directionLinks = true;\r\n        this.ellipses = true;\r\n        this.maxSize = 0;\r\n        this.pageSize = 10;\r\n        this.rotate = false;\r\n    }\r\n}\r\nNgbPaginationConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbPaginationConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbPaginationConfig_Factory() { return new NgbPaginationConfig(); }, token: NgbPaginationConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A directive to match the 'ellipsis' link template\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPaginationEllipsis {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPaginationEllipsis.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPaginationEllipsis]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPaginationEllipsis.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive to match the 'first' link template\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPaginationFirst {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPaginationFirst.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPaginationFirst]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPaginationFirst.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive to match the 'last' link template\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPaginationLast {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPaginationLast.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPaginationLast]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPaginationLast.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive to match the 'next' link template\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPaginationNext {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPaginationNext.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPaginationNext]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPaginationNext.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive to match the page 'number' link template\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPaginationNumber {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPaginationNumber.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPaginationNumber]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPaginationNumber.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive to match the 'previous' link template\r\n *\r\n * \\@since 4.1.0\r\n */\r\nclass NgbPaginationPrevious {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbPaginationPrevious.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbPaginationPrevious]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPaginationPrevious.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A component that displays page numbers and allows to customize them in several ways.\r\n */\r\nclass NgbPagination {\r\n    /**\r\n     * @param {?} config\r\n     */\r\n    constructor(config) {\r\n        this.pageCount = 0;\r\n        this.pages = [];\r\n        /**\r\n         *  The current page.\r\n         *\r\n         *  Page numbers start with `1`.\r\n         */\r\n        this.page = 1;\r\n        /**\r\n         *  An event fired when the page is changed. Will fire only if collection size is set and all values are valid.\r\n         *\r\n         *  Event payload is the number of the newly selected page.\r\n         *\r\n         *  Page numbers start with `1`.\r\n         */\r\n        this.pageChange = new EventEmitter(true);\r\n        this.disabled = config.disabled;\r\n        this.boundaryLinks = config.boundaryLinks;\r\n        this.directionLinks = config.directionLinks;\r\n        this.ellipses = config.ellipses;\r\n        this.maxSize = config.maxSize;\r\n        this.pageSize = config.pageSize;\r\n        this.rotate = config.rotate;\r\n        this.size = config.size;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasPrevious() { return this.page > 1; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasNext() { return this.page < this.pageCount; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    nextDisabled() { return !this.hasNext() || this.disabled; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    previousDisabled() { return !this.hasPrevious() || this.disabled; }\r\n    /**\r\n     * @param {?} pageNumber\r\n     * @return {?}\r\n     */\r\n    selectPage(pageNumber) { this._updatePages(pageNumber); }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) { this._updatePages(this.page); }\r\n    /**\r\n     * @param {?} pageNumber\r\n     * @return {?}\r\n     */\r\n    isEllipsis(pageNumber) { return pageNumber === -1; }\r\n    /**\r\n     * Appends ellipses and first/last page number to the displayed pages\r\n     * @private\r\n     * @param {?} start\r\n     * @param {?} end\r\n     * @return {?}\r\n     */\r\n    _applyEllipses(start, end) {\r\n        if (this.ellipses) {\r\n            if (start > 0) {\r\n                // The first page will always be included. If the displayed range\r\n                // starts after the third page, then add ellipsis. But if the range\r\n                // starts on the third page, then add the second page instead of\r\n                // an ellipsis, because the ellipsis would only hide a single page.\r\n                if (start > 2) {\r\n                    this.pages.unshift(-1);\r\n                }\r\n                else if (start === 2) {\r\n                    this.pages.unshift(2);\r\n                }\r\n                this.pages.unshift(1);\r\n            }\r\n            if (end < this.pageCount) {\r\n                // The last page will always be included. If the displayed range\r\n                // ends before the third-last page, then add ellipsis. But if the range\r\n                // ends on third-last page, then add the second-last page instead of\r\n                // an ellipsis, because the ellipsis would only hide a single page.\r\n                if (end < (this.pageCount - 2)) {\r\n                    this.pages.push(-1);\r\n                }\r\n                else if (end === (this.pageCount - 2)) {\r\n                    this.pages.push(this.pageCount - 1);\r\n                }\r\n                this.pages.push(this.pageCount);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Rotates page numbers based on maxSize items visible.\r\n     * Currently selected page stays in the middle:\r\n     *\r\n     * Ex. for selected page = 6:\r\n     * [5,*6*,7] for maxSize = 3\r\n     * [4,5,*6*,7] for maxSize = 4\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _applyRotation() {\r\n        /** @type {?} */\r\n        let start = 0;\r\n        /** @type {?} */\r\n        let end = this.pageCount;\r\n        /** @type {?} */\r\n        let leftOffset = Math.floor(this.maxSize / 2);\r\n        /** @type {?} */\r\n        let rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\r\n        if (this.page <= leftOffset) {\r\n            // very beginning, no rotation -> [0..maxSize]\r\n            end = this.maxSize;\r\n        }\r\n        else if (this.pageCount - this.page < leftOffset) {\r\n            // very end, no rotation -> [len-maxSize..len]\r\n            start = this.pageCount - this.maxSize;\r\n        }\r\n        else {\r\n            // rotate\r\n            start = this.page - leftOffset - 1;\r\n            end = this.page + rightOffset;\r\n        }\r\n        return [start, end];\r\n    }\r\n    /**\r\n     * Paginates page numbers based on maxSize items per page.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _applyPagination() {\r\n        /** @type {?} */\r\n        let page = Math.ceil(this.page / this.maxSize) - 1;\r\n        /** @type {?} */\r\n        let start = page * this.maxSize;\r\n        /** @type {?} */\r\n        let end = start + this.maxSize;\r\n        return [start, end];\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} newPageNo\r\n     * @return {?}\r\n     */\r\n    _setPageInRange(newPageNo) {\r\n        /** @type {?} */\r\n        const prevPageNo = this.page;\r\n        this.page = getValueInRange(newPageNo, this.pageCount, 1);\r\n        if (this.page !== prevPageNo && isNumber(this.collectionSize)) {\r\n            this.pageChange.emit(this.page);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} newPage\r\n     * @return {?}\r\n     */\r\n    _updatePages(newPage) {\r\n        this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\r\n        if (!isNumber(this.pageCount)) {\r\n            this.pageCount = 0;\r\n        }\r\n        // fill-in model needed to render pages\r\n        this.pages.length = 0;\r\n        for (let i = 1; i <= this.pageCount; i++) {\r\n            this.pages.push(i);\r\n        }\r\n        // set page within 1..max range\r\n        this._setPageInRange(newPage);\r\n        // apply maxSize if necessary\r\n        if (this.maxSize > 0 && this.pageCount > this.maxSize) {\r\n            /** @type {?} */\r\n            let start = 0;\r\n            /** @type {?} */\r\n            let end = this.pageCount;\r\n            // either paginating or rotating page numbers\r\n            if (this.rotate) {\r\n                [start, end] = this._applyRotation();\r\n            }\r\n            else {\r\n                [start, end] = this._applyPagination();\r\n            }\r\n            this.pages = this.pages.slice(start, end);\r\n            // adding ellipses\r\n            this._applyEllipses(start, end);\r\n        }\r\n    }\r\n}\r\nNgbPagination.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-pagination',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: { 'role': 'navigation' },\r\n                template: `\r\n    <ng-template #first><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.first\">&laquo;&laquo;</span></ng-template>\r\n    <ng-template #previous><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.previous\">&laquo;</span></ng-template>\r\n    <ng-template #next><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.next\">&raquo;</span></ng-template>\r\n    <ng-template #last><span aria-hidden=\"true\" i18n=\"@@ngb.pagination.last\">&raquo;&raquo;</span></ng-template>\r\n    <ng-template #ellipsis>...</ng-template>\r\n    <ng-template #defaultNumber let-page let-currentPage=\"currentPage\">\r\n      {{ page }}\r\n      <span *ngIf=\"page === currentPage\" class=\"sr-only\">(current)</span>\r\n    </ng-template>\r\n    <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\r\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\"\r\n        [class.disabled]=\"previousDisabled()\">\r\n        <a aria-label=\"First\" i18n-aria-label=\"@@ngb.pagination.first-aria\" class=\"page-link\" href\r\n          (click)=\"selectPage(1); $event.preventDefault()\" [attr.tabindex]=\"previousDisabled() ? '-1' : null\"\r\n          [attr.aria-disabled]=\"previousDisabled() ? 'true' : null\">\r\n          <ng-template [ngTemplateOutlet]=\"tplFirst?.templateRef || first\"\r\n                       [ngTemplateOutletContext]=\"{disabled: previousDisabled(), currentPage: page}\"></ng-template>\r\n        </a>\r\n      </li>\r\n\r\n      <li *ngIf=\"directionLinks\" class=\"page-item\"\r\n        [class.disabled]=\"previousDisabled()\">\r\n        <a aria-label=\"Previous\" i18n-aria-label=\"@@ngb.pagination.previous-aria\" class=\"page-link\" href\r\n          (click)=\"selectPage(page-1); $event.preventDefault()\" [attr.tabindex]=\"previousDisabled() ? '-1' : null\"\r\n          [attr.aria-disabled]=\"previousDisabled() ? 'true' : null\">\r\n          <ng-template [ngTemplateOutlet]=\"tplPrevious?.templateRef || previous\"\r\n                       [ngTemplateOutletContext]=\"{disabled: previousDisabled()}\"></ng-template>\r\n        </a>\r\n      </li>\r\n      <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\"\r\n        [class.disabled]=\"isEllipsis(pageNumber) || disabled\" [attr.aria-current]=\"(pageNumber === page ? 'page' : null)\">\r\n        <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\" tabindex=\"-1\" aria-disabled=\"true\">\r\n          <ng-template [ngTemplateOutlet]=\"tplEllipsis?.templateRef || ellipsis\"\r\n                       [ngTemplateOutletContext]=\"{disabled: true, currentPage: page}\"></ng-template>\r\n        </a>\r\n        <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"selectPage(pageNumber); $event.preventDefault()\" [attr.tabindex]=\"disabled ? '-1' : null\"\r\n          [attr.aria-disabled]=\"disabled ? 'true' : null\">\r\n          <ng-template [ngTemplateOutlet]=\"tplNumber?.templateRef || defaultNumber\"\r\n                       [ngTemplateOutletContext]=\"{disabled: disabled, $implicit: pageNumber, currentPage: page}\"></ng-template>\r\n        </a>\r\n      </li>\r\n      <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"nextDisabled()\">\r\n        <a aria-label=\"Next\" i18n-aria-label=\"@@ngb.pagination.next-aria\" class=\"page-link\" href\r\n          (click)=\"selectPage(page+1); $event.preventDefault()\" [attr.tabindex]=\"nextDisabled() ? '-1' : null\"\r\n          [attr.aria-disabled]=\"nextDisabled() ? 'true' : null\">\r\n          <ng-template [ngTemplateOutlet]=\"tplNext?.templateRef || next\"\r\n                       [ngTemplateOutletContext]=\"{disabled: nextDisabled(), currentPage: page}\"></ng-template>\r\n        </a>\r\n      </li>\r\n\r\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"nextDisabled()\">\r\n        <a aria-label=\"Last\" i18n-aria-label=\"@@ngb.pagination.last-aria\" class=\"page-link\" href\r\n          (click)=\"selectPage(pageCount); $event.preventDefault()\" [attr.tabindex]=\"nextDisabled() ? '-1' : null\"\r\n          [attr.aria-disabled]=\"nextDisabled() ? 'true' : null\">\r\n          <ng-template [ngTemplateOutlet]=\"tplLast?.templateRef || last\"\r\n                       [ngTemplateOutletContext]=\"{disabled: nextDisabled(), currentPage: page}\"></ng-template>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbPagination.ctorParameters = () => [\r\n    { type: NgbPaginationConfig }\r\n];\r\nNgbPagination.propDecorators = {\r\n    tplEllipsis: [{ type: ContentChild, args: [NgbPaginationEllipsis, { static: false },] }],\r\n    tplFirst: [{ type: ContentChild, args: [NgbPaginationFirst, { static: false },] }],\r\n    tplLast: [{ type: ContentChild, args: [NgbPaginationLast, { static: false },] }],\r\n    tplNext: [{ type: ContentChild, args: [NgbPaginationNext, { static: false },] }],\r\n    tplNumber: [{ type: ContentChild, args: [NgbPaginationNumber, { static: false },] }],\r\n    tplPrevious: [{ type: ContentChild, args: [NgbPaginationPrevious, { static: false },] }],\r\n    disabled: [{ type: Input }],\r\n    boundaryLinks: [{ type: Input }],\r\n    directionLinks: [{ type: Input }],\r\n    ellipses: [{ type: Input }],\r\n    rotate: [{ type: Input }],\r\n    collectionSize: [{ type: Input }],\r\n    maxSize: [{ type: Input }],\r\n    page: [{ type: Input }],\r\n    pageSize: [{ type: Input }],\r\n    pageChange: [{ type: Output }],\r\n    size: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst DIRECTIVES = [\r\n    NgbPagination, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationNext, NgbPaginationNumber,\r\n    NgbPaginationPrevious\r\n];\r\nclass NgbPaginationModule {\r\n}\r\nNgbPaginationModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: DIRECTIVES, exports: DIRECTIVES, imports: [CommonModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Trigger {\r\n    /**\r\n     * @param {?} open\r\n     * @param {?=} close\r\n     */\r\n    constructor(open, close) {\r\n        this.open = open;\r\n        this.close = close;\r\n        if (!close) {\r\n            this.close = open;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isManual() { return this.open === 'manual' || this.close === 'manual'; }\r\n}\r\n/** @type {?} */\r\nconst DEFAULT_ALIASES = {\r\n    'hover': ['mouseenter', 'mouseleave'],\r\n    'focus': ['focusin', 'focusout'],\r\n};\r\n/**\r\n * @param {?} triggers\r\n * @param {?=} aliases\r\n * @return {?}\r\n */\r\nfunction parseTriggers(triggers, aliases = DEFAULT_ALIASES) {\r\n    /** @type {?} */\r\n    const trimmedTriggers = (triggers || '').trim();\r\n    if (trimmedTriggers.length === 0) {\r\n        return [];\r\n    }\r\n    /** @type {?} */\r\n    const parsedTriggers = trimmedTriggers.split(/\\s+/).map((/**\r\n     * @param {?} trigger\r\n     * @return {?}\r\n     */\r\n    trigger => trigger.split(':'))).map((/**\r\n     * @param {?} triggerPair\r\n     * @return {?}\r\n     */\r\n    (triggerPair) => {\r\n        /** @type {?} */\r\n        let alias = aliases[triggerPair[0]] || triggerPair;\r\n        return new Trigger(alias[0], alias[1]);\r\n    }));\r\n    /** @type {?} */\r\n    const manualTriggers = parsedTriggers.filter((/**\r\n     * @param {?} triggerPair\r\n     * @return {?}\r\n     */\r\n    triggerPair => triggerPair.isManual()));\r\n    if (manualTriggers.length > 1) {\r\n        throw 'Triggers parse error: only one manual trigger is allowed';\r\n    }\r\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\r\n        throw 'Triggers parse error: manual trigger can\\'t be mixed with other triggers';\r\n    }\r\n    return parsedTriggers;\r\n}\r\n/**\r\n * @param {?} renderer\r\n * @param {?} nativeElement\r\n * @param {?} triggers\r\n * @param {?} isOpenedFn\r\n * @return {?}\r\n */\r\nfunction observeTriggers(renderer, nativeElement, triggers, isOpenedFn) {\r\n    return new Observable((/**\r\n     * @param {?} subscriber\r\n     * @return {?}\r\n     */\r\n    subscriber => {\r\n        /** @type {?} */\r\n        const listeners = [];\r\n        /** @type {?} */\r\n        const openFn = (/**\r\n         * @return {?}\r\n         */\r\n        () => subscriber.next(true));\r\n        /** @type {?} */\r\n        const closeFn = (/**\r\n         * @return {?}\r\n         */\r\n        () => subscriber.next(false));\r\n        /** @type {?} */\r\n        const toggleFn = (/**\r\n         * @return {?}\r\n         */\r\n        () => subscriber.next(!isOpenedFn()));\r\n        triggers.forEach((/**\r\n         * @param {?} trigger\r\n         * @return {?}\r\n         */\r\n        (trigger) => {\r\n            if (trigger.open === trigger.close) {\r\n                listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));\r\n            }\r\n            else {\r\n                listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));\r\n            }\r\n        }));\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        () => { listeners.forEach((/**\r\n         * @param {?} unsubscribeFn\r\n         * @return {?}\r\n         */\r\n        unsubscribeFn => unsubscribeFn())); });\r\n    }));\r\n}\r\n/** @type {?} */\r\nconst delayOrNoop = (/**\r\n * @template T\r\n * @param {?} time\r\n * @return {?}\r\n */\r\n(time) => time > 0 ? delay(time) : (/**\r\n * @param {?} a\r\n * @return {?}\r\n */\r\n(a) => a));\r\n/**\r\n * @param {?} openDelay\r\n * @param {?} closeDelay\r\n * @param {?} isOpenedFn\r\n * @return {?}\r\n */\r\nfunction triggerDelay(openDelay, closeDelay, isOpenedFn) {\r\n    return (/**\r\n     * @param {?} input$\r\n     * @return {?}\r\n     */\r\n    (input$) => {\r\n        /** @type {?} */\r\n        let pending = null;\r\n        /** @type {?} */\r\n        const filteredInput$ = input$.pipe(map((/**\r\n         * @param {?} open\r\n         * @return {?}\r\n         */\r\n        open => ({ open }))), filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            /** @type {?} */\r\n            const currentlyOpen = isOpenedFn();\r\n            if (currentlyOpen !== event.open && (!pending || pending.open === currentlyOpen)) {\r\n                pending = event;\r\n                return true;\r\n            }\r\n            if (pending && pending.open !== event.open) {\r\n                pending = null;\r\n            }\r\n            return false;\r\n        })), share());\r\n        /** @type {?} */\r\n        const delayedOpen$ = filteredInput$.pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => event.open)), delayOrNoop(openDelay));\r\n        /** @type {?} */\r\n        const delayedClose$ = filteredInput$.pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => !event.open)), delayOrNoop(closeDelay));\r\n        return merge(delayedOpen$, delayedClose$)\r\n            .pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            if (event === pending) {\r\n                pending = null;\r\n                return event.open !== isOpenedFn();\r\n            }\r\n            return false;\r\n        })), map((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => event.open)));\r\n    });\r\n}\r\n/**\r\n * @param {?} renderer\r\n * @param {?} nativeElement\r\n * @param {?} triggers\r\n * @param {?} isOpenedFn\r\n * @param {?} openFn\r\n * @param {?} closeFn\r\n * @param {?=} openDelay\r\n * @param {?=} closeDelay\r\n * @return {?}\r\n */\r\nfunction listenToTriggers(renderer, nativeElement, triggers, isOpenedFn, openFn, closeFn, openDelay = 0, closeDelay = 0) {\r\n    /** @type {?} */\r\n    const parsedTriggers = parseTriggers(triggers);\r\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n    }\r\n    /** @type {?} */\r\n    const subscription = observeTriggers(renderer, nativeElement, parsedTriggers, isOpenedFn)\r\n        .pipe(triggerDelay(openDelay, closeDelay, isOpenedFn))\r\n        .subscribe((/**\r\n     * @param {?} open\r\n     * @return {?}\r\n     */\r\n    open => (open ? openFn() : closeFn())));\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    () => subscription.unsubscribe());\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbPopover`](#/components/popover/api#NgbPopover) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the popovers used in the application.\r\n */\r\nclass NgbPopoverConfig {\r\n    constructor() {\r\n        this.autoClose = true;\r\n        this.placement = 'auto';\r\n        this.triggers = 'click';\r\n        this.disablePopover = false;\r\n        this.openDelay = 0;\r\n        this.closeDelay = 0;\r\n    }\r\n}\r\nNgbPopoverConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbPopoverConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbPopoverConfig_Factory() { return new NgbPopoverConfig(); }, token: NgbPopoverConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nlet nextId$3 = 0;\r\nclass NgbPopoverWindow {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isTitleTemplate() { return this.title instanceof TemplateRef; }\r\n}\r\nNgbPopoverWindow.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-popover-window',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: { '[class]': '\"popover\" + (popoverClass ? \" \" + popoverClass : \"\")', 'role': 'tooltip', '[id]': 'id' },\r\n                template: `\r\n    <div class=\"arrow\"></div>\r\n    <h3 class=\"popover-header\" *ngIf=\"title != null\">\r\n      <ng-template #simpleTitle>{{title}}</ng-template>\r\n      <ng-template [ngTemplateOutlet]=\"isTitleTemplate() ? title : simpleTitle\" [ngTemplateOutletContext]=\"context\"></ng-template>\r\n    </h3>\r\n    <div class=\"popover-body\"><ng-content></ng-content></div>`,\r\n                styles: [\"ngb-popover-window.bs-popover-bottom>.arrow,ngb-popover-window.bs-popover-top>.arrow{left:50%;margin-left:-.5rem}ngb-popover-window.bs-popover-bottom-left>.arrow,ngb-popover-window.bs-popover-top-left>.arrow{left:2em}ngb-popover-window.bs-popover-bottom-right>.arrow,ngb-popover-window.bs-popover-top-right>.arrow{left:auto;right:2em}ngb-popover-window.bs-popover-left>.arrow,ngb-popover-window.bs-popover-right>.arrow{top:50%;margin-top:-.5rem}ngb-popover-window.bs-popover-left-top>.arrow,ngb-popover-window.bs-popover-right-top>.arrow{top:.7em}ngb-popover-window.bs-popover-left-bottom>.arrow,ngb-popover-window.bs-popover-right-bottom>.arrow{top:auto;bottom:.7em}\"]\r\n            }] }\r\n];\r\nNgbPopoverWindow.propDecorators = {\r\n    title: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    popoverClass: [{ type: Input }],\r\n    context: [{ type: Input }]\r\n};\r\n/**\r\n * A lightweight and extensible directive for fancy popover creation.\r\n */\r\nclass NgbPopover {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _renderer\r\n     * @param {?} injector\r\n     * @param {?} componentFactoryResolver\r\n     * @param {?} viewContainerRef\r\n     * @param {?} config\r\n     * @param {?} _ngZone\r\n     * @param {?} _document\r\n     * @param {?} _changeDetector\r\n     * @param {?} applicationRef\r\n     */\r\n    constructor(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        this._ngZone = _ngZone;\r\n        this._document = _document;\r\n        this._changeDetector = _changeDetector;\r\n        /**\r\n         * An event emitted when the popover is shown. Contains no payload.\r\n         */\r\n        this.shown = new EventEmitter();\r\n        /**\r\n         * An event emitted when the popover is hidden. Contains no payload.\r\n         */\r\n        this.hidden = new EventEmitter();\r\n        this._ngbPopoverWindowId = `ngb-popover-${nextId$3++}`;\r\n        this.autoClose = config.autoClose;\r\n        this.placement = config.placement;\r\n        this.triggers = config.triggers;\r\n        this.container = config.container;\r\n        this.disablePopover = config.disablePopover;\r\n        this.popoverClass = config.popoverClass;\r\n        this.openDelay = config.openDelay;\r\n        this.closeDelay = config.closeDelay;\r\n        this._popupService = new PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\r\n        this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this._windowRef) {\r\n                positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body', 'bs-popover');\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _isDisabled() {\r\n        if (this.disablePopover) {\r\n            return true;\r\n        }\r\n        if (!this.ngbPopover && !this.popoverTitle) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Opens the popover.\r\n     *\r\n     * This is considered to be a \"manual\" triggering.\r\n     * The `context` is an optional value to be injected into the popover template when it is created.\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    open(context) {\r\n        if (!this._windowRef && !this._isDisabled()) {\r\n            this._windowRef = this._popupService.open(this.ngbPopover, context);\r\n            this._windowRef.instance.title = this.popoverTitle;\r\n            this._windowRef.instance.context = context;\r\n            this._windowRef.instance.popoverClass = this.popoverClass;\r\n            this._windowRef.instance.id = this._ngbPopoverWindowId;\r\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbPopoverWindowId);\r\n            if (this.container === 'body') {\r\n                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n            }\r\n            // We need to detect changes, because we don't know where .open() might be called from.\r\n            // Ex. opening popover from one of lifecycle hooks that run after the CD\r\n            // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception\r\n            this._windowRef.changeDetectorRef.detectChanges();\r\n            // We need to mark for check, because popover won't work inside the OnPush component.\r\n            // Ex. when we use expression like `{{ popover.isOpen() : 'opened' : 'closed' }}`\r\n            // inside the template of an OnPush component and we change the popover from\r\n            // open -> closed, the expression in question won't be updated unless we explicitly\r\n            // mark the parent component to be checked.\r\n            this._windowRef.changeDetectorRef.markForCheck();\r\n            ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n             * @return {?}\r\n             */\r\n            () => this.close()), this.hidden, [this._windowRef.location.nativeElement]);\r\n            this.shown.emit();\r\n        }\r\n    }\r\n    /**\r\n     * Closes the popover.\r\n     *\r\n     * This is considered to be a \"manual\" triggering of the popover.\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (this._windowRef) {\r\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n            this._popupService.close();\r\n            this._windowRef = null;\r\n            this.hidden.emit();\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Toggles the popover.\r\n     *\r\n     * This is considered to be a \"manual\" triggering of the popover.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        if (this._windowRef) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    }\r\n    /**\r\n     * Returns `true`, if the popover is currently shown.\r\n     * @return {?}\r\n     */\r\n    isOpen() { return this._windowRef != null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);\r\n    }\r\n    /**\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\r\n    ngOnChanges({ ngbPopover, popoverTitle, disablePopover, popoverClass }) {\r\n        if (popoverClass && this.isOpen()) {\r\n            this._windowRef.instance.popoverClass = popoverClass.currentValue;\r\n        }\r\n        // close popover if title and content become empty, or disablePopover set to true\r\n        if ((ngbPopover || popoverTitle || disablePopover) && this._isDisabled()) {\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.close();\r\n        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\r\n        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\r\n        if (this._unregisterListenersFn) {\r\n            this._unregisterListenersFn();\r\n        }\r\n        this._zoneSubscription.unsubscribe();\r\n    }\r\n}\r\nNgbPopover.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngbPopover]', exportAs: 'ngbPopover' },] }\r\n];\r\n/** @nocollapse */\r\nNgbPopover.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: Injector },\r\n    { type: ComponentFactoryResolver },\r\n    { type: ViewContainerRef },\r\n    { type: NgbPopoverConfig },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: ApplicationRef }\r\n];\r\nNgbPopover.propDecorators = {\r\n    autoClose: [{ type: Input }],\r\n    ngbPopover: [{ type: Input }],\r\n    popoverTitle: [{ type: Input }],\r\n    placement: [{ type: Input }],\r\n    triggers: [{ type: Input }],\r\n    container: [{ type: Input }],\r\n    disablePopover: [{ type: Input }],\r\n    popoverClass: [{ type: Input }],\r\n    openDelay: [{ type: Input }],\r\n    closeDelay: [{ type: Input }],\r\n    shown: [{ type: Output }],\r\n    hidden: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbPopoverModule {\r\n}\r\nNgbPopoverModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [NgbPopover, NgbPopoverWindow],\r\n                exports: [NgbPopover],\r\n                imports: [CommonModule],\r\n                entryComponents: [NgbPopoverWindow]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbProgressbar`](#/components/progressbar/api#NgbProgressbar) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the progress bars used in the application.\r\n */\r\nclass NgbProgressbarConfig {\r\n    constructor() {\r\n        this.max = 100;\r\n        this.animated = false;\r\n        this.striped = false;\r\n        this.showValue = false;\r\n    }\r\n}\r\nNgbProgressbarConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbProgressbarConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbProgressbarConfig_Factory() { return new NgbProgressbarConfig(); }, token: NgbProgressbarConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A directive that provides feedback on the progress of a workflow or an action.\r\n */\r\nclass NgbProgressbar {\r\n    /**\r\n     * @param {?} config\r\n     */\r\n    constructor(config) {\r\n        /**\r\n         * The current value for the progress bar.\r\n         *\r\n         * Should be in the `[0, max]` range.\r\n         */\r\n        this.value = 0;\r\n        this.max = config.max;\r\n        this.animated = config.animated;\r\n        this.striped = config.striped;\r\n        this.textType = config.textType;\r\n        this.type = config.type;\r\n        this.showValue = config.showValue;\r\n        this.height = config.height;\r\n    }\r\n    /**\r\n     * The maximal value to be displayed in the progress bar.\r\n     *\r\n     * Should be a positive number. Will default to 100 otherwise.\r\n     * @param {?} max\r\n     * @return {?}\r\n     */\r\n    set max(max) {\r\n        this._max = !isNumber(max) || max <= 0 ? 100 : max;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get max() { return this._max; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getValue() { return getValueInRange(this.value, this.max); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPercentValue() { return 100 * this.getValue() / this.max; }\r\n}\r\nNgbProgressbar.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-progressbar',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <div class=\"progress\" [style.height]=\"height\">\r\n      <div class=\"progress-bar{{type ? ' bg-' + type : ''}}{{textType ? ' text-' + textType : ''}}\r\n      {{animated ? ' progress-bar-animated' : ''}}{{striped ? ' progress-bar-striped' : ''}}\" role=\"progressbar\" [style.width.%]=\"getPercentValue()\"\r\n      [attr.aria-valuenow]=\"getValue()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\r\n        <span *ngIf=\"showValue\" i18n=\"@@ngb.progressbar.value\">{{getPercentValue()}}%</span><ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  `\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbProgressbar.ctorParameters = () => [\r\n    { type: NgbProgressbarConfig }\r\n];\r\nNgbProgressbar.propDecorators = {\r\n    max: [{ type: Input }],\r\n    animated: [{ type: Input }],\r\n    striped: [{ type: Input }],\r\n    showValue: [{ type: Input }],\r\n    textType: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    height: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbProgressbarModule {\r\n}\r\nNgbProgressbarModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: [NgbProgressbar], exports: [NgbProgressbar], imports: [CommonModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbRating`](#/components/rating/api#NgbRating) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the ratings used in the application.\r\n */\r\nclass NgbRatingConfig {\r\n    constructor() {\r\n        this.max = 10;\r\n        this.readonly = false;\r\n        this.resettable = false;\r\n    }\r\n}\r\nNgbRatingConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbRatingConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbRatingConfig_Factory() { return new NgbRatingConfig(); }, token: NgbRatingConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_RATING_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbRating)),\r\n    multi: true\r\n};\r\n/**\r\n * A directive that helps visualising and interacting with a star rating bar.\r\n */\r\nclass NgbRating {\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} _changeDetectorRef\r\n     */\r\n    constructor(config, _changeDetectorRef) {\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this.contexts = [];\r\n        this.disabled = false;\r\n        /**\r\n         * An event emitted when the user is hovering over a given rating.\r\n         *\r\n         * Event payload equals to the rating being hovered over.\r\n         */\r\n        this.hover = new EventEmitter();\r\n        /**\r\n         * An event emitted when the user stops hovering over a given rating.\r\n         *\r\n         * Event payload equals to the rating of the last item being hovered over.\r\n         */\r\n        this.leave = new EventEmitter();\r\n        /**\r\n         * An event emitted when the user selects a new rating.\r\n         *\r\n         * Event payload equals to the newly selected rating.\r\n         */\r\n        this.rateChange = new EventEmitter(true);\r\n        this.onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this.onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this.max = config.max;\r\n        this.readonly = config.readonly;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ariaValueText() { return `${this.nextRate} out of ${this.max}`; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    enter(value) {\r\n        if (!this.readonly && !this.disabled) {\r\n            this._updateState(value);\r\n        }\r\n        this.hover.emit(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    handleBlur() { this.onTouched(); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    handleClick(value) {\r\n        if (!this.readonly && !this.disabled) {\r\n            this.update(this.resettable && this.rate === value ? 0 : value);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    handleKeyDown(event) {\r\n        // tslint:disable-next-line:deprecation\r\n        switch (event.which) {\r\n            case Key.ArrowDown:\r\n            case Key.ArrowLeft:\r\n                this.update(this.rate - 1);\r\n                break;\r\n            case Key.ArrowUp:\r\n            case Key.ArrowRight:\r\n                this.update(this.rate + 1);\r\n                break;\r\n            case Key.Home:\r\n                this.update(0);\r\n                break;\r\n            case Key.End:\r\n                this.update(this.max);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // note 'return' in default case\r\n        event.preventDefault();\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes['rate']) {\r\n            this.update(this.rate);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.contexts = Array.from({ length: this.max }, (/**\r\n         * @param {?} v\r\n         * @param {?} k\r\n         * @return {?}\r\n         */\r\n        (v, k) => ({ fill: 0, index: k })));\r\n        this._updateState(this.rate);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this.onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this.leave.emit(this.nextRate);\r\n        this._updateState(this.rate);\r\n    }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) { this.disabled = isDisabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} internalChange\r\n     * @return {?}\r\n     */\r\n    update(value, internalChange = true) {\r\n        /** @type {?} */\r\n        const newRate = getValueInRange(value, this.max, 0);\r\n        if (!this.readonly && !this.disabled && this.rate !== newRate) {\r\n            this.rate = newRate;\r\n            this.rateChange.emit(this.rate);\r\n        }\r\n        if (internalChange) {\r\n            this.onChange(this.rate);\r\n            this.onTouched();\r\n        }\r\n        this._updateState(this.rate);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.update(value, false);\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _getFillValue(index) {\r\n        /** @type {?} */\r\n        const diff = this.nextRate - index;\r\n        if (diff >= 1) {\r\n            return 100;\r\n        }\r\n        if (diff < 1 && diff > 0) {\r\n            return parseInt((diff * 100).toFixed(2), 10);\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} nextValue\r\n     * @return {?}\r\n     */\r\n    _updateState(nextValue) {\r\n        this.nextRate = nextValue;\r\n        this.contexts.forEach((/**\r\n         * @param {?} context\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        (context, index) => context.fill = this._getFillValue(index)));\r\n    }\r\n}\r\nNgbRating.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-rating',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: {\r\n                    'class': 'd-inline-flex',\r\n                    '[tabindex]': 'disabled ? -1 : 0',\r\n                    'role': 'slider',\r\n                    'aria-valuemin': '0',\r\n                    '[attr.aria-valuemax]': 'max',\r\n                    '[attr.aria-valuenow]': 'nextRate',\r\n                    '[attr.aria-valuetext]': 'ariaValueText()',\r\n                    '[attr.aria-disabled]': 'readonly ? true : null',\r\n                    '(blur)': 'handleBlur()',\r\n                    '(keydown)': 'handleKeyDown($event)',\r\n                    '(mouseleave)': 'reset()'\r\n                },\r\n                template: `\r\n    <ng-template #t let-fill=\"fill\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\r\n    <ng-template ngFor [ngForOf]=\"contexts\" let-index=\"index\">\r\n      <span class=\"sr-only\">({{ index < nextRate ? '*' : ' ' }})</span>\r\n      <span (mouseenter)=\"enter(index + 1)\" (click)=\"handleClick(index + 1)\" [style.cursor]=\"readonly || disabled ? 'default' : 'pointer'\">\r\n        <ng-template [ngTemplateOutlet]=\"starTemplate || starTemplateFromContent || t\" [ngTemplateOutletContext]=\"contexts[index]\">\r\n        </ng-template>\r\n      </span>\r\n    </ng-template>\r\n  `,\r\n                providers: [NGB_RATING_VALUE_ACCESSOR]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbRating.ctorParameters = () => [\r\n    { type: NgbRatingConfig },\r\n    { type: ChangeDetectorRef }\r\n];\r\nNgbRating.propDecorators = {\r\n    max: [{ type: Input }],\r\n    rate: [{ type: Input }],\r\n    readonly: [{ type: Input }],\r\n    resettable: [{ type: Input }],\r\n    starTemplate: [{ type: Input }],\r\n    starTemplateFromContent: [{ type: ContentChild, args: [TemplateRef, { static: false },] }],\r\n    hover: [{ type: Output }],\r\n    leave: [{ type: Output }],\r\n    rateChange: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbRatingModule {\r\n}\r\nNgbRatingModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: [NgbRating], exports: [NgbRating], imports: [CommonModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbTabset`](#/components/tabset/api#NgbTabset) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the tabsets used in the application.\r\n */\r\nclass NgbTabsetConfig {\r\n    constructor() {\r\n        this.justify = 'start';\r\n        this.orientation = 'horizontal';\r\n        this.type = 'tabs';\r\n    }\r\n}\r\nNgbTabsetConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbTabsetConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbTabsetConfig_Factory() { return new NgbTabsetConfig(); }, token: NgbTabsetConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nlet nextId$4 = 0;\r\n/**\r\n * A directive to wrap tab titles that need to contain HTML markup or other directives.\r\n *\r\n * Alternatively you could use the `NgbTab.title` input for string titles.\r\n */\r\nclass NgbTabTitle {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbTabTitle.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbTabTitle]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbTabTitle.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive to wrap content to be displayed in a tab.\r\n */\r\nclass NgbTabContent {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nNgbTabContent.decorators = [\r\n    { type: Directive, args: [{ selector: 'ng-template[ngbTabContent]' },] }\r\n];\r\n/** @nocollapse */\r\nNgbTabContent.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n/**\r\n * A directive representing an individual tab.\r\n */\r\nclass NgbTab {\r\n    constructor() {\r\n        /**\r\n         * The tab identifier.\r\n         *\r\n         * Must be unique for the entire document for proper accessibility support.\r\n         */\r\n        this.id = `ngb-tab-${nextId$4++}`;\r\n        /**\r\n         * If `true`, the current tab is disabled and can't be toggled.\r\n         */\r\n        this.disabled = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\r\n        // only @ContentChildren allows us to specify the {descendants: false} option.\r\n        // Without {descendants: false} we are hitting bugs described in:\r\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n        this.titleTpl = this.titleTpls.first;\r\n        this.contentTpl = this.contentTpls.first;\r\n    }\r\n}\r\nNgbTab.decorators = [\r\n    { type: Directive, args: [{ selector: 'ngb-tab' },] }\r\n];\r\nNgbTab.propDecorators = {\r\n    id: [{ type: Input }],\r\n    title: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    titleTpls: [{ type: ContentChildren, args: [NgbTabTitle, { descendants: false },] }],\r\n    contentTpls: [{ type: ContentChildren, args: [NgbTabContent, { descendants: false },] }]\r\n};\r\n/**\r\n * A component that makes it easy to create tabbed interface.\r\n */\r\nclass NgbTabset {\r\n    /**\r\n     * @param {?} config\r\n     */\r\n    constructor(config) {\r\n        /**\r\n         * If `true`, non-visible tabs content will be removed from DOM. Otherwise it will just be hidden.\r\n         */\r\n        this.destroyOnHide = true;\r\n        /**\r\n         * A tab change event emitted right before the tab change happens.\r\n         *\r\n         * See [`NgbTabChangeEvent`](#/components/tabset/api#NgbTabChangeEvent) for payload details.\r\n         */\r\n        this.tabChange = new EventEmitter();\r\n        this.type = config.type;\r\n        this.justify = config.justify;\r\n        this.orientation = config.orientation;\r\n    }\r\n    /**\r\n     * The horizontal alignment of the tabs with flexbox utilities.\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    set justify(className) {\r\n        if (className === 'fill' || className === 'justified') {\r\n            this.justifyClass = `nav-${className}`;\r\n        }\r\n        else {\r\n            this.justifyClass = `justify-content-${className}`;\r\n        }\r\n    }\r\n    /**\r\n     * Selects the tab with the given id and shows its associated content panel.\r\n     *\r\n     * Any other tab that was previously selected becomes unselected and its associated pane is removed from DOM or\r\n     * hidden depending on the `destroyOnHide` value.\r\n     * @param {?} tabId\r\n     * @return {?}\r\n     */\r\n    select(tabId) {\r\n        /** @type {?} */\r\n        let selectedTab = this._getTabById(tabId);\r\n        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\r\n            /** @type {?} */\r\n            let defaultPrevented = false;\r\n            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: (/**\r\n                 * @return {?}\r\n                 */\r\n                () => { defaultPrevented = true; }) });\r\n            if (!defaultPrevented) {\r\n                this.activeId = selectedTab.id;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        // auto-correct activeId that might have been set incorrectly as input\r\n        /** @type {?} */\r\n        let activeTab = this._getTabById(this.activeId);\r\n        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    _getTabById(id) {\r\n        /** @type {?} */\r\n        let tabsWithId = this.tabs.filter((/**\r\n         * @param {?} tab\r\n         * @return {?}\r\n         */\r\n        tab => tab.id === id));\r\n        return tabsWithId.length ? tabsWithId[0] : null;\r\n    }\r\n}\r\nNgbTabset.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-tabset',\r\n                exportAs: 'ngbTabset',\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <ul [class]=\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\" role=\"tablist\">\r\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\r\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\r\n          href (click)=\"select(tab.id); $event.preventDefault()\" role=\"tab\" [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\r\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\r\n          [attr.aria-selected]=\"tab.id === activeId\" [attr.aria-disabled]=\"tab.disabled\">\r\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></ng-template>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n    <div class=\"tab-content\">\r\n      <ng-template ngFor let-tab [ngForOf]=\"tabs\">\r\n        <div\r\n          class=\"tab-pane {{tab.id === activeId ? 'active' : null}}\"\r\n          *ngIf=\"!destroyOnHide || tab.id === activeId\"\r\n          role=\"tabpanel\"\r\n          [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\">\r\n          <ng-template [ngTemplateOutlet]=\"tab.contentTpl?.templateRef\"></ng-template>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  `\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbTabset.ctorParameters = () => [\r\n    { type: NgbTabsetConfig }\r\n];\r\nNgbTabset.propDecorators = {\r\n    tabs: [{ type: ContentChildren, args: [NgbTab,] }],\r\n    activeId: [{ type: Input }],\r\n    destroyOnHide: [{ type: Input }],\r\n    justify: [{ type: Input }],\r\n    orientation: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    tabChange: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_TABSET_DIRECTIVES = [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];\r\nclass NgbTabsetModule {\r\n}\r\nNgbTabsetModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [CommonModule, NgbNavModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbTime {\r\n    /**\r\n     * @param {?=} hour\r\n     * @param {?=} minute\r\n     * @param {?=} second\r\n     */\r\n    constructor(hour, minute, second) {\r\n        this.hour = toInteger(hour);\r\n        this.minute = toInteger(minute);\r\n        this.second = toInteger(second);\r\n    }\r\n    /**\r\n     * @param {?=} step\r\n     * @return {?}\r\n     */\r\n    changeHour(step = 1) { this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step); }\r\n    /**\r\n     * @param {?} hour\r\n     * @return {?}\r\n     */\r\n    updateHour(hour) {\r\n        if (isNumber(hour)) {\r\n            this.hour = (hour < 0 ? 24 + hour : hour) % 24;\r\n        }\r\n        else {\r\n            this.hour = NaN;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?=} step\r\n     * @return {?}\r\n     */\r\n    changeMinute(step = 1) { this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step); }\r\n    /**\r\n     * @param {?} minute\r\n     * @return {?}\r\n     */\r\n    updateMinute(minute) {\r\n        if (isNumber(minute)) {\r\n            this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;\r\n            this.changeHour(Math.floor(minute / 60));\r\n        }\r\n        else {\r\n            this.minute = NaN;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?=} step\r\n     * @return {?}\r\n     */\r\n    changeSecond(step = 1) { this.updateSecond((isNaN(this.second) ? 0 : this.second) + step); }\r\n    /**\r\n     * @param {?} second\r\n     * @return {?}\r\n     */\r\n    updateSecond(second) {\r\n        if (isNumber(second)) {\r\n            this.second = second < 0 ? 60 + second % 60 : second % 60;\r\n            this.changeMinute(Math.floor(second / 60));\r\n        }\r\n        else {\r\n            this.second = NaN;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?=} checkSecs\r\n     * @return {?}\r\n     */\r\n    isValid(checkSecs = true) {\r\n        return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return `${this.hour || 0}:${this.minute || 0}:${this.second || 0}`; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbTimepicker`](#/components/timepicker/api#NgbTimepicker) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the timepickers used in the application.\r\n */\r\nclass NgbTimepickerConfig {\r\n    constructor() {\r\n        this.meridian = false;\r\n        this.spinners = true;\r\n        this.seconds = false;\r\n        this.hourStep = 1;\r\n        this.minuteStep = 1;\r\n        this.secondStep = 1;\r\n        this.disabled = false;\r\n        this.readonlyInputs = false;\r\n        this.size = 'medium';\r\n    }\r\n}\r\nNgbTimepickerConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbTimepickerConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbTimepickerConfig_Factory() { return new NgbTimepickerConfig(); }, token: NgbTimepickerConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction NGB_DATEPICKER_TIME_ADAPTER_FACTORY() {\r\n    return new NgbTimeStructAdapter();\r\n}\r\n/**\r\n * An abstract service that does the conversion between the internal timepicker `NgbTimeStruct` model and\r\n * any provided user time model `T`, ex. a string, a native date, etc.\r\n *\r\n * The adapter is used **only** for conversion when binding timepicker to a form control,\r\n * ex. `[(ngModel)]=\"userTimeModel\"`. Here `userTimeModel` can be of any type.\r\n *\r\n * The default timepicker implementation assumes we use `NgbTimeStruct` as a user model.\r\n *\r\n * See the [custom time adapter demo](#/components/timepicker/examples#adapter) for an example.\r\n *\r\n * \\@since 2.2.0\r\n * @abstract\r\n * @template T\r\n */\r\nclass NgbTimeAdapter {\r\n}\r\nNgbTimeAdapter.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY },] }\r\n];\r\n/** @nocollapse */ NgbTimeAdapter.ngInjectableDef = ɵɵdefineInjectable({ factory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY, token: NgbTimeAdapter, providedIn: \"root\" });\r\nclass NgbTimeStructAdapter extends NgbTimeAdapter {\r\n    /**\r\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n     * @param {?} time\r\n     * @return {?}\r\n     */\r\n    fromModel(time) {\r\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\r\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\r\n            null;\r\n    }\r\n    /**\r\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n     * @param {?} time\r\n     * @return {?}\r\n     */\r\n    toModel(time) {\r\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\r\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\r\n            null;\r\n    }\r\n}\r\nNgbTimeStructAdapter.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction NGB_TIMEPICKER_I18N_FACTORY(locale) {\r\n    return new NgbTimepickerI18nDefault(locale);\r\n}\r\n/**\r\n * Type of the service supplying day periods (for example, 'AM' and 'PM') to NgbTimepicker component.\r\n * The default implementation of this service honors the Angular locale, and uses the registered locale data,\r\n * as explained in the Angular i18n guide.\r\n * @abstract\r\n */\r\nclass NgbTimepickerI18n {\r\n}\r\nNgbTimepickerI18n.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_TIMEPICKER_I18N_FACTORY, deps: [LOCALE_ID] },] }\r\n];\r\n/** @nocollapse */ NgbTimepickerI18n.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbTimepickerI18n_Factory() { return NGB_TIMEPICKER_I18N_FACTORY(ɵɵinject(LOCALE_ID)); }, token: NgbTimepickerI18n, providedIn: \"root\" });\r\nclass NgbTimepickerI18nDefault extends NgbTimepickerI18n {\r\n    /**\r\n     * @param {?} locale\r\n     */\r\n    constructor(locale) {\r\n        super();\r\n        this._periods = getLocaleDayPeriods(locale, FormStyle.Standalone, TranslationWidth.Narrow);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMorningPeriod() { return this._periods[0]; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAfternoonPeriod() { return this._periods[1]; }\r\n}\r\nNgbTimepickerI18nDefault.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nNgbTimepickerI18nDefault.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst FILTER_REGEX = /[^0-9]/g;\r\n/** @type {?} */\r\nconst NGB_TIMEPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbTimepicker)),\r\n    multi: true\r\n};\r\n/**\r\n * A directive that helps with wth picking hours, minutes and seconds.\r\n */\r\nclass NgbTimepicker {\r\n    /**\r\n     * @param {?} _config\r\n     * @param {?} _ngbTimeAdapter\r\n     * @param {?} _cd\r\n     * @param {?} i18n\r\n     */\r\n    constructor(_config, _ngbTimeAdapter, _cd, i18n) {\r\n        this._config = _config;\r\n        this._ngbTimeAdapter = _ngbTimeAdapter;\r\n        this._cd = _cd;\r\n        this.i18n = i18n;\r\n        this.onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this.onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this.meridian = _config.meridian;\r\n        this.spinners = _config.spinners;\r\n        this.seconds = _config.seconds;\r\n        this.hourStep = _config.hourStep;\r\n        this.minuteStep = _config.minuteStep;\r\n        this.secondStep = _config.secondStep;\r\n        this.disabled = _config.disabled;\r\n        this.readonlyInputs = _config.readonlyInputs;\r\n        this.size = _config.size;\r\n    }\r\n    /**\r\n     * The number of hours to add/subtract when clicking hour spinners.\r\n     * @param {?} step\r\n     * @return {?}\r\n     */\r\n    set hourStep(step) {\r\n        this._hourStep = isInteger(step) ? step : this._config.hourStep;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get hourStep() { return this._hourStep; }\r\n    /**\r\n     * The number of minutes to add/subtract when clicking minute spinners.\r\n     * @param {?} step\r\n     * @return {?}\r\n     */\r\n    set minuteStep(step) {\r\n        this._minuteStep = isInteger(step) ? step : this._config.minuteStep;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get minuteStep() { return this._minuteStep; }\r\n    /**\r\n     * The number of seconds to add/subtract when clicking second spinners.\r\n     * @param {?} step\r\n     * @return {?}\r\n     */\r\n    set secondStep(step) {\r\n        this._secondStep = isInteger(step) ? step : this._config.secondStep;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get secondStep() { return this._secondStep; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        /** @type {?} */\r\n        const structValue = this._ngbTimeAdapter.fromModel(value);\r\n        this.model = structValue ? new NgbTime(structValue.hour, structValue.minute, structValue.second) : new NgbTime();\r\n        if (!this.seconds && (!structValue || !isNumber(structValue.second))) {\r\n            this.model.second = 0;\r\n        }\r\n        this._cd.markForCheck();\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this.onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) { this.disabled = isDisabled; }\r\n    /**\r\n     * @param {?} step\r\n     * @return {?}\r\n     */\r\n    changeHour(step) {\r\n        this.model.changeHour(step);\r\n        this.propagateModelChange();\r\n    }\r\n    /**\r\n     * @param {?} step\r\n     * @return {?}\r\n     */\r\n    changeMinute(step) {\r\n        this.model.changeMinute(step);\r\n        this.propagateModelChange();\r\n    }\r\n    /**\r\n     * @param {?} step\r\n     * @return {?}\r\n     */\r\n    changeSecond(step) {\r\n        this.model.changeSecond(step);\r\n        this.propagateModelChange();\r\n    }\r\n    /**\r\n     * @param {?} newVal\r\n     * @return {?}\r\n     */\r\n    updateHour(newVal) {\r\n        /** @type {?} */\r\n        const isPM = this.model.hour >= 12;\r\n        /** @type {?} */\r\n        const enteredHour = toInteger(newVal);\r\n        if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {\r\n            this.model.updateHour(enteredHour + 12);\r\n        }\r\n        else {\r\n            this.model.updateHour(enteredHour);\r\n        }\r\n        this.propagateModelChange();\r\n    }\r\n    /**\r\n     * @param {?} newVal\r\n     * @return {?}\r\n     */\r\n    updateMinute(newVal) {\r\n        this.model.updateMinute(toInteger(newVal));\r\n        this.propagateModelChange();\r\n    }\r\n    /**\r\n     * @param {?} newVal\r\n     * @return {?}\r\n     */\r\n    updateSecond(newVal) {\r\n        this.model.updateSecond(toInteger(newVal));\r\n        this.propagateModelChange();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toggleMeridian() {\r\n        if (this.meridian) {\r\n            this.changeHour(12);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @return {?}\r\n     */\r\n    formatInput(input) { input.value = input.value.replace(FILTER_REGEX, ''); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    formatHour(value) {\r\n        if (isNumber(value)) {\r\n            if (this.meridian) {\r\n                return padNumber(value % 12 === 0 ? 12 : value % 12);\r\n            }\r\n            else {\r\n                return padNumber(value % 24);\r\n            }\r\n        }\r\n        else {\r\n            return padNumber(NaN);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    formatMinSec(value) { return padNumber(value); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isSmallSize() { return this.size === 'small'; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isLargeSize() { return this.size === 'large'; }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\r\n            this.model.second = 0;\r\n            this.propagateModelChange(false);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?=} touched\r\n     * @return {?}\r\n     */\r\n    propagateModelChange(touched = true) {\r\n        if (touched) {\r\n            this.onTouched();\r\n        }\r\n        if (this.model.isValid(this.seconds)) {\r\n            this.onChange(this._ngbTimeAdapter.toModel({ hour: this.model.hour, minute: this.model.minute, second: this.model.second }));\r\n        }\r\n        else {\r\n            this.onChange(this._ngbTimeAdapter.toModel(null));\r\n        }\r\n    }\r\n}\r\nNgbTimepicker.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-timepicker',\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n      <div class=\"ngb-tp\">\r\n        <div class=\"ngb-tp-input-container ngb-tp-hour\">\r\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeHour(hourStep)\"\r\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\r\n            [disabled]=\"disabled\">\r\n            <span class=\"chevron ngb-tp-chevron\"></span>\r\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.increment-hours\">Increment hours</span>\r\n          </button>\r\n          <input type=\"text\" class=\"ngb-tp-input form-control\" [class.form-control-sm]=\"isSmallSize\"\r\n            [class.form-control-lg]=\"isLargeSize\"\r\n            maxlength=\"2\" inputmode=\"numeric\" placeholder=\"HH\" i18n-placeholder=\"@@ngb.timepicker.HH\"\r\n            [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($event.target.value)\"\r\n            [readOnly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Hours\" i18n-aria-label=\"@@ngb.timepicker.hours\"\r\n            (input)=\"formatInput($event.target)\"\r\n            (keydown.ArrowUp)=\"changeHour(hourStep); $event.preventDefault()\"\r\n            (keydown.ArrowDown)=\"changeHour(-hourStep); $event.preventDefault()\">\r\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeHour(-hourStep)\"\r\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\r\n            [disabled]=\"disabled\">\r\n            <span class=\"chevron ngb-tp-chevron bottom\"></span>\r\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.decrement-hours\">Decrement hours</span>\r\n          </button>\r\n        </div>\r\n        <div class=\"ngb-tp-spacer\">:</div>\r\n        <div class=\"ngb-tp-input-container ngb-tp-minute\">\r\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeMinute(minuteStep)\"\r\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\r\n            [disabled]=\"disabled\">\r\n            <span class=\"chevron ngb-tp-chevron\"></span>\r\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.increment-minutes\">Increment minutes</span>\r\n          </button>\r\n          <input type=\"text\" class=\"ngb-tp-input form-control\" [class.form-control-sm]=\"isSmallSize\" [class.form-control-lg]=\"isLargeSize\"\r\n            maxlength=\"2\" inputmode=\"numeric\" placeholder=\"MM\" i18n-placeholder=\"@@ngb.timepicker.MM\"\r\n            [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($event.target.value)\"\r\n            [readOnly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Minutes\" i18n-aria-label=\"@@ngb.timepicker.minutes\"\r\n            (input)=\"formatInput($event.target)\"\r\n            (keydown.ArrowUp)=\"changeMinute(minuteStep); $event.preventDefault()\"\r\n            (keydown.ArrowDown)=\"changeMinute(-minuteStep); $event.preventDefault()\">\r\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeMinute(-minuteStep)\"\r\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\"  [class.disabled]=\"disabled\"\r\n            [disabled]=\"disabled\">\r\n            <span class=\"chevron ngb-tp-chevron bottom\"></span>\r\n            <span class=\"sr-only\"  i18n=\"@@ngb.timepicker.decrement-minutes\">Decrement minutes</span>\r\n          </button>\r\n        </div>\r\n        <div *ngIf=\"seconds\" class=\"ngb-tp-spacer\">:</div>\r\n        <div *ngIf=\"seconds\" class=\"ngb-tp-input-container ngb-tp-second\">\r\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeSecond(secondStep)\"\r\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\" [class.disabled]=\"disabled\"\r\n            [disabled]=\"disabled\">\r\n            <span class=\"chevron ngb-tp-chevron\"></span>\r\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.increment-seconds\">Increment seconds</span>\r\n          </button>\r\n          <input type=\"text\" class=\"ngb-tp-input form-control\" [class.form-control-sm]=\"isSmallSize\" [class.form-control-lg]=\"isLargeSize\"\r\n            maxlength=\"2\" inputmode=\"numeric\" placeholder=\"SS\" i18n-placeholder=\"@@ngb.timepicker.SS\"\r\n            [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($event.target.value)\"\r\n            [readOnly]=\"readonlyInputs\" [disabled]=\"disabled\" aria-label=\"Seconds\" i18n-aria-label=\"@@ngb.timepicker.seconds\"\r\n            (input)=\"formatInput($event.target)\"\r\n            (keydown.ArrowUp)=\"changeSecond(secondStep); $event.preventDefault()\"\r\n            (keydown.ArrowDown)=\"changeSecond(-secondStep); $event.preventDefault()\">\r\n          <button *ngIf=\"spinners\" tabindex=\"-1\" type=\"button\" (click)=\"changeSecond(-secondStep)\"\r\n            class=\"btn btn-link\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\"  [class.disabled]=\"disabled\"\r\n            [disabled]=\"disabled\">\r\n            <span class=\"chevron ngb-tp-chevron bottom\"></span>\r\n            <span class=\"sr-only\" i18n=\"@@ngb.timepicker.decrement-seconds\">Decrement seconds</span>\r\n          </button>\r\n        </div>\r\n        <div *ngIf=\"meridian\" class=\"ngb-tp-spacer\"></div>\r\n        <div *ngIf=\"meridian\" class=\"ngb-tp-meridian\">\r\n          <button type=\"button\" class=\"btn btn-outline-primary\" [class.btn-sm]=\"isSmallSize\" [class.btn-lg]=\"isLargeSize\"\r\n            [disabled]=\"disabled\" [class.disabled]=\"disabled\"\r\n                  (click)=\"toggleMeridian()\">\r\n            <ng-container *ngIf=\"model?.hour >= 12; else am\" i18n=\"@@ngb.timepicker.PM\">{{ i18n.getAfternoonPeriod() }}</ng-container>\r\n            <ng-template #am i18n=\"@@ngb.timepicker.AM\">{{ i18n.getMorningPeriod() }}</ng-template>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </fieldset>\r\n  `,\r\n                providers: [NGB_TIMEPICKER_VALUE_ACCESSOR],\r\n                styles: [\"ngb-timepicker{font-size:1rem}.ngb-tp{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-tp-input-container{width:4em}.ngb-tp-chevron::before{border-style:solid;border-width:.29em .29em 0 0;content:\\\"\\\";display:inline-block;height:.69em;left:.05em;position:relative;top:.15em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);vertical-align:middle;width:.69em}.ngb-tp-chevron.bottom:before{top:-.3em;-webkit-transform:rotate(135deg);transform:rotate(135deg)}.ngb-tp-input{text-align:center}.ngb-tp-hour,.ngb-tp-meridian,.ngb-tp-minute,.ngb-tp-second{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.ngb-tp-spacer{width:1em;text-align:center}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbTimepicker.ctorParameters = () => [\r\n    { type: NgbTimepickerConfig },\r\n    { type: NgbTimeAdapter },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgbTimepickerI18n }\r\n];\r\nNgbTimepicker.propDecorators = {\r\n    meridian: [{ type: Input }],\r\n    spinners: [{ type: Input }],\r\n    seconds: [{ type: Input }],\r\n    hourStep: [{ type: Input }],\r\n    minuteStep: [{ type: Input }],\r\n    secondStep: [{ type: Input }],\r\n    readonlyInputs: [{ type: Input }],\r\n    size: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbTimepickerModule {\r\n}\r\nNgbTimepickerModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: [NgbTimepicker], exports: [NgbTimepicker], imports: [CommonModule] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Configuration service for the NgbToast component. You can inject this service, typically in your root component,\r\n * and customize the values of its properties in order to provide default values for all the toasts used in the\r\n * application.\r\n *\r\n * \\@since 5.0.0\r\n */\r\nclass NgbToastConfig {\r\n    constructor() {\r\n        this.autohide = true;\r\n        this.delay = 500;\r\n        this.ariaLive = 'polite';\r\n    }\r\n}\r\nNgbToastConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbToastConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(); }, token: NgbToastConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * This directive allows the usage of HTML markup or other directives\r\n * inside of the toast's header.\r\n *\r\n * \\@since 5.0.0\r\n */\r\nclass NgbToastHeader {\r\n}\r\nNgbToastHeader.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngbToastHeader]' },] }\r\n];\r\n/**\r\n * Toasts provide feedback messages as notifications to the user.\r\n * Goal is to mimic the push notifications available both on mobile and desktop operating systems.\r\n *\r\n * \\@since 5.0.0\r\n */\r\nclass NgbToast {\r\n    /**\r\n     * @param {?} ariaLive\r\n     * @param {?} config\r\n     */\r\n    constructor(ariaLive, config) {\r\n        this.ariaLive = ariaLive;\r\n        /**\r\n         * A template like `<ng-template ngbToastHeader></ng-template>` can be\r\n         * used in the projected content to allow markup usage.\r\n         */\r\n        this.contentHeaderTpl = null;\r\n        /**\r\n         * An event fired immediately when toast's `hide()` method has been called.\r\n         * It can only occur in 2 different scenarios:\r\n         * - `autohide` timeout fires\r\n         * - user clicks on a closing cross (&times)\r\n         *\r\n         * Additionally this output is purely informative. The toast won't disappear. It's up to the user to take care of\r\n         * that.\r\n         */\r\n        this.hideOutput = new EventEmitter();\r\n        if (this.ariaLive == null) {\r\n            this.ariaLive = config.ariaLive;\r\n        }\r\n        this.delay = config.delay;\r\n        this.autohide = config.autohide;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() { this._init(); }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if ('autohide' in changes) {\r\n            this._clearTimeout();\r\n            this._init();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hide() {\r\n        this._clearTimeout();\r\n        this.hideOutput.emit();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _init() {\r\n        if (this.autohide && !this._timeoutID) {\r\n            this._timeoutID = setTimeout((/**\r\n             * @return {?}\r\n             */\r\n            () => this.hide()), this.delay);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _clearTimeout() {\r\n        if (this._timeoutID) {\r\n            clearTimeout(this._timeoutID);\r\n            this._timeoutID = null;\r\n        }\r\n    }\r\n}\r\nNgbToast.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-toast',\r\n                exportAs: 'ngbToast',\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: {\r\n                    'role': 'alert',\r\n                    '[attr.aria-live]': 'ariaLive',\r\n                    'aria-atomic': 'true',\r\n                    '[class.toast]': 'true',\r\n                    '[class.show]': 'true',\r\n                },\r\n                template: `\r\n    <ng-template #headerTpl>\r\n      <strong class=\"mr-auto\">{{header}}</strong>\r\n    </ng-template>\r\n    <ng-template [ngIf]=\"contentHeaderTpl || header\">\r\n      <div class=\"toast-header\">\r\n        <ng-template [ngTemplateOutlet]=\"contentHeaderTpl || headerTpl\"></ng-template>\r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" i18n-aria-label=\"@@ngb.toast.close-aria\" (click)=\"hide()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n    </ng-template>\r\n    <div class=\"toast-body\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n                styles: [\".ngb-toasts{position:fixed;top:0;right:0;margin:.5em;z-index:1200}ngb-toast .toast-header .close{margin-left:auto;margin-bottom:.25rem}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgbToast.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Attribute, args: ['aria-live',] }] },\r\n    { type: NgbToastConfig }\r\n];\r\nNgbToast.propDecorators = {\r\n    delay: [{ type: Input }],\r\n    autohide: [{ type: Input }],\r\n    header: [{ type: Input }],\r\n    contentHeaderTpl: [{ type: ContentChild, args: [NgbToastHeader, { read: TemplateRef, static: true },] }],\r\n    hideOutput: [{ type: Output, args: ['hide',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbToastModule {\r\n}\r\nNgbToastModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: [NgbToast, NgbToastHeader], imports: [CommonModule], exports: [NgbToast, NgbToastHeader] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbTooltip`](#/components/tooltip/api#NgbTooltip) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the tooltips used in the application.\r\n */\r\nclass NgbTooltipConfig {\r\n    constructor() {\r\n        this.autoClose = true;\r\n        this.placement = 'auto';\r\n        this.triggers = 'hover focus';\r\n        this.disableTooltip = false;\r\n        this.openDelay = 0;\r\n        this.closeDelay = 0;\r\n    }\r\n}\r\nNgbTooltipConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbTooltipConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbTooltipConfig_Factory() { return new NgbTooltipConfig(); }, token: NgbTooltipConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nlet nextId$5 = 0;\r\nclass NgbTooltipWindow {\r\n}\r\nNgbTooltipWindow.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-tooltip-window',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: { '[class]': '\"tooltip show\" + (tooltipClass ? \" \" + tooltipClass : \"\")', 'role': 'tooltip', '[id]': 'id' },\r\n                template: `<div class=\"arrow\"></div><div class=\"tooltip-inner\"><ng-content></ng-content></div>`,\r\n                styles: [\"ngb-tooltip-window.bs-tooltip-bottom .arrow,ngb-tooltip-window.bs-tooltip-top .arrow{left:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-bottom-left .arrow,ngb-tooltip-window.bs-tooltip-top-left .arrow{left:1em}ngb-tooltip-window.bs-tooltip-bottom-right .arrow,ngb-tooltip-window.bs-tooltip-top-right .arrow{left:auto;right:.8rem}ngb-tooltip-window.bs-tooltip-left .arrow,ngb-tooltip-window.bs-tooltip-right .arrow{top:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-left-top .arrow,ngb-tooltip-window.bs-tooltip-right-top .arrow{top:.4rem}ngb-tooltip-window.bs-tooltip-left-bottom .arrow,ngb-tooltip-window.bs-tooltip-right-bottom .arrow{top:auto;bottom:.4rem}\"]\r\n            }] }\r\n];\r\nNgbTooltipWindow.propDecorators = {\r\n    id: [{ type: Input }],\r\n    tooltipClass: [{ type: Input }]\r\n};\r\n/**\r\n * A lightweight and extensible directive for fancy tooltip creation.\r\n */\r\nclass NgbTooltip {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _renderer\r\n     * @param {?} injector\r\n     * @param {?} componentFactoryResolver\r\n     * @param {?} viewContainerRef\r\n     * @param {?} config\r\n     * @param {?} _ngZone\r\n     * @param {?} _document\r\n     * @param {?} _changeDetector\r\n     * @param {?} applicationRef\r\n     */\r\n    constructor(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        this._ngZone = _ngZone;\r\n        this._document = _document;\r\n        this._changeDetector = _changeDetector;\r\n        /**\r\n         * An event emitted when the tooltip is shown. Contains no payload.\r\n         */\r\n        this.shown = new EventEmitter();\r\n        /**\r\n         * An event emitted when the popover is hidden. Contains no payload.\r\n         */\r\n        this.hidden = new EventEmitter();\r\n        this._ngbTooltipWindowId = `ngb-tooltip-${nextId$5++}`;\r\n        this.autoClose = config.autoClose;\r\n        this.placement = config.placement;\r\n        this.triggers = config.triggers;\r\n        this.container = config.container;\r\n        this.disableTooltip = config.disableTooltip;\r\n        this.tooltipClass = config.tooltipClass;\r\n        this.openDelay = config.openDelay;\r\n        this.closeDelay = config.closeDelay;\r\n        this._popupService = new PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\r\n        this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this._windowRef) {\r\n                positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body', 'bs-tooltip');\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * The string content or a `TemplateRef` for the content to be displayed in the tooltip.\r\n     *\r\n     * If the content if falsy, the tooltip won't open.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set ngbTooltip(value) {\r\n        this._ngbTooltip = value;\r\n        if (!value && this._windowRef) {\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngbTooltip() { return this._ngbTooltip; }\r\n    /**\r\n     * Opens the tooltip.\r\n     *\r\n     * This is considered to be a \"manual\" triggering.\r\n     * The `context` is an optional value to be injected into the tooltip template when it is created.\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    open(context) {\r\n        if (!this._windowRef && this._ngbTooltip && !this.disableTooltip) {\r\n            this._windowRef = this._popupService.open(this._ngbTooltip, context);\r\n            this._windowRef.instance.tooltipClass = this.tooltipClass;\r\n            this._windowRef.instance.id = this._ngbTooltipWindowId;\r\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);\r\n            if (this.container === 'body') {\r\n                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n            }\r\n            // We need to detect changes, because we don't know where .open() might be called from.\r\n            // Ex. opening tooltip from one of lifecycle hooks that run after the CD\r\n            // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception\r\n            this._windowRef.changeDetectorRef.detectChanges();\r\n            // We need to mark for check, because tooltip won't work inside the OnPush component.\r\n            // Ex. when we use expression like `{{ tooltip.isOpen() : 'opened' : 'closed' }}`\r\n            // inside the template of an OnPush component and we change the tooltip from\r\n            // open -> closed, the expression in question won't be updated unless we explicitly\r\n            // mark the parent component to be checked.\r\n            this._windowRef.changeDetectorRef.markForCheck();\r\n            ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n             * @return {?}\r\n             */\r\n            () => this.close()), this.hidden, [this._windowRef.location.nativeElement]);\r\n            this.shown.emit();\r\n        }\r\n    }\r\n    /**\r\n     * Closes the tooltip.\r\n     *\r\n     * This is considered to be a \"manual\" triggering of the tooltip.\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (this._windowRef != null) {\r\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n            this._popupService.close();\r\n            this._windowRef = null;\r\n            this.hidden.emit();\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Toggles the tooltip.\r\n     *\r\n     * This is considered to be a \"manual\" triggering of the tooltip.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        if (this._windowRef) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    }\r\n    /**\r\n     * Returns `true`, if the popover is currently shown.\r\n     * @return {?}\r\n     */\r\n    isOpen() { return this._windowRef != null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);\r\n    }\r\n    /**\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\r\n    ngOnChanges({ tooltipClass }) {\r\n        if (tooltipClass && this.isOpen()) {\r\n            this._windowRef.instance.tooltipClass = tooltipClass.currentValue;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.close();\r\n        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\r\n        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\r\n        if (this._unregisterListenersFn) {\r\n            this._unregisterListenersFn();\r\n        }\r\n        this._zoneSubscription.unsubscribe();\r\n    }\r\n}\r\nNgbTooltip.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' },] }\r\n];\r\n/** @nocollapse */\r\nNgbTooltip.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: Injector },\r\n    { type: ComponentFactoryResolver },\r\n    { type: ViewContainerRef },\r\n    { type: NgbTooltipConfig },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: ApplicationRef }\r\n];\r\nNgbTooltip.propDecorators = {\r\n    autoClose: [{ type: Input }],\r\n    placement: [{ type: Input }],\r\n    triggers: [{ type: Input }],\r\n    container: [{ type: Input }],\r\n    disableTooltip: [{ type: Input }],\r\n    tooltipClass: [{ type: Input }],\r\n    openDelay: [{ type: Input }],\r\n    closeDelay: [{ type: Input }],\r\n    shown: [{ type: Output }],\r\n    hidden: [{ type: Output }],\r\n    ngbTooltip: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbTooltipModule {\r\n}\r\nNgbTooltipModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: [NgbTooltip, NgbTooltipWindow], exports: [NgbTooltip], entryComponents: [NgbTooltipWindow] },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A component that helps with text highlighting.\r\n *\r\n * If splits the `result` text into parts that contain the searched `term` and generates the HTML markup to simplify\r\n * highlighting:\r\n *\r\n * Ex. `result=\"Alaska\"` and `term=\"as\"` will produce `Al<span class=\"ngb-highlight\">as</span>ka`.\r\n */\r\nclass NgbHighlight {\r\n    constructor() {\r\n        /**\r\n         * The CSS class for `<span>` elements wrapping the `term` inside the `result`.\r\n         */\r\n        this.highlightClass = 'ngb-highlight';\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        /** @type {?} */\r\n        const result = toString(this.result);\r\n        /** @type {?} */\r\n        const terms = Array.isArray(this.term) ? this.term : [this.term];\r\n        /** @type {?} */\r\n        const escapedTerms = terms.map((/**\r\n         * @param {?} term\r\n         * @return {?}\r\n         */\r\n        term => regExpEscape(toString(term)))).filter((/**\r\n         * @param {?} term\r\n         * @return {?}\r\n         */\r\n        term => term));\r\n        this.parts = escapedTerms.length ? result.split(new RegExp(`(${escapedTerms.join('|')})`, 'gmi')) : [result];\r\n    }\r\n}\r\nNgbHighlight.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-highlight',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `<ng-template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">` +\r\n                    `<span *ngIf=\"isOdd; else even\" [class]=\"highlightClass\">{{part}}</span><ng-template #even>{{part}}</ng-template>` +\r\n                    `</ng-template>`,\r\n                styles: [\".ngb-highlight{font-weight:700}\"]\r\n            }] }\r\n];\r\nNgbHighlight.propDecorators = {\r\n    highlightClass: [{ type: Input }],\r\n    result: [{ type: Input }],\r\n    term: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbTypeaheadWindow {\r\n    constructor() {\r\n        this.activeIdx = 0;\r\n        /**\r\n         * Flag indicating if the first row should be active initially\r\n         */\r\n        this.focusFirst = true;\r\n        /**\r\n         * A function used to format a given result before display. This function should return a formatted string without any\r\n         * HTML markup\r\n         */\r\n        this.formatter = toString;\r\n        /**\r\n         * Event raised when user selects a particular result row\r\n         */\r\n        this.selectEvent = new EventEmitter();\r\n        this.activeChangeEvent = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasActive() { return this.activeIdx > -1 && this.activeIdx < this.results.length; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getActive() { return this.results[this.activeIdx]; }\r\n    /**\r\n     * @param {?} activeIdx\r\n     * @return {?}\r\n     */\r\n    markActive(activeIdx) {\r\n        this.activeIdx = activeIdx;\r\n        this._activeChanged();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    next() {\r\n        if (this.activeIdx === this.results.length - 1) {\r\n            this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\r\n        }\r\n        else {\r\n            this.activeIdx++;\r\n        }\r\n        this._activeChanged();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    prev() {\r\n        if (this.activeIdx < 0) {\r\n            this.activeIdx = this.results.length - 1;\r\n        }\r\n        else if (this.activeIdx === 0) {\r\n            this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\r\n        }\r\n        else {\r\n            this.activeIdx--;\r\n        }\r\n        this._activeChanged();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resetActive() {\r\n        this.activeIdx = this.focusFirst ? 0 : -1;\r\n        this._activeChanged();\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    select(item) { this.selectEvent.emit(item); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() { this.resetActive(); }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _activeChanged() {\r\n        this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\r\n    }\r\n}\r\nNgbTypeaheadWindow.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngb-typeahead-window',\r\n                exportAs: 'ngbTypeaheadWindow',\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: { '(mousedown)': '$event.preventDefault()', 'class': 'dropdown-menu show', 'role': 'listbox', '[id]': 'id' },\r\n                template: `\r\n    <ng-template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\r\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\r\n    </ng-template>\r\n    <ng-template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\r\n      <button type=\"button\" class=\"dropdown-item\" role=\"option\"\r\n        [id]=\"id + '-' + idx\"\r\n        [class.active]=\"idx === activeIdx\"\r\n        (mouseenter)=\"markActive(idx)\"\r\n        (click)=\"select(result)\">\r\n          <ng-template [ngTemplateOutlet]=\"resultTemplate || rt\"\r\n          [ngTemplateOutletContext]=\"{result: result, term: term, formatter: formatter}\"></ng-template>\r\n      </button>\r\n    </ng-template>\r\n  `\r\n            }] }\r\n];\r\nNgbTypeaheadWindow.propDecorators = {\r\n    id: [{ type: Input }],\r\n    focusFirst: [{ type: Input }],\r\n    results: [{ type: Input }],\r\n    term: [{ type: Input }],\r\n    formatter: [{ type: Input }],\r\n    resultTemplate: [{ type: Input }],\r\n    selectEvent: [{ type: Output, args: ['select',] }],\r\n    activeChangeEvent: [{ type: Output, args: ['activeChange',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst ARIA_LIVE_DELAY = new InjectionToken('live announcer delay', { providedIn: 'root', factory: ARIA_LIVE_DELAY_FACTORY });\r\n/**\r\n * @return {?}\r\n */\r\nfunction ARIA_LIVE_DELAY_FACTORY() {\r\n    return 100;\r\n}\r\n/**\r\n * @param {?} document\r\n * @param {?=} lazyCreate\r\n * @return {?}\r\n */\r\nfunction getLiveElement(document, lazyCreate = false) {\r\n    /** @type {?} */\r\n    let element = (/** @type {?} */ (document.body.querySelector('#ngb-live')));\r\n    if (element == null && lazyCreate) {\r\n        element = document.createElement('div');\r\n        element.setAttribute('id', 'ngb-live');\r\n        element.setAttribute('aria-live', 'polite');\r\n        element.setAttribute('aria-atomic', 'true');\r\n        element.classList.add('sr-only');\r\n        document.body.appendChild(element);\r\n    }\r\n    return element;\r\n}\r\nclass Live {\r\n    /**\r\n     * @param {?} _document\r\n     * @param {?} _delay\r\n     */\r\n    constructor(_document, _delay) {\r\n        this._document = _document;\r\n        this._delay = _delay;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        /** @type {?} */\r\n        const element = getLiveElement(this._document);\r\n        if (element) {\r\n            element.parentElement.removeChild(element);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    say(message) {\r\n        /** @type {?} */\r\n        const element = getLiveElement(this._document, true);\r\n        /** @type {?} */\r\n        const delay = this._delay;\r\n        element.textContent = '';\r\n        /** @type {?} */\r\n        const setText = (/**\r\n         * @return {?}\r\n         */\r\n        () => element.textContent = message);\r\n        if (delay === null) {\r\n            setText();\r\n        }\r\n        else {\r\n            setTimeout(setText, delay);\r\n        }\r\n    }\r\n}\r\nLive.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nLive.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [ARIA_LIVE_DELAY,] }] }\r\n];\r\n/** @nocollapse */ Live.ngInjectableDef = ɵɵdefineInjectable({ factory: function Live_Factory() { return new Live(ɵɵinject(DOCUMENT), ɵɵinject(ARIA_LIVE_DELAY)); }, token: Live, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A configuration service for the [`NgbTypeahead`](#/components/typeahead/api#NgbTypeahead) component.\r\n *\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the typeaheads used in the application.\r\n */\r\nclass NgbTypeaheadConfig {\r\n    constructor() {\r\n        this.editable = true;\r\n        this.focusFirst = true;\r\n        this.showHint = false;\r\n        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\r\n    }\r\n}\r\nNgbTypeaheadConfig.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */ NgbTypeaheadConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgbTypeaheadConfig_Factory() { return new NgbTypeaheadConfig(); }, token: NgbTypeaheadConfig, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_TYPEAHEAD_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgbTypeahead)),\r\n    multi: true\r\n};\r\n/** @type {?} */\r\nlet nextWindowId = 0;\r\n/**\r\n * A directive providing a simple way of creating powerful typeaheads from any text input.\r\n */\r\nclass NgbTypeahead {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} viewContainerRef\r\n     * @param {?} _renderer\r\n     * @param {?} injector\r\n     * @param {?} componentFactoryResolver\r\n     * @param {?} config\r\n     * @param {?} ngZone\r\n     * @param {?} _live\r\n     * @param {?} _document\r\n     * @param {?} _ngZone\r\n     * @param {?} _changeDetector\r\n     * @param {?} applicationRef\r\n     */\r\n    constructor(_elementRef, viewContainerRef, _renderer, injector, componentFactoryResolver, config, ngZone, _live, _document, _ngZone, _changeDetector, applicationRef) {\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        this._live = _live;\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._changeDetector = _changeDetector;\r\n        this._closed$ = new Subject();\r\n        /**\r\n         * The value for the `autocomplete` attribute for the `<input>` element.\r\n         *\r\n         * Defaults to `\"off\"` to disable the native browser autocomplete, but you can override it if necessary.\r\n         *\r\n         * \\@since 2.1.0\r\n         */\r\n        this.autocomplete = 'off';\r\n        /**\r\n         * The preferred placement of the typeahead.\r\n         *\r\n         * Possible values are `\"top\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom\"`, `\"bottom-left\"`,\r\n         * `\"bottom-right\"`, `\"left\"`, `\"left-top\"`, `\"left-bottom\"`, `\"right\"`, `\"right-top\"`,\r\n         * `\"right-bottom\"`\r\n         *\r\n         * Accepts an array of strings or a string with space separated possible values.\r\n         *\r\n         * The default order of preference is `\"bottom-left bottom-right top-left top-right\"`\r\n         *\r\n         * Please see the [positioning overview](#/positioning) for more details.\r\n         */\r\n        this.placement = 'bottom-left';\r\n        /**\r\n         * An event emitted right before an item is selected from the result list.\r\n         *\r\n         * Event payload is of type [`NgbTypeaheadSelectItemEvent`](#/components/typeahead/api#NgbTypeaheadSelectItemEvent).\r\n         */\r\n        this.selectItem = new EventEmitter();\r\n        this.popupId = `ngb-typeahead-${nextWindowId++}`;\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this.container = config.container;\r\n        this.editable = config.editable;\r\n        this.focusFirst = config.focusFirst;\r\n        this.showHint = config.showHint;\r\n        this.placement = config.placement;\r\n        this._valueChanges = fromEvent(_elementRef.nativeElement, 'input')\r\n            .pipe(map((/**\r\n         * @param {?} $event\r\n         * @return {?}\r\n         */\r\n        $event => ((/** @type {?} */ ($event.target))).value)));\r\n        this._resubscribeTypeahead = new BehaviorSubject(null);\r\n        this._popupService = new PopupService(NgbTypeaheadWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\r\n        this._zoneSubscription = ngZone.onStable.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this.isPopupOpen()) {\r\n                positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body');\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        /** @type {?} */\r\n        const inputValues$ = this._valueChanges.pipe(tap((/**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        value => {\r\n            this._inputValueBackup = this.showHint ? value : null;\r\n            this._onChange(this.editable ? value : undefined);\r\n        })));\r\n        /** @type {?} */\r\n        const results$ = inputValues$.pipe(this.ngbTypeahead);\r\n        /** @type {?} */\r\n        const userInput$ = this._resubscribeTypeahead.pipe(switchMap((/**\r\n         * @return {?}\r\n         */\r\n        () => results$)));\r\n        this._subscription = this._subscribeToUserInput(userInput$);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._closePopup();\r\n        this._unsubscribeFromUserInput();\r\n        this._zoneSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this._onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this._onTouched = fn; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._writeInputValue(this._formatItemForInput(value));\r\n        if (this.showHint) {\r\n            this._inputValueBackup = value;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n    /**\r\n     * Dismisses typeahead popup window\r\n     * @return {?}\r\n     */\r\n    dismissPopup() {\r\n        if (this.isPopupOpen()) {\r\n            this._resubscribeTypeahead.next(null);\r\n            this._closePopup();\r\n            if (this.showHint && this._inputValueBackup !== null) {\r\n                this._writeInputValue(this._inputValueBackup);\r\n            }\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Returns true if the typeahead popup window is displayed\r\n     * @return {?}\r\n     */\r\n    isPopupOpen() { return this._windowRef != null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    handleBlur() {\r\n        this._resubscribeTypeahead.next(null);\r\n        this._onTouched();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    handleKeyDown(event) {\r\n        if (!this.isPopupOpen()) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:deprecation\r\n        switch (event.which) {\r\n            case Key.ArrowDown:\r\n                event.preventDefault();\r\n                this._windowRef.instance.next();\r\n                this._showHint();\r\n                break;\r\n            case Key.ArrowUp:\r\n                event.preventDefault();\r\n                this._windowRef.instance.prev();\r\n                this._showHint();\r\n                break;\r\n            case Key.Enter:\r\n            case Key.Tab:\r\n                /** @type {?} */\r\n                const result = this._windowRef.instance.getActive();\r\n                if (isDefined(result)) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    this._selectResult(result);\r\n                }\r\n                this._closePopup();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _openPopup() {\r\n        if (!this.isPopupOpen()) {\r\n            this._inputValueBackup = this._elementRef.nativeElement.value;\r\n            this._windowRef = this._popupService.open();\r\n            this._windowRef.instance.id = this.popupId;\r\n            this._windowRef.instance.selectEvent.subscribe((/**\r\n             * @param {?} result\r\n             * @return {?}\r\n             */\r\n            (result) => this._selectResultClosePopup(result)));\r\n            this._windowRef.instance.activeChangeEvent.subscribe((/**\r\n             * @param {?} activeId\r\n             * @return {?}\r\n             */\r\n            (activeId) => this.activeDescendant = activeId));\r\n            if (this.container === 'body') {\r\n                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n            }\r\n            this._changeDetector.markForCheck();\r\n            ngbAutoClose(this._ngZone, this._document, 'outside', (/**\r\n             * @return {?}\r\n             */\r\n            () => this.dismissPopup()), this._closed$, [this._elementRef.nativeElement, this._windowRef.location.nativeElement]);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _closePopup() {\r\n        this._closed$.next();\r\n        this._popupService.close();\r\n        this._windowRef = null;\r\n        this.activeDescendant = undefined;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} result\r\n     * @return {?}\r\n     */\r\n    _selectResult(result) {\r\n        /** @type {?} */\r\n        let defaultPrevented = false;\r\n        this.selectItem.emit({ item: result, preventDefault: (/**\r\n             * @return {?}\r\n             */\r\n            () => { defaultPrevented = true; }) });\r\n        this._resubscribeTypeahead.next(null);\r\n        if (!defaultPrevented) {\r\n            this.writeValue(result);\r\n            this._onChange(result);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} result\r\n     * @return {?}\r\n     */\r\n    _selectResultClosePopup(result) {\r\n        this._selectResult(result);\r\n        this._closePopup();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _showHint() {\r\n        if (this.showHint && this._windowRef.instance.hasActive() && this._inputValueBackup != null) {\r\n            /** @type {?} */\r\n            const userInputLowerCase = this._inputValueBackup.toLowerCase();\r\n            /** @type {?} */\r\n            const formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());\r\n            if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {\r\n                this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));\r\n                this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);\r\n            }\r\n            else {\r\n                this._writeInputValue(formattedVal);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    _formatItemForInput(item) {\r\n        return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _writeInputValue(value) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} userInput$\r\n     * @return {?}\r\n     */\r\n    _subscribeToUserInput(userInput$) {\r\n        return userInput$.subscribe((/**\r\n         * @param {?} results\r\n         * @return {?}\r\n         */\r\n        (results) => {\r\n            if (!results || results.length === 0) {\r\n                this._closePopup();\r\n            }\r\n            else {\r\n                this._openPopup();\r\n                this._windowRef.instance.focusFirst = this.focusFirst;\r\n                this._windowRef.instance.results = results;\r\n                this._windowRef.instance.term = this._elementRef.nativeElement.value;\r\n                if (this.resultFormatter) {\r\n                    this._windowRef.instance.formatter = this.resultFormatter;\r\n                }\r\n                if (this.resultTemplate) {\r\n                    this._windowRef.instance.resultTemplate = this.resultTemplate;\r\n                }\r\n                this._windowRef.instance.resetActive();\r\n                // The observable stream we are subscribing to might have async steps\r\n                // and if a component containing typeahead is using the OnPush strategy\r\n                // the change detection turn wouldn't be invoked automatically.\r\n                this._windowRef.changeDetectorRef.detectChanges();\r\n                this._showHint();\r\n            }\r\n            // live announcer\r\n            /** @type {?} */\r\n            const count = results ? results.length : 0;\r\n            this._live.say(count === 0 ? 'No results available' : `${count} result${count === 1 ? '' : 's'} available`);\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _unsubscribeFromUserInput() {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n        this._subscription = null;\r\n    }\r\n}\r\nNgbTypeahead.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input[ngbTypeahead]',\r\n                exportAs: 'ngbTypeahead',\r\n                host: {\r\n                    '(blur)': 'handleBlur()',\r\n                    '[class.open]': 'isPopupOpen()',\r\n                    '(keydown)': 'handleKeyDown($event)',\r\n                    '[autocomplete]': 'autocomplete',\r\n                    'autocapitalize': 'off',\r\n                    'autocorrect': 'off',\r\n                    'role': 'combobox',\r\n                    'aria-multiline': 'false',\r\n                    '[attr.aria-autocomplete]': 'showHint ? \"both\" : \"list\"',\r\n                    '[attr.aria-activedescendant]': 'activeDescendant',\r\n                    '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',\r\n                    '[attr.aria-expanded]': 'isPopupOpen()'\r\n                },\r\n                providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgbTypeahead.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ViewContainerRef },\r\n    { type: Renderer2 },\r\n    { type: Injector },\r\n    { type: ComponentFactoryResolver },\r\n    { type: NgbTypeaheadConfig },\r\n    { type: NgZone },\r\n    { type: Live },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: NgZone },\r\n    { type: ChangeDetectorRef },\r\n    { type: ApplicationRef }\r\n];\r\nNgbTypeahead.propDecorators = {\r\n    autocomplete: [{ type: Input }],\r\n    container: [{ type: Input }],\r\n    editable: [{ type: Input }],\r\n    focusFirst: [{ type: Input }],\r\n    inputFormatter: [{ type: Input }],\r\n    ngbTypeahead: [{ type: Input }],\r\n    resultFormatter: [{ type: Input }],\r\n    resultTemplate: [{ type: Input }],\r\n    showHint: [{ type: Input }],\r\n    placement: [{ type: Input }],\r\n    selectItem: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgbTypeaheadModule {\r\n}\r\nNgbTypeaheadModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow],\r\n                exports: [NgbTypeahead, NgbHighlight],\r\n                imports: [CommonModule],\r\n                entryComponents: [NgbTypeaheadWindow]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGB_MODULES = [\r\n    NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule,\r\n    NgbDropdownModule, NgbModalModule, NgbNavModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule,\r\n    NgbRatingModule, NgbTabsetModule, NgbTimepickerModule, NgbToastModule, NgbTooltipModule, NgbTypeaheadModule\r\n];\r\nclass NgbModule {\r\n}\r\nNgbModule.decorators = [\r\n    { type: NgModule, args: [{ imports: NGB_MODULES, exports: NGB_MODULES },] }\r\n];\r\n\r\nexport { ModalDismissReasons, NgbAccordion, NgbAccordionConfig, NgbAccordionModule, NgbActiveModal, NgbAlert, NgbAlertConfig, NgbAlertModule, NgbButtonLabel, NgbButtonsModule, NgbCalendar, NgbCalendarGregorian, NgbCalendarHebrew, NgbCalendarIslamicCivil, NgbCalendarIslamicUmalqura, NgbCalendarPersian, NgbCarousel, NgbCarouselConfig, NgbCarouselModule, NgbCheckBox, NgbCollapse, NgbCollapseModule, NgbDate, NgbDateAdapter, NgbDateNativeAdapter, NgbDateNativeUTCAdapter, NgbDateParserFormatter, NgbDatepicker, NgbDatepickerConfig, NgbDatepickerContent, NgbDatepickerI18n, NgbDatepickerI18nHebrew, NgbDatepickerKeyboardService, NgbDatepickerModule, NgbDatepickerMonth, NgbDropdown, NgbDropdownAnchor, NgbDropdownConfig, NgbDropdownItem, NgbDropdownMenu, NgbDropdownModule, NgbDropdownToggle, NgbHighlight, NgbInputDatepicker, NgbInputDatepickerConfig, NgbModal, NgbModalConfig, NgbModalModule, NgbModalRef, NgbModule, NgbNav, NgbNavConfig, NgbNavContent, NgbNavItem, NgbNavLink, NgbNavModule, NgbNavOutlet, NgbNavbar, NgbPagination, NgbPaginationConfig, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationModule, NgbPaginationNext, NgbPaginationNumber, NgbPaginationPrevious, NgbPanel, NgbPanelContent, NgbPanelHeader, NgbPanelTitle, NgbPanelToggle, NgbPopover, NgbPopoverConfig, NgbPopoverModule, NgbProgressbar, NgbProgressbarConfig, NgbProgressbarModule, NgbRadio, NgbRadioGroup, NgbRating, NgbRatingConfig, NgbRatingModule, NgbSlide, NgbSlideEventDirection, NgbSlideEventSource, NgbTab, NgbTabContent, NgbTabTitle, NgbTabset, NgbTabsetConfig, NgbTabsetModule, NgbTimeAdapter, NgbTimepicker, NgbTimepickerConfig, NgbTimepickerI18n, NgbTimepickerModule, NgbToast, NgbToastConfig, NgbToastHeader, NgbToastModule, NgbTooltip, NgbTooltipConfig, NgbTooltipModule, NgbTypeahead, NgbTypeaheadConfig, NgbTypeaheadModule, NGB_CAROUSEL_DIRECTIVES as ɵa, NGB_DATEPICKER_VALUE_ACCESSOR as ɵb, Live as ɵba, NgbCalendarHijri as ɵbb, ContentRef as ɵbc, NGB_DATEPICKER_CALENDAR_FACTORY as ɵc, NgbDatepickerDayView as ɵd, NgbDatepickerNavigation as ɵe, NgbDatepickerNavigationSelect as ɵf, NGB_DATEPICKER_18N_FACTORY as ɵg, NgbDatepickerI18nDefault as ɵh, NGB_DATEPICKER_DATE_ADAPTER_FACTORY as ɵi, NgbDateStructAdapter as ɵj, NGB_DATEPICKER_PARSER_FORMATTER_FACTORY as ɵk, NgbDateISOParserFormatter as ɵl, NgbPopoverWindow as ɵm, NGB_DATEPICKER_TIME_ADAPTER_FACTORY as ɵn, NgbTimeStructAdapter as ɵo, NGB_TIMEPICKER_I18N_FACTORY as ɵp, NgbTimepickerI18nDefault as ɵq, NgbTooltipWindow as ɵr, NgbTypeaheadWindow as ɵs, NgbDatepickerService as ɵt, NgbModalBackdrop as ɵu, NgbModalWindow as ɵv, NgbModalStack as ɵw, ScrollBar as ɵx, ARIA_LIVE_DELAY as ɵy, ARIA_LIVE_DELAY_FACTORY as ɵz };\r\n\r\n"]}