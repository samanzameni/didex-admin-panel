{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@ng-bootstrap/ng-bootstrap/bundles/ng-bootstrap.umd.js"],"names":[],"mappings":"AAAA;6RAC+M;4MACtD;;oyDACsN;;;;;;;;;;;;;;;;;;;;;;SAsBvN,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;SAWJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;SASJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAkCH,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA6QA,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;WA2BC,AAaD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAQA;;;;;;;;;;;;SAYD;;;;;;;;;;;;;;;;;8LAGC;;;;;;;;;;;;;;;;;;SAkBD,AAGC;;;;;;mEACsM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGAqD5G,AAU1F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DAWA;;;;;;;;;;SAUD;;;;;;;kLAGC;;;;;;;;;;SAUD;;;;;;;;;;;;;;;;;0CAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyHA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2KAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEAwKuD,AAGvD;;;;;;;;;;;;qSAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAiIoD,AAapD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAaA;;;;;;;;;;;;SAYD;;;;;;;;;;;;;sJAGC;;;;;;;;;;;;;;;;;;;;;;SAsBD,AAGC;;;;;;wJACkN;;;;;;;;;;;;;;;;;;;;;;SAsBnN,AAGC;;;;;;;;;;;;;;cAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsXA,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAoBA;;;;;;;;;;;;;;;;;;;;;;;;SAwBD;;;;;;;;;2LAGC;;;;;;;;;;;;;;;;;SAiBD,AAOC;;;;;;;;;;;;;;;;;;;;;;cAGA;;;;;;;;;;SAUD;;;;;;;yJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+LD,AAGC;;;;;;;;;;;0CAC6J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqK7J;;;;;mKAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CA4YoC,AAGpC;;;;;;;;;;;sGACoP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2DpP,AAGA;;;;;;;;;;;qHAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAocH,AAGA;;;;;;;;;6VAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAkCJ,AAGC;;;;;;uJAC0N;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA8B3N,AAGC;;;;;;;;;;;0CACuK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2CvK;;;;;8CAGA;;;;;;;;;;;;;;;;;;;;;;;;;SAyBD,AAGC;;;;;;;;;mcAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsGA,AAGA;;;;;;wDAC8P;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAiE9P,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAuCA,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAewoBD,AAGC;;;;;;;;;;;0CAC2L;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4C3L;;;;;yCAGA;;;;;;;;;;;;;;;;;;;;;;;;SAwBD,AAGC;;;;;;;oshB9O,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAsCA;;;;;;;;;;;;;;;;;;2GAkBiG,AAiBjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmDA,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsNA;;;;;6MAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAiNA;;;;;2EAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmSA;;;;;2EAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2bA;;;;;moEAkkB0D;;;;;uMAG1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDA4F+C;;;;;2KAG/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA+EA;;;;;sFAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA+CA;;;;;0DAGA;;;;;;;;;;SAUD;;;;;;;;;;;;;;;;;;;;;;;;oNAWC;;;;;;;;;;;;;;;;;;SAkBD,AAGC;;;;;;sEACkN;;;;;;;;;;SAUnN;;;;;0CAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;WA4BC,AAGD;;;;;;;;;;;;;;;;;;;;;4BAOA;;;;;;;;;;;SAWD,AAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAUA;;;;;;;;;;;;;;;;;;;;;;;;+DAwBqD,AAMrD;;;;;;;;;;;;;;;;;;;;;;;;;;;;wHAQG;;;;;;;;;;;;SAYJ,AAmBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDAQG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAkaH,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAqBA;;;;;;;;;;;;SAYD;;;;;;;;;;;;;;;;;yJAGC;;;;;;;;;;;;;;;;;;;;SAoBD,AAGC;;;;;;oEACsM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4OtM,AAGA;;;;;;;;;;;;;yGAKgN;;;;;;;;;;SAUjN,AAQC;;;;;;;;;;;;;;;;;;;;;;cAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA0YA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAkbA,AAGA;;;;;;;;;;;;;;;;;;qqBAU8X;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEAiGvU,AAGvD;;;;;;;;;;;;;qQAQqT;;;;;;;;;;SAUtT;;;;;;;;;;;;uKAOC;;;;;;;;;;;;;;;;;;;;;SAqBD,AAGC;;;;;;uFAC8L;;;;;;;;;;;;;;;;;;;;;;;;SAwB/L,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4EH,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyGA,AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAeA;;;;;;;;;;;;;;;;;;;;;;;UAuBA,AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uHAMG;;;;;;;;;;;;;;;SAeJ,AAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAIA;;;;;;;;;;;;SAYD;;;;;;;;;;;;;;;4KAGC;;;;;;;;;;;;;;;;;;;;;;;SAuBD,AAGC;;;;;;kJAC0N;;;;;;;;;;;;;;;;SAgB3N,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;SAWJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;SAWJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;SAWJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;SAWJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;SAWJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2QH,AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAuBA;;;;;;;;;;;;;;;SAeD;;;;;;;;;;;;;;;;;;;iMAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4PD,AAGC;;;;;;uIAC8M;;;;;;;;;;;;;;;;;;;uEAmBjJ,AAU7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqNA,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA2BA;;;;;;;;;;SAUD;;;;;;;;;;;;;wLAQC;;;;;;;;;;;;;;;;;;;;SAoBD,AAGC;;;;;;2FAC8N;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEA+DvK,AAQvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAcA;;;;;;;;;;SAUD;;;;;;;oMAGC;;;;;;;;;;;;;;;;;;;SAmBD,AAGC;;;;;;+EAC0M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4Q1M,AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAgBA;;;;;;;;;;SAUD;;;;;;;qLAGC;;;;;;;;;;;;;;;;;;;SAmBD,AAGC;;;;;;gFAC0M;;;;;;;;;;;;;;;;;;SAkB3M,AAGC;;;;;;;;;mFAIG;;;;;;;;;SASJ,AAGC;;;;;;;;;mFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAgCH,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA6GA,AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAaA;;;;;;;;;;;;SAYD;;;;;;;;;;;;;mMAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+ID,AAGC;;;;;;2KAC0N;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+B3N,AAGC;;;;;;;;;;;0CACuK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2CvK;;;;;8CAGA;;;;;;;;;;;;;;;;;;;;;;;SAuBD,AAGC;;;;;;;;;;;0CACqP;;;;;;;;;;;;;;;;;;;;;;;iDAuB9M,AAGvC;;;;;;;;;;;wEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA0UH,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wWAiBA;;;;;;;;;;SAUD;;;;;;;iMAGC;;;;;;;;;;;;;;;;;;;;SAoBD,AAGC;;;;;;+EACsM;;;;;;;;;;;;;;;;SAgBvM;;;;;0CAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA8FA,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;SAUD;;;;;;;;;kLAGC;;;;;;;;;;;;;;;;;;;;;;SAsBD,AAGC;;;;;;uIAC8M;;;;;;;;;;;;SAY/M,AAUC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAwNA,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uKA0BA;;;;;;;;;;SAUD;;;;;;;;sJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA+CA,AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyHA,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA8EA,AAGA;;;;;;;;;;;;;;;;;+EAM4N;;;;;;;;;;;;;;;;;;;;SAoB7N,AAGC;;;;;;mGACsN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2btN,AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA4BA;;;;;;;;;;SAUD;;;;;;;;;;;;;;;8LAQC;;;;;;;;;;;;;;;;SAgBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAGC","file":"ng-bootstrap.umd.js","sourcesContent":["(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :\r\n    typeof define === 'function' && define.amd ? define('ngb', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :\r\n    (global = global || self, factory(global.ngb = {}, global.ng.core, global.ng.common, global.ng.forms, global.rxjs, global.rxjs.operators));\r\n}(this, function (exports, core, common, forms, rxjs, operators) { 'use strict';\r\n\r\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function toInteger(value) {\r\n        return parseInt(\"\" + value, 10);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function toString(value) {\r\n        return (value !== undefined && value !== null) ? \"\" + value : '';\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} max\r\n     * @param {?=} min\r\n     * @return {?}\r\n     */\r\n    function getValueInRange(value, max, min) {\r\n        if (min === void 0) { min = 0; }\r\n        return Math.max(Math.min(value, max), min);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function isString(value) {\r\n        return typeof value === 'string';\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function isNumber(value) {\r\n        return !isNaN(toInteger(value));\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function isInteger(value) {\r\n        return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function isDefined(value) {\r\n        return value !== undefined && value !== null;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function padNumber(value) {\r\n        if (isNumber(value)) {\r\n            return (\"0\" + value).slice(-2);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    function regExpEscape(text) {\r\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    function hasClassName(element, className) {\r\n        return element && element.className && element.className.split &&\r\n            element.className.split(/\\s+/).indexOf(className) >= 0;\r\n    }\r\n    if (typeof Element !== 'undefined' && !Element.prototype.closest) {\r\n        // Polyfill for ie10+\r\n        if (!Element.prototype.matches) {\r\n            // IE uses the non-standard name: msMatchesSelector\r\n            Element.prototype.matches = ((/** @type {?} */ (Element.prototype))).msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\n        }\r\n        Element.prototype.closest = (/**\r\n         * @param {?} s\r\n         * @return {?}\r\n         */\r\n        function (s) {\r\n            /** @type {?} */\r\n            var el = this;\r\n            if (!document.documentElement.contains(el)) {\r\n                return null;\r\n            }\r\n            do {\r\n                if (el.matches(s)) {\r\n                    return el;\r\n                }\r\n                el = el.parentElement || el.parentNode;\r\n            } while (el !== null && el.nodeType === 1);\r\n            return null;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    function closest(element, selector) {\r\n        if (!selector) {\r\n            return null;\r\n        }\r\n        return element.closest(selector);\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [NgbAccordion](#/components/accordion/api#NgbAccordion) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize its properties\r\n     * to provide default values for all accordions used in the application.\r\n     */\r\n    var NgbAccordionConfig = /** @class */ (function () {\r\n        function NgbAccordionConfig() {\r\n            this.closeOthers = false;\r\n        }\r\n        NgbAccordionConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbAccordionConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbAccordionConfig_Factory() { return new NgbAccordionConfig(); }, token: NgbAccordionConfig, providedIn: \"root\" });\r\n        return NgbAccordionConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var nextId = 0;\r\n    /**\r\n     * A directive that wraps an accordion panel header with any HTML markup and a toggling button\r\n     * marked with [`NgbPanelToggle`](#/components/accordion/api#NgbPanelToggle).\r\n     * See the [header customization demo](#/components/accordion/examples#header) for more details.\r\n     *\r\n     * You can also use [`NgbPanelTitle`](#/components/accordion/api#NgbPanelTitle) to customize only the panel title.\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPanelHeader = /** @class */ (function () {\r\n        function NgbPanelHeader(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPanelHeader.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPanelHeader]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPanelHeader.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPanelHeader;\r\n    }());\r\n    /**\r\n     * A directive that wraps only the panel title with HTML markup inside.\r\n     *\r\n     * You can also use [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader) to customize the full panel header.\r\n     */\r\n    var NgbPanelTitle = /** @class */ (function () {\r\n        function NgbPanelTitle(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPanelTitle.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPanelTitle]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPanelTitle.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPanelTitle;\r\n    }());\r\n    /**\r\n     * A directive that wraps the accordion panel content.\r\n     */\r\n    var NgbPanelContent = /** @class */ (function () {\r\n        function NgbPanelContent(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPanelContent.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPanelContent]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPanelContent.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPanelContent;\r\n    }());\r\n    /**\r\n     * A directive that wraps an individual accordion panel with title and collapsible content.\r\n     */\r\n    var NgbPanel = /** @class */ (function () {\r\n        function NgbPanel() {\r\n            /**\r\n             *  If `true`, the panel is disabled an can't be toggled.\r\n             */\r\n            this.disabled = false;\r\n            /**\r\n             *  An optional id for the panel that must be unique on the page.\r\n             *\r\n             *  If not provided, it will be auto-generated in the `ngb-panel-xxx` format.\r\n             */\r\n            this.id = \"ngb-panel-\" + nextId++;\r\n            this.isOpen = false;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPanel.prototype.ngAfterContentChecked = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\r\n            // only @ContentChildren allows us to specify the {descendants: false} option.\r\n            // Without {descendants: false} we are hitting bugs described in:\r\n            // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n            this.titleTpl = this.titleTpls.first;\r\n            this.headerTpl = this.headerTpls.first;\r\n            this.contentTpl = this.contentTpls.first;\r\n        };\r\n        NgbPanel.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ngb-panel' },] }\r\n        ];\r\n        NgbPanel.propDecorators = {\r\n            disabled: [{ type: core.Input }],\r\n            id: [{ type: core.Input }],\r\n            title: [{ type: core.Input }],\r\n            type: [{ type: core.Input }],\r\n            cardClass: [{ type: core.Input }],\r\n            titleTpls: [{ type: core.ContentChildren, args: [NgbPanelTitle, { descendants: false },] }],\r\n            headerTpls: [{ type: core.ContentChildren, args: [NgbPanelHeader, { descendants: false },] }],\r\n            contentTpls: [{ type: core.ContentChildren, args: [NgbPanelContent, { descendants: false },] }]\r\n        };\r\n        return NgbPanel;\r\n    }());\r\n    /**\r\n     * Accordion is a collection of collapsible panels (bootstrap cards).\r\n     *\r\n     * It can ensure only one panel is opened at a time and allows to customize panel\r\n     * headers.\r\n     */\r\n    var NgbAccordion = /** @class */ (function () {\r\n        function NgbAccordion(config) {\r\n            /**\r\n             * An array or comma separated strings of panel ids that should be opened **initially**.\r\n             *\r\n             * For subsequent changes use methods like `expand()`, `collapse()`, etc. and\r\n             * the `(panelChange)` event.\r\n             */\r\n            this.activeIds = [];\r\n            /**\r\n             * If `true`, panel content will be detached from DOM and not simply hidden when the panel is collapsed.\r\n             */\r\n            this.destroyOnHide = true;\r\n            /**\r\n             * Event emitted right before the panel toggle happens.\r\n             *\r\n             * See [NgbPanelChangeEvent](#/components/accordion/api#NgbPanelChangeEvent) for payload details.\r\n             */\r\n            this.panelChange = new core.EventEmitter();\r\n            this.type = config.type;\r\n            this.closeOtherPanels = config.closeOthers;\r\n        }\r\n        /**\r\n         * Checks if a panel with a given id is expanded.\r\n         */\r\n        /**\r\n         * Checks if a panel with a given id is expanded.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype.isExpanded = /**\r\n         * Checks if a panel with a given id is expanded.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        function (panelId) { return this.activeIds.indexOf(panelId) > -1; };\r\n        /**\r\n         * Expands a panel with a given id.\r\n         *\r\n         * Has no effect if the panel is already expanded or disabled.\r\n         */\r\n        /**\r\n         * Expands a panel with a given id.\r\n         *\r\n         * Has no effect if the panel is already expanded or disabled.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype.expand = /**\r\n         * Expands a panel with a given id.\r\n         *\r\n         * Has no effect if the panel is already expanded or disabled.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        function (panelId) { this._changeOpenState(this._findPanelById(panelId), true); };\r\n        /**\r\n         * Expands all panels, if `[closeOthers]` is `false`.\r\n         *\r\n         * If `[closeOthers]` is `true`, it will expand the first panel, unless there is already a panel opened.\r\n         */\r\n        /**\r\n         * Expands all panels, if `[closeOthers]` is `false`.\r\n         *\r\n         * If `[closeOthers]` is `true`, it will expand the first panel, unless there is already a panel opened.\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype.expandAll = /**\r\n         * Expands all panels, if `[closeOthers]` is `false`.\r\n         *\r\n         * If `[closeOthers]` is `true`, it will expand the first panel, unless there is already a panel opened.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            if (this.closeOtherPanels) {\r\n                if (this.activeIds.length === 0 && this.panels.length) {\r\n                    this._changeOpenState(this.panels.first, true);\r\n                }\r\n            }\r\n            else {\r\n                this.panels.forEach((/**\r\n                 * @param {?} panel\r\n                 * @return {?}\r\n                 */\r\n                function (panel) { return _this._changeOpenState(panel, true); }));\r\n            }\r\n        };\r\n        /**\r\n         * Collapses a panel with the given id.\r\n         *\r\n         * Has no effect if the panel is already collapsed or disabled.\r\n         */\r\n        /**\r\n         * Collapses a panel with the given id.\r\n         *\r\n         * Has no effect if the panel is already collapsed or disabled.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype.collapse = /**\r\n         * Collapses a panel with the given id.\r\n         *\r\n         * Has no effect if the panel is already collapsed or disabled.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        function (panelId) { this._changeOpenState(this._findPanelById(panelId), false); };\r\n        /**\r\n         * Collapses all opened panels.\r\n         */\r\n        /**\r\n         * Collapses all opened panels.\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype.collapseAll = /**\r\n         * Collapses all opened panels.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            this.panels.forEach((/**\r\n             * @param {?} panel\r\n             * @return {?}\r\n             */\r\n            function (panel) { _this._changeOpenState(panel, false); }));\r\n        };\r\n        /**\r\n         * Toggles a panel with the given id.\r\n         *\r\n         * Has no effect if the panel is disabled.\r\n         */\r\n        /**\r\n         * Toggles a panel with the given id.\r\n         *\r\n         * Has no effect if the panel is disabled.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype.toggle = /**\r\n         * Toggles a panel with the given id.\r\n         *\r\n         * Has no effect if the panel is disabled.\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        function (panelId) {\r\n            /** @type {?} */\r\n            var panel = this._findPanelById(panelId);\r\n            if (panel) {\r\n                this._changeOpenState(panel, !panel.isOpen);\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype.ngAfterContentChecked = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            // active id updates\r\n            if (isString(this.activeIds)) {\r\n                this.activeIds = this.activeIds.split(/\\s*,\\s*/);\r\n            }\r\n            // update panels open states\r\n            this.panels.forEach((/**\r\n             * @param {?} panel\r\n             * @return {?}\r\n             */\r\n            function (panel) { return panel.isOpen = !panel.disabled && _this.activeIds.indexOf(panel.id) > -1; }));\r\n            // closeOthers updates\r\n            if (this.activeIds.length > 1 && this.closeOtherPanels) {\r\n                this._closeOthers(this.activeIds[0]);\r\n                this._updateActiveIds();\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} panel\r\n         * @param {?} nextState\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype._changeOpenState = /**\r\n         * @private\r\n         * @param {?} panel\r\n         * @param {?} nextState\r\n         * @return {?}\r\n         */\r\n        function (panel, nextState) {\r\n            if (panel && !panel.disabled && panel.isOpen !== nextState) {\r\n                /** @type {?} */\r\n                var defaultPrevented_1 = false;\r\n                this.panelChange.emit({ panelId: panel.id, nextState: nextState, preventDefault: (/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { defaultPrevented_1 = true; }) });\r\n                if (!defaultPrevented_1) {\r\n                    panel.isOpen = nextState;\r\n                    if (nextState && this.closeOtherPanels) {\r\n                        this._closeOthers(panel.id);\r\n                    }\r\n                    this._updateActiveIds();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype._closeOthers = /**\r\n         * @private\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        function (panelId) {\r\n            this.panels.forEach((/**\r\n             * @param {?} panel\r\n             * @return {?}\r\n             */\r\n            function (panel) {\r\n                if (panel.id !== panelId) {\r\n                    panel.isOpen = false;\r\n                }\r\n            }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype._findPanelById = /**\r\n         * @private\r\n         * @param {?} panelId\r\n         * @return {?}\r\n         */\r\n        function (panelId) { return this.panels.find((/**\r\n         * @param {?} p\r\n         * @return {?}\r\n         */\r\n        function (p) { return p.id === panelId; })); };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbAccordion.prototype._updateActiveIds = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.activeIds = this.panels.filter((/**\r\n             * @param {?} panel\r\n             * @return {?}\r\n             */\r\n            function (panel) { return panel.isOpen && !panel.disabled; })).map((/**\r\n             * @param {?} panel\r\n             * @return {?}\r\n             */\r\n            function (panel) { return panel.id; }));\r\n        };\r\n        NgbAccordion.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-accordion',\r\n                        exportAs: 'ngbAccordion',\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: { 'class': 'accordion', 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },\r\n                        template: \"\\n    <ng-template #t ngbPanelHeader let-panel>\\n      <button class=\\\"btn btn-link\\\" [ngbPanelToggle]=\\\"panel\\\">\\n        {{panel.title}}<ng-template [ngTemplateOutlet]=\\\"panel.titleTpl?.templateRef\\\"></ng-template>\\n      </button>\\n    </ng-template>\\n    <ng-template ngFor let-panel [ngForOf]=\\\"panels\\\">\\n      <div [class]=\\\"'card ' + (panel.cardClass || '')\\\">\\n        <div role=\\\"tab\\\" id=\\\"{{panel.id}}-header\\\" [class]=\\\"'card-header ' + (panel.type ? 'bg-'+panel.type: type ? 'bg-'+type : '')\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"panel.headerTpl?.templateRef || t\\\"\\n                       [ngTemplateOutletContext]=\\\"{$implicit: panel, opened: panel.isOpen}\\\"></ng-template>\\n        </div>\\n        <div id=\\\"{{panel.id}}\\\" role=\\\"tabpanel\\\" [attr.aria-labelledby]=\\\"panel.id + '-header'\\\"\\n             class=\\\"collapse\\\" [class.show]=\\\"panel.isOpen\\\" *ngIf=\\\"!destroyOnHide || panel.isOpen\\\">\\n          <div class=\\\"card-body\\\">\\n               <ng-template [ngTemplateOutlet]=\\\"panel.contentTpl?.templateRef\\\"></ng-template>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \"\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbAccordion.ctorParameters = function () { return [\r\n            { type: NgbAccordionConfig }\r\n        ]; };\r\n        NgbAccordion.propDecorators = {\r\n            panels: [{ type: core.ContentChildren, args: [NgbPanel,] }],\r\n            activeIds: [{ type: core.Input }],\r\n            closeOtherPanels: [{ type: core.Input, args: ['closeOthers',] }],\r\n            destroyOnHide: [{ type: core.Input }],\r\n            type: [{ type: core.Input }],\r\n            panelChange: [{ type: core.Output }]\r\n        };\r\n        return NgbAccordion;\r\n    }());\r\n    /**\r\n     * A directive to put on a button that toggles panel opening and closing.\r\n     *\r\n     * To be used inside the [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader)\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPanelToggle = /** @class */ (function () {\r\n        function NgbPanelToggle(accordion, panel) {\r\n            this.accordion = accordion;\r\n            this.panel = panel;\r\n        }\r\n        Object.defineProperty(NgbPanelToggle.prototype, \"ngbPanelToggle\", {\r\n            set: /**\r\n             * @param {?} panel\r\n             * @return {?}\r\n             */\r\n            function (panel) {\r\n                if (panel) {\r\n                    this.panel = panel;\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        NgbPanelToggle.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'button[ngbPanelToggle]',\r\n                        host: {\r\n                            'type': 'button',\r\n                            '[disabled]': 'panel.disabled',\r\n                            '[class.collapsed]': '!panel.isOpen',\r\n                            '[attr.aria-expanded]': 'panel.isOpen',\r\n                            '[attr.aria-controls]': 'panel.id',\r\n                            '(click)': 'accordion.toggle(panel.id)'\r\n                        }\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPanelToggle.ctorParameters = function () { return [\r\n            { type: NgbAccordion },\r\n            { type: NgbPanel, decorators: [{ type: core.Optional }, { type: core.Host }] }\r\n        ]; };\r\n        NgbPanelToggle.propDecorators = {\r\n            ngbPanelToggle: [{ type: core.Input }]\r\n        };\r\n        return NgbPanelToggle;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent, NgbPanelHeader, NgbPanelToggle];\r\n    var NgbAccordionModule = /** @class */ (function () {\r\n        function NgbAccordionModule() {\r\n        }\r\n        NgbAccordionModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [common.CommonModule] },] }\r\n        ];\r\n        return NgbAccordionModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [NgbAlert](#/components/alert/api#NgbAlert) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize its properties\r\n     * to provide default values for all alerts used in the application.\r\n     */\r\n    var NgbAlertConfig = /** @class */ (function () {\r\n        function NgbAlertConfig() {\r\n            this.dismissible = true;\r\n            this.type = 'warning';\r\n        }\r\n        NgbAlertConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbAlertConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbAlertConfig_Factory() { return new NgbAlertConfig(); }, token: NgbAlertConfig, providedIn: \"root\" });\r\n        return NgbAlertConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * Alert is a component to provide contextual feedback messages for user.\r\n     *\r\n     * It supports several alert types and can be dismissed.\r\n     */\r\n    var NgbAlert = /** @class */ (function () {\r\n        function NgbAlert(config, _renderer, _element) {\r\n            this._renderer = _renderer;\r\n            this._element = _element;\r\n            /**\r\n             * An event emitted when the close button is clicked. It has no payload and only relevant for dismissible alerts.\r\n             */\r\n            this.close = new core.EventEmitter();\r\n            this.dismissible = config.dismissible;\r\n            this.type = config.type;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbAlert.prototype.closeHandler = /**\r\n         * @return {?}\r\n         */\r\n        function () { this.close.emit(null); };\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbAlert.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            /** @type {?} */\r\n            var typeChange = changes['type'];\r\n            if (typeChange && !typeChange.firstChange) {\r\n                this._renderer.removeClass(this._element.nativeElement, \"alert-\" + typeChange.previousValue);\r\n                this._renderer.addClass(this._element.nativeElement, \"alert-\" + typeChange.currentValue);\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbAlert.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._renderer.addClass(this._element.nativeElement, \"alert-\" + this.type); };\r\n        NgbAlert.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-alert',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: { 'role': 'alert', 'class': 'alert', '[class.alert-dismissible]': 'dismissible' },\r\n                        template: \"\\n    <ng-content></ng-content>\\n    <button *ngIf=\\\"dismissible\\\" type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" i18n-aria-label=\\\"@@ngb.alert.close\\\"\\n      (click)=\\\"closeHandler()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n    \",\r\n                        styles: [\"ngb-alert{display:block}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbAlert.ctorParameters = function () { return [\r\n            { type: NgbAlertConfig },\r\n            { type: core.Renderer2 },\r\n            { type: core.ElementRef }\r\n        ]; };\r\n        NgbAlert.propDecorators = {\r\n            dismissible: [{ type: core.Input }],\r\n            type: [{ type: core.Input }],\r\n            close: [{ type: core.Output }]\r\n        };\r\n        return NgbAlert;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbAlertModule = /** @class */ (function () {\r\n        function NgbAlertModule() {\r\n        }\r\n        NgbAlertModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: [NgbAlert], exports: [NgbAlert], imports: [common.CommonModule], entryComponents: [NgbAlert] },] }\r\n        ];\r\n        return NgbAlertModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbButtonLabel = /** @class */ (function () {\r\n        function NgbButtonLabel() {\r\n        }\r\n        NgbButtonLabel.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbButtonLabel]',\r\n                        host: { '[class.btn]': 'true', '[class.active]': 'active', '[class.disabled]': 'disabled', '[class.focus]': 'focused' }\r\n                    },] }\r\n        ];\r\n        return NgbButtonLabel;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_CHECKBOX_VALUE_ACCESSOR = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbCheckBox; })),\r\n        multi: true\r\n    };\r\n    /**\r\n     * Allows to easily create Bootstrap-style checkbox buttons.\r\n     *\r\n     * Integrates with forms, so the value of a checked button is bound to the underlying form control\r\n     * either in a reactive or template-driven way.\r\n     */\r\n    var NgbCheckBox = /** @class */ (function () {\r\n        function NgbCheckBox(_label, _cd) {\r\n            this._label = _label;\r\n            this._cd = _cd;\r\n            /**\r\n             * If `true`, the checkbox button will be disabled\r\n             */\r\n            this.disabled = false;\r\n            /**\r\n             * The form control value when the checkbox is checked.\r\n             */\r\n            this.valueChecked = true;\r\n            /**\r\n             * The form control value when the checkbox is unchecked.\r\n             */\r\n            this.valueUnChecked = false;\r\n            this.onChange = (/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            function (_) { });\r\n            this.onTouched = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n        }\r\n        Object.defineProperty(NgbCheckBox.prototype, \"focused\", {\r\n            set: /**\r\n             * @param {?} isFocused\r\n             * @return {?}\r\n             */\r\n            function (isFocused) {\r\n                this._label.focused = isFocused;\r\n                if (!isFocused) {\r\n                    this.onTouched();\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {?} $event\r\n         * @return {?}\r\n         */\r\n        NgbCheckBox.prototype.onInputChange = /**\r\n         * @param {?} $event\r\n         * @return {?}\r\n         */\r\n        function ($event) {\r\n            /** @type {?} */\r\n            var modelToPropagate = $event.target.checked ? this.valueChecked : this.valueUnChecked;\r\n            this.onChange(modelToPropagate);\r\n            this.onTouched();\r\n            this.writeValue(modelToPropagate);\r\n        };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbCheckBox.prototype.registerOnChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onChange = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbCheckBox.prototype.registerOnTouched = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onTouched = fn; };\r\n        /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        NgbCheckBox.prototype.setDisabledState = /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        function (isDisabled) {\r\n            this.disabled = isDisabled;\r\n            this._label.disabled = isDisabled;\r\n        };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbCheckBox.prototype.writeValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this.checked = value === this.valueChecked;\r\n            this._label.active = this.checked;\r\n            // label won't be updated, if it is inside the OnPush component when [ngModel] changes\r\n            this._cd.markForCheck();\r\n        };\r\n        NgbCheckBox.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbButton][type=checkbox]',\r\n                        host: {\r\n                            '[checked]': 'checked',\r\n                            '[disabled]': 'disabled',\r\n                            '(change)': 'onInputChange($event)',\r\n                            '(focus)': 'focused = true',\r\n                            '(blur)': 'focused = false'\r\n                        },\r\n                        providers: [NGB_CHECKBOX_VALUE_ACCESSOR]\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbCheckBox.ctorParameters = function () { return [\r\n            { type: NgbButtonLabel },\r\n            { type: core.ChangeDetectorRef }\r\n        ]; };\r\n        NgbCheckBox.propDecorators = {\r\n            disabled: [{ type: core.Input }],\r\n            valueChecked: [{ type: core.Input }],\r\n            valueUnChecked: [{ type: core.Input }]\r\n        };\r\n        return NgbCheckBox;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_RADIO_VALUE_ACCESSOR = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbRadioGroup; })),\r\n        multi: true\r\n    };\r\n    /** @type {?} */\r\n    var nextId$1 = 0;\r\n    /**\r\n     * Allows to easily create Bootstrap-style radio buttons.\r\n     *\r\n     * Integrates with forms, so the value of a checked button is bound to the underlying form control\r\n     * either in a reactive or template-driven way.\r\n     */\r\n    var NgbRadioGroup = /** @class */ (function () {\r\n        function NgbRadioGroup() {\r\n            this._radios = new Set();\r\n            this._value = null;\r\n            /**\r\n             * Name of the radio group applied to radio input elements.\r\n             *\r\n             * Will be applied to all radio input elements inside the group,\r\n             * unless [`NgbRadio`](#/components/buttons/api#NgbRadio)'s specify names themselves.\r\n             *\r\n             * If not provided, will be generated in the `ngb-radio-xx` format.\r\n             */\r\n            this.name = \"ngb-radio-\" + nextId$1++;\r\n            this.onChange = (/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            function (_) { });\r\n            this.onTouched = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n        }\r\n        Object.defineProperty(NgbRadioGroup.prototype, \"disabled\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._disabled; },\r\n            set: /**\r\n             * @param {?} isDisabled\r\n             * @return {?}\r\n             */\r\n            function (isDisabled) { this.setDisabledState(isDisabled); },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {?} radio\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.onRadioChange = /**\r\n         * @param {?} radio\r\n         * @return {?}\r\n         */\r\n        function (radio) {\r\n            this.writeValue(radio.value);\r\n            this.onChange(radio.value);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.onRadioValueUpdate = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._updateRadiosValue(); };\r\n        /**\r\n         * @param {?} radio\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.register = /**\r\n         * @param {?} radio\r\n         * @return {?}\r\n         */\r\n        function (radio) { this._radios.add(radio); };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.registerOnChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onChange = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.registerOnTouched = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onTouched = fn; };\r\n        /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.setDisabledState = /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        function (isDisabled) {\r\n            this._disabled = isDisabled;\r\n            this._updateRadiosDisabled();\r\n        };\r\n        /**\r\n         * @param {?} radio\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.unregister = /**\r\n         * @param {?} radio\r\n         * @return {?}\r\n         */\r\n        function (radio) { this._radios.delete(radio); };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype.writeValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._value = value;\r\n            this._updateRadiosValue();\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype._updateRadiosValue = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            this._radios.forEach((/**\r\n             * @param {?} radio\r\n             * @return {?}\r\n             */\r\n            function (radio) { return radio.updateValue(_this._value); }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbRadioGroup.prototype._updateRadiosDisabled = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () { this._radios.forEach((/**\r\n         * @param {?} radio\r\n         * @return {?}\r\n         */\r\n        function (radio) { return radio.updateDisabled(); })); };\r\n        NgbRadioGroup.decorators = [\r\n            { type: core.Directive, args: [{ selector: '[ngbRadioGroup]', host: { 'role': 'radiogroup' }, providers: [NGB_RADIO_VALUE_ACCESSOR] },] }\r\n        ];\r\n        NgbRadioGroup.propDecorators = {\r\n            name: [{ type: core.Input }]\r\n        };\r\n        return NgbRadioGroup;\r\n    }());\r\n    /**\r\n     * A directive that marks an input of type \"radio\" as a part of the\r\n     * [`NgbRadioGroup`](#/components/buttons/api#NgbRadioGroup).\r\n     */\r\n    var NgbRadio = /** @class */ (function () {\r\n        function NgbRadio(_group, _label, _renderer, _element, _cd) {\r\n            this._group = _group;\r\n            this._label = _label;\r\n            this._renderer = _renderer;\r\n            this._element = _element;\r\n            this._cd = _cd;\r\n            this._value = null;\r\n            this._group.register(this);\r\n            this.updateDisabled();\r\n        }\r\n        Object.defineProperty(NgbRadio.prototype, \"value\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._value; },\r\n            /**\r\n             * The form control value when current radio button is checked.\r\n             */\r\n            set: /**\r\n             * The form control value when current radio button is checked.\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                this._value = value;\r\n                /** @type {?} */\r\n                var stringValue = value ? value.toString() : '';\r\n                this._renderer.setProperty(this._element.nativeElement, 'value', stringValue);\r\n                this._group.onRadioValueUpdate();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbRadio.prototype, \"disabled\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._group.disabled || this._disabled; },\r\n            /**\r\n             * If `true`, current radio button will be disabled.\r\n             */\r\n            set: /**\r\n             * If `true`, current radio button will be disabled.\r\n             * @param {?} isDisabled\r\n             * @return {?}\r\n             */\r\n            function (isDisabled) {\r\n                this._disabled = isDisabled !== false;\r\n                this.updateDisabled();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbRadio.prototype, \"focused\", {\r\n            set: /**\r\n             * @param {?} isFocused\r\n             * @return {?}\r\n             */\r\n            function (isFocused) {\r\n                if (this._label) {\r\n                    this._label.focused = isFocused;\r\n                }\r\n                if (!isFocused) {\r\n                    this._group.onTouched();\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbRadio.prototype, \"checked\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._checked; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbRadio.prototype, \"nameAttr\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this.name || this._group.name; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRadio.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._group.unregister(this); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRadio.prototype.onChange = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._group.onRadioChange(this); };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbRadio.prototype.updateValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            // label won't be updated, if it is inside the OnPush component when [ngModel] changes\r\n            if (this.value !== value) {\r\n                this._cd.markForCheck();\r\n            }\r\n            this._checked = this.value === value;\r\n            this._label.active = this._checked;\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRadio.prototype.updateDisabled = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._label.disabled = this.disabled; };\r\n        NgbRadio.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbButton][type=radio]',\r\n                        host: {\r\n                            '[checked]': 'checked',\r\n                            '[disabled]': 'disabled',\r\n                            '[name]': 'nameAttr',\r\n                            '(change)': 'onChange()',\r\n                            '(focus)': 'focused = true',\r\n                            '(blur)': 'focused = false'\r\n                        }\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbRadio.ctorParameters = function () { return [\r\n            { type: NgbRadioGroup },\r\n            { type: NgbButtonLabel },\r\n            { type: core.Renderer2 },\r\n            { type: core.ElementRef },\r\n            { type: core.ChangeDetectorRef }\r\n        ]; };\r\n        NgbRadio.propDecorators = {\r\n            name: [{ type: core.Input }],\r\n            value: [{ type: core.Input, args: ['value',] }],\r\n            disabled: [{ type: core.Input, args: ['disabled',] }]\r\n        };\r\n        return NgbRadio;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_BUTTON_DIRECTIVES = [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio];\r\n    var NgbButtonsModule = /** @class */ (function () {\r\n        function NgbButtonsModule() {\r\n        }\r\n        NgbButtonsModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: NGB_BUTTON_DIRECTIVES, exports: NGB_BUTTON_DIRECTIVES },] }\r\n        ];\r\n        return NgbButtonsModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [NgbCarousel](#/components/carousel/api#NgbCarousel) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize its properties\r\n     * to provide default values for all carousels used in the application.\r\n     */\r\n    var NgbCarouselConfig = /** @class */ (function () {\r\n        function NgbCarouselConfig() {\r\n            this.interval = 5000;\r\n            this.wrap = true;\r\n            this.keyboard = true;\r\n            this.pauseOnHover = true;\r\n            this.showNavigationArrows = true;\r\n            this.showNavigationIndicators = true;\r\n        }\r\n        NgbCarouselConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbCarouselConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbCarouselConfig_Factory() { return new NgbCarouselConfig(); }, token: NgbCarouselConfig, providedIn: \"root\" });\r\n        return NgbCarouselConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var nextId$2 = 0;\r\n    /**\r\n     * A directive that wraps the individual carousel slide.\r\n     */\r\n    var NgbSlide = /** @class */ (function () {\r\n        function NgbSlide(tplRef) {\r\n            this.tplRef = tplRef;\r\n            /**\r\n             * Slide id that must be unique for the entire document.\r\n             *\r\n             * If not provided, will be generated in the `ngb-slide-xx` format.\r\n             */\r\n            this.id = \"ngb-slide-\" + nextId$2++;\r\n        }\r\n        NgbSlide.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbSlide]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbSlide.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        NgbSlide.propDecorators = {\r\n            id: [{ type: core.Input }]\r\n        };\r\n        return NgbSlide;\r\n    }());\r\n    /**\r\n     * Carousel is a component to easily create and control slideshows.\r\n     *\r\n     * Allows to set intervals, change the way user interacts with the slides and provides a programmatic API.\r\n     */\r\n    var NgbCarousel = /** @class */ (function () {\r\n        function NgbCarousel(config, _platformId, _ngZone, _cd) {\r\n            this._platformId = _platformId;\r\n            this._ngZone = _ngZone;\r\n            this._cd = _cd;\r\n            this.NgbSlideEventSource = NgbSlideEventSource;\r\n            this._destroy$ = new rxjs.Subject();\r\n            this._interval$ = new rxjs.BehaviorSubject(0);\r\n            this._mouseHover$ = new rxjs.BehaviorSubject(false);\r\n            this._pauseOnHover$ = new rxjs.BehaviorSubject(false);\r\n            this._pause$ = new rxjs.BehaviorSubject(false);\r\n            this._wrap$ = new rxjs.BehaviorSubject(false);\r\n            /**\r\n             * An event emitted right after the slide transition is completed.\r\n             *\r\n             * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\r\n             */\r\n            this.slide = new core.EventEmitter();\r\n            this.interval = config.interval;\r\n            this.wrap = config.wrap;\r\n            this.keyboard = config.keyboard;\r\n            this.pauseOnHover = config.pauseOnHover;\r\n            this.showNavigationArrows = config.showNavigationArrows;\r\n            this.showNavigationIndicators = config.showNavigationIndicators;\r\n        }\r\n        Object.defineProperty(NgbCarousel.prototype, \"interval\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._interval$.value; },\r\n            /**\r\n             * Time in milliseconds before the next slide is shown.\r\n             */\r\n            set: /**\r\n             * Time in milliseconds before the next slide is shown.\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                this._interval$.next(value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbCarousel.prototype, \"wrap\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._wrap$.value; },\r\n            /**\r\n             * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.\r\n             */\r\n            set: /**\r\n             * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                this._wrap$.next(value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbCarousel.prototype, \"pauseOnHover\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._pauseOnHover$.value; },\r\n            /**\r\n             * If `true`, will pause slide switching when mouse cursor hovers the slide.\r\n             *\r\n             * @since 2.2.0\r\n             */\r\n            set: /**\r\n             * If `true`, will pause slide switching when mouse cursor hovers the slide.\r\n             *\r\n             * \\@since 2.2.0\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                this._pauseOnHover$.next(value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.mouseEnter = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._mouseHover$.next(true);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.mouseLeave = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._mouseHover$.next(false);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.ngAfterContentInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            // setInterval() doesn't play well with SSR and protractor,\r\n            // so we should run it in the browser and outside Angular\r\n            if (common.isPlatformBrowser(this._platformId)) {\r\n                this._ngZone.runOutsideAngular((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    /** @type {?} */\r\n                    var hasNextSlide$ = rxjs.combineLatest(_this.slide.pipe(operators.map((/**\r\n                     * @param {?} slideEvent\r\n                     * @return {?}\r\n                     */\r\n                    function (slideEvent) { return slideEvent.current; })), operators.startWith(_this.activeId)), _this._wrap$, _this.slides.changes.pipe(operators.startWith(null)))\r\n                        .pipe(operators.map((/**\r\n                     * @param {?} __0\r\n                     * @return {?}\r\n                     */\r\n                    function (_a) {\r\n                        var _b = __read(_a, 2), currentSlideId = _b[0], wrap = _b[1];\r\n                        /** @type {?} */\r\n                        var slideArr = _this.slides.toArray();\r\n                        /** @type {?} */\r\n                        var currentSlideIdx = _this._getSlideIdxById(currentSlideId);\r\n                        return wrap ? slideArr.length > 1 : currentSlideIdx < slideArr.length - 1;\r\n                    })), operators.distinctUntilChanged());\r\n                    rxjs.combineLatest(_this._pause$, _this._pauseOnHover$, _this._mouseHover$, _this._interval$, hasNextSlide$)\r\n                        .pipe(operators.map((/**\r\n                     * @param {?} __0\r\n                     * @return {?}\r\n                     */\r\n                    function (_a) {\r\n                        var _b = __read(_a, 5), pause = _b[0], pauseOnHover = _b[1], mouseHover = _b[2], interval = _b[3], hasNextSlide = _b[4];\r\n                        return ((pause || (pauseOnHover && mouseHover) || !hasNextSlide) ? 0 : interval);\r\n                    })), operators.distinctUntilChanged(), operators.switchMap((/**\r\n                     * @param {?} interval\r\n                     * @return {?}\r\n                     */\r\n                    function (interval) { return interval > 0 ? rxjs.timer(interval, interval) : rxjs.NEVER; })), operators.takeUntil(_this._destroy$))\r\n                        .subscribe((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return _this._ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return _this.next(NgbSlideEventSource.TIMER); })); }));\r\n                }));\r\n            }\r\n            this.slides.changes.pipe(operators.takeUntil(this._destroy$)).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this._cd.markForCheck(); }));\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.ngAfterContentChecked = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var activeSlide = this._getSlideById(this.activeId);\r\n            this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._destroy$.next(); };\r\n        /**\r\n         * Navigates to a slide with the specified identifier.\r\n         */\r\n        /**\r\n         * Navigates to a slide with the specified identifier.\r\n         * @param {?} slideId\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.select = /**\r\n         * Navigates to a slide with the specified identifier.\r\n         * @param {?} slideId\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        function (slideId, source) {\r\n            this._cycleToSelected(slideId, this._getSlideEventDirection(this.activeId, slideId), source);\r\n        };\r\n        /**\r\n         * Navigates to the previous slide.\r\n         */\r\n        /**\r\n         * Navigates to the previous slide.\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.prev = /**\r\n         * Navigates to the previous slide.\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        function (source) {\r\n            this._cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT, source);\r\n        };\r\n        /**\r\n         * Navigates to the next slide.\r\n         */\r\n        /**\r\n         * Navigates to the next slide.\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.next = /**\r\n         * Navigates to the next slide.\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        function (source) {\r\n            this._cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT, source);\r\n        };\r\n        /**\r\n         * Pauses cycling through the slides.\r\n         */\r\n        /**\r\n         * Pauses cycling through the slides.\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.pause = /**\r\n         * Pauses cycling through the slides.\r\n         * @return {?}\r\n         */\r\n        function () { this._pause$.next(true); };\r\n        /**\r\n         * Restarts cycling through the slides from left to right.\r\n         */\r\n        /**\r\n         * Restarts cycling through the slides from left to right.\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype.cycle = /**\r\n         * Restarts cycling through the slides from left to right.\r\n         * @return {?}\r\n         */\r\n        function () { this._pause$.next(false); };\r\n        /**\r\n         * @private\r\n         * @param {?} slideIdx\r\n         * @param {?} direction\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype._cycleToSelected = /**\r\n         * @private\r\n         * @param {?} slideIdx\r\n         * @param {?} direction\r\n         * @param {?=} source\r\n         * @return {?}\r\n         */\r\n        function (slideIdx, direction, source) {\r\n            /** @type {?} */\r\n            var selectedSlide = this._getSlideById(slideIdx);\r\n            if (selectedSlide && selectedSlide.id !== this.activeId) {\r\n                this.slide.emit({ prev: this.activeId, current: selectedSlide.id, direction: direction, paused: this._pause$.value, source: source });\r\n                this.activeId = selectedSlide.id;\r\n            }\r\n            // we get here after the interval fires or any external API call like next(), prev() or select()\r\n            this._cd.markForCheck();\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} currentActiveSlideId\r\n         * @param {?} nextActiveSlideId\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype._getSlideEventDirection = /**\r\n         * @private\r\n         * @param {?} currentActiveSlideId\r\n         * @param {?} nextActiveSlideId\r\n         * @return {?}\r\n         */\r\n        function (currentActiveSlideId, nextActiveSlideId) {\r\n            /** @type {?} */\r\n            var currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);\r\n            /** @type {?} */\r\n            var nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);\r\n            return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} slideId\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype._getSlideById = /**\r\n         * @private\r\n         * @param {?} slideId\r\n         * @return {?}\r\n         */\r\n        function (slideId) { return this.slides.find((/**\r\n         * @param {?} slide\r\n         * @return {?}\r\n         */\r\n        function (slide) { return slide.id === slideId; })); };\r\n        /**\r\n         * @private\r\n         * @param {?} slideId\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype._getSlideIdxById = /**\r\n         * @private\r\n         * @param {?} slideId\r\n         * @return {?}\r\n         */\r\n        function (slideId) {\r\n            return this.slides.toArray().indexOf(this._getSlideById(slideId));\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} currentSlideId\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype._getNextSlide = /**\r\n         * @private\r\n         * @param {?} currentSlideId\r\n         * @return {?}\r\n         */\r\n        function (currentSlideId) {\r\n            /** @type {?} */\r\n            var slideArr = this.slides.toArray();\r\n            /** @type {?} */\r\n            var currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n            /** @type {?} */\r\n            var isLastSlide = currentSlideIdx === slideArr.length - 1;\r\n            return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\r\n                slideArr[currentSlideIdx + 1].id;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} currentSlideId\r\n         * @return {?}\r\n         */\r\n        NgbCarousel.prototype._getPrevSlide = /**\r\n         * @private\r\n         * @param {?} currentSlideId\r\n         * @return {?}\r\n         */\r\n        function (currentSlideId) {\r\n            /** @type {?} */\r\n            var slideArr = this.slides.toArray();\r\n            /** @type {?} */\r\n            var currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n            /** @type {?} */\r\n            var isFirstSlide = currentSlideIdx === 0;\r\n            return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\r\n                slideArr[currentSlideIdx - 1].id;\r\n        };\r\n        NgbCarousel.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-carousel',\r\n                        exportAs: 'ngbCarousel',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: {\r\n                            'class': 'carousel slide',\r\n                            '[style.display]': '\"block\"',\r\n                            'tabIndex': '0',\r\n                            '(keydown.arrowLeft)': 'keyboard && prev(NgbSlideEventSource.ARROW_LEFT)',\r\n                            '(keydown.arrowRight)': 'keyboard && next(NgbSlideEventSource.ARROW_RIGHT)'\r\n                        },\r\n                        template: \"\\n    <ol class=\\\"carousel-indicators\\\" *ngIf=\\\"showNavigationIndicators\\\">\\n      <li *ngFor=\\\"let slide of slides\\\" [id]=\\\"slide.id\\\" [class.active]=\\\"slide.id === activeId\\\"\\n          (click)=\\\"select(slide.id, NgbSlideEventSource.INDICATOR)\\\"></li>\\n    </ol>\\n    <div class=\\\"carousel-inner\\\">\\n      <div *ngFor=\\\"let slide of slides\\\" class=\\\"carousel-item\\\" [class.active]=\\\"slide.id === activeId\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"slide.tplRef\\\"></ng-template>\\n      </div>\\n    </div>\\n    <a class=\\\"carousel-control-prev\\\" role=\\\"button\\\" (click)=\\\"prev(NgbSlideEventSource.ARROW_LEFT)\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.previous\\\">Previous</span>\\n    </a>\\n    <a class=\\\"carousel-control-next\\\" role=\\\"button\\\" (click)=\\\"next(NgbSlideEventSource.ARROW_RIGHT)\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.next\\\">Next</span>\\n    </a>\\n  \"\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbCarousel.ctorParameters = function () { return [\r\n            { type: NgbCarouselConfig },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },\r\n            { type: core.NgZone },\r\n            { type: core.ChangeDetectorRef }\r\n        ]; };\r\n        NgbCarousel.propDecorators = {\r\n            slides: [{ type: core.ContentChildren, args: [NgbSlide,] }],\r\n            activeId: [{ type: core.Input }],\r\n            interval: [{ type: core.Input }],\r\n            wrap: [{ type: core.Input }],\r\n            keyboard: [{ type: core.Input }],\r\n            pauseOnHover: [{ type: core.Input }],\r\n            showNavigationArrows: [{ type: core.Input }],\r\n            showNavigationIndicators: [{ type: core.Input }],\r\n            slide: [{ type: core.Output }],\r\n            mouseEnter: [{ type: core.HostListener, args: ['mouseenter',] }],\r\n            mouseLeave: [{ type: core.HostListener, args: ['mouseleave',] }]\r\n        };\r\n        return NgbCarousel;\r\n    }());\r\n    /** @enum {string} */\r\n    var NgbSlideEventDirection = {\r\n        LEFT: (/** @type {?} */ ('left')),\r\n        RIGHT: (/** @type {?} */ ('right')),\r\n    };\r\n    /** @enum {string} */\r\n    var NgbSlideEventSource = {\r\n        TIMER: 'timer',\r\n        ARROW_LEFT: 'arrowLeft',\r\n        ARROW_RIGHT: 'arrowRight',\r\n        INDICATOR: 'indicator',\r\n    };\r\n    /** @type {?} */\r\n    var NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbCarouselModule = /** @class */ (function () {\r\n        function NgbCarouselModule() {\r\n        }\r\n        NgbCarouselModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: NGB_CAROUSEL_DIRECTIVES, exports: NGB_CAROUSEL_DIRECTIVES, imports: [common.CommonModule] },] }\r\n        ];\r\n        return NgbCarouselModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A directive to provide a simple way of hiding and showing elements on the page.\r\n     */\r\n    var NgbCollapse = /** @class */ (function () {\r\n        function NgbCollapse() {\r\n            /**\r\n             * If `true`, will collapse the element or show it otherwise.\r\n             */\r\n            this.collapsed = false;\r\n        }\r\n        NgbCollapse.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbCollapse]',\r\n                        exportAs: 'ngbCollapse',\r\n                        host: { '[class.collapse]': 'true', '[class.show]': '!collapsed' }\r\n                    },] }\r\n        ];\r\n        NgbCollapse.propDecorators = {\r\n            collapsed: [{ type: core.Input, args: ['ngbCollapse',] }]\r\n        };\r\n        return NgbCollapse;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbCollapseModule = /** @class */ (function () {\r\n        function NgbCollapseModule() {\r\n        }\r\n        NgbCollapseModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: [NgbCollapse], exports: [NgbCollapse] },] }\r\n        ];\r\n        return NgbCollapseModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A simple class that represents a date that datepicker also uses internally.\r\n     *\r\n     * It is the implementation of the `NgbDateStruct` interface that adds some convenience methods,\r\n     * like `.equals()`, `.before()`, etc.\r\n     *\r\n     * All datepicker APIs consume `NgbDateStruct`, but return `NgbDate`.\r\n     *\r\n     * In many cases it is simpler to manipulate these objects together with\r\n     * [`NgbCalendar`](#/components/datepicker/api#NgbCalendar) than native JS Dates.\r\n     *\r\n     * See the [date format overview](#/components/datepicker/overview#date-model) for more details.\r\n     *\r\n     * \\@since 3.0.0\r\n     */\r\n    var   /**\r\n     * A simple class that represents a date that datepicker also uses internally.\r\n     *\r\n     * It is the implementation of the `NgbDateStruct` interface that adds some convenience methods,\r\n     * like `.equals()`, `.before()`, etc.\r\n     *\r\n     * All datepicker APIs consume `NgbDateStruct`, but return `NgbDate`.\r\n     *\r\n     * In many cases it is simpler to manipulate these objects together with\r\n     * [`NgbCalendar`](#/components/datepicker/api#NgbCalendar) than native JS Dates.\r\n     *\r\n     * See the [date format overview](#/components/datepicker/overview#date-model) for more details.\r\n     *\r\n     * \\@since 3.0.0\r\n     */\r\n    NgbDate = /** @class */ (function () {\r\n        function NgbDate(year, month, day) {\r\n            this.year = isInteger(year) ? year : null;\r\n            this.month = isInteger(month) ? month : null;\r\n            this.day = isInteger(day) ? day : null;\r\n        }\r\n        /**\r\n         * A **static method** that creates a new date object from the `NgbDateStruct`,\r\n         *\r\n         * ex. `NgbDate.from({year: 2000, month: 5, day: 1})`.\r\n         *\r\n         * If the `date` is already of `NgbDate` type, the method will return the same object.\r\n         */\r\n        /**\r\n         * A **static method** that creates a new date object from the `NgbDateStruct`,\r\n         *\r\n         * ex. `NgbDate.from({year: 2000, month: 5, day: 1})`.\r\n         *\r\n         * If the `date` is already of `NgbDate` type, the method will return the same object.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDate.from = /**\r\n         * A **static method** that creates a new date object from the `NgbDateStruct`,\r\n         *\r\n         * ex. `NgbDate.from({year: 2000, month: 5, day: 1})`.\r\n         *\r\n         * If the `date` is already of `NgbDate` type, the method will return the same object.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            if (date instanceof NgbDate) {\r\n                return date;\r\n            }\r\n            return date ? new NgbDate(date.year, date.month, date.day) : null;\r\n        };\r\n        /**\r\n         * Checks if the current date is equal to another date.\r\n         */\r\n        /**\r\n         * Checks if the current date is equal to another date.\r\n         * @param {?} other\r\n         * @return {?}\r\n         */\r\n        NgbDate.prototype.equals = /**\r\n         * Checks if the current date is equal to another date.\r\n         * @param {?} other\r\n         * @return {?}\r\n         */\r\n        function (other) {\r\n            return other && this.year === other.year && this.month === other.month && this.day === other.day;\r\n        };\r\n        /**\r\n         * Checks if the current date is before another date.\r\n         */\r\n        /**\r\n         * Checks if the current date is before another date.\r\n         * @param {?} other\r\n         * @return {?}\r\n         */\r\n        NgbDate.prototype.before = /**\r\n         * Checks if the current date is before another date.\r\n         * @param {?} other\r\n         * @return {?}\r\n         */\r\n        function (other) {\r\n            if (!other) {\r\n                return false;\r\n            }\r\n            if (this.year === other.year) {\r\n                if (this.month === other.month) {\r\n                    return this.day === other.day ? false : this.day < other.day;\r\n                }\r\n                else {\r\n                    return this.month < other.month;\r\n                }\r\n            }\r\n            else {\r\n                return this.year < other.year;\r\n            }\r\n        };\r\n        /**\r\n         * Checks if the current date is after another date.\r\n         */\r\n        /**\r\n         * Checks if the current date is after another date.\r\n         * @param {?} other\r\n         * @return {?}\r\n         */\r\n        NgbDate.prototype.after = /**\r\n         * Checks if the current date is after another date.\r\n         * @param {?} other\r\n         * @return {?}\r\n         */\r\n        function (other) {\r\n            if (!other) {\r\n                return false;\r\n            }\r\n            if (this.year === other.year) {\r\n                if (this.month === other.month) {\r\n                    return this.day === other.day ? false : this.day > other.day;\r\n                }\r\n                else {\r\n                    return this.month > other.month;\r\n                }\r\n            }\r\n            else {\r\n                return this.year > other.year;\r\n            }\r\n        };\r\n        return NgbDate;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @param {?} jsDate\r\n     * @return {?}\r\n     */\r\n    function fromJSDate(jsDate) {\r\n        return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    function toJSDate(date) {\r\n        /** @type {?} */\r\n        var jsDate = new Date(date.year, date.month - 1, date.day, 12);\r\n        // this is done avoid 30 -> 1930 conversion\r\n        if (!isNaN(jsDate.getTime())) {\r\n            jsDate.setFullYear(date.year);\r\n        }\r\n        return jsDate;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    function NGB_DATEPICKER_CALENDAR_FACTORY() {\r\n        return new NgbCalendarGregorian();\r\n    }\r\n    /**\r\n     * A service that represents the calendar used by the datepicker.\r\n     *\r\n     * The default implementation uses the Gregorian calendar. You can inject it in your own\r\n     * implementations if necessary to simplify `NgbDate` calculations.\r\n     * @abstract\r\n     */\r\n    var NgbCalendar = /** @class */ (function () {\r\n        function NgbCalendar() {\r\n        }\r\n        NgbCalendar.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_CALENDAR_FACTORY },] }\r\n        ];\r\n        /** @nocollapse */ NgbCalendar.ngInjectableDef = core.ɵɵdefineInjectable({ factory: NGB_DATEPICKER_CALENDAR_FACTORY, token: NgbCalendar, providedIn: \"root\" });\r\n        return NgbCalendar;\r\n    }());\r\n    var NgbCalendarGregorian = /** @class */ (function (_super) {\r\n        __extends(NgbCalendarGregorian, _super);\r\n        function NgbCalendarGregorian() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getDaysPerWeek = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 7; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getMonths = /**\r\n         * @return {?}\r\n         */\r\n        function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getWeeksPerMonth = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 6; };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getNext = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            /** @type {?} */\r\n            var jsDate = toJSDate(date);\r\n            /** @type {?} */\r\n            var checkMonth = true;\r\n            /** @type {?} */\r\n            var expectedMonth = jsDate.getMonth();\r\n            switch (period) {\r\n                case 'y':\r\n                    jsDate.setFullYear(jsDate.getFullYear() + number);\r\n                    break;\r\n                case 'm':\r\n                    expectedMonth += number;\r\n                    jsDate.setMonth(expectedMonth);\r\n                    expectedMonth = expectedMonth % 12;\r\n                    if (expectedMonth < 0) {\r\n                        expectedMonth = expectedMonth + 12;\r\n                    }\r\n                    break;\r\n                case 'd':\r\n                    jsDate.setDate(jsDate.getDate() + number);\r\n                    checkMonth = false;\r\n                    break;\r\n                default:\r\n                    return date;\r\n            }\r\n            if (checkMonth && jsDate.getMonth() !== expectedMonth) {\r\n                // this means the destination month has less days than the initial month\r\n                // let's go back to the end of the previous month:\r\n                jsDate.setDate(0);\r\n            }\r\n            return fromJSDate(jsDate);\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getPrev = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            return this.getNext(date, period, -number);\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getWeekday = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var jsDate = toJSDate(date);\r\n            /** @type {?} */\r\n            var day = jsDate.getDay();\r\n            // in JS Date Sun=0, in ISO 8601 Sun=7\r\n            return day === 0 ? 7 : day;\r\n        };\r\n        /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getWeekNumber = /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        function (week, firstDayOfWeek) {\r\n            // in JS Date Sun=0, in ISO 8601 Sun=7\r\n            if (firstDayOfWeek === 7) {\r\n                firstDayOfWeek = 0;\r\n            }\r\n            /** @type {?} */\r\n            var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n            /** @type {?} */\r\n            var date = week[thursdayIndex];\r\n            /** @type {?} */\r\n            var jsDate = toJSDate(date);\r\n            jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n            // Thursday\r\n            /** @type {?} */\r\n            var time = jsDate.getTime();\r\n            jsDate.setMonth(0); // Compare with Jan 1\r\n            jsDate.setDate(1);\r\n            return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.getToday = /**\r\n         * @return {?}\r\n         */\r\n        function () { return fromJSDate(new Date()); };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarGregorian.prototype.isValid = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            if (!date || !isInteger(date.year) || !isInteger(date.month) || !isInteger(date.day)) {\r\n                return false;\r\n            }\r\n            // year 0 doesn't exist in Gregorian calendar\r\n            if (date.year === 0) {\r\n                return false;\r\n            }\r\n            /** @type {?} */\r\n            var jsDate = toJSDate(date);\r\n            return !isNaN(jsDate.getTime()) && jsDate.getFullYear() === date.year && jsDate.getMonth() + 1 === date.month &&\r\n                jsDate.getDate() === date.day;\r\n        };\r\n        NgbCalendarGregorian.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbCalendarGregorian;\r\n    }(NgbCalendar));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @param {?} prev\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    function isChangedDate(prev, next) {\r\n        return !dateComparator(prev, next);\r\n    }\r\n    /**\r\n     * @param {?} prev\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    function isChangedMonth(prev, next) {\r\n        return !prev && !next ? false : !prev || !next ? true : prev.year !== next.year || prev.month !== next.month;\r\n    }\r\n    /**\r\n     * @param {?} prev\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    function dateComparator(prev, next) {\r\n        return (!prev && !next) || (!!prev && !!next && prev.equals(next));\r\n    }\r\n    /**\r\n     * @param {?} minDate\r\n     * @param {?} maxDate\r\n     * @return {?}\r\n     */\r\n    function checkMinBeforeMax(minDate, maxDate) {\r\n        if (maxDate && minDate && maxDate.before(minDate)) {\r\n            throw new Error(\"'maxDate' \" + maxDate + \" should be greater than 'minDate' \" + minDate);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} minDate\r\n     * @param {?} maxDate\r\n     * @return {?}\r\n     */\r\n    function checkDateInRange(date, minDate, maxDate) {\r\n        if (date && minDate && date.before(minDate)) {\r\n            return minDate;\r\n        }\r\n        if (date && maxDate && date.after(maxDate)) {\r\n            return maxDate;\r\n        }\r\n        return date;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    function isDateSelectable(date, state) {\r\n        var minDate = state.minDate, maxDate = state.maxDate, disabled = state.disabled, markDisabled = state.markDisabled;\r\n        // clang-format off\r\n        return !(!isDefined(date) ||\r\n            disabled ||\r\n            (markDisabled && markDisabled(date, { year: date.year, month: date.month })) ||\r\n            (minDate && date.before(minDate)) ||\r\n            (maxDate && date.after(maxDate)));\r\n        // clang-format on\r\n    }\r\n    /**\r\n     * @param {?} calendar\r\n     * @param {?} date\r\n     * @param {?} minDate\r\n     * @param {?} maxDate\r\n     * @return {?}\r\n     */\r\n    function generateSelectBoxMonths(calendar, date, minDate, maxDate) {\r\n        if (!date) {\r\n            return [];\r\n        }\r\n        /** @type {?} */\r\n        var months = calendar.getMonths(date.year);\r\n        if (minDate && date.year === minDate.year) {\r\n            /** @type {?} */\r\n            var index = months.findIndex((/**\r\n             * @param {?} month\r\n             * @return {?}\r\n             */\r\n            function (month) { return month === minDate.month; }));\r\n            months = months.slice(index);\r\n        }\r\n        if (maxDate && date.year === maxDate.year) {\r\n            /** @type {?} */\r\n            var index = months.findIndex((/**\r\n             * @param {?} month\r\n             * @return {?}\r\n             */\r\n            function (month) { return month === maxDate.month; }));\r\n            months = months.slice(0, index + 1);\r\n        }\r\n        return months;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} minDate\r\n     * @param {?} maxDate\r\n     * @return {?}\r\n     */\r\n    function generateSelectBoxYears(date, minDate, maxDate) {\r\n        if (!date) {\r\n            return [];\r\n        }\r\n        /** @type {?} */\r\n        var start = minDate ? Math.max(minDate.year, date.year - 500) : date.year - 10;\r\n        /** @type {?} */\r\n        var end = maxDate ? Math.min(maxDate.year, date.year + 500) : date.year + 10;\r\n        /** @type {?} */\r\n        var length = end - start + 1;\r\n        /** @type {?} */\r\n        var numbers = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            numbers[i] = start + i;\r\n        }\r\n        return numbers;\r\n    }\r\n    /**\r\n     * @param {?} calendar\r\n     * @param {?} date\r\n     * @param {?} maxDate\r\n     * @return {?}\r\n     */\r\n    function nextMonthDisabled(calendar, date, maxDate) {\r\n        /** @type {?} */\r\n        var nextDate = Object.assign(calendar.getNext(date, 'm'), { day: 1 });\r\n        return maxDate && nextDate.after(maxDate);\r\n    }\r\n    /**\r\n     * @param {?} calendar\r\n     * @param {?} date\r\n     * @param {?} minDate\r\n     * @return {?}\r\n     */\r\n    function prevMonthDisabled(calendar, date, minDate) {\r\n        /** @type {?} */\r\n        var prevDate = Object.assign(calendar.getPrev(date, 'm'), { day: 1 });\r\n        return minDate && (prevDate.year === minDate.year && prevDate.month < minDate.month ||\r\n            prevDate.year < minDate.year && minDate.month === 1);\r\n    }\r\n    /**\r\n     * @param {?} calendar\r\n     * @param {?} date\r\n     * @param {?} state\r\n     * @param {?} i18n\r\n     * @param {?} force\r\n     * @return {?}\r\n     */\r\n    function buildMonths(calendar, date, state, i18n, force) {\r\n        var displayMonths = state.displayMonths, months = state.months;\r\n        // move old months to a temporary array\r\n        /** @type {?} */\r\n        var monthsToReuse = months.splice(0, months.length);\r\n        // generate new first dates, nullify or reuse months\r\n        /** @type {?} */\r\n        var firstDates = Array.from({ length: displayMonths }, (/**\r\n         * @param {?} _\r\n         * @param {?} i\r\n         * @return {?}\r\n         */\r\n        function (_, i) {\r\n            /** @type {?} */\r\n            var firstDate = Object.assign(calendar.getNext(date, 'm', i), { day: 1 });\r\n            months[i] = null;\r\n            if (!force) {\r\n                /** @type {?} */\r\n                var reusedIndex = monthsToReuse.findIndex((/**\r\n                 * @param {?} month\r\n                 * @return {?}\r\n                 */\r\n                function (month) { return month.firstDate.equals(firstDate); }));\r\n                // move reused month back to months\r\n                if (reusedIndex !== -1) {\r\n                    months[i] = monthsToReuse.splice(reusedIndex, 1)[0];\r\n                }\r\n            }\r\n            return firstDate;\r\n        }));\r\n        // rebuild nullified months\r\n        firstDates.forEach((/**\r\n         * @param {?} firstDate\r\n         * @param {?} i\r\n         * @return {?}\r\n         */\r\n        function (firstDate, i) {\r\n            if (months[i] === null) {\r\n                months[i] = buildMonth(calendar, firstDate, state, i18n, monthsToReuse.shift() || (/** @type {?} */ ({})));\r\n            }\r\n        }));\r\n        return months;\r\n    }\r\n    /**\r\n     * @param {?} calendar\r\n     * @param {?} date\r\n     * @param {?} state\r\n     * @param {?} i18n\r\n     * @param {?=} month\r\n     * @return {?}\r\n     */\r\n    function buildMonth(calendar, date, state, i18n, month) {\r\n        if (month === void 0) { month = (/** @type {?} */ ({})); }\r\n        var dayTemplateData = state.dayTemplateData, minDate = state.minDate, maxDate = state.maxDate, firstDayOfWeek = state.firstDayOfWeek, markDisabled = state.markDisabled, outsideDays = state.outsideDays;\r\n        /** @type {?} */\r\n        var calendarToday = calendar.getToday();\r\n        month.firstDate = null;\r\n        month.lastDate = null;\r\n        month.number = date.month;\r\n        month.year = date.year;\r\n        month.weeks = month.weeks || [];\r\n        month.weekdays = month.weekdays || [];\r\n        date = getFirstViewDate(calendar, date, firstDayOfWeek);\r\n        // month has weeks\r\n        for (var week = 0; week < calendar.getWeeksPerMonth(); week++) {\r\n            /** @type {?} */\r\n            var weekObject = month.weeks[week];\r\n            if (!weekObject) {\r\n                weekObject = month.weeks[week] = { number: 0, days: [], collapsed: true };\r\n            }\r\n            /** @type {?} */\r\n            var days = weekObject.days;\r\n            // week has days\r\n            for (var day = 0; day < calendar.getDaysPerWeek(); day++) {\r\n                if (week === 0) {\r\n                    month.weekdays[day] = calendar.getWeekday(date);\r\n                }\r\n                /** @type {?} */\r\n                var newDate = new NgbDate(date.year, date.month, date.day);\r\n                /** @type {?} */\r\n                var nextDate = calendar.getNext(newDate);\r\n                /** @type {?} */\r\n                var ariaLabel = i18n.getDayAriaLabel(newDate);\r\n                // marking date as disabled\r\n                /** @type {?} */\r\n                var disabled = !!((minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate)));\r\n                if (!disabled && markDisabled) {\r\n                    disabled = markDisabled(newDate, { month: month.number, year: month.year });\r\n                }\r\n                // today\r\n                /** @type {?} */\r\n                var today = newDate.equals(calendarToday);\r\n                // adding user-provided data to the context\r\n                /** @type {?} */\r\n                var contextUserData = dayTemplateData ? dayTemplateData(newDate, { month: month.number, year: month.year }) : undefined;\r\n                // saving first date of the month\r\n                if (month.firstDate === null && newDate.month === month.number) {\r\n                    month.firstDate = newDate;\r\n                }\r\n                // saving last date of the month\r\n                if (newDate.month === month.number && nextDate.month !== month.number) {\r\n                    month.lastDate = newDate;\r\n                }\r\n                /** @type {?} */\r\n                var dayObject = days[day];\r\n                if (!dayObject) {\r\n                    dayObject = days[day] = (/** @type {?} */ ({}));\r\n                }\r\n                dayObject.date = newDate;\r\n                dayObject.context = Object.assign(dayObject.context || {}, {\r\n                    $implicit: newDate,\r\n                    date: newDate,\r\n                    data: contextUserData,\r\n                    currentMonth: month.number,\r\n                    currentYear: month.year, disabled: disabled,\r\n                    focused: false,\r\n                    selected: false, today: today\r\n                });\r\n                dayObject.tabindex = -1;\r\n                dayObject.ariaLabel = ariaLabel;\r\n                dayObject.hidden = false;\r\n                date = nextDate;\r\n            }\r\n            weekObject.number = calendar.getWeekNumber(days.map((/**\r\n             * @param {?} day\r\n             * @return {?}\r\n             */\r\n            function (day) { return day.date; })), firstDayOfWeek);\r\n            // marking week as collapsed\r\n            weekObject.collapsed = outsideDays === 'collapsed' && days[0].date.month !== month.number &&\r\n                days[days.length - 1].date.month !== month.number;\r\n        }\r\n        return month;\r\n    }\r\n    /**\r\n     * @param {?} calendar\r\n     * @param {?} date\r\n     * @param {?} firstDayOfWeek\r\n     * @return {?}\r\n     */\r\n    function getFirstViewDate(calendar, date, firstDayOfWeek) {\r\n        /** @type {?} */\r\n        var daysPerWeek = calendar.getDaysPerWeek();\r\n        /** @type {?} */\r\n        var firstMonthDate = new NgbDate(date.year, date.month, 1);\r\n        /** @type {?} */\r\n        var dayOfWeek = calendar.getWeekday(firstMonthDate) % daysPerWeek;\r\n        return calendar.getPrev(firstMonthDate, 'd', (daysPerWeek + dayOfWeek - firstDayOfWeek) % daysPerWeek);\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    function NGB_DATEPICKER_18N_FACTORY(locale) {\r\n        return new NgbDatepickerI18nDefault(locale);\r\n    }\r\n    /**\r\n     * A service supplying i18n data to the datepicker component.\r\n     *\r\n     * The default implementation of this service uses the Angular locale and registered locale data for\r\n     * weekdays and month names (as explained in the Angular i18n guide).\r\n     *\r\n     * It also provides a way to i18n data that depends on calendar calculations, like aria labels, day, week and year\r\n     * numerals. For other static labels the datepicker uses the default Angular i18n.\r\n     *\r\n     * See the [i18n demo](#/components/datepicker/examples#i18n) and\r\n     * [Hebrew calendar demo](#/components/datepicker/calendars#hebrew) on how to extend this class and define\r\n     * a custom provider for i18n.\r\n     * @abstract\r\n     */\r\n    var NgbDatepickerI18n = /** @class */ (function () {\r\n        function NgbDatepickerI18n() {\r\n        }\r\n        /**\r\n         * Returns the textual representation of a day that is rendered in a day cell.\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        /**\r\n         * Returns the textual representation of a day that is rendered in a day cell.\r\n         *\r\n         * \\@since 3.0.0\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18n.prototype.getDayNumerals = /**\r\n         * Returns the textual representation of a day that is rendered in a day cell.\r\n         *\r\n         * \\@since 3.0.0\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) { return \"\" + date.day; };\r\n        /**\r\n         * Returns the textual representation of a week number rendered by datepicker.\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        /**\r\n         * Returns the textual representation of a week number rendered by datepicker.\r\n         *\r\n         * \\@since 3.0.0\r\n         * @param {?} weekNumber\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18n.prototype.getWeekNumerals = /**\r\n         * Returns the textual representation of a week number rendered by datepicker.\r\n         *\r\n         * \\@since 3.0.0\r\n         * @param {?} weekNumber\r\n         * @return {?}\r\n         */\r\n        function (weekNumber) { return \"\" + weekNumber; };\r\n        /**\r\n         * Returns the textual representation of a year that is rendered in the datepicker year select box.\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        /**\r\n         * Returns the textual representation of a year that is rendered in the datepicker year select box.\r\n         *\r\n         * \\@since 3.0.0\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18n.prototype.getYearNumerals = /**\r\n         * Returns the textual representation of a year that is rendered in the datepicker year select box.\r\n         *\r\n         * \\@since 3.0.0\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        function (year) { return \"\" + year; };\r\n        NgbDatepickerI18n.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_18N_FACTORY, deps: [core.LOCALE_ID] },] }\r\n        ];\r\n        /** @nocollapse */ NgbDatepickerI18n.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbDatepickerI18n_Factory() { return NGB_DATEPICKER_18N_FACTORY(core.ɵɵinject(core.LOCALE_ID)); }, token: NgbDatepickerI18n, providedIn: \"root\" });\r\n        return NgbDatepickerI18n;\r\n    }());\r\n    var NgbDatepickerI18nDefault = /** @class */ (function (_super) {\r\n        __extends(NgbDatepickerI18nDefault, _super);\r\n        function NgbDatepickerI18nDefault(_locale) {\r\n            var _this = _super.call(this) || this;\r\n            _this._locale = _locale;\r\n            /** @type {?} */\r\n            var weekdaysStartingOnSunday = common.getLocaleDayNames(_locale, common.FormStyle.Standalone, common.TranslationWidth.Short);\r\n            _this._weekdaysShort = weekdaysStartingOnSunday.map((/**\r\n             * @param {?} day\r\n             * @param {?} index\r\n             * @return {?}\r\n             */\r\n            function (day, index) { return weekdaysStartingOnSunday[(index + 1) % 7]; }));\r\n            _this._monthsShort = common.getLocaleMonthNames(_locale, common.FormStyle.Standalone, common.TranslationWidth.Abbreviated);\r\n            _this._monthsFull = common.getLocaleMonthNames(_locale, common.FormStyle.Standalone, common.TranslationWidth.Wide);\r\n            return _this;\r\n        }\r\n        /**\r\n         * @param {?} weekday\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nDefault.prototype.getWeekdayShortName = /**\r\n         * @param {?} weekday\r\n         * @return {?}\r\n         */\r\n        function (weekday) { return this._weekdaysShort[weekday - 1]; };\r\n        /**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nDefault.prototype.getMonthShortName = /**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        function (month) { return this._monthsShort[month - 1]; };\r\n        /**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nDefault.prototype.getMonthFullName = /**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        function (month) { return this._monthsFull[month - 1]; };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nDefault.prototype.getDayAriaLabel = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var jsDate = new Date(date.year, date.month - 1, date.day);\r\n            return common.formatDate(jsDate, 'fullDate', this._locale);\r\n        };\r\n        NgbDatepickerI18nDefault.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepickerI18nDefault.ctorParameters = function () { return [\r\n            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] }\r\n        ]; };\r\n        return NgbDatepickerI18nDefault;\r\n    }(NgbDatepickerI18n));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbDatepickerService = /** @class */ (function () {\r\n        function NgbDatepickerService(_calendar, _i18n) {\r\n            var _this = this;\r\n            this._calendar = _calendar;\r\n            this._i18n = _i18n;\r\n            this._VALIDATORS = {\r\n                dayTemplateData: (/**\r\n                 * @param {?} dayTemplateData\r\n                 * @return {?}\r\n                 */\r\n                function (dayTemplateData) {\r\n                    if (_this._state.dayTemplateData !== dayTemplateData) {\r\n                        return { dayTemplateData: dayTemplateData };\r\n                    }\r\n                }),\r\n                displayMonths: (/**\r\n                 * @param {?} displayMonths\r\n                 * @return {?}\r\n                 */\r\n                function (displayMonths) {\r\n                    displayMonths = toInteger(displayMonths);\r\n                    if (isInteger(displayMonths) && displayMonths > 0 && _this._state.displayMonths !== displayMonths) {\r\n                        return { displayMonths: displayMonths };\r\n                    }\r\n                }),\r\n                disabled: (/**\r\n                 * @param {?} disabled\r\n                 * @return {?}\r\n                 */\r\n                function (disabled) {\r\n                    if (_this._state.disabled !== disabled) {\r\n                        return { disabled: disabled };\r\n                    }\r\n                }),\r\n                firstDayOfWeek: (/**\r\n                 * @param {?} firstDayOfWeek\r\n                 * @return {?}\r\n                 */\r\n                function (firstDayOfWeek) {\r\n                    firstDayOfWeek = toInteger(firstDayOfWeek);\r\n                    if (isInteger(firstDayOfWeek) && firstDayOfWeek >= 0 && _this._state.firstDayOfWeek !== firstDayOfWeek) {\r\n                        return { firstDayOfWeek: firstDayOfWeek };\r\n                    }\r\n                }),\r\n                focusVisible: (/**\r\n                 * @param {?} focusVisible\r\n                 * @return {?}\r\n                 */\r\n                function (focusVisible) {\r\n                    if (_this._state.focusVisible !== focusVisible && !_this._state.disabled) {\r\n                        return { focusVisible: focusVisible };\r\n                    }\r\n                }),\r\n                markDisabled: (/**\r\n                 * @param {?} markDisabled\r\n                 * @return {?}\r\n                 */\r\n                function (markDisabled) {\r\n                    if (_this._state.markDisabled !== markDisabled) {\r\n                        return { markDisabled: markDisabled };\r\n                    }\r\n                }),\r\n                maxDate: (/**\r\n                 * @param {?} date\r\n                 * @return {?}\r\n                 */\r\n                function (date) {\r\n                    /** @type {?} */\r\n                    var maxDate = _this.toValidDate(date, null);\r\n                    if (isChangedDate(_this._state.maxDate, maxDate)) {\r\n                        return { maxDate: maxDate };\r\n                    }\r\n                }),\r\n                minDate: (/**\r\n                 * @param {?} date\r\n                 * @return {?}\r\n                 */\r\n                function (date) {\r\n                    /** @type {?} */\r\n                    var minDate = _this.toValidDate(date, null);\r\n                    if (isChangedDate(_this._state.minDate, minDate)) {\r\n                        return { minDate: minDate };\r\n                    }\r\n                }),\r\n                navigation: (/**\r\n                 * @param {?} navigation\r\n                 * @return {?}\r\n                 */\r\n                function (navigation) {\r\n                    if (_this._state.navigation !== navigation) {\r\n                        return { navigation: navigation };\r\n                    }\r\n                }),\r\n                outsideDays: (/**\r\n                 * @param {?} outsideDays\r\n                 * @return {?}\r\n                 */\r\n                function (outsideDays) {\r\n                    if (_this._state.outsideDays !== outsideDays) {\r\n                        return { outsideDays: outsideDays };\r\n                    }\r\n                })\r\n            };\r\n            this._model$ = new rxjs.Subject();\r\n            this._dateSelect$ = new rxjs.Subject();\r\n            this._state = {\r\n                disabled: false,\r\n                displayMonths: 1,\r\n                firstDayOfWeek: 1,\r\n                focusVisible: false,\r\n                months: [],\r\n                navigation: 'select',\r\n                outsideDays: 'visible',\r\n                prevDisabled: false,\r\n                nextDisabled: false,\r\n                selectBoxes: { years: [], months: [] },\r\n                selectedDate: null\r\n            };\r\n        }\r\n        Object.defineProperty(NgbDatepickerService.prototype, \"model$\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._model$.pipe(operators.filter((/**\r\n             * @param {?} model\r\n             * @return {?}\r\n             */\r\n            function (model) { return model.months.length > 0; }))); },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbDatepickerService.prototype, \"dateSelect$\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._dateSelect$.pipe(operators.filter((/**\r\n             * @param {?} date\r\n             * @return {?}\r\n             */\r\n            function (date) { return date !== null; }))); },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype.set = /**\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        function (options) {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var patch = Object.keys(options)\r\n                .map((/**\r\n             * @param {?} key\r\n             * @return {?}\r\n             */\r\n            function (key) { return _this._VALIDATORS[key](options[key]); }))\r\n                .reduce((/**\r\n             * @param {?} obj\r\n             * @param {?} part\r\n             * @return {?}\r\n             */\r\n            function (obj, part) { return (__assign({}, obj, part)); }), {});\r\n            if (Object.keys(patch).length > 0) {\r\n                this._nextState(patch);\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype.focus = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            if (!this._state.disabled && this._calendar.isValid(date) && isChangedDate(this._state.focusDate, date)) {\r\n                this._nextState({ focusDate: date });\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype.focusSelect = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (isDateSelectable(this._state.focusDate, this._state)) {\r\n                this.select(this._state.focusDate, { emitEvent: true });\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype.open = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var firstDate = this.toValidDate(date, this._calendar.getToday());\r\n            if (!this._state.disabled && (!this._state.firstDate || isChangedMonth(this._state.firstDate, date))) {\r\n                this._nextState({ firstDate: firstDate });\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} options\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype.select = /**\r\n         * @param {?} date\r\n         * @param {?=} options\r\n         * @return {?}\r\n         */\r\n        function (date, options) {\r\n            if (options === void 0) { options = {}; }\r\n            /** @type {?} */\r\n            var selectedDate = this.toValidDate(date, null);\r\n            if (!this._state.disabled) {\r\n                if (isChangedDate(this._state.selectedDate, selectedDate)) {\r\n                    this._nextState({ selectedDate: selectedDate });\r\n                }\r\n                if (options.emitEvent && isDateSelectable(selectedDate, this._state)) {\r\n                    this._dateSelect$.next(selectedDate);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} defaultValue\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype.toValidDate = /**\r\n         * @param {?} date\r\n         * @param {?=} defaultValue\r\n         * @return {?}\r\n         */\r\n        function (date, defaultValue) {\r\n            /** @type {?} */\r\n            var ngbDate = NgbDate.from(date);\r\n            if (defaultValue === undefined) {\r\n                defaultValue = this._calendar.getToday();\r\n            }\r\n            return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;\r\n        };\r\n        /**\r\n         * @param {?} struct\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype.getMonth = /**\r\n         * @param {?} struct\r\n         * @return {?}\r\n         */\r\n        function (struct) {\r\n            var e_1, _a;\r\n            try {\r\n                for (var _b = __values(this._state.months), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var month = _c.value;\r\n                    if (struct.month === month.number && struct.year === month.year) {\r\n                        return month;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            throw new Error(\"month \" + struct.month + \" of year \" + struct.year + \" not found\");\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} patch\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype._nextState = /**\r\n         * @private\r\n         * @param {?} patch\r\n         * @return {?}\r\n         */\r\n        function (patch) {\r\n            /** @type {?} */\r\n            var newState = this._updateState(patch);\r\n            this._patchContexts(newState);\r\n            this._state = newState;\r\n            this._model$.next(this._state);\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype._patchContexts = /**\r\n         * @private\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function (state) {\r\n            var months = state.months, displayMonths = state.displayMonths, selectedDate = state.selectedDate, focusDate = state.focusDate, focusVisible = state.focusVisible, disabled = state.disabled, outsideDays = state.outsideDays;\r\n            state.months.forEach((/**\r\n             * @param {?} month\r\n             * @return {?}\r\n             */\r\n            function (month) {\r\n                month.weeks.forEach((/**\r\n                 * @param {?} week\r\n                 * @return {?}\r\n                 */\r\n                function (week) {\r\n                    week.days.forEach((/**\r\n                     * @param {?} day\r\n                     * @return {?}\r\n                     */\r\n                    function (day) {\r\n                        // patch focus flag\r\n                        if (focusDate) {\r\n                            day.context.focused = focusDate.equals(day.date) && focusVisible;\r\n                        }\r\n                        // calculating tabindex\r\n                        day.tabindex = !disabled && day.date.equals(focusDate) && focusDate.month === month.number ? 0 : -1;\r\n                        // override context disabled\r\n                        if (disabled === true) {\r\n                            day.context.disabled = true;\r\n                        }\r\n                        // patch selection flag\r\n                        if (selectedDate !== undefined) {\r\n                            day.context.selected = selectedDate !== null && selectedDate.equals(day.date);\r\n                        }\r\n                        // visibility\r\n                        if (month.number !== day.date.month) {\r\n                            day.hidden = outsideDays === 'hidden' || outsideDays === 'collapsed' ||\r\n                                (displayMonths > 1 && day.date.after(months[0].firstDate) &&\r\n                                    day.date.before(months[displayMonths - 1].lastDate));\r\n                        }\r\n                    }));\r\n                }));\r\n            }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} patch\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerService.prototype._updateState = /**\r\n         * @private\r\n         * @param {?} patch\r\n         * @return {?}\r\n         */\r\n        function (patch) {\r\n            // patching fields\r\n            /** @type {?} */\r\n            var state = Object.assign({}, this._state, patch);\r\n            /** @type {?} */\r\n            var startDate = state.firstDate;\r\n            // min/max dates changed\r\n            if ('minDate' in patch || 'maxDate' in patch) {\r\n                checkMinBeforeMax(state.minDate, state.maxDate);\r\n                state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\r\n                state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\r\n                startDate = state.focusDate;\r\n            }\r\n            // disabled\r\n            if ('disabled' in patch) {\r\n                state.focusVisible = false;\r\n            }\r\n            // initial rebuild via 'select()'\r\n            if ('selectedDate' in patch && this._state.months.length === 0) {\r\n                startDate = state.selectedDate;\r\n            }\r\n            // terminate early if only focus visibility was changed\r\n            if ('focusVisible' in patch) {\r\n                return state;\r\n            }\r\n            // focus date changed\r\n            if ('focusDate' in patch) {\r\n                state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\r\n                startDate = state.focusDate;\r\n                // nothing to rebuild if only focus changed and it is still visible\r\n                if (state.months.length !== 0 && !state.focusDate.before(state.firstDate) &&\r\n                    !state.focusDate.after(state.lastDate)) {\r\n                    return state;\r\n                }\r\n            }\r\n            // first date changed\r\n            if ('firstDate' in patch) {\r\n                state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\r\n                startDate = state.firstDate;\r\n            }\r\n            // rebuilding months\r\n            if (startDate) {\r\n                /** @type {?} */\r\n                var forceRebuild = 'dayTemplateData' in patch || 'firstDayOfWeek' in patch || 'markDisabled' in patch ||\r\n                    'minDate' in patch || 'maxDate' in patch || 'disabled' in patch || 'outsideDays' in patch;\r\n                /** @type {?} */\r\n                var months = buildMonths(this._calendar, startDate, state, this._i18n, forceRebuild);\r\n                // updating months and boundary dates\r\n                state.months = months;\r\n                state.firstDate = months.length > 0 ? months[0].firstDate : undefined;\r\n                state.lastDate = months.length > 0 ? months[months.length - 1].lastDate : undefined;\r\n                // reset selected date if 'markDisabled' returns true\r\n                if ('selectedDate' in patch && !isDateSelectable(state.selectedDate, state)) {\r\n                    state.selectedDate = null;\r\n                }\r\n                // adjusting focus after months were built\r\n                if ('firstDate' in patch) {\r\n                    if (state.focusDate === undefined || state.focusDate.before(state.firstDate) ||\r\n                        state.focusDate.after(state.lastDate)) {\r\n                        state.focusDate = startDate;\r\n                    }\r\n                }\r\n                // adjusting months/years for the select box navigation\r\n                /** @type {?} */\r\n                var yearChanged = !this._state.firstDate || this._state.firstDate.year !== state.firstDate.year;\r\n                /** @type {?} */\r\n                var monthChanged = !this._state.firstDate || this._state.firstDate.month !== state.firstDate.month;\r\n                if (state.navigation === 'select') {\r\n                    // years ->  boundaries (min/max were changed)\r\n                    if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.years.length === 0 || yearChanged) {\r\n                        state.selectBoxes.years = generateSelectBoxYears(state.firstDate, state.minDate, state.maxDate);\r\n                    }\r\n                    // months -> when current year or boundaries change\r\n                    if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.months.length === 0 || yearChanged) {\r\n                        state.selectBoxes.months =\r\n                            generateSelectBoxMonths(this._calendar, state.firstDate, state.minDate, state.maxDate);\r\n                    }\r\n                }\r\n                else {\r\n                    state.selectBoxes = { years: [], months: [] };\r\n                }\r\n                // updating navigation arrows -> boundaries change (min/max) or month/year changes\r\n                if ((state.navigation === 'arrows' || state.navigation === 'select') &&\r\n                    (monthChanged || yearChanged || 'minDate' in patch || 'maxDate' in patch || 'disabled' in patch)) {\r\n                    state.prevDisabled = state.disabled || prevMonthDisabled(this._calendar, state.firstDate, state.minDate);\r\n                    state.nextDisabled = state.disabled || nextMonthDisabled(this._calendar, state.lastDate, state.maxDate);\r\n                }\r\n            }\r\n            return state;\r\n        };\r\n        NgbDatepickerService.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepickerService.ctorParameters = function () { return [\r\n            { type: NgbCalendar },\r\n            { type: NgbDatepickerI18n }\r\n        ]; };\r\n        return NgbDatepickerService;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @enum {number} */\r\n    var NavigationEvent = {\r\n        PREV: 0,\r\n        NEXT: 1,\r\n    };\r\n    NavigationEvent[NavigationEvent.PREV] = 'PREV';\r\n    NavigationEvent[NavigationEvent.NEXT] = 'NEXT';\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbDatepicker`](#/components/datepicker/api#NgbDatepicker) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the datepickers used in the application.\r\n     */\r\n    var NgbDatepickerConfig = /** @class */ (function () {\r\n        function NgbDatepickerConfig() {\r\n            this.displayMonths = 1;\r\n            this.firstDayOfWeek = 1;\r\n            this.navigation = 'select';\r\n            this.outsideDays = 'visible';\r\n            this.showWeekdays = true;\r\n            this.showWeekNumbers = false;\r\n        }\r\n        NgbDatepickerConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbDatepickerConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbDatepickerConfig_Factory() { return new NgbDatepickerConfig(); }, token: NgbDatepickerConfig, providedIn: \"root\" });\r\n        return NgbDatepickerConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @return {?}\r\n     */\r\n    function NGB_DATEPICKER_DATE_ADAPTER_FACTORY() {\r\n        return new NgbDateStructAdapter();\r\n    }\r\n    /**\r\n     * An abstract service that does the conversion between the internal datepicker `NgbDateStruct` model and\r\n     * any provided user date model `D`, ex. a string, a native date, etc.\r\n     *\r\n     * The adapter is used **only** for conversion when binding datepicker to a form control,\r\n     * ex. `[(ngModel)]=\"userDateModel\"`. Here `userDateModel` can be of any type.\r\n     *\r\n     * The default datepicker implementation assumes we use `NgbDateStruct` as a user model.\r\n     *\r\n     * See the [date format overview](#/components/datepicker/overview#date-model) for more details\r\n     * and the [custom adapter demo](#/components/datepicker/examples#adapter) for an example.\r\n     * @abstract\r\n     * @template D\r\n     */\r\n    var NgbDateAdapter = /** @class */ (function () {\r\n        function NgbDateAdapter() {\r\n        }\r\n        NgbDateAdapter.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY },] }\r\n        ];\r\n        /** @nocollapse */ NgbDateAdapter.ngInjectableDef = core.ɵɵdefineInjectable({ factory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY, token: NgbDateAdapter, providedIn: \"root\" });\r\n        return NgbDateAdapter;\r\n    }());\r\n    var NgbDateStructAdapter = /** @class */ (function (_super) {\r\n        __extends(NgbDateStructAdapter, _super);\r\n        function NgbDateStructAdapter() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * Converts a NgbDateStruct value into NgbDateStruct value\r\n         */\r\n        /**\r\n         * Converts a NgbDateStruct value into NgbDateStruct value\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateStructAdapter.prototype.fromModel = /**\r\n         * Converts a NgbDateStruct value into NgbDateStruct value\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\r\n                { year: date.year, month: date.month, day: date.day } :\r\n                null;\r\n        };\r\n        /**\r\n         * Converts a NgbDateStruct value into NgbDateStruct value\r\n         */\r\n        /**\r\n         * Converts a NgbDateStruct value into NgbDateStruct value\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateStructAdapter.prototype.toModel = /**\r\n         * Converts a NgbDateStruct value into NgbDateStruct value\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\r\n                { year: date.year, month: date.month, day: date.day } :\r\n                null;\r\n        };\r\n        NgbDateStructAdapter.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbDateStructAdapter;\r\n    }(NgbDateAdapter));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_DATEPICKER_VALUE_ACCESSOR = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbDatepicker; })),\r\n        multi: true\r\n    };\r\n    /**\r\n     * A directive that marks the content template that customizes the way datepicker months are displayed\r\n     *\r\n     * \\@since 5.3.0\r\n     */\r\n    var NgbDatepickerContent = /** @class */ (function () {\r\n        function NgbDatepickerContent(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbDatepickerContent.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbDatepickerContent]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepickerContent.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbDatepickerContent;\r\n    }());\r\n    /**\r\n     * A highly configurable component that helps you with selecting calendar dates.\r\n     *\r\n     * `NgbDatepicker` is meant to be displayed inline on a page or put inside a popup.\r\n     */\r\n    var NgbDatepicker = /** @class */ (function () {\r\n        function NgbDatepicker(_service, _calendar, i18n, config, cd, _elementRef, _ngbDateAdapter, _ngZone) {\r\n            var _this = this;\r\n            this._service = _service;\r\n            this._calendar = _calendar;\r\n            this.i18n = i18n;\r\n            this._elementRef = _elementRef;\r\n            this._ngbDateAdapter = _ngbDateAdapter;\r\n            this._ngZone = _ngZone;\r\n            this._destroyed$ = new rxjs.Subject();\r\n            this._publicState = (/** @type {?} */ ({}));\r\n            /**\r\n             * An event emitted right before the navigation happens and displayed month changes.\r\n             *\r\n             * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\r\n             */\r\n            this.navigate = new core.EventEmitter();\r\n            /**\r\n             * An event emitted when user selects a date using keyboard or mouse.\r\n             *\r\n             * The payload of the event is currently selected `NgbDate`.\r\n             *\r\n             * \\@since 5.2.0\r\n             */\r\n            this.dateSelect = new core.EventEmitter();\r\n            /**\r\n             * An event emitted when user selects a date using keyboard or mouse.\r\n             *\r\n             * The payload of the event is currently selected `NgbDate`.\r\n             *\r\n             * Please use 'dateSelect' output instead, this will be deprecated in version 6.0 due to collision with native\r\n             * 'select' event.\r\n             */\r\n            this.select = this.dateSelect;\r\n            this.onChange = (/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            function (_) { });\r\n            this.onTouched = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n            ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\r\n                'maxDate', 'navigation', 'outsideDays', 'showWeekdays', 'showWeekNumbers', 'startDate']\r\n                .forEach((/**\r\n             * @param {?} input\r\n             * @return {?}\r\n             */\r\n            function (input) { return _this[input] = config[input]; }));\r\n            _service.dateSelect$.pipe(operators.takeUntil(this._destroyed$)).subscribe((/**\r\n             * @param {?} date\r\n             * @return {?}\r\n             */\r\n            function (date) { _this.dateSelect.emit(date); }));\r\n            _service.model$.pipe(operators.takeUntil(this._destroyed$)).subscribe((/**\r\n             * @param {?} model\r\n             * @return {?}\r\n             */\r\n            function (model) {\r\n                /** @type {?} */\r\n                var newDate = model.firstDate;\r\n                /** @type {?} */\r\n                var oldDate = _this.model ? _this.model.firstDate : null;\r\n                // update public state\r\n                _this._publicState = {\r\n                    maxDate: model.maxDate,\r\n                    minDate: model.minDate,\r\n                    firstDate: model.firstDate,\r\n                    lastDate: model.lastDate,\r\n                    focusedDate: model.focusDate,\r\n                    months: model.months.map((/**\r\n                     * @param {?} viewModel\r\n                     * @return {?}\r\n                     */\r\n                    function (viewModel) { return viewModel.firstDate; }))\r\n                };\r\n                /** @type {?} */\r\n                var navigationPrevented = false;\r\n                // emitting navigation event if the first month changes\r\n                if (!newDate.equals(oldDate)) {\r\n                    _this.navigate.emit({\r\n                        current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,\r\n                        next: { year: newDate.year, month: newDate.month },\r\n                        preventDefault: (/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return navigationPrevented = true; })\r\n                    });\r\n                    // can't prevent the very first navigation\r\n                    if (navigationPrevented && oldDate !== null) {\r\n                        _this._service.open(oldDate);\r\n                        return;\r\n                    }\r\n                }\r\n                /** @type {?} */\r\n                var newSelectedDate = model.selectedDate;\r\n                /** @type {?} */\r\n                var newFocusedDate = model.focusDate;\r\n                /** @type {?} */\r\n                var oldFocusedDate = _this.model ? _this.model.focusDate : null;\r\n                _this.model = model;\r\n                // handling selection change\r\n                if (isChangedDate(newSelectedDate, _this._controlValue)) {\r\n                    _this._controlValue = newSelectedDate;\r\n                    _this.onTouched();\r\n                    _this.onChange(_this._ngbDateAdapter.toModel(newSelectedDate));\r\n                }\r\n                // handling focus change\r\n                if (isChangedDate(newFocusedDate, oldFocusedDate) && oldFocusedDate && model.focusVisible) {\r\n                    _this.focus();\r\n                }\r\n                cd.markForCheck();\r\n            }));\r\n        }\r\n        Object.defineProperty(NgbDatepicker.prototype, \"state\", {\r\n            /**\r\n             *  Returns the readonly public state of the datepicker\r\n             *\r\n             * @since 5.2.0\r\n             */\r\n            get: /**\r\n             *  Returns the readonly public state of the datepicker\r\n             *\r\n             * \\@since 5.2.0\r\n             * @return {?}\r\n             */\r\n            function () { return this._publicState; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbDatepicker.prototype, \"calendar\", {\r\n            /**\r\n             *  Returns the calendar service used in the specific datepicker instance.\r\n             *\r\n             *  @since 5.3.0\r\n             */\r\n            get: /**\r\n             *  Returns the calendar service used in the specific datepicker instance.\r\n             *\r\n             * \\@since 5.3.0\r\n             * @return {?}\r\n             */\r\n            function () { return this._calendar; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         *  Focuses on given date.\r\n         */\r\n        /**\r\n         *  Focuses on given date.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.focusDate = /**\r\n         *  Focuses on given date.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) { this._service.focus(NgbDate.from(date)); };\r\n        /**\r\n         *  Selects focused date.\r\n         */\r\n        /**\r\n         *  Selects focused date.\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.focusSelect = /**\r\n         *  Selects focused date.\r\n         * @return {?}\r\n         */\r\n        function () { this._service.focusSelect(); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.focus = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            this._ngZone.onStable.asObservable().pipe(operators.take(1)).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var elementToFocus = _this._elementRef.nativeElement.querySelector('div.ngb-dp-day[tabindex=\"0\"]');\r\n                if (elementToFocus) {\r\n                    elementToFocus.focus();\r\n                }\r\n            }));\r\n        };\r\n        /**\r\n         * Navigates to the provided date.\r\n         *\r\n         * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n         * If nothing or invalid date provided calendar will open current month.\r\n         *\r\n         * Use the `[startDate]` input as an alternative.\r\n         */\r\n        /**\r\n         * Navigates to the provided date.\r\n         *\r\n         * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n         * If nothing or invalid date provided calendar will open current month.\r\n         *\r\n         * Use the `[startDate]` input as an alternative.\r\n         * @param {?=} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.navigateTo = /**\r\n         * Navigates to the provided date.\r\n         *\r\n         * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n         * If nothing or invalid date provided calendar will open current month.\r\n         *\r\n         * Use the `[startDate]` input as an alternative.\r\n         * @param {?=} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            this._service.open(NgbDate.from(date ? date.day ? (/** @type {?} */ (date)) : __assign({}, date, { day: 1 }) : null));\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.ngAfterViewInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var focusIns$ = rxjs.fromEvent(_this._contentEl.nativeElement, 'focusin');\r\n                /** @type {?} */\r\n                var focusOuts$ = rxjs.fromEvent(_this._contentEl.nativeElement, 'focusout');\r\n                var nativeElement = _this._elementRef.nativeElement;\r\n                // we're changing 'focusVisible' only when entering or leaving months view\r\n                // and ignoring all focus events where both 'target' and 'related' target are day cells\r\n                rxjs.merge(focusIns$, focusOuts$)\r\n                    .pipe(operators.filter((/**\r\n                 * @param {?} __0\r\n                 * @return {?}\r\n                 */\r\n                function (_a) {\r\n                    var target = _a.target, relatedTarget = _a.relatedTarget;\r\n                    return !(hasClassName(target, 'ngb-dp-day') && hasClassName(relatedTarget, 'ngb-dp-day') &&\r\n                        nativeElement.contains((/** @type {?} */ (target))) && nativeElement.contains((/** @type {?} */ (relatedTarget))));\r\n                })), operators.takeUntil(_this._destroyed$))\r\n                    .subscribe((/**\r\n                 * @param {?} __0\r\n                 * @return {?}\r\n                 */\r\n                function (_a) {\r\n                    var type = _a.type;\r\n                    return _this._ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return _this._service.set({ focusVisible: type === 'focusin' }); }));\r\n                }));\r\n            }));\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._destroyed$.next(); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            if (this.model === undefined) {\r\n                /** @type {?} */\r\n                var inputs_1 = {};\r\n                ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\r\n                    'outsideDays']\r\n                    .forEach((/**\r\n                 * @param {?} name\r\n                 * @return {?}\r\n                 */\r\n                function (name) { return inputs_1[name] = _this[name]; }));\r\n                this._service.set(inputs_1);\r\n                this.navigateTo(this.startDate);\r\n            }\r\n            if (!this.dayTemplate) {\r\n                this.dayTemplate = this._defaultDayTemplate;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var inputs = {};\r\n            ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\r\n                'outsideDays']\r\n                .filter((/**\r\n             * @param {?} name\r\n             * @return {?}\r\n             */\r\n            function (name) { return name in changes; }))\r\n                .forEach((/**\r\n             * @param {?} name\r\n             * @return {?}\r\n             */\r\n            function (name) { return inputs[name] = _this[name]; }));\r\n            this._service.set(inputs);\r\n            if ('startDate' in changes) {\r\n                var _a = changes.startDate, currentValue = _a.currentValue, previousValue = _a.previousValue;\r\n                if (isChangedMonth(previousValue, currentValue)) {\r\n                    this.navigateTo(this.startDate);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.onDateSelect = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            this._service.focus(date);\r\n            this._service.select(date, { emitEvent: true });\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.onNavigateDateSelect = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) { this._service.open(date); };\r\n        /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.onNavigateEvent = /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            switch (event) {\r\n                case NavigationEvent.PREV:\r\n                    this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));\r\n                    break;\r\n                case NavigationEvent.NEXT:\r\n                    this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.registerOnChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onChange = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.registerOnTouched = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onTouched = fn; };\r\n        /**\r\n         * @param {?} disabled\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.setDisabledState = /**\r\n         * @param {?} disabled\r\n         * @return {?}\r\n         */\r\n        function (disabled) { this._service.set({ disabled: disabled }); };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbDatepicker.prototype.writeValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._controlValue = NgbDate.from(this._ngbDateAdapter.fromModel(value));\r\n            this._service.select(this._controlValue);\r\n        };\r\n        NgbDatepicker.decorators = [\r\n            { type: core.Component, args: [{\r\n                        exportAs: 'ngbDatepicker',\r\n                        selector: 'ngb-datepicker',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n    <ng-template #defaultDayTemplate let-date=\\\"date\\\" let-currentMonth=\\\"currentMonth\\\" let-selected=\\\"selected\\\" let-disabled=\\\"disabled\\\" let-focused=\\\"focused\\\">\\n      <div ngbDatepickerDayView\\n        [date]=\\\"date\\\"\\n        [currentMonth]=\\\"currentMonth\\\"\\n        [selected]=\\\"selected\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [focused]=\\\"focused\\\">\\n      </div>\\n    </ng-template>\\n\\n    <ng-template #defaultContentTemplate>\\n      <div *ngFor=\\\"let month of model.months; let i = index;\\\" class=\\\"ngb-dp-month\\\">\\n        <div *ngIf=\\\"navigation === 'none' || (displayMonths > 1 && navigation === 'select')\\\" class=\\\"ngb-dp-month-name\\\">\\n          {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\\n        </div>\\n        <ngb-datepicker-month [month]=\\\"month.firstDate\\\"></ngb-datepicker-month>\\n      </div>\\n    </ng-template>\\n\\n    <div class=\\\"ngb-dp-header\\\">\\n      <ngb-datepicker-navigation *ngIf=\\\"navigation !== 'none'\\\"\\n        [date]=\\\"model.firstDate\\\"\\n        [months]=\\\"model.months\\\"\\n        [disabled]=\\\"model.disabled\\\"\\n        [showSelect]=\\\"model.navigation === 'select'\\\"\\n        [prevDisabled]=\\\"model.prevDisabled\\\"\\n        [nextDisabled]=\\\"model.nextDisabled\\\"\\n        [selectBoxes]=\\\"model.selectBoxes\\\"\\n        (navigate)=\\\"onNavigateEvent($event)\\\"\\n        (select)=\\\"onNavigateDateSelect($event)\\\">\\n      </ngb-datepicker-navigation>\\n    </div>\\n\\n    <div class=\\\"ngb-dp-content\\\" [class.ngb-dp-months]=\\\"!contentTemplate\\\" #content>\\n      <ng-template [ngTemplateOutlet]=\\\"contentTemplate?.templateRef || defaultContentTemplate\\\"></ng-template>\\n    </div>\\n\\n    <ng-template [ngTemplateOutlet]=\\\"footerTemplate\\\"></ng-template>\\n  \",\r\n                        providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService],\r\n                        styles: [\"ngb-datepicker{border:1px solid #dfdfdf;border-radius:.25rem;display:inline-block}ngb-datepicker-month{pointer-events:auto}ngb-datepicker.dropdown-menu{padding:0}.ngb-dp-body{z-index:1050}.ngb-dp-header{border-bottom:0;border-radius:.25rem .25rem 0 0;padding-top:.25rem;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-months{display:-ms-flexbox;display:flex}.ngb-dp-month{pointer-events:none}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-month+.ngb-dp-month .ngb-dp-month-name,.ngb-dp-month+.ngb-dp-month .ngb-dp-week{padding-left:1rem}.ngb-dp-month:last-child .ngb-dp-week{padding-right:.25rem}.ngb-dp-month:first-child .ngb-dp-week{padding-left:.25rem}.ngb-dp-month .ngb-dp-week:last-child{padding-bottom:.25rem}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepicker.ctorParameters = function () { return [\r\n            { type: NgbDatepickerService },\r\n            { type: NgbCalendar },\r\n            { type: NgbDatepickerI18n },\r\n            { type: NgbDatepickerConfig },\r\n            { type: core.ChangeDetectorRef },\r\n            { type: core.ElementRef },\r\n            { type: NgbDateAdapter },\r\n            { type: core.NgZone }\r\n        ]; };\r\n        NgbDatepicker.propDecorators = {\r\n            _defaultDayTemplate: [{ type: core.ViewChild, args: ['defaultDayTemplate', { static: true },] }],\r\n            _contentEl: [{ type: core.ViewChild, args: ['content', { static: true },] }],\r\n            contentTemplate: [{ type: core.ContentChild, args: [NgbDatepickerContent, { static: true },] }],\r\n            dayTemplate: [{ type: core.Input }],\r\n            dayTemplateData: [{ type: core.Input }],\r\n            displayMonths: [{ type: core.Input }],\r\n            firstDayOfWeek: [{ type: core.Input }],\r\n            footerTemplate: [{ type: core.Input }],\r\n            markDisabled: [{ type: core.Input }],\r\n            maxDate: [{ type: core.Input }],\r\n            minDate: [{ type: core.Input }],\r\n            navigation: [{ type: core.Input }],\r\n            outsideDays: [{ type: core.Input }],\r\n            showWeekdays: [{ type: core.Input }],\r\n            showWeekNumbers: [{ type: core.Input }],\r\n            startDate: [{ type: core.Input }],\r\n            navigate: [{ type: core.Output }],\r\n            dateSelect: [{ type: core.Output }],\r\n            select: [{ type: core.Output }]\r\n        };\r\n        return NgbDatepicker;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @enum {number} */\r\n    var Key = {\r\n        Tab: 9,\r\n        Enter: 13,\r\n        Escape: 27,\r\n        Space: 32,\r\n        PageUp: 33,\r\n        PageDown: 34,\r\n        End: 35,\r\n        Home: 36,\r\n        ArrowLeft: 37,\r\n        ArrowUp: 38,\r\n        ArrowRight: 39,\r\n        ArrowDown: 40,\r\n    };\r\n    Key[Key.Tab] = 'Tab';\r\n    Key[Key.Enter] = 'Enter';\r\n    Key[Key.Escape] = 'Escape';\r\n    Key[Key.Space] = 'Space';\r\n    Key[Key.PageUp] = 'PageUp';\r\n    Key[Key.PageDown] = 'PageDown';\r\n    Key[Key.End] = 'End';\r\n    Key[Key.Home] = 'Home';\r\n    Key[Key.ArrowLeft] = 'ArrowLeft';\r\n    Key[Key.ArrowUp] = 'ArrowUp';\r\n    Key[Key.ArrowRight] = 'ArrowRight';\r\n    Key[Key.ArrowDown] = 'ArrowDown';\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A service that represents the keyboard navigation.\r\n     *\r\n     * Default keyboard shortcuts [are documented in the overview](#/components/datepicker/overview#keyboard-shortcuts)\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbDatepickerKeyboardService = /** @class */ (function () {\r\n        function NgbDatepickerKeyboardService() {\r\n        }\r\n        /**\r\n         * Processes a keyboard event.\r\n         */\r\n        /**\r\n         * Processes a keyboard event.\r\n         * @param {?} event\r\n         * @param {?} datepicker\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerKeyboardService.prototype.processKey = /**\r\n         * Processes a keyboard event.\r\n         * @param {?} event\r\n         * @param {?} datepicker\r\n         * @return {?}\r\n         */\r\n        function (event, datepicker) {\r\n            var state = datepicker.state, calendar = datepicker.calendar;\r\n            // tslint:disable-next-line:deprecation\r\n            switch (event.which) {\r\n                case Key.PageUp:\r\n                    datepicker.focusDate(calendar.getPrev(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));\r\n                    break;\r\n                case Key.PageDown:\r\n                    datepicker.focusDate(calendar.getNext(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));\r\n                    break;\r\n                case Key.End:\r\n                    datepicker.focusDate(event.shiftKey ? state.maxDate : state.lastDate);\r\n                    break;\r\n                case Key.Home:\r\n                    datepicker.focusDate(event.shiftKey ? state.minDate : state.firstDate);\r\n                    break;\r\n                case Key.ArrowLeft:\r\n                    datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', 1));\r\n                    break;\r\n                case Key.ArrowUp:\r\n                    datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', calendar.getDaysPerWeek()));\r\n                    break;\r\n                case Key.ArrowRight:\r\n                    datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', 1));\r\n                    break;\r\n                case Key.ArrowDown:\r\n                    datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', calendar.getDaysPerWeek()));\r\n                    break;\r\n                case Key.Enter:\r\n                case Key.Space:\r\n                    datepicker.focusSelect();\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        };\r\n        NgbDatepickerKeyboardService.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbDatepickerKeyboardService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbDatepickerKeyboardService_Factory() { return new NgbDatepickerKeyboardService(); }, token: NgbDatepickerKeyboardService, providedIn: \"root\" });\r\n        return NgbDatepickerKeyboardService;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A component that renders one month including all the days, weekdays and week numbers. Can be used inside\r\n     * the `<ng-template ngbDatepickerMonths></ng-template>` when you want to customize months layout.\r\n     *\r\n     * For a usage example, see [custom month layout demo](#/components/datepicker/examples#custommonth)\r\n     *\r\n     * \\@since 5.3.0\r\n     */\r\n    var NgbDatepickerMonth = /** @class */ (function () {\r\n        function NgbDatepickerMonth(i18n, datepicker, _keyboardService, _service) {\r\n            this.i18n = i18n;\r\n            this.datepicker = datepicker;\r\n            this._keyboardService = _keyboardService;\r\n            this._service = _service;\r\n        }\r\n        Object.defineProperty(NgbDatepickerMonth.prototype, \"month\", {\r\n            /**\r\n             * The first date of month to be rendered.\r\n             *\r\n             * This month must one of the months present in the\r\n             * [datepicker state](#/components/datepicker/api#NgbDatepickerState).\r\n             */\r\n            set: /**\r\n             * The first date of month to be rendered.\r\n             *\r\n             * This month must one of the months present in the\r\n             * [datepicker state](#/components/datepicker/api#NgbDatepickerState).\r\n             * @param {?} month\r\n             * @return {?}\r\n             */\r\n            function (month) {\r\n                this.viewModel = this._service.getMonth(month);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerMonth.prototype.onKeyDown = /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) { this._keyboardService.processKey(event, this.datepicker); };\r\n        /**\r\n         * @param {?} day\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerMonth.prototype.doSelect = /**\r\n         * @param {?} day\r\n         * @return {?}\r\n         */\r\n        function (day) {\r\n            if (!day.context.disabled && !day.hidden) {\r\n                this.datepicker.onDateSelect(day.date);\r\n            }\r\n        };\r\n        NgbDatepickerMonth.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-datepicker-month',\r\n                        host: { 'role': 'grid', '(keydown)': 'onKeyDown($event)' },\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n    <div *ngIf=\\\"datepicker.showWeekdays\\\" class=\\\"ngb-dp-week ngb-dp-weekdays\\\" role=\\\"row\\\">\\n      <div *ngIf=\\\"datepicker.showWeekNumbers\\\" class=\\\"ngb-dp-weekday ngb-dp-showweek\\\"></div>\\n      <div *ngFor=\\\"let w of viewModel.weekdays\\\" class=\\\"ngb-dp-weekday small\\\" role=\\\"columnheader\\\">\\n        {{ i18n.getWeekdayShortName(w) }}\\n      </div>\\n    </div>\\n    <ng-template ngFor let-week [ngForOf]=\\\"viewModel.weeks\\\">\\n      <div *ngIf=\\\"!week.collapsed\\\" class=\\\"ngb-dp-week\\\" role=\\\"row\\\">\\n        <div *ngIf=\\\"datepicker.showWeekNumbers\\\" class=\\\"ngb-dp-week-number small text-muted\\\">{{ i18n.getWeekNumerals(week.number) }}</div>\\n        <div *ngFor=\\\"let day of week.days\\\" (click)=\\\"doSelect(day); $event.preventDefault()\\\" class=\\\"ngb-dp-day\\\" role=\\\"gridcell\\\"\\n          [class.disabled]=\\\"day.context.disabled\\\"\\n          [tabindex]=\\\"day.tabindex\\\"\\n          [class.hidden]=\\\"day.hidden\\\"\\n          [class.ngb-dp-today]=\\\"day.context.today\\\"\\n          [attr.aria-label]=\\\"day.ariaLabel\\\">\\n          <ng-template [ngIf]=\\\"!day.hidden\\\">\\n            <ng-template [ngTemplateOutlet]=\\\"datepicker.dayTemplate\\\" [ngTemplateOutletContext]=\\\"day.context\\\"></ng-template>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \",\r\n                        styles: [\"ngb-datepicker-month{display:block}.ngb-dp-week-number,.ngb-dp-weekday{line-height:2rem;text-align:center;font-style:italic}.ngb-dp-weekday{color:#5bc0de;color:var(--info)}.ngb-dp-week{border-radius:.25rem;display:-ms-flexbox;display:flex}.ngb-dp-weekdays{border-bottom:1px solid rgba(0,0,0,.125);border-radius:0;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-day,.ngb-dp-week-number,.ngb-dp-weekday{width:2rem;height:2rem}.ngb-dp-day{cursor:pointer}.ngb-dp-day.disabled,.ngb-dp-day.hidden{cursor:default}.ngb-dp-day[tabindex=\\\"0\\\"]{z-index:1}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepickerMonth.ctorParameters = function () { return [\r\n            { type: NgbDatepickerI18n },\r\n            { type: NgbDatepicker },\r\n            { type: NgbDatepickerKeyboardService },\r\n            { type: NgbDatepickerService }\r\n        ]; };\r\n        NgbDatepickerMonth.propDecorators = {\r\n            month: [{ type: core.Input }]\r\n        };\r\n        return NgbDatepickerMonth;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbDatepickerNavigation = /** @class */ (function () {\r\n        function NgbDatepickerNavigation(i18n) {\r\n            this.i18n = i18n;\r\n            this.navigation = NavigationEvent;\r\n            this.months = [];\r\n            this.navigate = new core.EventEmitter();\r\n            this.select = new core.EventEmitter();\r\n        }\r\n        /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerNavigation.prototype.onClickPrev = /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            ((/** @type {?} */ (event.currentTarget))).focus();\r\n            this.navigate.emit(this.navigation.PREV);\r\n        };\r\n        /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerNavigation.prototype.onClickNext = /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            ((/** @type {?} */ (event.currentTarget))).focus();\r\n            this.navigate.emit(this.navigation.NEXT);\r\n        };\r\n        NgbDatepickerNavigation.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-datepicker-navigation',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n    <div class=\\\"ngb-dp-arrow\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"onClickPrev($event)\\\" [disabled]=\\\"prevDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.previous-month\\\" aria-label=\\\"Previous month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.previous-month\\\" title=\\\"Previous month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    <ngb-datepicker-navigation-select *ngIf=\\\"showSelect\\\" class=\\\"ngb-dp-navigation-select\\\"\\n      [date]=\\\"date\\\"\\n      [disabled] = \\\"disabled\\\"\\n      [months]=\\\"selectBoxes.months\\\"\\n      [years]=\\\"selectBoxes.years\\\"\\n      (select)=\\\"select.emit($event)\\\">\\n    </ngb-datepicker-navigation-select>\\n\\n    <ng-template *ngIf=\\\"!showSelect\\\" ngFor let-month [ngForOf]=\\\"months\\\" let-i=\\\"index\\\">\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i > 0\\\"></div>\\n      <div class=\\\"ngb-dp-month-name\\\">\\n        {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\\n      </div>\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i !== months.length - 1\\\"></div>\\n    </ng-template>\\n    <div class=\\\"ngb-dp-arrow right\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"onClickNext($event)\\\" [disabled]=\\\"nextDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.next-month\\\" aria-label=\\\"Next month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.next-month\\\" title=\\\"Next month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    \",\r\n                        styles: [\"ngb-datepicker-navigation{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-dp-navigation-chevron{border-style:solid;border-width:.2em .2em 0 0;display:inline-block;width:.75em;height:.75em;margin-left:.25em;margin-right:.15em;-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}.right .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg);margin-left:.15em;margin-right:.25em}.ngb-dp-arrow{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;padding-right:0;padding-left:0;margin:0;width:2rem;height:2rem}.ngb-dp-arrow.right{-ms-flex-pack:end;justify-content:flex-end}.ngb-dp-arrow-btn{padding:0 .25rem;margin:0 .5rem;border:none;background-color:transparent;z-index:1}.ngb-dp-arrow-btn:focus{outline-width:1px;outline-style:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.ngb-dp-arrow-btn:focus{outline-style:solid}}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center}.ngb-dp-navigation-select{display:-ms-flexbox;display:flex;-ms-flex:1 1 9rem;flex:1 1 9rem}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepickerNavigation.ctorParameters = function () { return [\r\n            { type: NgbDatepickerI18n }\r\n        ]; };\r\n        NgbDatepickerNavigation.propDecorators = {\r\n            date: [{ type: core.Input }],\r\n            disabled: [{ type: core.Input }],\r\n            months: [{ type: core.Input }],\r\n            showSelect: [{ type: core.Input }],\r\n            prevDisabled: [{ type: core.Input }],\r\n            nextDisabled: [{ type: core.Input }],\r\n            selectBoxes: [{ type: core.Input }],\r\n            navigate: [{ type: core.Output }],\r\n            select: [{ type: core.Output }]\r\n        };\r\n        return NgbDatepickerNavigation;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var isContainedIn = (/**\r\n     * @param {?} element\r\n     * @param {?=} array\r\n     * @return {?}\r\n     */\r\n    function (element, array) {\r\n        return array ? array.some((/**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        function (item) { return item.contains(element); })) : false;\r\n    });\r\n    /** @type {?} */\r\n    var matchesSelectorIfAny = (/**\r\n     * @param {?} element\r\n     * @param {?=} selector\r\n     * @return {?}\r\n     */\r\n    function (element, selector) {\r\n        return !selector || closest(element, selector) != null;\r\n    });\r\n    // we have to add a more significant delay to avoid re-opening when handling (click) on a toggling element\r\n    // TODO: use proper Angular platform detection when NgbAutoClose becomes a service and we can inject PLATFORM_ID\r\n    var ɵ2 = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var isIOS = (/**\r\n         * @return {?}\r\n         */\r\n        function () { return /iPad|iPhone|iPod/.test(navigator.userAgent) ||\r\n            (/Macintosh/.test(navigator.userAgent) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2); });\r\n        /** @type {?} */\r\n        var isAndroid = (/**\r\n         * @return {?}\r\n         */\r\n        function () { return /Android/.test(navigator.userAgent); });\r\n        return typeof navigator !== 'undefined' ? !!navigator.userAgent && (isIOS() || isAndroid()) : false;\r\n    };\r\n    /** @type {?} */\r\n    var isMobile = ((ɵ2))();\r\n    // setting 'ngbAutoClose' synchronously on mobile results in immediate popup closing\r\n    // when tapping on the triggering element\r\n    /** @type {?} */\r\n    var wrapAsyncForMobile = (/**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { return isMobile ? (/**\r\n     * @return {?}\r\n     */\r\n    function () { return setTimeout((/**\r\n     * @return {?}\r\n     */\r\n    function () { return fn(); }), 100); }) : fn; });\r\n    /**\r\n     * @param {?} zone\r\n     * @param {?} document\r\n     * @param {?} type\r\n     * @param {?} close\r\n     * @param {?} closed$\r\n     * @param {?} insideElements\r\n     * @param {?=} ignoreElements\r\n     * @param {?=} insideSelector\r\n     * @return {?}\r\n     */\r\n    function ngbAutoClose(zone, document, type, close, closed$, insideElements, ignoreElements, insideSelector) {\r\n        // closing on ESC and outside clicks\r\n        if (type) {\r\n            zone.runOutsideAngular(wrapAsyncForMobile((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var shouldCloseOnClick = (/**\r\n                 * @param {?} event\r\n                 * @return {?}\r\n                 */\r\n                function (event) {\r\n                    /** @type {?} */\r\n                    var element = (/** @type {?} */ (event.target));\r\n                    if (event.button === 2 || isContainedIn(element, ignoreElements)) {\r\n                        return false;\r\n                    }\r\n                    if (type === 'inside') {\r\n                        return isContainedIn(element, insideElements) && matchesSelectorIfAny(element, insideSelector);\r\n                    }\r\n                    else if (type === 'outside') {\r\n                        return !isContainedIn(element, insideElements);\r\n                    }\r\n                    else /* if (type === true) */ {\r\n                        return matchesSelectorIfAny(element, insideSelector) || !isContainedIn(element, insideElements);\r\n                    }\r\n                });\r\n                /** @type {?} */\r\n                var escapes$ = rxjs.fromEvent(document, 'keydown')\r\n                    .pipe(operators.takeUntil(closed$), \r\n                // tslint:disable-next-line:deprecation\r\n                operators.filter((/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                function (e) { return e.which === Key.Escape; })), operators.tap((/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                function (e) { return e.preventDefault(); })));\r\n                // we have to pre-calculate 'shouldCloseOnClick' on 'mousedown',\r\n                // because on 'mouseup' DOM nodes might be detached\r\n                /** @type {?} */\r\n                var mouseDowns$ = rxjs.fromEvent(document, 'mousedown').pipe(operators.map(shouldCloseOnClick), operators.takeUntil(closed$));\r\n                /** @type {?} */\r\n                var closeableClicks$ = (/** @type {?} */ (rxjs.fromEvent(document, 'mouseup')\r\n                    .pipe(operators.withLatestFrom(mouseDowns$), operators.filter((/**\r\n                 * @param {?} __0\r\n                 * @return {?}\r\n                 */\r\n                function (_a) {\r\n                    var _b = __read(_a, 2), _ = _b[0], shouldClose = _b[1];\r\n                    return shouldClose;\r\n                })), operators.delay(0), operators.takeUntil(closed$))));\r\n                rxjs.race([escapes$, closeableClicks$]).subscribe((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return zone.run(close); }));\r\n            })));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var FOCUSABLE_ELEMENTS_SELECTOR = [\r\n        'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\r\n        'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\r\n    ].join(', ');\r\n    /**\r\n     * Returns first and last focusable elements inside of a given element based on specific CSS selector\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function getFocusableBoundaryElements(element) {\r\n        /** @type {?} */\r\n        var list = Array.from((/** @type {?} */ (element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR))))\r\n            .filter((/**\r\n         * @param {?} el\r\n         * @return {?}\r\n         */\r\n        function (el) { return el.tabIndex !== -1; }));\r\n        return [list[0], list[list.length - 1]];\r\n    }\r\n    /**\r\n     * Function that enforces browser focus to be trapped inside a DOM element.\r\n     *\r\n     * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\r\n     *\r\n     * \\@param zone Angular zone\r\n     * \\@param element The element around which focus will be trapped inside\r\n     * \\@param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\r\n     * and free internal resources\r\n     * \\@param refocusOnClick Put the focus back to the last focused element whenever a click occurs on element (default to\r\n     * false)\r\n     * @type {?}\r\n     */\r\n    var ngbFocusTrap = (/**\r\n     * @param {?} zone\r\n     * @param {?} element\r\n     * @param {?} stopFocusTrap$\r\n     * @param {?=} refocusOnClick\r\n     * @return {?}\r\n     */\r\n    function (zone, element, stopFocusTrap$, refocusOnClick) {\r\n        if (refocusOnClick === void 0) { refocusOnClick = false; }\r\n        zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // last focused element\r\n            /** @type {?} */\r\n            var lastFocusedElement$ = rxjs.fromEvent(element, 'focusin').pipe(operators.takeUntil(stopFocusTrap$), operators.map((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            function (e) { return e.target; })));\r\n            // 'tab' / 'shift+tab' stream\r\n            rxjs.fromEvent(element, 'keydown')\r\n                .pipe(operators.takeUntil(stopFocusTrap$), \r\n            // tslint:disable:deprecation\r\n            operators.filter((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            function (e) { return e.which === Key.Tab; })), \r\n            // tslint:enable:deprecation\r\n            operators.withLatestFrom(lastFocusedElement$))\r\n                .subscribe((/**\r\n             * @param {?} __0\r\n             * @return {?}\r\n             */\r\n            function (_a) {\r\n                var _b = __read(_a, 2), tabEvent = _b[0], focusedElement = _b[1];\r\n                var _c = __read(getFocusableBoundaryElements(element), 2), first = _c[0], last = _c[1];\r\n                if ((focusedElement === first || focusedElement === element) && tabEvent.shiftKey) {\r\n                    last.focus();\r\n                    tabEvent.preventDefault();\r\n                }\r\n                if (focusedElement === last && !tabEvent.shiftKey) {\r\n                    first.focus();\r\n                    tabEvent.preventDefault();\r\n                }\r\n            }));\r\n            // inside click\r\n            if (refocusOnClick) {\r\n                rxjs.fromEvent(element, 'click')\r\n                    .pipe(operators.takeUntil(stopFocusTrap$), operators.withLatestFrom(lastFocusedElement$), operators.map((/**\r\n                 * @param {?} arr\r\n                 * @return {?}\r\n                 */\r\n                function (arr) { return (/** @type {?} */ (arr[1])); })))\r\n                    .subscribe((/**\r\n                 * @param {?} lastFocusedElement\r\n                 * @return {?}\r\n                 */\r\n                function (lastFocusedElement) { return lastFocusedElement.focus(); }));\r\n            }\r\n        }));\r\n    });\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    // previous version:\r\n    // https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\n    var \r\n    // previous version:\r\n    // https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\n    Positioning = /** @class */ (function () {\r\n        function Positioning() {\r\n        }\r\n        /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        Positioning.prototype.getAllStyles = /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        function (element) { return window.getComputedStyle(element); };\r\n        /**\r\n         * @private\r\n         * @param {?} element\r\n         * @param {?} prop\r\n         * @return {?}\r\n         */\r\n        Positioning.prototype.getStyle = /**\r\n         * @private\r\n         * @param {?} element\r\n         * @param {?} prop\r\n         * @return {?}\r\n         */\r\n        function (element, prop) { return this.getAllStyles(element)[prop]; };\r\n        /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        Positioning.prototype.isStaticPositioned = /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        function (element) {\r\n            return (this.getStyle(element, 'position') || 'static') === 'static';\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        Positioning.prototype.offsetParent = /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        function (element) {\r\n            /** @type {?} */\r\n            var offsetParentEl = (/** @type {?} */ (element.offsetParent)) || document.documentElement;\r\n            while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\r\n                offsetParentEl = (/** @type {?} */ (offsetParentEl.offsetParent));\r\n            }\r\n            return offsetParentEl || document.documentElement;\r\n        };\r\n        /**\r\n         * @param {?} element\r\n         * @param {?=} round\r\n         * @return {?}\r\n         */\r\n        Positioning.prototype.position = /**\r\n         * @param {?} element\r\n         * @param {?=} round\r\n         * @return {?}\r\n         */\r\n        function (element, round) {\r\n            if (round === void 0) { round = true; }\r\n            /** @type {?} */\r\n            var elPosition;\r\n            /** @type {?} */\r\n            var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\r\n            if (this.getStyle(element, 'position') === 'fixed') {\r\n                elPosition = element.getBoundingClientRect();\r\n                elPosition = {\r\n                    top: elPosition.top,\r\n                    bottom: elPosition.bottom,\r\n                    left: elPosition.left,\r\n                    right: elPosition.right,\r\n                    height: elPosition.height,\r\n                    width: elPosition.width\r\n                };\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                var offsetParentEl = this.offsetParent(element);\r\n                elPosition = this.offset(element, false);\r\n                if (offsetParentEl !== document.documentElement) {\r\n                    parentOffset = this.offset(offsetParentEl, false);\r\n                }\r\n                parentOffset.top += offsetParentEl.clientTop;\r\n                parentOffset.left += offsetParentEl.clientLeft;\r\n            }\r\n            elPosition.top -= parentOffset.top;\r\n            elPosition.bottom -= parentOffset.top;\r\n            elPosition.left -= parentOffset.left;\r\n            elPosition.right -= parentOffset.left;\r\n            if (round) {\r\n                elPosition.top = Math.round(elPosition.top);\r\n                elPosition.bottom = Math.round(elPosition.bottom);\r\n                elPosition.left = Math.round(elPosition.left);\r\n                elPosition.right = Math.round(elPosition.right);\r\n            }\r\n            return elPosition;\r\n        };\r\n        /**\r\n         * @param {?} element\r\n         * @param {?=} round\r\n         * @return {?}\r\n         */\r\n        Positioning.prototype.offset = /**\r\n         * @param {?} element\r\n         * @param {?=} round\r\n         * @return {?}\r\n         */\r\n        function (element, round) {\r\n            if (round === void 0) { round = true; }\r\n            /** @type {?} */\r\n            var elBcr = element.getBoundingClientRect();\r\n            /** @type {?} */\r\n            var viewportOffset = {\r\n                top: window.pageYOffset - document.documentElement.clientTop,\r\n                left: window.pageXOffset - document.documentElement.clientLeft\r\n            };\r\n            /** @type {?} */\r\n            var elOffset = {\r\n                height: elBcr.height || element.offsetHeight,\r\n                width: elBcr.width || element.offsetWidth,\r\n                top: elBcr.top + viewportOffset.top,\r\n                bottom: elBcr.bottom + viewportOffset.top,\r\n                left: elBcr.left + viewportOffset.left,\r\n                right: elBcr.right + viewportOffset.left\r\n            };\r\n            if (round) {\r\n                elOffset.height = Math.round(elOffset.height);\r\n                elOffset.width = Math.round(elOffset.width);\r\n                elOffset.top = Math.round(elOffset.top);\r\n                elOffset.bottom = Math.round(elOffset.bottom);\r\n                elOffset.left = Math.round(elOffset.left);\r\n                elOffset.right = Math.round(elOffset.right);\r\n            }\r\n            return elOffset;\r\n        };\r\n        /*\r\n          Return false if the element to position is outside the viewport\r\n        */\r\n        /*\r\n            Return false if the element to position is outside the viewport\r\n          */\r\n        /**\r\n         * @param {?} hostElement\r\n         * @param {?} targetElement\r\n         * @param {?} placement\r\n         * @param {?=} appendToBody\r\n         * @return {?}\r\n         */\r\n        Positioning.prototype.positionElements = /*\r\n            Return false if the element to position is outside the viewport\r\n          */\r\n        /**\r\n         * @param {?} hostElement\r\n         * @param {?} targetElement\r\n         * @param {?} placement\r\n         * @param {?=} appendToBody\r\n         * @return {?}\r\n         */\r\n        function (hostElement, targetElement, placement, appendToBody) {\r\n            var _a = __read(placement.split('-'), 2), _b = _a[0], placementPrimary = _b === void 0 ? 'top' : _b, _c = _a[1], placementSecondary = _c === void 0 ? 'center' : _c;\r\n            /** @type {?} */\r\n            var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\r\n            /** @type {?} */\r\n            var targetElStyles = this.getAllStyles(targetElement);\r\n            /** @type {?} */\r\n            var marginTop = parseFloat(targetElStyles.marginTop);\r\n            /** @type {?} */\r\n            var marginBottom = parseFloat(targetElStyles.marginBottom);\r\n            /** @type {?} */\r\n            var marginLeft = parseFloat(targetElStyles.marginLeft);\r\n            /** @type {?} */\r\n            var marginRight = parseFloat(targetElStyles.marginRight);\r\n            /** @type {?} */\r\n            var topPosition = 0;\r\n            /** @type {?} */\r\n            var leftPosition = 0;\r\n            switch (placementPrimary) {\r\n                case 'top':\r\n                    topPosition = (hostElPosition.top - (targetElement.offsetHeight + marginTop + marginBottom));\r\n                    break;\r\n                case 'bottom':\r\n                    topPosition = (hostElPosition.top + hostElPosition.height);\r\n                    break;\r\n                case 'left':\r\n                    leftPosition = (hostElPosition.left - (targetElement.offsetWidth + marginLeft + marginRight));\r\n                    break;\r\n                case 'right':\r\n                    leftPosition = (hostElPosition.left + hostElPosition.width);\r\n                    break;\r\n            }\r\n            switch (placementSecondary) {\r\n                case 'top':\r\n                    topPosition = hostElPosition.top;\r\n                    break;\r\n                case 'bottom':\r\n                    topPosition = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\r\n                    break;\r\n                case 'left':\r\n                    leftPosition = hostElPosition.left;\r\n                    break;\r\n                case 'right':\r\n                    leftPosition = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\r\n                    break;\r\n                case 'center':\r\n                    if (placementPrimary === 'top' || placementPrimary === 'bottom') {\r\n                        leftPosition = (hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2);\r\n                    }\r\n                    else {\r\n                        topPosition = (hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2);\r\n                    }\r\n                    break;\r\n            }\r\n            /// The translate3d/gpu acceleration render a blurry text on chrome, the next line is commented until a browser fix\r\n            // targetElement.style.transform = `translate3d(${Math.round(leftPosition)}px, ${Math.floor(topPosition)}px, 0px)`;\r\n            targetElement.style.transform = \"translate(\" + Math.round(leftPosition) + \"px, \" + Math.round(topPosition) + \"px)\";\r\n            // Check if the targetElement is inside the viewport\r\n            /** @type {?} */\r\n            var targetElBCR = targetElement.getBoundingClientRect();\r\n            /** @type {?} */\r\n            var html = document.documentElement;\r\n            /** @type {?} */\r\n            var windowHeight = window.innerHeight || html.clientHeight;\r\n            /** @type {?} */\r\n            var windowWidth = window.innerWidth || html.clientWidth;\r\n            return targetElBCR.left >= 0 && targetElBCR.top >= 0 && targetElBCR.right <= windowWidth &&\r\n                targetElBCR.bottom <= windowHeight;\r\n        };\r\n        return Positioning;\r\n    }());\r\n    /** @type {?} */\r\n    var placementSeparator = /\\s+/;\r\n    /** @type {?} */\r\n    var positionService = new Positioning();\r\n    /*\r\n     * Accept the placement array and applies the appropriate placement dependent on the viewport.\r\n     * Returns the applied placement.\r\n     * In case of auto placement, placements are selected in order\r\n     *   'top', 'bottom', 'left', 'right',\r\n     *   'top-left', 'top-right',\r\n     *   'bottom-left', 'bottom-right',\r\n     *   'left-top', 'left-bottom',\r\n     *   'right-top', 'right-bottom'.\r\n     * */\r\n    /**\r\n     * @param {?} hostElement\r\n     * @param {?} targetElement\r\n     * @param {?} placement\r\n     * @param {?=} appendToBody\r\n     * @param {?=} baseClass\r\n     * @return {?}\r\n     */\r\n    function positionElements(hostElement, targetElement, placement, appendToBody, baseClass) {\r\n        var e_1, _a;\r\n        /** @type {?} */\r\n        var placementVals = Array.isArray(placement) ? placement : (/** @type {?} */ (placement.split(placementSeparator)));\r\n        /** @type {?} */\r\n        var allowedPlacements = [\r\n            'top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top', 'left-bottom',\r\n            'right-top', 'right-bottom'\r\n        ];\r\n        /** @type {?} */\r\n        var classList = targetElement.classList;\r\n        /** @type {?} */\r\n        var addClassesToTarget = (/**\r\n         * @param {?} targetPlacement\r\n         * @return {?}\r\n         */\r\n        function (targetPlacement) {\r\n            var _a = __read(targetPlacement.split('-'), 2), primary = _a[0], secondary = _a[1];\r\n            /** @type {?} */\r\n            var classes = [];\r\n            if (baseClass) {\r\n                classes.push(baseClass + \"-\" + primary);\r\n                if (secondary) {\r\n                    classes.push(baseClass + \"-\" + primary + \"-\" + secondary);\r\n                }\r\n                classes.forEach((/**\r\n                 * @param {?} classname\r\n                 * @return {?}\r\n                 */\r\n                function (classname) { classList.add(classname); }));\r\n            }\r\n            return classes;\r\n        });\r\n        // Remove old placement classes to avoid issues\r\n        if (baseClass) {\r\n            allowedPlacements.forEach((/**\r\n             * @param {?} placementToRemove\r\n             * @return {?}\r\n             */\r\n            function (placementToRemove) { classList.remove(baseClass + \"-\" + placementToRemove); }));\r\n        }\r\n        // replace auto placement with other placements\r\n        /** @type {?} */\r\n        var hasAuto = placementVals.findIndex((/**\r\n         * @param {?} val\r\n         * @return {?}\r\n         */\r\n        function (val) { return val === 'auto'; }));\r\n        if (hasAuto >= 0) {\r\n            allowedPlacements.forEach((/**\r\n             * @param {?} obj\r\n             * @return {?}\r\n             */\r\n            function (obj) {\r\n                if (placementVals.find((/**\r\n                 * @param {?} val\r\n                 * @return {?}\r\n                 */\r\n                function (val) { return val.search('^' + obj) !== -1; })) == null) {\r\n                    placementVals.splice(hasAuto++, 1, (/** @type {?} */ (obj)));\r\n                }\r\n            }));\r\n        }\r\n        // coordinates where to position\r\n        // Required for transform:\r\n        /** @type {?} */\r\n        var style = targetElement.style;\r\n        style.position = 'absolute';\r\n        style.top = '0';\r\n        style.left = '0';\r\n        style['will-change'] = 'transform';\r\n        /** @type {?} */\r\n        var testPlacement;\r\n        /** @type {?} */\r\n        var isInViewport = false;\r\n        try {\r\n            for (var placementVals_1 = __values(placementVals), placementVals_1_1 = placementVals_1.next(); !placementVals_1_1.done; placementVals_1_1 = placementVals_1.next()) {\r\n                testPlacement = placementVals_1_1.value;\r\n                /** @type {?} */\r\n                var addedClasses = addClassesToTarget(testPlacement);\r\n                if (positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody)) {\r\n                    isInViewport = true;\r\n                    break;\r\n                }\r\n                // Remove the baseClasses for further calculation\r\n                if (baseClass) {\r\n                    addedClasses.forEach((/**\r\n                     * @param {?} classname\r\n                     * @return {?}\r\n                     */\r\n                    function (classname) { classList.remove(classname); }));\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (placementVals_1_1 && !placementVals_1_1.done && (_a = placementVals_1.return)) _a.call(placementVals_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        if (!isInViewport) {\r\n            // If nothing match, the first placement is the default one\r\n            testPlacement = placementVals[0];\r\n            addClassesToTarget(testPlacement);\r\n            positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody);\r\n        }\r\n        return testPlacement;\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @return {?}\r\n     */\r\n    function NGB_DATEPICKER_PARSER_FORMATTER_FACTORY() {\r\n        return new NgbDateISOParserFormatter();\r\n    }\r\n    /**\r\n     * An abstract service for parsing and formatting dates for the\r\n     * [`NgbInputDatepicker`](#/components/datepicker/api#NgbInputDatepicker) directive.\r\n     * Converts between the internal `NgbDateStruct` model presentation and a `string` that is displayed in the\r\n     * input element.\r\n     *\r\n     * When user types something in the input this service attempts to parse it into a `NgbDateStruct` object.\r\n     * And vice versa, when users selects a date in the calendar with the mouse, it must be displayed as a `string`\r\n     * in the input.\r\n     *\r\n     * Default implementation uses the ISO 8601 format, but you can provide another implementation via DI\r\n     * to use an alternative string format or a custom parsing logic.\r\n     *\r\n     * See the [date format overview](#/components/datepicker/overview#date-model) for more details.\r\n     * @abstract\r\n     */\r\n    var NgbDateParserFormatter = /** @class */ (function () {\r\n        function NgbDateParserFormatter() {\r\n        }\r\n        NgbDateParserFormatter.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY },] }\r\n        ];\r\n        /** @nocollapse */ NgbDateParserFormatter.ngInjectableDef = core.ɵɵdefineInjectable({ factory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY, token: NgbDateParserFormatter, providedIn: \"root\" });\r\n        return NgbDateParserFormatter;\r\n    }());\r\n    var NgbDateISOParserFormatter = /** @class */ (function (_super) {\r\n        __extends(NgbDateISOParserFormatter, _super);\r\n        function NgbDateISOParserFormatter() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbDateISOParserFormatter.prototype.parse = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (value) {\r\n                /** @type {?} */\r\n                var dateParts = value.trim().split('-');\r\n                if (dateParts.length === 1 && isNumber(dateParts[0])) {\r\n                    return { year: toInteger(dateParts[0]), month: null, day: null };\r\n                }\r\n                else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\r\n                    return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null };\r\n                }\r\n                else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\r\n                    return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2]) };\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateISOParserFormatter.prototype.format = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return date ?\r\n                date.year + \"-\" + (isNumber(date.month) ? padNumber(date.month) : '') + \"-\" + (isNumber(date.day) ? padNumber(date.day) : '') :\r\n                '';\r\n        };\r\n        NgbDateISOParserFormatter.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbDateISOParserFormatter;\r\n    }(NgbDateParserFormatter));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbDatepickerInput`](#/components/datepicker/api#NgbDatepicker) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the datepicker inputs used in the application.\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbInputDatepickerConfig = /** @class */ (function (_super) {\r\n        __extends(NgbInputDatepickerConfig, _super);\r\n        function NgbInputDatepickerConfig() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            _this.autoClose = true;\r\n            _this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\r\n            _this.restoreFocus = true;\r\n            return _this;\r\n        }\r\n        NgbInputDatepickerConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbInputDatepickerConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbInputDatepickerConfig_Factory() { return new NgbInputDatepickerConfig(); }, token: NgbInputDatepickerConfig, providedIn: \"root\" });\r\n        return NgbInputDatepickerConfig;\r\n    }(NgbDatepickerConfig));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_DATEPICKER_VALUE_ACCESSOR$1 = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbInputDatepicker; })),\r\n        multi: true\r\n    };\r\n    /** @type {?} */\r\n    var NGB_DATEPICKER_VALIDATOR = {\r\n        provide: forms.NG_VALIDATORS,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbInputDatepicker; })),\r\n        multi: true\r\n    };\r\n    /**\r\n     * A directive that allows to stick a datepicker popup to an input field.\r\n     *\r\n     * Manages interaction with the input field itself, does value formatting and provides forms integration.\r\n     */\r\n    var NgbInputDatepicker = /** @class */ (function () {\r\n        function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, _ngZone, _calendar, _dateAdapter, _document, _changeDetector, config) {\r\n            var _this = this;\r\n            this._parserFormatter = _parserFormatter;\r\n            this._elRef = _elRef;\r\n            this._vcRef = _vcRef;\r\n            this._renderer = _renderer;\r\n            this._cfr = _cfr;\r\n            this._ngZone = _ngZone;\r\n            this._calendar = _calendar;\r\n            this._dateAdapter = _dateAdapter;\r\n            this._document = _document;\r\n            this._changeDetector = _changeDetector;\r\n            this._cRef = null;\r\n            this._disabled = false;\r\n            this._elWithFocus = null;\r\n            /**\r\n             * An event emitted when user selects a date using keyboard or mouse.\r\n             *\r\n             * The payload of the event is currently selected `NgbDate`.\r\n             *\r\n             * \\@since 1.1.1\r\n             */\r\n            this.dateSelect = new core.EventEmitter();\r\n            /**\r\n             * Event emitted right after the navigation happens and displayed month changes.\r\n             *\r\n             * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\r\n             */\r\n            this.navigate = new core.EventEmitter();\r\n            /**\r\n             * An event fired after closing datepicker window.\r\n             *\r\n             * \\@since 4.2.0\r\n             */\r\n            this.closed = new core.EventEmitter();\r\n            this._onChange = (/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            function (_) { });\r\n            this._onTouched = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n            this._validatorChange = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n            ['autoClose', 'container', 'positionTarget', 'placement'].forEach((/**\r\n             * @param {?} input\r\n             * @return {?}\r\n             */\r\n            function (input) { return _this[input] = config[input]; }));\r\n            this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this._updatePopupPosition(); }));\r\n        }\r\n        Object.defineProperty(NgbInputDatepicker.prototype, \"disabled\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                return this._disabled;\r\n            },\r\n            set: /**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                this._disabled = value === '' || (value && value !== 'false');\r\n                if (this.isOpen()) {\r\n                    this._cRef.instance.setDisabledState(this._disabled);\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.registerOnChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this._onChange = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.registerOnTouched = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this._onTouched = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.registerOnValidatorChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this._validatorChange = fn; };\r\n        /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.setDisabledState = /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        function (isDisabled) { this.disabled = isDisabled; };\r\n        /**\r\n         * @param {?} c\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.validate = /**\r\n         * @param {?} c\r\n         * @return {?}\r\n         */\r\n        function (c) {\r\n            /** @type {?} */\r\n            var value = c.value;\r\n            if (value === null || value === undefined) {\r\n                return null;\r\n            }\r\n            /** @type {?} */\r\n            var ngbDate = this._fromDateStruct(this._dateAdapter.fromModel(value));\r\n            if (!this._calendar.isValid(ngbDate)) {\r\n                return { 'ngbDate': { invalid: c.value } };\r\n            }\r\n            if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {\r\n                return { 'ngbDate': { requiredBefore: this.minDate } };\r\n            }\r\n            if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {\r\n                return { 'ngbDate': { requiredAfter: this.maxDate } };\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.writeValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._model = this._fromDateStruct(this._dateAdapter.fromModel(value));\r\n            this._writeModelValue(this._model);\r\n        };\r\n        /**\r\n         * @param {?} value\r\n         * @param {?=} updateView\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.manualDateChange = /**\r\n         * @param {?} value\r\n         * @param {?=} updateView\r\n         * @return {?}\r\n         */\r\n        function (value, updateView) {\r\n            if (updateView === void 0) { updateView = false; }\r\n            /** @type {?} */\r\n            var inputValueChanged = value !== this._inputValue;\r\n            if (inputValueChanged) {\r\n                this._inputValue = value;\r\n                this._model = this._fromDateStruct(this._parserFormatter.parse(value));\r\n            }\r\n            if (inputValueChanged || !updateView) {\r\n                this._onChange(this._model ? this._dateAdapter.toModel(this._model) : (value === '' ? null : value));\r\n            }\r\n            if (updateView && this._model) {\r\n                this._writeModelValue(this._model);\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.isOpen = /**\r\n         * @return {?}\r\n         */\r\n        function () { return !!this._cRef; };\r\n        /**\r\n         * Opens the datepicker popup.\r\n         *\r\n         * If the related form control contains a valid date, the corresponding month will be opened.\r\n         */\r\n        /**\r\n         * Opens the datepicker popup.\r\n         *\r\n         * If the related form control contains a valid date, the corresponding month will be opened.\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.open = /**\r\n         * Opens the datepicker popup.\r\n         *\r\n         * If the related form control contains a valid date, the corresponding month will be opened.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            if (!this.isOpen()) {\r\n                /** @type {?} */\r\n                var cf = this._cfr.resolveComponentFactory(NgbDatepicker);\r\n                this._cRef = this._vcRef.createComponent(cf);\r\n                this._applyPopupStyling(this._cRef.location.nativeElement);\r\n                this._applyDatepickerInputs(this._cRef.instance);\r\n                this._subscribeForDatepickerOutputs(this._cRef.instance);\r\n                this._cRef.instance.ngOnInit();\r\n                this._cRef.instance.writeValue(this._dateAdapter.toModel(this._model));\r\n                // date selection event handling\r\n                this._cRef.instance.registerOnChange((/**\r\n                 * @param {?} selectedDate\r\n                 * @return {?}\r\n                 */\r\n                function (selectedDate) {\r\n                    _this.writeValue(selectedDate);\r\n                    _this._onChange(selectedDate);\r\n                    _this._onTouched();\r\n                }));\r\n                this._cRef.changeDetectorRef.detectChanges();\r\n                this._cRef.instance.setDisabledState(this.disabled);\r\n                if (this.container === 'body') {\r\n                    window.document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);\r\n                }\r\n                // focus handling\r\n                this._elWithFocus = this._document.activeElement;\r\n                ngbFocusTrap(this._ngZone, this._cRef.location.nativeElement, this.closed, true);\r\n                this._cRef.instance.focus();\r\n                ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.close(); }), this.closed, [], [this._elRef.nativeElement, this._cRef.location.nativeElement]);\r\n            }\r\n        };\r\n        /**\r\n         * Closes the datepicker popup.\r\n         */\r\n        /**\r\n         * Closes the datepicker popup.\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.close = /**\r\n         * Closes the datepicker popup.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.isOpen()) {\r\n                this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\r\n                this._cRef = null;\r\n                this.closed.emit();\r\n                this._changeDetector.markForCheck();\r\n                // restore focus\r\n                /** @type {?} */\r\n                var elementToFocus = this._elWithFocus;\r\n                if (isString(this.restoreFocus)) {\r\n                    elementToFocus = this._document.querySelector(this.restoreFocus);\r\n                }\r\n                else if (this.restoreFocus !== undefined) {\r\n                    elementToFocus = this.restoreFocus;\r\n                }\r\n                // in IE document.activeElement can contain an object without 'focus()' sometimes\r\n                if (elementToFocus && elementToFocus['focus']) {\r\n                    elementToFocus.focus();\r\n                }\r\n                else {\r\n                    this._document.body.focus();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Toggles the datepicker popup.\r\n         */\r\n        /**\r\n         * Toggles the datepicker popup.\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.toggle = /**\r\n         * Toggles the datepicker popup.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.isOpen()) {\r\n                this.close();\r\n            }\r\n            else {\r\n                this.open();\r\n            }\r\n        };\r\n        /**\r\n         * Navigates to the provided date.\r\n         *\r\n         * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n         * If nothing or invalid date provided calendar will open current month.\r\n         *\r\n         * Use the `[startDate]` input as an alternative.\r\n         */\r\n        /**\r\n         * Navigates to the provided date.\r\n         *\r\n         * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n         * If nothing or invalid date provided calendar will open current month.\r\n         *\r\n         * Use the `[startDate]` input as an alternative.\r\n         * @param {?=} date\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.navigateTo = /**\r\n         * Navigates to the provided date.\r\n         *\r\n         * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n         * If nothing or invalid date provided calendar will open current month.\r\n         *\r\n         * Use the `[startDate]` input as an alternative.\r\n         * @param {?=} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            if (this.isOpen()) {\r\n                this._cRef.instance.navigateTo(date);\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.onBlur = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._onTouched(); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.onFocus = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._elWithFocus = this._elRef.nativeElement; };\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            if (changes['minDate'] || changes['maxDate']) {\r\n                this._validatorChange();\r\n                if (this.isOpen()) {\r\n                    if (changes['minDate']) {\r\n                        this._cRef.instance.minDate = this.minDate;\r\n                    }\r\n                    if (changes['maxDate']) {\r\n                        this._cRef.instance.maxDate = this.maxDate;\r\n                    }\r\n                    this._cRef.instance.ngOnChanges(changes);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.close();\r\n            this._zoneSubscription.unsubscribe();\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} datepickerInstance\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype._applyDatepickerInputs = /**\r\n         * @private\r\n         * @param {?} datepickerInstance\r\n         * @return {?}\r\n         */\r\n        function (datepickerInstance) {\r\n            var _this = this;\r\n            ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\r\n                'maxDate', 'navigation', 'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\r\n                .forEach((/**\r\n             * @param {?} optionName\r\n             * @return {?}\r\n             */\r\n            function (optionName) {\r\n                if (_this[optionName] !== undefined) {\r\n                    datepickerInstance[optionName] = _this[optionName];\r\n                }\r\n            }));\r\n            datepickerInstance.startDate = this.startDate || this._model;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} nativeElement\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype._applyPopupStyling = /**\r\n         * @private\r\n         * @param {?} nativeElement\r\n         * @return {?}\r\n         */\r\n        function (nativeElement) {\r\n            this._renderer.addClass(nativeElement, 'dropdown-menu');\r\n            this._renderer.addClass(nativeElement, 'show');\r\n            if (this.container === 'body') {\r\n                this._renderer.addClass(nativeElement, 'ngb-dp-body');\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} datepickerInstance\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = /**\r\n         * @private\r\n         * @param {?} datepickerInstance\r\n         * @return {?}\r\n         */\r\n        function (datepickerInstance) {\r\n            var _this = this;\r\n            datepickerInstance.navigate.subscribe((/**\r\n             * @param {?} navigateEvent\r\n             * @return {?}\r\n             */\r\n            function (navigateEvent) { return _this.navigate.emit(navigateEvent); }));\r\n            datepickerInstance.dateSelect.subscribe((/**\r\n             * @param {?} date\r\n             * @return {?}\r\n             */\r\n            function (date) {\r\n                _this.dateSelect.emit(date);\r\n                if (_this.autoClose === true || _this.autoClose === 'inside') {\r\n                    _this.close();\r\n                }\r\n            }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} model\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype._writeModelValue = /**\r\n         * @private\r\n         * @param {?} model\r\n         * @return {?}\r\n         */\r\n        function (model) {\r\n            /** @type {?} */\r\n            var value = this._parserFormatter.format(model);\r\n            this._inputValue = value;\r\n            this._renderer.setProperty(this._elRef.nativeElement, 'value', value);\r\n            if (this.isOpen()) {\r\n                this._cRef.instance.writeValue(this._dateAdapter.toModel(model));\r\n                this._onTouched();\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype._fromDateStruct = /**\r\n         * @private\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;\r\n            return this._calendar.isValid(ngbDate) ? ngbDate : null;\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbInputDatepicker.prototype._updatePopupPosition = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (!this._cRef) {\r\n                return;\r\n            }\r\n            /** @type {?} */\r\n            var hostElement;\r\n            if (isString(this.positionTarget)) {\r\n                hostElement = this._document.querySelector(this.positionTarget);\r\n            }\r\n            else if (this.positionTarget instanceof HTMLElement) {\r\n                hostElement = this.positionTarget;\r\n            }\r\n            else {\r\n                hostElement = this._elRef.nativeElement;\r\n            }\r\n            if (this.positionTarget && !hostElement) {\r\n                throw new Error('ngbDatepicker could not find element declared in [positionTarget] to position against.');\r\n            }\r\n            positionElements(hostElement, this._cRef.location.nativeElement, this.placement, this.container === 'body');\r\n        };\r\n        NgbInputDatepicker.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'input[ngbDatepicker]',\r\n                        exportAs: 'ngbDatepicker',\r\n                        host: {\r\n                            '(input)': 'manualDateChange($event.target.value)',\r\n                            '(change)': 'manualDateChange($event.target.value, true)',\r\n                            '(focus)': 'onFocus()',\r\n                            '(blur)': 'onBlur()',\r\n                            '[disabled]': 'disabled'\r\n                        },\r\n                        providers: [\r\n                            NGB_DATEPICKER_VALUE_ACCESSOR$1, NGB_DATEPICKER_VALIDATOR,\r\n                            { provide: NgbDatepickerConfig, useExisting: NgbInputDatepickerConfig }\r\n                        ],\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbInputDatepicker.ctorParameters = function () { return [\r\n            { type: NgbDateParserFormatter },\r\n            { type: core.ElementRef },\r\n            { type: core.ViewContainerRef },\r\n            { type: core.Renderer2 },\r\n            { type: core.ComponentFactoryResolver },\r\n            { type: core.NgZone },\r\n            { type: NgbCalendar },\r\n            { type: NgbDateAdapter },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: core.ChangeDetectorRef },\r\n            { type: NgbInputDatepickerConfig }\r\n        ]; };\r\n        NgbInputDatepicker.propDecorators = {\r\n            autoClose: [{ type: core.Input }],\r\n            dayTemplate: [{ type: core.Input }],\r\n            dayTemplateData: [{ type: core.Input }],\r\n            displayMonths: [{ type: core.Input }],\r\n            firstDayOfWeek: [{ type: core.Input }],\r\n            footerTemplate: [{ type: core.Input }],\r\n            markDisabled: [{ type: core.Input }],\r\n            minDate: [{ type: core.Input }],\r\n            maxDate: [{ type: core.Input }],\r\n            navigation: [{ type: core.Input }],\r\n            outsideDays: [{ type: core.Input }],\r\n            placement: [{ type: core.Input }],\r\n            restoreFocus: [{ type: core.Input }],\r\n            showWeekdays: [{ type: core.Input }],\r\n            showWeekNumbers: [{ type: core.Input }],\r\n            startDate: [{ type: core.Input }],\r\n            container: [{ type: core.Input }],\r\n            positionTarget: [{ type: core.Input }],\r\n            dateSelect: [{ type: core.Output }],\r\n            navigate: [{ type: core.Output }],\r\n            closed: [{ type: core.Output }],\r\n            disabled: [{ type: core.Input }]\r\n        };\r\n        return NgbInputDatepicker;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbDatepickerDayView = /** @class */ (function () {\r\n        function NgbDatepickerDayView(i18n) {\r\n            this.i18n = i18n;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerDayView.prototype.isMuted = /**\r\n         * @return {?}\r\n         */\r\n        function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };\r\n        NgbDatepickerDayView.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: '[ngbDatepickerDayView]',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: {\r\n                            'class': 'btn-light',\r\n                            '[class.bg-primary]': 'selected',\r\n                            '[class.text-white]': 'selected',\r\n                            '[class.text-muted]': 'isMuted()',\r\n                            '[class.outside]': 'isMuted()',\r\n                            '[class.active]': 'focused'\r\n                        },\r\n                        template: \"{{ i18n.getDayNumerals(date) }}\",\r\n                        styles: [\"[ngbDatepickerDayView]{text-align:center;width:2rem;height:2rem;line-height:2rem;border-radius:.25rem;background:0 0}[ngbDatepickerDayView].outside{opacity:.5}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepickerDayView.ctorParameters = function () { return [\r\n            { type: NgbDatepickerI18n }\r\n        ]; };\r\n        NgbDatepickerDayView.propDecorators = {\r\n            currentMonth: [{ type: core.Input }],\r\n            date: [{ type: core.Input }],\r\n            disabled: [{ type: core.Input }],\r\n            focused: [{ type: core.Input }],\r\n            selected: [{ type: core.Input }]\r\n        };\r\n        return NgbDatepickerDayView;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbDatepickerNavigationSelect = /** @class */ (function () {\r\n        function NgbDatepickerNavigationSelect(i18n, _renderer) {\r\n            this.i18n = i18n;\r\n            this._renderer = _renderer;\r\n            this.select = new core.EventEmitter();\r\n            this._month = -1;\r\n            this._year = -1;\r\n        }\r\n        /**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerNavigationSelect.prototype.changeMonth = /**\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        function (month) { this.select.emit(new NgbDate(this.date.year, toInteger(month), 1)); };\r\n        /**\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerNavigationSelect.prototype.changeYear = /**\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        function (year) { this.select.emit(new NgbDate(toInteger(year), this.date.month, 1)); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerNavigationSelect.prototype.ngAfterViewChecked = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.date) {\r\n                if (this.date.month !== this._month) {\r\n                    this._month = this.date.month;\r\n                    this._renderer.setProperty(this.monthSelect.nativeElement, 'value', this._month);\r\n                }\r\n                if (this.date.year !== this._year) {\r\n                    this._year = this.date.year;\r\n                    this._renderer.setProperty(this.yearSelect.nativeElement, 'value', this._year);\r\n                }\r\n            }\r\n        };\r\n        NgbDatepickerNavigationSelect.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-datepicker-navigation-select',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n    <select #month\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      i18n-aria-label=\\\"@@ngb.datepicker.select-month\\\" aria-label=\\\"Select month\\\"\\n      i18n-title=\\\"@@ngb.datepicker.select-month\\\" title=\\\"Select month\\\"\\n      (change)=\\\"changeMonth($event.target.value)\\\">\\n        <option *ngFor=\\\"let m of months\\\" [attr.aria-label]=\\\"i18n.getMonthFullName(m, date?.year)\\\"\\n                [value]=\\\"m\\\">{{ i18n.getMonthShortName(m, date?.year) }}</option>\\n    </select><select #year\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      i18n-aria-label=\\\"@@ngb.datepicker.select-year\\\" aria-label=\\\"Select year\\\"\\n      i18n-title=\\\"@@ngb.datepicker.select-year\\\" title=\\\"Select year\\\"\\n      (change)=\\\"changeYear($event.target.value)\\\">\\n        <option *ngFor=\\\"let y of years\\\" [value]=\\\"y\\\">{{ i18n.getYearNumerals(y) }}</option>\\n    </select>\\n  \",\r\n                        styles: [\"ngb-datepicker-navigation-select>.custom-select{-ms-flex:1 1 auto;flex:1 1 auto;padding:0 .5rem;font-size:.875rem;height:1.85rem}ngb-datepicker-navigation-select>.custom-select:focus{z-index:1}ngb-datepicker-navigation-select>.custom-select::-ms-value{background-color:transparent!important}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDatepickerNavigationSelect.ctorParameters = function () { return [\r\n            { type: NgbDatepickerI18n },\r\n            { type: core.Renderer2 }\r\n        ]; };\r\n        NgbDatepickerNavigationSelect.propDecorators = {\r\n            date: [{ type: core.Input }],\r\n            disabled: [{ type: core.Input }],\r\n            months: [{ type: core.Input }],\r\n            years: [{ type: core.Input }],\r\n            select: [{ type: core.Output }],\r\n            monthSelect: [{ type: core.ViewChild, args: ['month', { static: true, read: core.ElementRef },] }],\r\n            yearSelect: [{ type: core.ViewChild, args: ['year', { static: true, read: core.ElementRef },] }]\r\n        };\r\n        return NgbDatepickerNavigationSelect;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @abstract\r\n     */\r\n    var NgbCalendarHijri = /** @class */ (function (_super) {\r\n        __extends(NgbCalendarHijri, _super);\r\n        function NgbCalendarHijri() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getDaysPerWeek = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 7; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getMonths = /**\r\n         * @return {?}\r\n         */\r\n        function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getWeeksPerMonth = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 6; };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getNext = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            date = new NgbDate(date.year, date.month, date.day);\r\n            switch (period) {\r\n                case 'y':\r\n                    date = this._setYear(date, date.year + number);\r\n                    date.month = 1;\r\n                    date.day = 1;\r\n                    return date;\r\n                case 'm':\r\n                    date = this._setMonth(date, date.month + number);\r\n                    date.day = 1;\r\n                    return date;\r\n                case 'd':\r\n                    return this._setDay(date, date.day + number);\r\n                default:\r\n                    return date;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getPrev = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            return this.getNext(date, period, -number);\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getWeekday = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var day = this.toGregorian(date).getDay();\r\n            // in JS Date Sun=0, in ISO 8601 Sun=7\r\n            return day === 0 ? 7 : day;\r\n        };\r\n        /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getWeekNumber = /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        function (week, firstDayOfWeek) {\r\n            // in JS Date Sun=0, in ISO 8601 Sun=7\r\n            if (firstDayOfWeek === 7) {\r\n                firstDayOfWeek = 0;\r\n            }\r\n            /** @type {?} */\r\n            var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n            /** @type {?} */\r\n            var date = week[thursdayIndex];\r\n            /** @type {?} */\r\n            var jsDate = this.toGregorian(date);\r\n            jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n            // Thursday\r\n            /** @type {?} */\r\n            var time = jsDate.getTime();\r\n            /** @type {?} */\r\n            var MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1));\r\n            return Math.floor(Math.round((time - MuhDate.getTime()) / 86400000) / 7) + 1;\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.getToday = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.fromGregorian(new Date()); };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype.isValid = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\r\n                !isNaN(this.toGregorian(date).getTime());\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} date\r\n         * @param {?} day\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype._setDay = /**\r\n         * @private\r\n         * @param {?} date\r\n         * @param {?} day\r\n         * @return {?}\r\n         */\r\n        function (date, day) {\r\n            day = +day;\r\n            /** @type {?} */\r\n            var mDays = this.getDaysPerMonth(date.month, date.year);\r\n            if (day <= 0) {\r\n                while (day <= 0) {\r\n                    date = this._setMonth(date, date.month - 1);\r\n                    mDays = this.getDaysPerMonth(date.month, date.year);\r\n                    day += mDays;\r\n                }\r\n            }\r\n            else if (day > mDays) {\r\n                while (day > mDays) {\r\n                    day -= mDays;\r\n                    date = this._setMonth(date, date.month + 1);\r\n                    mDays = this.getDaysPerMonth(date.month, date.year);\r\n                }\r\n            }\r\n            date.day = day;\r\n            return date;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} date\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype._setMonth = /**\r\n         * @private\r\n         * @param {?} date\r\n         * @param {?} month\r\n         * @return {?}\r\n         */\r\n        function (date, month) {\r\n            month = +month;\r\n            date.year = date.year + Math.floor((month - 1) / 12);\r\n            date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\r\n            return date;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} date\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHijri.prototype._setYear = /**\r\n         * @private\r\n         * @param {?} date\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        function (date, year) {\r\n            date.year = +year;\r\n            return date;\r\n        };\r\n        NgbCalendarHijri.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbCalendarHijri;\r\n    }(NgbCalendar));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * Checks if islamic year is a leap year\r\n     * @param {?} hYear\r\n     * @return {?}\r\n     */\r\n    function isIslamicLeapYear(hYear) {\r\n        return (14 + 11 * hYear) % 30 < 11;\r\n    }\r\n    /**\r\n     * Checks if gregorian years is a leap year\r\n     * @param {?} gDate\r\n     * @return {?}\r\n     */\r\n    function isGregorianLeapYear(gDate) {\r\n        /** @type {?} */\r\n        var year = gDate.getFullYear();\r\n        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\r\n    }\r\n    /**\r\n     * Returns the start of Hijri Month.\r\n     * `hMonth` is 0 for Muharram, 1 for Safar, etc.\r\n     * `hYear` is any Hijri hYear.\r\n     * @param {?} hYear\r\n     * @param {?} hMonth\r\n     * @return {?}\r\n     */\r\n    function getIslamicMonthStart(hYear, hMonth) {\r\n        return Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30.0);\r\n    }\r\n    /**\r\n     * Returns the start of Hijri year.\r\n     * `year` is any Hijri year.\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function getIslamicYearStart(year) {\r\n        return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\r\n    }\r\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\r\n    function mod(a, b) {\r\n        return a - b * Math.floor(a / b);\r\n    }\r\n    /**\r\n     * The civil calendar is one type of Hijri calendars used in islamic countries.\r\n     * Uses a fixed cycle of alternating 29- and 30-day months,\r\n     * with a leap day added to the last month of 11 out of every 30 years.\r\n     * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\r\n     * All the calculations here are based on the equations from \"Calendrical Calculations\" By Edward M. Reingold, Nachum\r\n     * Dershowitz.\r\n     * @type {?}\r\n     */\r\n    var GREGORIAN_EPOCH = 1721425.5;\r\n    /** @type {?} */\r\n    var ISLAMIC_EPOCH = 1948439.5;\r\n    var NgbCalendarIslamicCivil = /** @class */ (function (_super) {\r\n        __extends(NgbCalendarIslamicCivil, _super);\r\n        function NgbCalendarIslamicCivil() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\r\n         * `gDate` is a JS Date to be converted to Hijri.\r\n         */\r\n        /**\r\n         * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\r\n         * `gDate` is a JS Date to be converted to Hijri.\r\n         * @param {?} gDate\r\n         * @return {?}\r\n         */\r\n        NgbCalendarIslamicCivil.prototype.fromGregorian = /**\r\n         * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\r\n         * `gDate` is a JS Date to be converted to Hijri.\r\n         * @param {?} gDate\r\n         * @return {?}\r\n         */\r\n        function (gDate) {\r\n            /** @type {?} */\r\n            var gYear = gDate.getFullYear();\r\n            /** @type {?} */\r\n            var gMonth = gDate.getMonth();\r\n            /** @type {?} */\r\n            var gDay = gDate.getDate();\r\n            /** @type {?} */\r\n            var julianDay = GREGORIAN_EPOCH - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) +\r\n                -Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\r\n                Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear(gDate) ? -1 : -2) + gDay);\r\n            julianDay = Math.floor(julianDay) + 0.5;\r\n            /** @type {?} */\r\n            var days = julianDay - ISLAMIC_EPOCH;\r\n            /** @type {?} */\r\n            var hYear = Math.floor((30 * days + 10646) / 10631.0);\r\n            /** @type {?} */\r\n            var hMonth = Math.ceil((days - 29 - getIslamicYearStart(hYear)) / 29.5);\r\n            hMonth = Math.min(hMonth, 11);\r\n            /** @type {?} */\r\n            var hDay = Math.ceil(days - getIslamicMonthStart(hYear, hMonth)) + 1;\r\n            return new NgbDate(hYear, hMonth + 1, hDay);\r\n        };\r\n        /**\r\n         * Returns the equivalent JS date value for a give input islamic(civil) date.\r\n         * `hDate` is an islamic(civil) date to be converted to Gregorian.\r\n         */\r\n        /**\r\n         * Returns the equivalent JS date value for a give input islamic(civil) date.\r\n         * `hDate` is an islamic(civil) date to be converted to Gregorian.\r\n         * @param {?} hDate\r\n         * @return {?}\r\n         */\r\n        NgbCalendarIslamicCivil.prototype.toGregorian = /**\r\n         * Returns the equivalent JS date value for a give input islamic(civil) date.\r\n         * `hDate` is an islamic(civil) date to be converted to Gregorian.\r\n         * @param {?} hDate\r\n         * @return {?}\r\n         */\r\n        function (hDate) {\r\n            /** @type {?} */\r\n            var hYear = hDate.year;\r\n            /** @type {?} */\r\n            var hMonth = hDate.month - 1;\r\n            /** @type {?} */\r\n            var hDay = hDate.day;\r\n            /** @type {?} */\r\n            var julianDay = hDay + Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30) + ISLAMIC_EPOCH - 1;\r\n            /** @type {?} */\r\n            var wjd = Math.floor(julianDay - 0.5) + 0.5;\r\n            /** @type {?} */\r\n            var depoch = wjd - GREGORIAN_EPOCH;\r\n            /** @type {?} */\r\n            var quadricent = Math.floor(depoch / 146097);\r\n            /** @type {?} */\r\n            var dqc = mod(depoch, 146097);\r\n            /** @type {?} */\r\n            var cent = Math.floor(dqc / 36524);\r\n            /** @type {?} */\r\n            var dcent = mod(dqc, 36524);\r\n            /** @type {?} */\r\n            var quad = Math.floor(dcent / 1461);\r\n            /** @type {?} */\r\n            var dquad = mod(dcent, 1461);\r\n            /** @type {?} */\r\n            var yindex = Math.floor(dquad / 365);\r\n            /** @type {?} */\r\n            var year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\r\n            if (!(cent === 4 || yindex === 4)) {\r\n                year++;\r\n            }\r\n            /** @type {?} */\r\n            var gYearStart = GREGORIAN_EPOCH + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n                Math.floor((year - 1) / 400);\r\n            /** @type {?} */\r\n            var yearday = wjd - gYearStart;\r\n            /** @type {?} */\r\n            var tjd = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n                Math.floor((year - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(new Date(year, 3, 1)) ? -1 : -2) + 1);\r\n            /** @type {?} */\r\n            var leapadj = wjd < tjd ? 0 : isGregorianLeapYear(new Date(year, 3, 1)) ? 1 : 2;\r\n            /** @type {?} */\r\n            var month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\r\n            /** @type {?} */\r\n            var tjd2 = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n                Math.floor((year - 1) / 400) +\r\n                Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : isGregorianLeapYear(new Date(year, month - 1, 1)) ? -1 : -2) +\r\n                    1);\r\n            /** @type {?} */\r\n            var day = wjd - tjd2 + 1;\r\n            return new Date(year, month - 1, day);\r\n        };\r\n        /**\r\n         * Returns the number of days in a specific Hijri month.\r\n         * `month` is 1 for Muharram, 2 for Safar, etc.\r\n         * `year` is any Hijri year.\r\n         */\r\n        /**\r\n         * Returns the number of days in a specific Hijri month.\r\n         * `month` is 1 for Muharram, 2 for Safar, etc.\r\n         * `year` is any Hijri year.\r\n         * @param {?} month\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        NgbCalendarIslamicCivil.prototype.getDaysPerMonth = /**\r\n         * Returns the number of days in a specific Hijri month.\r\n         * `month` is 1 for Muharram, 2 for Safar, etc.\r\n         * `year` is any Hijri year.\r\n         * @param {?} month\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        function (month, year) {\r\n            year = year + Math.floor(month / 13);\r\n            month = ((month - 1) % 12) + 1;\r\n            /** @type {?} */\r\n            var length = 29 + month % 2;\r\n            if (month === 12 && isIslamicLeapYear(year)) {\r\n                length++;\r\n            }\r\n            return length;\r\n        };\r\n        NgbCalendarIslamicCivil.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbCalendarIslamicCivil;\r\n    }(NgbCalendarHijri));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * Umalqura calendar is one type of Hijri calendars used in islamic countries.\r\n     * This Calendar is used by Saudi Arabia for administrative purpose.\r\n     * Unlike tabular calendars, the algorithm involves astronomical calculation, but it's still deterministic.\r\n     * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\r\n     * @type {?}\r\n     */\r\n    var GREGORIAN_FIRST_DATE = new Date(1882, 10, 12);\r\n    /** @type {?} */\r\n    var GREGORIAN_LAST_DATE = new Date(2174, 10, 25);\r\n    /** @type {?} */\r\n    var HIJRI_BEGIN = 1300;\r\n    /** @type {?} */\r\n    var HIJRI_END = 1600;\r\n    /** @type {?} */\r\n    var ONE_DAY = 1000 * 60 * 60 * 24;\r\n    /** @type {?} */\r\n    var MONTH_LENGTH = [\r\n        // 1300-1304\r\n        '101010101010', '110101010100', '111011001001', '011011010100', '011011101010',\r\n        // 1305-1309\r\n        '001101101100', '101010101101', '010101010101', '011010101001', '011110010010',\r\n        // 1310-1314\r\n        '101110101001', '010111010100', '101011011010', '010101011100', '110100101101',\r\n        // 1315-1319\r\n        '011010010101', '011101001010', '101101010100', '101101101010', '010110101101',\r\n        // 1320-1324\r\n        '010010101110', '101001001111', '010100010111', '011010001011', '011010100101',\r\n        // 1325-1329\r\n        '101011010101', '001011010110', '100101011011', '010010011101', '101001001101',\r\n        // 1330-1334\r\n        '110100100110', '110110010101', '010110101100', '100110110110', '001010111010',\r\n        // 1335-1339\r\n        '101001011011', '010100101011', '101010010101', '011011001010', '101011101001',\r\n        // 1340-1344\r\n        '001011110100', '100101110110', '001010110110', '100101010110', '101011001010',\r\n        // 1345-1349\r\n        '101110100100', '101111010010', '010111011001', '001011011100', '100101101101',\r\n        // 1350-1354\r\n        '010101001101', '101010100101', '101101010010', '101110100101', '010110110100',\r\n        // 1355-1359\r\n        '100110110110', '010101010111', '001010010111', '010101001011', '011010100011',\r\n        // 1360-1364\r\n        '011101010010', '101101100101', '010101101010', '101010101011', '010100101011',\r\n        // 1365-1369\r\n        '110010010101', '110101001010', '110110100101', '010111001010', '101011010110',\r\n        // 1370-1374\r\n        '100101010111', '010010101011', '100101001011', '101010100101', '101101010010',\r\n        // 1375-1379\r\n        '101101101010', '010101110101', '001001110110', '100010110111', '010001011011',\r\n        // 1380-1384\r\n        '010101010101', '010110101001', '010110110100', '100111011010', '010011011101',\r\n        // 1385-1389\r\n        '001001101110', '100100110110', '101010101010', '110101010100', '110110110010',\r\n        // 1390-1394\r\n        '010111010101', '001011011010', '100101011011', '010010101011', '101001010101',\r\n        // 1395-1399\r\n        '101101001001', '101101100100', '101101110001', '010110110100', '101010110101',\r\n        // 1400-1404\r\n        '101001010101', '110100100101', '111010010010', '111011001001', '011011010100',\r\n        // 1405-1409\r\n        '101011101001', '100101101011', '010010101011', '101010010011', '110101001001',\r\n        // 1410-1414\r\n        '110110100100', '110110110010', '101010111001', '010010111010', '101001011011',\r\n        // 1415-1419\r\n        '010100101011', '101010010101', '101100101010', '101101010101', '010101011100',\r\n        // 1420-1424\r\n        '010010111101', '001000111101', '100100011101', '101010010101', '101101001010',\r\n        // 1425-1429\r\n        '101101011010', '010101101101', '001010110110', '100100111011', '010010011011',\r\n        // 1430-1434\r\n        '011001010101', '011010101001', '011101010100', '101101101010', '010101101100',\r\n        // 1435-1439\r\n        '101010101101', '010101010101', '101100101001', '101110010010', '101110101001',\r\n        // 1440-1444\r\n        '010111010100', '101011011010', '010101011010', '101010101011', '010110010101',\r\n        // 1445-1449\r\n        '011101001001', '011101100100', '101110101010', '010110110101', '001010110110',\r\n        // 1450-1454\r\n        '101001010110', '111001001101', '101100100101', '101101010010', '101101101010',\r\n        // 1455-1459\r\n        '010110101101', '001010101110', '100100101111', '010010010111', '011001001011',\r\n        // 1460-1464\r\n        '011010100101', '011010101100', '101011010110', '010101011101', '010010011101',\r\n        // 1465-1469\r\n        '101001001101', '110100010110', '110110010101', '010110101010', '010110110101',\r\n        // 1470-1474\r\n        '001011011010', '100101011011', '010010101101', '010110010101', '011011001010',\r\n        // 1475-1479\r\n        '011011100100', '101011101010', '010011110101', '001010110110', '100101010110',\r\n        // 1480-1484\r\n        '101010101010', '101101010100', '101111010010', '010111011001', '001011101010',\r\n        // 1485-1489\r\n        '100101101101', '010010101101', '101010010101', '101101001010', '101110100101',\r\n        // 1490-1494\r\n        '010110110010', '100110110101', '010011010110', '101010010111', '010101000111',\r\n        // 1495-1499\r\n        '011010010011', '011101001001', '101101010101', '010101101010', '101001101011',\r\n        // 1500-1504\r\n        '010100101011', '101010001011', '110101000110', '110110100011', '010111001010',\r\n        // 1505-1509\r\n        '101011010110', '010011011011', '001001101011', '100101001011', '101010100101',\r\n        // 1510-1514\r\n        '101101010010', '101101101001', '010101110101', '000101110110', '100010110111',\r\n        // 1515-1519\r\n        '001001011011', '010100101011', '010101100101', '010110110100', '100111011010',\r\n        // 1520-1524\r\n        '010011101101', '000101101101', '100010110110', '101010100110', '110101010010',\r\n        // 1525-1529\r\n        '110110101001', '010111010100', '101011011010', '100101011011', '010010101011',\r\n        // 1530-1534\r\n        '011001010011', '011100101001', '011101100010', '101110101001', '010110110010',\r\n        // 1535-1539\r\n        '101010110101', '010101010101', '101100100101', '110110010010', '111011001001',\r\n        // 1540-1544\r\n        '011011010010', '101011101001', '010101101011', '010010101011', '101001010101',\r\n        // 1545-1549\r\n        '110100101001', '110101010100', '110110101010', '100110110101', '010010111010',\r\n        // 1550-1554\r\n        '101000111011', '010010011011', '101001001101', '101010101010', '101011010101',\r\n        // 1555-1559\r\n        '001011011010', '100101011101', '010001011110', '101000101110', '110010011010',\r\n        // 1560-1564\r\n        '110101010101', '011010110010', '011010111001', '010010111010', '101001011101',\r\n        // 1565-1569\r\n        '010100101101', '101010010101', '101101010010', '101110101000', '101110110100',\r\n        // 1570-1574\r\n        '010110111001', '001011011010', '100101011010', '101101001010', '110110100100',\r\n        // 1575-1579\r\n        '111011010001', '011011101000', '101101101010', '010101101101', '010100110101',\r\n        // 1580-1584\r\n        '011010010101', '110101001010', '110110101000', '110111010100', '011011011010',\r\n        // 1585-1589\r\n        '010101011011', '001010011101', '011000101011', '101100010101', '101101001010',\r\n        // 1590-1594\r\n        '101110010101', '010110101010', '101010101110', '100100101110', '110010001111',\r\n        // 1595-1599\r\n        '010100100111', '011010010101', '011010101010', '101011010110', '010101011101',\r\n        // 1600\r\n        '001010011101'\r\n    ];\r\n    /**\r\n     * @param {?} date1\r\n     * @param {?} date2\r\n     * @return {?}\r\n     */\r\n    function getDaysDiff(date1, date2) {\r\n        // Ignores the time part in date1 and date2:\r\n        /** @type {?} */\r\n        var time1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());\r\n        /** @type {?} */\r\n        var time2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());\r\n        /** @type {?} */\r\n        var diff = Math.abs(time1 - time2);\r\n        return Math.round(diff / ONE_DAY);\r\n    }\r\n    var NgbCalendarIslamicUmalqura = /** @class */ (function (_super) {\r\n        __extends(NgbCalendarIslamicUmalqura, _super);\r\n        function NgbCalendarIslamicUmalqura() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n        * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\r\n        * `gdate` is s JS Date to be converted to Hijri.\r\n        */\r\n        /**\r\n         * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\r\n         * `gdate` is s JS Date to be converted to Hijri.\r\n         * @param {?} gDate\r\n         * @return {?}\r\n         */\r\n        NgbCalendarIslamicUmalqura.prototype.fromGregorian = /**\r\n         * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\r\n         * `gdate` is s JS Date to be converted to Hijri.\r\n         * @param {?} gDate\r\n         * @return {?}\r\n         */\r\n        function (gDate) {\r\n            /** @type {?} */\r\n            var hDay = 1;\r\n            /** @type {?} */\r\n            var hMonth = 0;\r\n            /** @type {?} */\r\n            var hYear = 1300;\r\n            /** @type {?} */\r\n            var daysDiff = getDaysDiff(gDate, GREGORIAN_FIRST_DATE);\r\n            if (gDate.getTime() - GREGORIAN_FIRST_DATE.getTime() >= 0 && gDate.getTime() - GREGORIAN_LAST_DATE.getTime() <= 0) {\r\n                /** @type {?} */\r\n                var year = 1300;\r\n                for (var i = 0; i < MONTH_LENGTH.length; i++, year++) {\r\n                    for (var j = 0; j < 12; j++) {\r\n                        /** @type {?} */\r\n                        var numOfDays = +MONTH_LENGTH[i][j] + 29;\r\n                        if (daysDiff <= numOfDays) {\r\n                            hDay = daysDiff + 1;\r\n                            if (hDay > numOfDays) {\r\n                                hDay = 1;\r\n                                j++;\r\n                            }\r\n                            if (j > 11) {\r\n                                j = 0;\r\n                                year++;\r\n                            }\r\n                            hMonth = j;\r\n                            hYear = year;\r\n                            return new NgbDate(hYear, hMonth + 1, hDay);\r\n                        }\r\n                        daysDiff = daysDiff - numOfDays;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return _super.prototype.fromGregorian.call(this, gDate);\r\n            }\r\n        };\r\n        /**\r\n        * Converts the current Hijri date to Gregorian.\r\n        */\r\n        /**\r\n         * Converts the current Hijri date to Gregorian.\r\n         * @param {?} hDate\r\n         * @return {?}\r\n         */\r\n        NgbCalendarIslamicUmalqura.prototype.toGregorian = /**\r\n         * Converts the current Hijri date to Gregorian.\r\n         * @param {?} hDate\r\n         * @return {?}\r\n         */\r\n        function (hDate) {\r\n            /** @type {?} */\r\n            var hYear = hDate.year;\r\n            /** @type {?} */\r\n            var hMonth = hDate.month - 1;\r\n            /** @type {?} */\r\n            var hDay = hDate.day;\r\n            /** @type {?} */\r\n            var gDate = new Date(GREGORIAN_FIRST_DATE);\r\n            /** @type {?} */\r\n            var dayDiff = hDay - 1;\r\n            if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\r\n                for (var y = 0; y < hYear - HIJRI_BEGIN; y++) {\r\n                    for (var m = 0; m < 12; m++) {\r\n                        dayDiff += +MONTH_LENGTH[y][m] + 29;\r\n                    }\r\n                }\r\n                for (var m = 0; m < hMonth; m++) {\r\n                    dayDiff += +MONTH_LENGTH[hYear - HIJRI_BEGIN][m] + 29;\r\n                }\r\n                gDate.setDate(GREGORIAN_FIRST_DATE.getDate() + dayDiff);\r\n            }\r\n            else {\r\n                gDate = _super.prototype.toGregorian.call(this, hDate);\r\n            }\r\n            return gDate;\r\n        };\r\n        /**\r\n        * Returns the number of days in a specific Hijri hMonth.\r\n        * `hMonth` is 1 for Muharram, 2 for Safar, etc.\r\n        * `hYear` is any Hijri hYear.\r\n        */\r\n        /**\r\n         * Returns the number of days in a specific Hijri hMonth.\r\n         * `hMonth` is 1 for Muharram, 2 for Safar, etc.\r\n         * `hYear` is any Hijri hYear.\r\n         * @param {?} hMonth\r\n         * @param {?} hYear\r\n         * @return {?}\r\n         */\r\n        NgbCalendarIslamicUmalqura.prototype.getDaysPerMonth = /**\r\n         * Returns the number of days in a specific Hijri hMonth.\r\n         * `hMonth` is 1 for Muharram, 2 for Safar, etc.\r\n         * `hYear` is any Hijri hYear.\r\n         * @param {?} hMonth\r\n         * @param {?} hYear\r\n         * @return {?}\r\n         */\r\n        function (hMonth, hYear) {\r\n            if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\r\n                /** @type {?} */\r\n                var pos = hYear - HIJRI_BEGIN;\r\n                return +MONTH_LENGTH[pos][hMonth - 1] + 29;\r\n            }\r\n            return _super.prototype.getDaysPerMonth.call(this, hMonth, hYear);\r\n        };\r\n        NgbCalendarIslamicUmalqura.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbCalendarIslamicUmalqura;\r\n    }(NgbCalendarIslamicCivil));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * Returns the equivalent JS date value for a give input Jalali date.\r\n     * `jalaliDate` is an Jalali date to be converted to Gregorian.\r\n     * @param {?} jalaliDate\r\n     * @return {?}\r\n     */\r\n    function toGregorian(jalaliDate) {\r\n        /** @type {?} */\r\n        var jdn = jalaliToJulian(jalaliDate.year, jalaliDate.month, jalaliDate.day);\r\n        /** @type {?} */\r\n        var date = julianToGregorian(jdn);\r\n        date.setHours(6, 30, 3, 200);\r\n        return date;\r\n    }\r\n    /**\r\n     * Returns the equivalent jalali date value for a give input Gregorian date.\r\n     * `gdate` is a JS Date to be converted to jalali.\r\n     * utc to local\r\n     * @param {?} gdate\r\n     * @return {?}\r\n     */\r\n    function fromGregorian(gdate) {\r\n        /** @type {?} */\r\n        var g2d = gregorianToJulian(gdate.getFullYear(), gdate.getMonth() + 1, gdate.getDate());\r\n        return julianToJalali(g2d);\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} yearValue\r\n     * @return {?}\r\n     */\r\n    function setJalaliYear(date, yearValue) {\r\n        date.year = +yearValue;\r\n        return date;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} month\r\n     * @return {?}\r\n     */\r\n    function setJalaliMonth(date, month) {\r\n        month = +month;\r\n        date.year = date.year + Math.floor((month - 1) / 12);\r\n        date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\r\n        return date;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} day\r\n     * @return {?}\r\n     */\r\n    function setJalaliDay(date, day) {\r\n        /** @type {?} */\r\n        var mDays = getDaysPerMonth(date.month, date.year);\r\n        if (day <= 0) {\r\n            while (day <= 0) {\r\n                date = setJalaliMonth(date, date.month - 1);\r\n                mDays = getDaysPerMonth(date.month, date.year);\r\n                day += mDays;\r\n            }\r\n        }\r\n        else if (day > mDays) {\r\n            while (day > mDays) {\r\n                day -= mDays;\r\n                date = setJalaliMonth(date, date.month + 1);\r\n                mDays = getDaysPerMonth(date.month, date.year);\r\n            }\r\n        }\r\n        date.day = day;\r\n        return date;\r\n    }\r\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\r\n    function mod$1(a, b) {\r\n        return a - b * Math.floor(a / b);\r\n    }\r\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\r\n    function div(a, b) {\r\n        return Math.trunc(a / b);\r\n    }\r\n    /*\r\n     This function determines if the Jalali (Persian) year is\r\n     leap (366-day long) or is the common year (365 days), and\r\n     finds the day in March (Gregorian calendar) of the first\r\n     day of the Jalali year (jalaliYear).\r\n     @param jalaliYear Jalali calendar year (-61 to 3177)\r\n     @return\r\n     leap: number of years since the last leap year (0 to 4)\r\n     gYear: Gregorian year of the beginning of Jalali year\r\n     march: the March day of Farvardin the 1st (1st day of jalaliYear)\r\n     @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\r\n     @see: http://www.fourmilab.ch/documents/calendar/\r\n     */\r\n    /**\r\n     * @param {?} jalaliYear\r\n     * @return {?}\r\n     */\r\n    function jalCal(jalaliYear) {\r\n        // Jalali years starting the 33-year rule.\r\n        /** @type {?} */\r\n        var breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];\r\n        /** @type {?} */\r\n        var breaksLength = breaks.length;\r\n        /** @type {?} */\r\n        var gYear = jalaliYear + 621;\r\n        /** @type {?} */\r\n        var leapJ = -14;\r\n        /** @type {?} */\r\n        var jp = breaks[0];\r\n        if (jalaliYear < jp || jalaliYear >= breaks[breaksLength - 1]) {\r\n            throw new Error('Invalid Jalali year ' + jalaliYear);\r\n        }\r\n        // Find the limiting years for the Jalali year jalaliYear.\r\n        /** @type {?} */\r\n        var jump;\r\n        for (var i = 1; i < breaksLength; i += 1) {\r\n            /** @type {?} */\r\n            var jm = breaks[i];\r\n            jump = jm - jp;\r\n            if (jalaliYear < jm) {\r\n                break;\r\n            }\r\n            leapJ = leapJ + div(jump, 33) * 8 + div(mod$1(jump, 33), 4);\r\n            jp = jm;\r\n        }\r\n        /** @type {?} */\r\n        var n = jalaliYear - jp;\r\n        // Find the number of leap years from AD 621 to the beginning\r\n        // of the current Jalali year in the Persian calendar.\r\n        leapJ = leapJ + div(n, 33) * 8 + div(mod$1(n, 33) + 3, 4);\r\n        if (mod$1(jump, 33) === 4 && jump - n === 4) {\r\n            leapJ += 1;\r\n        }\r\n        // And the same in the Gregorian calendar (until the year gYear).\r\n        /** @type {?} */\r\n        var leapG = div(gYear, 4) - div((div(gYear, 100) + 1) * 3, 4) - 150;\r\n        // Determine the Gregorian date of Farvardin the 1st.\r\n        /** @type {?} */\r\n        var march = 20 + leapJ - leapG;\r\n        // Find how many years have passed since the last leap year.\r\n        if (jump - n < 6) {\r\n            n = n - jump + div(jump + 4, 33) * 33;\r\n        }\r\n        /** @type {?} */\r\n        var leap = mod$1(mod$1(n + 1, 33) - 1, 4);\r\n        if (leap === -1) {\r\n            leap = 4;\r\n        }\r\n        return { leap: leap, gy: gYear, march: march };\r\n    }\r\n    /*\r\n     Calculates Gregorian and Julian calendar dates from the Julian Day number\r\n     (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\r\n     calendars) to some millions years ahead of the present.\r\n     @param jdn Julian Day number\r\n     @return\r\n     gYear: Calendar year (years BC numbered 0, -1, -2, ...)\r\n     gMonth: Calendar month (1 to 12)\r\n     gDay: Calendar day of the month M (1 to 28/29/30/31)\r\n     */\r\n    /**\r\n     * @param {?} julianDayNumber\r\n     * @return {?}\r\n     */\r\n    function julianToGregorian(julianDayNumber) {\r\n        /** @type {?} */\r\n        var j = 4 * julianDayNumber + 139361631;\r\n        j = j + div(div(4 * julianDayNumber + 183187720, 146097) * 3, 4) * 4 - 3908;\r\n        /** @type {?} */\r\n        var i = div(mod$1(j, 1461), 4) * 5 + 308;\r\n        /** @type {?} */\r\n        var gDay = div(mod$1(i, 153), 5) + 1;\r\n        /** @type {?} */\r\n        var gMonth = mod$1(div(i, 153), 12) + 1;\r\n        /** @type {?} */\r\n        var gYear = div(j, 1461) - 100100 + div(8 - gMonth, 6);\r\n        return new Date(gYear, gMonth - 1, gDay);\r\n    }\r\n    /*\r\n     Converts a date of the Jalali calendar to the Julian Day number.\r\n     @param jy Jalali year (1 to 3100)\r\n     @param jm Jalali month (1 to 12)\r\n     @param jd Jalali day (1 to 29/31)\r\n     @return Julian Day number\r\n     */\r\n    /**\r\n     * @param {?} gy\r\n     * @param {?} gm\r\n     * @param {?} gd\r\n     * @return {?}\r\n     */\r\n    function gregorianToJulian(gy, gm, gd) {\r\n        /** @type {?} */\r\n        var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod$1(gm + 9, 12) + 2, 5) + gd - 34840408;\r\n        d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\r\n        return d;\r\n    }\r\n    /*\r\n     Converts the Julian Day number to a date in the Jalali calendar.\r\n     @param julianDayNumber Julian Day number\r\n     @return\r\n     jalaliYear: Jalali year (1 to 3100)\r\n     jalaliMonth: Jalali month (1 to 12)\r\n     jalaliDay: Jalali day (1 to 29/31)\r\n     */\r\n    /**\r\n     * @param {?} julianDayNumber\r\n     * @return {?}\r\n     */\r\n    function julianToJalali(julianDayNumber) {\r\n        /** @type {?} */\r\n        var gy = julianToGregorian(julianDayNumber).getFullYear() // Calculate Gregorian year (gy).\r\n        ;\r\n        /** @type {?} */\r\n        var jalaliYear = gy - 621;\r\n        /** @type {?} */\r\n        var r = jalCal(jalaliYear);\r\n        /** @type {?} */\r\n        var gregorianDay = gregorianToJulian(gy, 3, r.march);\r\n        /** @type {?} */\r\n        var jalaliDay;\r\n        /** @type {?} */\r\n        var jalaliMonth;\r\n        /** @type {?} */\r\n        var numberOfDays;\r\n        // Find number of days that passed since 1 Farvardin.\r\n        numberOfDays = julianDayNumber - gregorianDay;\r\n        if (numberOfDays >= 0) {\r\n            if (numberOfDays <= 185) {\r\n                // The first 6 months.\r\n                jalaliMonth = 1 + div(numberOfDays, 31);\r\n                jalaliDay = mod$1(numberOfDays, 31) + 1;\r\n                return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\r\n            }\r\n            else {\r\n                // The remaining months.\r\n                numberOfDays -= 186;\r\n            }\r\n        }\r\n        else {\r\n            // Previous Jalali year.\r\n            jalaliYear -= 1;\r\n            numberOfDays += 179;\r\n            if (r.leap === 1) {\r\n                numberOfDays += 1;\r\n            }\r\n        }\r\n        jalaliMonth = 7 + div(numberOfDays, 30);\r\n        jalaliDay = mod$1(numberOfDays, 30) + 1;\r\n        return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\r\n    }\r\n    /*\r\n     Converts a date of the Jalali calendar to the Julian Day number.\r\n     @param jYear Jalali year (1 to 3100)\r\n     @param jMonth Jalali month (1 to 12)\r\n     @param jDay Jalali day (1 to 29/31)\r\n     @return Julian Day number\r\n     */\r\n    /**\r\n     * @param {?} jYear\r\n     * @param {?} jMonth\r\n     * @param {?} jDay\r\n     * @return {?}\r\n     */\r\n    function jalaliToJulian(jYear, jMonth, jDay) {\r\n        /** @type {?} */\r\n        var r = jalCal(jYear);\r\n        return gregorianToJulian(r.gy, 3, r.march) + (jMonth - 1) * 31 - div(jMonth, 7) * (jMonth - 7) + jDay - 1;\r\n    }\r\n    /**\r\n     * Returns the number of days in a specific jalali month.\r\n     * @param {?} month\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function getDaysPerMonth(month, year) {\r\n        if (month <= 6) {\r\n            return 31;\r\n        }\r\n        if (month <= 11) {\r\n            return 30;\r\n        }\r\n        if (jalCal(year).leap === 0) {\r\n            return 30;\r\n        }\r\n        return 29;\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbCalendarPersian = /** @class */ (function (_super) {\r\n        __extends(NgbCalendarPersian, _super);\r\n        function NgbCalendarPersian() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getDaysPerWeek = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 7; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getMonths = /**\r\n         * @return {?}\r\n         */\r\n        function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getWeeksPerMonth = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 6; };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getNext = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            date = new NgbDate(date.year, date.month, date.day);\r\n            switch (period) {\r\n                case 'y':\r\n                    date = setJalaliYear(date, date.year + number);\r\n                    date.month = 1;\r\n                    date.day = 1;\r\n                    return date;\r\n                case 'm':\r\n                    date = setJalaliMonth(date, date.month + number);\r\n                    date.day = 1;\r\n                    return date;\r\n                case 'd':\r\n                    return setJalaliDay(date, date.day + number);\r\n                default:\r\n                    return date;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getPrev = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            return this.getNext(date, period, -number);\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getWeekday = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var day = toGregorian(date).getDay();\r\n            // in JS Date Sun=0, in ISO 8601 Sun=7\r\n            return day === 0 ? 7 : day;\r\n        };\r\n        /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getWeekNumber = /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        function (week, firstDayOfWeek) {\r\n            // in JS Date Sun=0, in ISO 8601 Sun=7\r\n            if (firstDayOfWeek === 7) {\r\n                firstDayOfWeek = 0;\r\n            }\r\n            /** @type {?} */\r\n            var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n            /** @type {?} */\r\n            var date = week[thursdayIndex];\r\n            /** @type {?} */\r\n            var jsDate = toGregorian(date);\r\n            jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n            // Thursday\r\n            /** @type {?} */\r\n            var time = jsDate.getTime();\r\n            /** @type {?} */\r\n            var startDate = toGregorian(new NgbDate(date.year, 1, 1));\r\n            return Math.floor(Math.round((time - startDate.getTime()) / 86400000) / 7) + 1;\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.getToday = /**\r\n         * @return {?}\r\n         */\r\n        function () { return fromGregorian(new Date()); };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarPersian.prototype.isValid = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) &&\r\n                !isNaN(toGregorian(date).getTime());\r\n        };\r\n        NgbCalendarPersian.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbCalendarPersian;\r\n    }(NgbCalendar));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var PARTS_PER_HOUR = 1080;\r\n    /** @type {?} */\r\n    var PARTS_PER_DAY = 24 * PARTS_PER_HOUR;\r\n    /** @type {?} */\r\n    var PARTS_FRACTIONAL_MONTH = 12 * PARTS_PER_HOUR + 793;\r\n    /** @type {?} */\r\n    var PARTS_PER_MONTH = 29 * PARTS_PER_DAY + PARTS_FRACTIONAL_MONTH;\r\n    /** @type {?} */\r\n    var BAHARAD = 11 * PARTS_PER_HOUR + 204;\r\n    /** @type {?} */\r\n    var HEBREW_DAY_ON_JAN_1_1970 = 2092591;\r\n    /** @type {?} */\r\n    var GREGORIAN_EPOCH$1 = 1721425.5;\r\n    /**\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function isGregorianLeapYear$1(year) {\r\n        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\r\n    }\r\n    /**\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function numberOfFirstDayInYear(year) {\r\n        /** @type {?} */\r\n        var monthsBeforeYear = Math.floor((235 * year - 234) / 19);\r\n        /** @type {?} */\r\n        var fractionalMonthsBeforeYear = monthsBeforeYear * PARTS_FRACTIONAL_MONTH + BAHARAD;\r\n        /** @type {?} */\r\n        var dayNumber = monthsBeforeYear * 29 + Math.floor(fractionalMonthsBeforeYear / PARTS_PER_DAY);\r\n        /** @type {?} */\r\n        var timeOfDay = fractionalMonthsBeforeYear % PARTS_PER_DAY;\r\n        /** @type {?} */\r\n        var dayOfWeek = dayNumber % 7;\r\n        if (dayOfWeek === 2 || dayOfWeek === 4 || dayOfWeek === 6) {\r\n            dayNumber++;\r\n            dayOfWeek = dayNumber % 7;\r\n        }\r\n        if (dayOfWeek === 1 && timeOfDay > 15 * PARTS_PER_HOUR + 204 && !isHebrewLeapYear(year)) {\r\n            dayNumber += 2;\r\n        }\r\n        else if (dayOfWeek === 0 && timeOfDay > 21 * PARTS_PER_HOUR + 589 && isHebrewLeapYear(year - 1)) {\r\n            dayNumber++;\r\n        }\r\n        return dayNumber;\r\n    }\r\n    /**\r\n     * @param {?} month\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function getDaysInGregorianMonth(month, year) {\r\n        /** @type {?} */\r\n        var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        if (isGregorianLeapYear$1(year)) {\r\n            days[1]++;\r\n        }\r\n        return days[month - 1];\r\n    }\r\n    /**\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function getHebrewMonths(year) {\r\n        return isHebrewLeapYear(year) ? 13 : 12;\r\n    }\r\n    /**\r\n     * Returns the number of days in a specific Hebrew year.\r\n     * `year` is any Hebrew year.\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function getDaysInHebrewYear(year) {\r\n        return numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\r\n    }\r\n    /**\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function isHebrewLeapYear(year) {\r\n        /** @type {?} */\r\n        var b = (year * 12 + 17) % 19;\r\n        return b >= ((b < 0) ? -7 : 12);\r\n    }\r\n    /**\r\n     * Returns the number of days in a specific Hebrew month.\r\n     * `month` is 1 for Nisan, 2 for Iyar etc. Note: Hebrew leap year contains 13 months.\r\n     * `year` is any Hebrew year.\r\n     * @param {?} month\r\n     * @param {?} year\r\n     * @return {?}\r\n     */\r\n    function getDaysInHebrewMonth(month, year) {\r\n        /** @type {?} */\r\n        var yearLength = numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\r\n        /** @type {?} */\r\n        var yearType = (yearLength <= 380 ? yearLength : (yearLength - 30)) - 353;\r\n        /** @type {?} */\r\n        var leapYear = isHebrewLeapYear(year);\r\n        /** @type {?} */\r\n        var daysInMonth = leapYear ? [30, 29, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29] :\r\n            [30, 29, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29];\r\n        if (yearType > 0) {\r\n            daysInMonth[2]++; // Kislev gets an extra day in normal or complete years.\r\n        }\r\n        if (yearType > 1) {\r\n            daysInMonth[1]++; // Heshvan gets an extra day in complete years only.\r\n        }\r\n        return daysInMonth[month - 1];\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    function getDayNumberInHebrewYear(date) {\r\n        /** @type {?} */\r\n        var numberOfDay = 0;\r\n        for (var i = 1; i < date.month; i++) {\r\n            numberOfDay += getDaysInHebrewMonth(i, date.year);\r\n        }\r\n        return numberOfDay + date.day;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    function setHebrewMonth(date, val) {\r\n        /** @type {?} */\r\n        var after = val >= 0;\r\n        if (!after) {\r\n            val = -val;\r\n        }\r\n        while (val > 0) {\r\n            if (after) {\r\n                if (val > getHebrewMonths(date.year) - date.month) {\r\n                    val -= getHebrewMonths(date.year) - date.month + 1;\r\n                    date.year++;\r\n                    date.month = 1;\r\n                }\r\n                else {\r\n                    date.month += val;\r\n                    val = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (val >= date.month) {\r\n                    date.year--;\r\n                    val -= date.month;\r\n                    date.month = getHebrewMonths(date.year);\r\n                }\r\n                else {\r\n                    date.month -= val;\r\n                    val = 0;\r\n                }\r\n            }\r\n        }\r\n        return date;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    function setHebrewDay(date, val) {\r\n        /** @type {?} */\r\n        var after = val >= 0;\r\n        if (!after) {\r\n            val = -val;\r\n        }\r\n        while (val > 0) {\r\n            if (after) {\r\n                if (val > getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date)) {\r\n                    val -= getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date) + 1;\r\n                    date.year++;\r\n                    date.month = 1;\r\n                    date.day = 1;\r\n                }\r\n                else if (val > getDaysInHebrewMonth(date.month, date.year) - date.day) {\r\n                    val -= getDaysInHebrewMonth(date.month, date.year) - date.day + 1;\r\n                    date.month++;\r\n                    date.day = 1;\r\n                }\r\n                else {\r\n                    date.day += val;\r\n                    val = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (val >= date.day) {\r\n                    val -= date.day;\r\n                    date.month--;\r\n                    if (date.month === 0) {\r\n                        date.year--;\r\n                        date.month = getHebrewMonths(date.year);\r\n                    }\r\n                    date.day = getDaysInHebrewMonth(date.month, date.year);\r\n                }\r\n                else {\r\n                    date.day -= val;\r\n                    val = 0;\r\n                }\r\n            }\r\n        }\r\n        return date;\r\n    }\r\n    /**\r\n     * Returns the equivalent Hebrew date value for a give input Gregorian date.\r\n     * `gdate` is a JS Date to be converted to Hebrew date.\r\n     * @param {?} gdate\r\n     * @return {?}\r\n     */\r\n    function fromGregorian$1(gdate) {\r\n        /** @type {?} */\r\n        var date = new Date(gdate);\r\n        /** @type {?} */\r\n        var gYear = date.getFullYear();\r\n        /** @type {?} */\r\n        var gMonth = date.getMonth();\r\n        /** @type {?} */\r\n        var gDay = date.getDate();\r\n        /** @type {?} */\r\n        var julianDay = GREGORIAN_EPOCH$1 - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) -\r\n            Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\r\n            Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear$1(gYear) ? -1 : -2) + gDay);\r\n        julianDay = Math.floor(julianDay + 0.5);\r\n        /** @type {?} */\r\n        var daysSinceHebEpoch = julianDay - 347997;\r\n        /** @type {?} */\r\n        var monthsSinceHebEpoch = Math.floor(daysSinceHebEpoch * PARTS_PER_DAY / PARTS_PER_MONTH);\r\n        /** @type {?} */\r\n        var hYear = Math.floor((monthsSinceHebEpoch * 19 + 234) / 235) + 1;\r\n        /** @type {?} */\r\n        var firstDayOfThisYear = numberOfFirstDayInYear(hYear);\r\n        /** @type {?} */\r\n        var dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\r\n        while (dayOfYear < 1) {\r\n            hYear--;\r\n            firstDayOfThisYear = numberOfFirstDayInYear(hYear);\r\n            dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\r\n        }\r\n        /** @type {?} */\r\n        var hMonth = 1;\r\n        /** @type {?} */\r\n        var hDay = dayOfYear;\r\n        while (hDay > getDaysInHebrewMonth(hMonth, hYear)) {\r\n            hDay -= getDaysInHebrewMonth(hMonth, hYear);\r\n            hMonth++;\r\n        }\r\n        return new NgbDate(hYear, hMonth, hDay);\r\n    }\r\n    /**\r\n     * Returns the equivalent JS date value for a given Hebrew date.\r\n     * `hebrewDate` is an Hebrew date to be converted to Gregorian.\r\n     * @param {?} hebrewDate\r\n     * @return {?}\r\n     */\r\n    function toGregorian$1(hebrewDate) {\r\n        /** @type {?} */\r\n        var hYear = hebrewDate.year;\r\n        /** @type {?} */\r\n        var hMonth = hebrewDate.month;\r\n        /** @type {?} */\r\n        var hDay = hebrewDate.day;\r\n        /** @type {?} */\r\n        var days = numberOfFirstDayInYear(hYear);\r\n        for (var i = 1; i < hMonth; i++) {\r\n            days += getDaysInHebrewMonth(i, hYear);\r\n        }\r\n        days += hDay;\r\n        /** @type {?} */\r\n        var diffDays = days - HEBREW_DAY_ON_JAN_1_1970;\r\n        /** @type {?} */\r\n        var after = diffDays >= 0;\r\n        if (!after) {\r\n            diffDays = -diffDays;\r\n        }\r\n        /** @type {?} */\r\n        var gYear = 1970;\r\n        /** @type {?} */\r\n        var gMonth = 1;\r\n        /** @type {?} */\r\n        var gDay = 1;\r\n        while (diffDays > 0) {\r\n            if (after) {\r\n                if (diffDays >= (isGregorianLeapYear$1(gYear) ? 366 : 365)) {\r\n                    diffDays -= isGregorianLeapYear$1(gYear) ? 366 : 365;\r\n                    gYear++;\r\n                }\r\n                else if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\r\n                    diffDays -= getDaysInGregorianMonth(gMonth, gYear);\r\n                    gMonth++;\r\n                }\r\n                else {\r\n                    gDay += diffDays;\r\n                    diffDays = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (diffDays >= (isGregorianLeapYear$1(gYear - 1) ? 366 : 365)) {\r\n                    diffDays -= isGregorianLeapYear$1(gYear - 1) ? 366 : 365;\r\n                    gYear--;\r\n                }\r\n                else {\r\n                    if (gMonth > 1) {\r\n                        gMonth--;\r\n                    }\r\n                    else {\r\n                        gMonth = 12;\r\n                        gYear--;\r\n                    }\r\n                    if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\r\n                        diffDays -= getDaysInGregorianMonth(gMonth, gYear);\r\n                    }\r\n                    else {\r\n                        gDay = getDaysInGregorianMonth(gMonth, gYear) - diffDays + 1;\r\n                        diffDays = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Date(gYear, gMonth - 1, gDay);\r\n    }\r\n    /**\r\n     * @param {?} numerals\r\n     * @return {?}\r\n     */\r\n    function hebrewNumerals(numerals) {\r\n        if (!numerals) {\r\n            return '';\r\n        }\r\n        /** @type {?} */\r\n        var hArray0_9 = ['', '\\u05d0', '\\u05d1', '\\u05d2', '\\u05d3', '\\u05d4', '\\u05d5', '\\u05d6', '\\u05d7', '\\u05d8'];\r\n        /** @type {?} */\r\n        var hArray10_19 = [\r\n            '\\u05d9', '\\u05d9\\u05d0', '\\u05d9\\u05d1', '\\u05d9\\u05d2', '\\u05d9\\u05d3', '\\u05d8\\u05d5', '\\u05d8\\u05d6',\r\n            '\\u05d9\\u05d6', '\\u05d9\\u05d7', '\\u05d9\\u05d8'\r\n        ];\r\n        /** @type {?} */\r\n        var hArray20_90 = ['', '', '\\u05db', '\\u05dc', '\\u05de', '\\u05e0', '\\u05e1', '\\u05e2', '\\u05e4', '\\u05e6'];\r\n        /** @type {?} */\r\n        var hArray100_900 = [\r\n            '', '\\u05e7', '\\u05e8', '\\u05e9', '\\u05ea', '\\u05ea\\u05e7', '\\u05ea\\u05e8', '\\u05ea\\u05e9', '\\u05ea\\u05ea',\r\n            '\\u05ea\\u05ea\\u05e7'\r\n        ];\r\n        /** @type {?} */\r\n        var hArray1000_9000 = [\r\n            '', '\\u05d0', '\\u05d1', '\\u05d1\\u05d0', '\\u05d1\\u05d1', '\\u05d4', '\\u05d4\\u05d0', '\\u05d4\\u05d1',\r\n            '\\u05d4\\u05d1\\u05d0', '\\u05d4\\u05d1\\u05d1'\r\n        ];\r\n        /** @type {?} */\r\n        var geresh = '\\u05f3';\r\n        /** @type {?} */\r\n        var gershaim = '\\u05f4';\r\n        /** @type {?} */\r\n        var mem = 0;\r\n        /** @type {?} */\r\n        var result = [];\r\n        /** @type {?} */\r\n        var step = 0;\r\n        while (numerals > 0) {\r\n            /** @type {?} */\r\n            var m = numerals % 10;\r\n            if (step === 0) {\r\n                mem = m;\r\n            }\r\n            else if (step === 1) {\r\n                if (m !== 1) {\r\n                    result.unshift(hArray20_90[m], hArray0_9[mem]);\r\n                }\r\n                else {\r\n                    result.unshift(hArray10_19[mem]);\r\n                }\r\n            }\r\n            else if (step === 2) {\r\n                result.unshift(hArray100_900[m]);\r\n            }\r\n            else {\r\n                if (m !== 5) {\r\n                    result.unshift(hArray1000_9000[m], geresh, ' ');\r\n                }\r\n                break;\r\n            }\r\n            numerals = Math.floor(numerals / 10);\r\n            if (step === 0 && numerals === 0) {\r\n                result.unshift(hArray0_9[m]);\r\n            }\r\n            step++;\r\n        }\r\n        result = result.join('').split('');\r\n        if (result.length === 1) {\r\n            result.push(geresh);\r\n        }\r\n        else if (result.length > 1) {\r\n            result.splice(result.length - 1, 0, gershaim);\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * \\@since 3.2.0\r\n     */\r\n    var NgbCalendarHebrew = /** @class */ (function (_super) {\r\n        __extends(NgbCalendarHebrew, _super);\r\n        function NgbCalendarHebrew() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getDaysPerWeek = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 7; };\r\n        /**\r\n         * @param {?=} year\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getMonths = /**\r\n         * @param {?=} year\r\n         * @return {?}\r\n         */\r\n        function (year) {\r\n            if (year && isHebrewLeapYear(year)) {\r\n                return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n            }\r\n            else {\r\n                return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getWeeksPerMonth = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 6; };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.isValid = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var b = date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day);\r\n            b = b && date.month > 0 && date.month <= (isHebrewLeapYear(date.year) ? 13 : 12);\r\n            b = b && date.day > 0 && date.day <= getDaysInHebrewMonth(date.month, date.year);\r\n            return b && !isNaN(toGregorian$1(date).getTime());\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getNext = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            date = new NgbDate(date.year, date.month, date.day);\r\n            switch (period) {\r\n                case 'y':\r\n                    date.year += number;\r\n                    date.month = 1;\r\n                    date.day = 1;\r\n                    return date;\r\n                case 'm':\r\n                    date = setHebrewMonth(date, number);\r\n                    date.day = 1;\r\n                    return date;\r\n                case 'd':\r\n                    return setHebrewDay(date, number);\r\n                default:\r\n                    return date;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getPrev = /**\r\n         * @param {?} date\r\n         * @param {?=} period\r\n         * @param {?=} number\r\n         * @return {?}\r\n         */\r\n        function (date, period, number) {\r\n            if (period === void 0) { period = 'd'; }\r\n            if (number === void 0) { number = 1; }\r\n            return this.getNext(date, period, -number);\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getWeekday = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var day = toGregorian$1(date).getDay();\r\n            // in JS Date Sun=0, in ISO 8601 Sun=7\r\n            return day === 0 ? 7 : day;\r\n        };\r\n        /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getWeekNumber = /**\r\n         * @param {?} week\r\n         * @param {?} firstDayOfWeek\r\n         * @return {?}\r\n         */\r\n        function (week, firstDayOfWeek) {\r\n            /** @type {?} */\r\n            var date = week[week.length - 1];\r\n            return Math.ceil(getDayNumberInHebrewYear(date) / 7);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.getToday = /**\r\n         * @return {?}\r\n         */\r\n        function () { return fromGregorian$1(new Date()); };\r\n        /**\r\n         * @since 3.4.0\r\n         */\r\n        /**\r\n         * \\@since 3.4.0\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.toGregorian = /**\r\n         * \\@since 3.4.0\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) { return fromJSDate(toGregorian$1(date)); };\r\n        /**\r\n         * @since 3.4.0\r\n         */\r\n        /**\r\n         * \\@since 3.4.0\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbCalendarHebrew.prototype.fromGregorian = /**\r\n         * \\@since 3.4.0\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) { return fromGregorian$1(toJSDate(date)); };\r\n        NgbCalendarHebrew.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbCalendarHebrew;\r\n    }(NgbCalendar));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var WEEKDAYS = ['שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת', 'ראשון'];\r\n    /** @type {?} */\r\n    var MONTHS = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];\r\n    /** @type {?} */\r\n    var MONTHS_LEAP = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר א׳', 'אדר ב׳', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];\r\n    /**\r\n     * \\@since 3.2.0\r\n     */\r\n    var NgbDatepickerI18nHebrew = /** @class */ (function (_super) {\r\n        __extends(NgbDatepickerI18nHebrew, _super);\r\n        function NgbDatepickerI18nHebrew() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * @param {?} month\r\n         * @param {?=} year\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nHebrew.prototype.getMonthShortName = /**\r\n         * @param {?} month\r\n         * @param {?=} year\r\n         * @return {?}\r\n         */\r\n        function (month, year) { return this.getMonthFullName(month, year); };\r\n        /**\r\n         * @param {?} month\r\n         * @param {?=} year\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nHebrew.prototype.getMonthFullName = /**\r\n         * @param {?} month\r\n         * @param {?=} year\r\n         * @return {?}\r\n         */\r\n        function (month, year) {\r\n            return isHebrewLeapYear(year) ? MONTHS_LEAP[month - 1] : MONTHS[month - 1];\r\n        };\r\n        /**\r\n         * @param {?} weekday\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nHebrew.prototype.getWeekdayShortName = /**\r\n         * @param {?} weekday\r\n         * @return {?}\r\n         */\r\n        function (weekday) { return WEEKDAYS[weekday - 1]; };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nHebrew.prototype.getDayAriaLabel = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return hebrewNumerals(date.day) + \" \" + this.getMonthFullName(date.month, date.year) + \" \" + hebrewNumerals(date.year);\r\n        };\r\n        /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nHebrew.prototype.getDayNumerals = /**\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) { return hebrewNumerals(date.day); };\r\n        /**\r\n         * @param {?} weekNumber\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nHebrew.prototype.getWeekNumerals = /**\r\n         * @param {?} weekNumber\r\n         * @return {?}\r\n         */\r\n        function (weekNumber) { return hebrewNumerals(weekNumber); };\r\n        /**\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        NgbDatepickerI18nHebrew.prototype.getYearNumerals = /**\r\n         * @param {?} year\r\n         * @return {?}\r\n         */\r\n        function (year) { return hebrewNumerals(year); };\r\n        NgbDatepickerI18nHebrew.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbDatepickerI18nHebrew;\r\n    }(NgbDatepickerI18n));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * [`NgbDateAdapter`](#/components/datepicker/api#NgbDateAdapter) implementation that uses\r\n     * native javascript dates as a user date model.\r\n     */\r\n    var NgbDateNativeAdapter = /** @class */ (function (_super) {\r\n        __extends(NgbDateNativeAdapter, _super);\r\n        function NgbDateNativeAdapter() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * Converts a native `Date` to a `NgbDateStruct`.\r\n         */\r\n        /**\r\n         * Converts a native `Date` to a `NgbDateStruct`.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateNativeAdapter.prototype.fromModel = /**\r\n         * Converts a native `Date` to a `NgbDateStruct`.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return (date instanceof Date && !isNaN(date.getTime())) ? this._fromNativeDate(date) : null;\r\n        };\r\n        /**\r\n         * Converts a `NgbDateStruct` to a native `Date`.\r\n         */\r\n        /**\r\n         * Converts a `NgbDateStruct` to a native `Date`.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateNativeAdapter.prototype.toModel = /**\r\n         * Converts a `NgbDateStruct` to a native `Date`.\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) ? this._toNativeDate(date) :\r\n                null;\r\n        };\r\n        /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateNativeAdapter.prototype._fromNativeDate = /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };\r\n        };\r\n        /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateNativeAdapter.prototype._toNativeDate = /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var jsDate = new Date(date.year, date.month - 1, date.day, 12);\r\n            // avoid 30 -> 1930 conversion\r\n            jsDate.setFullYear(date.year);\r\n            return jsDate;\r\n        };\r\n        NgbDateNativeAdapter.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbDateNativeAdapter;\r\n    }(NgbDateAdapter));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * Same as [`NgbDateNativeAdapter`](#/components/datepicker/api#NgbDateNativeAdapter), but with UTC dates.\r\n     *\r\n     * \\@since 3.2.0\r\n     */\r\n    var NgbDateNativeUTCAdapter = /** @class */ (function (_super) {\r\n        __extends(NgbDateNativeUTCAdapter, _super);\r\n        function NgbDateNativeUTCAdapter() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateNativeUTCAdapter.prototype._fromNativeDate = /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            return { year: date.getUTCFullYear(), month: date.getUTCMonth() + 1, day: date.getUTCDate() };\r\n        };\r\n        /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        NgbDateNativeUTCAdapter.prototype._toNativeDate = /**\r\n         * @protected\r\n         * @param {?} date\r\n         * @return {?}\r\n         */\r\n        function (date) {\r\n            /** @type {?} */\r\n            var jsDate = new Date(Date.UTC(date.year, date.month - 1, date.day));\r\n            // avoid 30 -> 1930 conversion\r\n            jsDate.setUTCFullYear(date.year);\r\n            return jsDate;\r\n        };\r\n        NgbDateNativeUTCAdapter.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbDateNativeUTCAdapter;\r\n    }(NgbDateNativeAdapter));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbDatepickerModule = /** @class */ (function () {\r\n        function NgbDatepickerModule() {\r\n        }\r\n        NgbDatepickerModule.decorators = [\r\n            { type: core.NgModule, args: [{\r\n                        declarations: [\r\n                            NgbDatepicker, NgbDatepickerContent, NgbDatepickerMonth, NgbDatepickerNavigation, NgbDatepickerNavigationSelect,\r\n                            NgbDatepickerDayView, NgbInputDatepicker\r\n                        ],\r\n                        exports: [NgbDatepicker, NgbDatepickerContent, NgbInputDatepicker, NgbDatepickerMonth],\r\n                        imports: [common.CommonModule, forms.FormsModule],\r\n                        entryComponents: [NgbDatepicker]\r\n                    },] }\r\n        ];\r\n        return NgbDatepickerModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbDropdown`](#/components/dropdown/api#NgbDropdown) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the dropdowns used in the application.\r\n     */\r\n    var NgbDropdownConfig = /** @class */ (function () {\r\n        function NgbDropdownConfig() {\r\n            this.autoClose = true;\r\n            this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\r\n        }\r\n        NgbDropdownConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbDropdownConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbDropdownConfig_Factory() { return new NgbDropdownConfig(); }, token: NgbDropdownConfig, providedIn: \"root\" });\r\n        return NgbDropdownConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbNavbar = /** @class */ (function () {\r\n        function NgbNavbar() {\r\n        }\r\n        NgbNavbar.decorators = [\r\n            { type: core.Directive, args: [{ selector: '.navbar' },] }\r\n        ];\r\n        return NgbNavbar;\r\n    }());\r\n    /**\r\n     * A directive you should put on a dropdown item to enable keyboard navigation.\r\n     * Arrow keys will move focus between items marked with this directive.\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbDropdownItem = /** @class */ (function () {\r\n        function NgbDropdownItem(elementRef) {\r\n            this.elementRef = elementRef;\r\n            this._disabled = false;\r\n        }\r\n        Object.defineProperty(NgbDropdownItem.prototype, \"disabled\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._disabled; },\r\n            set: /**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                this._disabled = (/** @type {?} */ (value)) === '' || value === true; // accept an empty attribute as true\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        NgbDropdownItem.decorators = [\r\n            { type: core.Directive, args: [{ selector: '[ngbDropdownItem]', host: { 'class': 'dropdown-item', '[class.disabled]': 'disabled' } },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDropdownItem.ctorParameters = function () { return [\r\n            { type: core.ElementRef }\r\n        ]; };\r\n        NgbDropdownItem.propDecorators = {\r\n            disabled: [{ type: core.Input }]\r\n        };\r\n        return NgbDropdownItem;\r\n    }());\r\n    /**\r\n     * A directive that wraps dropdown menu content and dropdown items.\r\n     */\r\n    var NgbDropdownMenu = /** @class */ (function () {\r\n        function NgbDropdownMenu(dropdown) {\r\n            this.dropdown = dropdown;\r\n            this.placement = 'bottom';\r\n            this.isOpen = false;\r\n        }\r\n        NgbDropdownMenu.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbDropdownMenu]',\r\n                        host: {\r\n                            '[class.dropdown-menu]': 'true',\r\n                            '[class.show]': 'dropdown.isOpen()',\r\n                            '[attr.x-placement]': 'placement',\r\n                            '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.Home)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.End)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.Enter)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.Space)': 'dropdown.onKeyDown($event)'\r\n                        }\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDropdownMenu.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef((/**\r\n                             * @return {?}\r\n                             */\r\n                            function () { return NgbDropdown; })),] }] }\r\n        ]; };\r\n        NgbDropdownMenu.propDecorators = {\r\n            menuItems: [{ type: core.ContentChildren, args: [NgbDropdownItem,] }]\r\n        };\r\n        return NgbDropdownMenu;\r\n    }());\r\n    /**\r\n     * A directive to mark an element to which dropdown menu will be anchored.\r\n     *\r\n     * This is a simple version of the `NgbDropdownToggle` directive.\r\n     * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\r\n     * for events other than click.\r\n     *\r\n     * \\@since 1.1.0\r\n     */\r\n    var NgbDropdownAnchor = /** @class */ (function () {\r\n        function NgbDropdownAnchor(dropdown, _elementRef) {\r\n            this.dropdown = dropdown;\r\n            this._elementRef = _elementRef;\r\n            this.anchorEl = _elementRef.nativeElement;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDropdownAnchor.prototype.getNativeElement = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._elementRef.nativeElement; };\r\n        NgbDropdownAnchor.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbDropdownAnchor]',\r\n                        host: { 'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': 'dropdown.isOpen()' }\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDropdownAnchor.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef((/**\r\n                             * @return {?}\r\n                             */\r\n                            function () { return NgbDropdown; })),] }] },\r\n            { type: core.ElementRef }\r\n        ]; };\r\n        return NgbDropdownAnchor;\r\n    }());\r\n    /**\r\n     * A directive to mark an element that will toggle dropdown via the `click` event.\r\n     *\r\n     * You can also use `NgbDropdownAnchor` as an alternative.\r\n     */\r\n    var NgbDropdownToggle = /** @class */ (function (_super) {\r\n        __extends(NgbDropdownToggle, _super);\r\n        function NgbDropdownToggle(dropdown, elementRef) {\r\n            return _super.call(this, dropdown, elementRef) || this;\r\n        }\r\n        NgbDropdownToggle.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbDropdownToggle]',\r\n                        host: {\r\n                            'class': 'dropdown-toggle',\r\n                            'aria-haspopup': 'true',\r\n                            '[attr.aria-expanded]': 'dropdown.isOpen()',\r\n                            '(click)': 'dropdown.toggle()',\r\n                            '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.Home)': 'dropdown.onKeyDown($event)',\r\n                            '(keydown.End)': 'dropdown.onKeyDown($event)'\r\n                        },\r\n                        providers: [{ provide: NgbDropdownAnchor, useExisting: core.forwardRef((/**\r\n                                 * @return {?}\r\n                                 */\r\n                                function () { return NgbDropdownToggle; })) }]\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDropdownToggle.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef((/**\r\n                             * @return {?}\r\n                             */\r\n                            function () { return NgbDropdown; })),] }] },\r\n            { type: core.ElementRef }\r\n        ]; };\r\n        return NgbDropdownToggle;\r\n    }(NgbDropdownAnchor));\r\n    /**\r\n     * A directive that provides contextual overlays for displaying lists of links and more.\r\n     */\r\n    var NgbDropdown = /** @class */ (function () {\r\n        function NgbDropdown(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, ngbNavbar) {\r\n            var _this = this;\r\n            this._changeDetector = _changeDetector;\r\n            this._document = _document;\r\n            this._ngZone = _ngZone;\r\n            this._elementRef = _elementRef;\r\n            this._renderer = _renderer;\r\n            this._closed$ = new rxjs.Subject();\r\n            /**\r\n             * Defines whether or not the dropdown menu is opened initially.\r\n             */\r\n            this._open = false;\r\n            /**\r\n             * An event fired when the dropdown is opened or closed.\r\n             *\r\n             * The event payload is a `boolean`:\r\n             * * `true` - the dropdown was opened\r\n             * * `false` - the dropdown was closed\r\n             */\r\n            this.openChange = new core.EventEmitter();\r\n            this.placement = config.placement;\r\n            this.container = config.container;\r\n            this.autoClose = config.autoClose;\r\n            this.display = ngbNavbar ? 'static' : 'dynamic';\r\n            this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () { _this._positionMenu(); }));\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.ngAfterContentInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            this._ngZone.onStable.pipe(operators.take(1)).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._applyPlacementClasses();\r\n                if (_this._open) {\r\n                    _this._setCloseHandlers();\r\n                }\r\n            }));\r\n        };\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            if (changes.container && this._open) {\r\n                this._applyContainer(this.container);\r\n            }\r\n            if (changes.placement && !changes.placement.isFirstChange) {\r\n                this._applyPlacementClasses();\r\n            }\r\n        };\r\n        /**\r\n         * Checks if the dropdown menu is open.\r\n         */\r\n        /**\r\n         * Checks if the dropdown menu is open.\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.isOpen = /**\r\n         * Checks if the dropdown menu is open.\r\n         * @return {?}\r\n         */\r\n        function () { return this._open; };\r\n        /**\r\n         * Opens the dropdown menu.\r\n         */\r\n        /**\r\n         * Opens the dropdown menu.\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.open = /**\r\n         * Opens the dropdown menu.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (!this._open) {\r\n                this._open = true;\r\n                this._applyContainer(this.container);\r\n                this.openChange.emit(true);\r\n                this._setCloseHandlers();\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._setCloseHandlers = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var anchor = this._anchor;\r\n            ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.close(); }), this._closed$, this._menu ? [this._menuElement.nativeElement] : [], anchor ? [anchor.getNativeElement()] : [], '.dropdown-item,.dropdown-divider');\r\n        };\r\n        /**\r\n         * Closes the dropdown menu.\r\n         */\r\n        /**\r\n         * Closes the dropdown menu.\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.close = /**\r\n         * Closes the dropdown menu.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._open) {\r\n                this._open = false;\r\n                this._resetContainer();\r\n                this._closed$.next();\r\n                this.openChange.emit(false);\r\n                this._changeDetector.markForCheck();\r\n            }\r\n        };\r\n        /**\r\n         * Toggles the dropdown menu.\r\n         */\r\n        /**\r\n         * Toggles the dropdown menu.\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.toggle = /**\r\n         * Toggles the dropdown menu.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.isOpen()) {\r\n                this.close();\r\n            }\r\n            else {\r\n                this.open();\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._resetContainer();\r\n            this._closed$.next();\r\n            this._zoneSubscription.unsubscribe();\r\n        };\r\n        /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype.onKeyDown = /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            var _this = this;\r\n            // tslint:disable-next-line:deprecation\r\n            /** @type {?} */\r\n            var key = event.which;\r\n            /** @type {?} */\r\n            var itemElements = this._getMenuElements();\r\n            /** @type {?} */\r\n            var position = -1;\r\n            /** @type {?} */\r\n            var isEventFromItems = false;\r\n            /** @type {?} */\r\n            var itemElement = null;\r\n            /** @type {?} */\r\n            var isEventFromToggle = this._isEventFromToggle(event);\r\n            if (!isEventFromToggle && itemElements.length) {\r\n                itemElements.forEach((/**\r\n                 * @param {?} item\r\n                 * @param {?} index\r\n                 * @return {?}\r\n                 */\r\n                function (item, index) {\r\n                    if (item.contains((/** @type {?} */ (event.target)))) {\r\n                        isEventFromItems = true;\r\n                        itemElement = item;\r\n                    }\r\n                    if (item === _this._document.activeElement) {\r\n                        position = index;\r\n                    }\r\n                }));\r\n            }\r\n            // closing on Enter / Space\r\n            if (key === Key.Space || key === Key.Enter) {\r\n                if (isEventFromItems && (this.autoClose === true || this.autoClose === 'inside')) {\r\n                    // Item is either a button or a link, so click will be triggered by the browser on Enter or Space.\r\n                    // So we have to register a one-time click handler that will fire after any user defined click handlers\r\n                    // to close the dropdown\r\n                    rxjs.fromEvent(itemElement, 'click').pipe(operators.take(1)).subscribe((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return _this.close(); }));\r\n                }\r\n                return;\r\n            }\r\n            // opening / navigating\r\n            if (isEventFromToggle || isEventFromItems) {\r\n                this.open();\r\n                if (itemElements.length) {\r\n                    switch (key) {\r\n                        case Key.ArrowDown:\r\n                            position = Math.min(position + 1, itemElements.length - 1);\r\n                            break;\r\n                        case Key.ArrowUp:\r\n                            if (this._isDropup() && position === -1) {\r\n                                position = itemElements.length - 1;\r\n                                break;\r\n                            }\r\n                            position = Math.max(position - 1, 0);\r\n                            break;\r\n                        case Key.Home:\r\n                            position = 0;\r\n                            break;\r\n                        case Key.End:\r\n                            position = itemElements.length - 1;\r\n                            break;\r\n                    }\r\n                    itemElements[position].focus();\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._isDropup = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () { return this._elementRef.nativeElement.classList.contains('dropup'); };\r\n        /**\r\n         * @private\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._isEventFromToggle = /**\r\n         * @private\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            return this._anchor.getNativeElement().contains((/** @type {?} */ (event.target)));\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._getMenuElements = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var menu = this._menu;\r\n            if (menu == null) {\r\n                return [];\r\n            }\r\n            return menu.menuItems.filter((/**\r\n             * @param {?} item\r\n             * @return {?}\r\n             */\r\n            function (item) { return !item.disabled; })).map((/**\r\n             * @param {?} item\r\n             * @return {?}\r\n             */\r\n            function (item) { return item.elementRef.nativeElement; }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._positionMenu = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var menu = this._menu;\r\n            if (this.isOpen() && menu) {\r\n                this._applyPlacementClasses(this.display === 'dynamic' ?\r\n                    positionElements(this._anchor.anchorEl, this._bodyContainer || this._menuElement.nativeElement, this.placement, this.container === 'body') :\r\n                    this._getFirstPlacement(this.placement));\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} placement\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._getFirstPlacement = /**\r\n         * @private\r\n         * @param {?} placement\r\n         * @return {?}\r\n         */\r\n        function (placement) {\r\n            return Array.isArray(placement) ? placement[0] : (/** @type {?} */ (placement.split(' ')[0]));\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._resetContainer = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var renderer = this._renderer;\r\n            /** @type {?} */\r\n            var menuElement = this._menuElement;\r\n            if (menuElement) {\r\n                /** @type {?} */\r\n                var dropdownElement = this._elementRef.nativeElement;\r\n                /** @type {?} */\r\n                var dropdownMenuElement = menuElement.nativeElement;\r\n                renderer.appendChild(dropdownElement, dropdownMenuElement);\r\n                renderer.removeStyle(dropdownMenuElement, 'position');\r\n                renderer.removeStyle(dropdownMenuElement, 'transform');\r\n            }\r\n            if (this._bodyContainer) {\r\n                renderer.removeChild(this._document.body, this._bodyContainer);\r\n                this._bodyContainer = null;\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?=} container\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._applyContainer = /**\r\n         * @private\r\n         * @param {?=} container\r\n         * @return {?}\r\n         */\r\n        function (container) {\r\n            if (container === void 0) { container = null; }\r\n            this._resetContainer();\r\n            if (container === 'body') {\r\n                /** @type {?} */\r\n                var renderer = this._renderer;\r\n                /** @type {?} */\r\n                var dropdownMenuElement = this._menuElement.nativeElement;\r\n                /** @type {?} */\r\n                var bodyContainer = this._bodyContainer = this._bodyContainer || renderer.createElement('div');\r\n                // Override some styles to have the positionning working\r\n                renderer.setStyle(bodyContainer, 'position', 'absolute');\r\n                renderer.setStyle(dropdownMenuElement, 'position', 'static');\r\n                renderer.setStyle(bodyContainer, 'z-index', '1050');\r\n                renderer.appendChild(bodyContainer, dropdownMenuElement);\r\n                renderer.appendChild(this._document.body, bodyContainer);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?=} placement\r\n         * @return {?}\r\n         */\r\n        NgbDropdown.prototype._applyPlacementClasses = /**\r\n         * @private\r\n         * @param {?=} placement\r\n         * @return {?}\r\n         */\r\n        function (placement) {\r\n            /** @type {?} */\r\n            var menu = this._menu;\r\n            if (menu) {\r\n                if (!placement) {\r\n                    placement = this._getFirstPlacement(this.placement);\r\n                }\r\n                /** @type {?} */\r\n                var renderer = this._renderer;\r\n                /** @type {?} */\r\n                var dropdownElement = this._elementRef.nativeElement;\r\n                // remove the current placement classes\r\n                renderer.removeClass(dropdownElement, 'dropup');\r\n                renderer.removeClass(dropdownElement, 'dropdown');\r\n                menu.placement = this.display === 'static' ? null : placement;\r\n                /*\r\n                      * apply the new placement\r\n                      * in case of top use up-arrow or down-arrow otherwise\r\n                      */\r\n                /** @type {?} */\r\n                var dropdownClass = placement.search('^top') !== -1 ? 'dropup' : 'dropdown';\r\n                renderer.addClass(dropdownElement, dropdownClass);\r\n                /** @type {?} */\r\n                var bodyContainer = this._bodyContainer;\r\n                if (bodyContainer) {\r\n                    renderer.removeClass(bodyContainer, 'dropup');\r\n                    renderer.removeClass(bodyContainer, 'dropdown');\r\n                    renderer.addClass(bodyContainer, dropdownClass);\r\n                }\r\n            }\r\n        };\r\n        NgbDropdown.decorators = [\r\n            { type: core.Directive, args: [{ selector: '[ngbDropdown]', exportAs: 'ngbDropdown', host: { '[class.show]': 'isOpen()' } },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbDropdown.ctorParameters = function () { return [\r\n            { type: core.ChangeDetectorRef },\r\n            { type: NgbDropdownConfig },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: core.NgZone },\r\n            { type: core.ElementRef },\r\n            { type: core.Renderer2 },\r\n            { type: NgbNavbar, decorators: [{ type: core.Optional }] }\r\n        ]; };\r\n        NgbDropdown.propDecorators = {\r\n            _menu: [{ type: core.ContentChild, args: [NgbDropdownMenu, { static: false },] }],\r\n            _menuElement: [{ type: core.ContentChild, args: [NgbDropdownMenu, { read: core.ElementRef, static: false },] }],\r\n            _anchor: [{ type: core.ContentChild, args: [NgbDropdownAnchor, { static: false },] }],\r\n            autoClose: [{ type: core.Input }],\r\n            _open: [{ type: core.Input, args: ['open',] }],\r\n            placement: [{ type: core.Input }],\r\n            container: [{ type: core.Input }],\r\n            display: [{ type: core.Input }],\r\n            openChange: [{ type: core.Output }]\r\n        };\r\n        return NgbDropdown;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_DROPDOWN_DIRECTIVES = [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownItem, NgbNavbar];\r\n    var NgbDropdownModule = /** @class */ (function () {\r\n        function NgbDropdownModule() {\r\n        }\r\n        NgbDropdownModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES },] }\r\n        ];\r\n        return NgbDropdownModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all modals used in the application.\r\n     *\r\n     * \\@since 3.1.0\r\n     */\r\n    var NgbModalConfig = /** @class */ (function () {\r\n        function NgbModalConfig() {\r\n            this.backdrop = true;\r\n            this.keyboard = true;\r\n        }\r\n        NgbModalConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbModalConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: \"root\" });\r\n        return NgbModalConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var ContentRef = /** @class */ (function () {\r\n        function ContentRef(nodes, viewRef, componentRef) {\r\n            this.nodes = nodes;\r\n            this.viewRef = viewRef;\r\n            this.componentRef = componentRef;\r\n        }\r\n        return ContentRef;\r\n    }());\r\n    /**\r\n     * @template T\r\n     */\r\n    var /**\r\n     * @template T\r\n     */\r\n    PopupService = /** @class */ (function () {\r\n        function PopupService(_type, _injector, _viewContainerRef, _renderer, _componentFactoryResolver, _applicationRef) {\r\n            this._type = _type;\r\n            this._injector = _injector;\r\n            this._viewContainerRef = _viewContainerRef;\r\n            this._renderer = _renderer;\r\n            this._componentFactoryResolver = _componentFactoryResolver;\r\n            this._applicationRef = _applicationRef;\r\n        }\r\n        /**\r\n         * @param {?=} content\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        PopupService.prototype.open = /**\r\n         * @param {?=} content\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        function (content, context) {\r\n            if (!this._windowRef) {\r\n                this._contentRef = this._getContentRef(content, context);\r\n                this._windowRef = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type), 0, this._injector, this._contentRef.nodes);\r\n            }\r\n            return this._windowRef;\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        PopupService.prototype.close = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._windowRef) {\r\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\r\n                this._windowRef = null;\r\n                if (this._contentRef.viewRef) {\r\n                    this._applicationRef.detachView(this._contentRef.viewRef);\r\n                    this._contentRef.viewRef.destroy();\r\n                    this._contentRef = null;\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} content\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        PopupService.prototype._getContentRef = /**\r\n         * @private\r\n         * @param {?} content\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        function (content, context) {\r\n            if (!content) {\r\n                return new ContentRef([]);\r\n            }\r\n            else if (content instanceof core.TemplateRef) {\r\n                /** @type {?} */\r\n                var viewRef = content.createEmbeddedView(context);\r\n                this._applicationRef.attachView(viewRef);\r\n                return new ContentRef([viewRef.rootNodes], viewRef);\r\n            }\r\n            else {\r\n                return new ContentRef([[this._renderer.createText(\"\" + content)]]);\r\n            }\r\n        };\r\n        return PopupService;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var noop = (/**\r\n     * @return {?}\r\n     */\r\n    function () { });\r\n    /**\r\n     * Utility to handle the scrollbar.\r\n     *\r\n     * It allows to compensate the lack of a vertical scrollbar by adding an\r\n     * equivalent padding on the right of the body, and to remove this compensation.\r\n     */\r\n    var ScrollBar = /** @class */ (function () {\r\n        function ScrollBar(_document) {\r\n            this._document = _document;\r\n        }\r\n        /**\r\n         * To be called right before a potential vertical scrollbar would be removed:\r\n         *\r\n         * - if there was a scrollbar, adds some compensation padding to the body\r\n         * to keep the same layout as when the scrollbar is there\r\n         * - if there was none, there is nothing to do\r\n         *\r\n         * @return a callback used to revert the compensation (noop if there was none,\r\n         * otherwise a function removing the padding)\r\n         */\r\n        /**\r\n         * To be called right before a potential vertical scrollbar would be removed:\r\n         *\r\n         * - if there was a scrollbar, adds some compensation padding to the body\r\n         * to keep the same layout as when the scrollbar is there\r\n         * - if there was none, there is nothing to do\r\n         *\r\n         * @return {?} a callback used to revert the compensation (noop if there was none,\r\n         * otherwise a function removing the padding)\r\n         */\r\n        ScrollBar.prototype.compensate = /**\r\n         * To be called right before a potential vertical scrollbar would be removed:\r\n         *\r\n         * - if there was a scrollbar, adds some compensation padding to the body\r\n         * to keep the same layout as when the scrollbar is there\r\n         * - if there was none, there is nothing to do\r\n         *\r\n         * @return {?} a callback used to revert the compensation (noop if there was none,\r\n         * otherwise a function removing the padding)\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var width = this._getWidth();\r\n            return !this._isPresent(width) ? noop : this._adjustBody(width);\r\n        };\r\n        /**\r\n         * Adds a padding of the given width on the right of the body.\r\n         *\r\n         * @return a callback used to revert the padding to its previous value\r\n         */\r\n        /**\r\n         * Adds a padding of the given width on the right of the body.\r\n         *\r\n         * @private\r\n         * @param {?} scrollbarWidth\r\n         * @return {?} a callback used to revert the padding to its previous value\r\n         */\r\n        ScrollBar.prototype._adjustBody = /**\r\n         * Adds a padding of the given width on the right of the body.\r\n         *\r\n         * @private\r\n         * @param {?} scrollbarWidth\r\n         * @return {?} a callback used to revert the padding to its previous value\r\n         */\r\n        function (scrollbarWidth) {\r\n            /** @type {?} */\r\n            var body = this._document.body;\r\n            /** @type {?} */\r\n            var userSetPaddingStyle = body.style.paddingRight;\r\n            /** @type {?} */\r\n            var actualPadding = parseFloat(window.getComputedStyle(body)['padding-right']);\r\n            body.style['padding-right'] = actualPadding + scrollbarWidth + \"px\";\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            function () { return body.style['padding-right'] = userSetPaddingStyle; });\r\n        };\r\n        /**\r\n         * Tells whether a scrollbar is currently present on the body.\r\n         *\r\n         * @return true if scrollbar is present, false otherwise\r\n         */\r\n        /**\r\n         * Tells whether a scrollbar is currently present on the body.\r\n         *\r\n         * @private\r\n         * @param {?} scrollbarWidth\r\n         * @return {?} true if scrollbar is present, false otherwise\r\n         */\r\n        ScrollBar.prototype._isPresent = /**\r\n         * Tells whether a scrollbar is currently present on the body.\r\n         *\r\n         * @private\r\n         * @param {?} scrollbarWidth\r\n         * @return {?} true if scrollbar is present, false otherwise\r\n         */\r\n        function (scrollbarWidth) {\r\n            /** @type {?} */\r\n            var rect = this._document.body.getBoundingClientRect();\r\n            /** @type {?} */\r\n            var bodyToViewportGap = window.innerWidth - (rect.left + rect.right);\r\n            /** @type {?} */\r\n            var uncertainty = 0.1 * scrollbarWidth;\r\n            return bodyToViewportGap >= scrollbarWidth - uncertainty;\r\n        };\r\n        /**\r\n         * Calculates and returns the width of a scrollbar.\r\n         *\r\n         * @return the width of a scrollbar on this page\r\n         */\r\n        /**\r\n         * Calculates and returns the width of a scrollbar.\r\n         *\r\n         * @private\r\n         * @return {?} the width of a scrollbar on this page\r\n         */\r\n        ScrollBar.prototype._getWidth = /**\r\n         * Calculates and returns the width of a scrollbar.\r\n         *\r\n         * @private\r\n         * @return {?} the width of a scrollbar on this page\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var measurer = this._document.createElement('div');\r\n            measurer.className = 'modal-scrollbar-measure';\r\n            /** @type {?} */\r\n            var body = this._document.body;\r\n            body.appendChild(measurer);\r\n            /** @type {?} */\r\n            var width = measurer.getBoundingClientRect().width - measurer.clientWidth;\r\n            body.removeChild(measurer);\r\n            return width;\r\n        };\r\n        ScrollBar.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        ScrollBar.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\r\n        ]; };\r\n        /** @nocollapse */ ScrollBar.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ScrollBar_Factory() { return new ScrollBar(core.ɵɵinject(common.DOCUMENT)); }, token: ScrollBar, providedIn: \"root\" });\r\n        return ScrollBar;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbModalBackdrop = /** @class */ (function () {\r\n        function NgbModalBackdrop() {\r\n        }\r\n        NgbModalBackdrop.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-modal-backdrop',\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: '',\r\n                        host: { '[class]': '\"modal-backdrop fade show\" + (backdropClass ? \" \" + backdropClass : \"\")', 'style': 'z-index: 1050' }\r\n                    }] }\r\n        ];\r\n        NgbModalBackdrop.propDecorators = {\r\n            backdropClass: [{ type: core.Input }]\r\n        };\r\n        return NgbModalBackdrop;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A reference to the currently opened (active) modal.\r\n     *\r\n     * Instances of this class can be injected into your component passed as modal content.\r\n     * So you can `.close()` or `.dismiss()` the modal window from your component.\r\n     */\r\n    var   /**\r\n     * A reference to the currently opened (active) modal.\r\n     *\r\n     * Instances of this class can be injected into your component passed as modal content.\r\n     * So you can `.close()` or `.dismiss()` the modal window from your component.\r\n     */\r\n    NgbActiveModal = /** @class */ (function () {\r\n        function NgbActiveModal() {\r\n        }\r\n        /**\r\n         * Closes the modal with an optional `result` value.\r\n         *\r\n         * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n         */\r\n        /**\r\n         * Closes the modal with an optional `result` value.\r\n         *\r\n         * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n         * @param {?=} result\r\n         * @return {?}\r\n         */\r\n        NgbActiveModal.prototype.close = /**\r\n         * Closes the modal with an optional `result` value.\r\n         *\r\n         * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n         * @param {?=} result\r\n         * @return {?}\r\n         */\r\n        function (result) { };\r\n        /**\r\n         * Dismisses the modal with an optional `reason` value.\r\n         *\r\n         * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n         */\r\n        /**\r\n         * Dismisses the modal with an optional `reason` value.\r\n         *\r\n         * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        NgbActiveModal.prototype.dismiss = /**\r\n         * Dismisses the modal with an optional `reason` value.\r\n         *\r\n         * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        function (reason) { };\r\n        return NgbActiveModal;\r\n    }());\r\n    /**\r\n     * A reference to the newly opened modal returned by the `NgbModal.open()` method.\r\n     */\r\n    var   /**\r\n     * A reference to the newly opened modal returned by the `NgbModal.open()` method.\r\n     */\r\n    NgbModalRef = /** @class */ (function () {\r\n        function NgbModalRef(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {\r\n            var _this = this;\r\n            this._windowCmptRef = _windowCmptRef;\r\n            this._contentRef = _contentRef;\r\n            this._backdropCmptRef = _backdropCmptRef;\r\n            this._beforeDismiss = _beforeDismiss;\r\n            _windowCmptRef.instance.dismissEvent.subscribe((/**\r\n             * @param {?} reason\r\n             * @return {?}\r\n             */\r\n            function (reason) { _this.dismiss(reason); }));\r\n            this.result = new Promise((/**\r\n             * @param {?} resolve\r\n             * @param {?} reject\r\n             * @return {?}\r\n             */\r\n            function (resolve, reject) {\r\n                _this._resolve = resolve;\r\n                _this._reject = reject;\r\n            }));\r\n            this.result.then(null, (/**\r\n             * @return {?}\r\n             */\r\n            function () { }));\r\n        }\r\n        Object.defineProperty(NgbModalRef.prototype, \"componentInstance\", {\r\n            /**\r\n             * The instance of a component used for the modal content.\r\n             *\r\n             * When a `TemplateRef` is used as the content or when the modal is closed, will return `undefined`.\r\n             */\r\n            get: /**\r\n             * The instance of a component used for the modal content.\r\n             *\r\n             * When a `TemplateRef` is used as the content or when the modal is closed, will return `undefined`.\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                if (this._contentRef && this._contentRef.componentRef) {\r\n                    return this._contentRef.componentRef.instance;\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Closes the modal with an optional `result` value.\r\n         *\r\n         * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n         */\r\n        /**\r\n         * Closes the modal with an optional `result` value.\r\n         *\r\n         * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n         * @param {?=} result\r\n         * @return {?}\r\n         */\r\n        NgbModalRef.prototype.close = /**\r\n         * Closes the modal with an optional `result` value.\r\n         *\r\n         * The `NgbMobalRef.result` promise will be resolved with the provided value.\r\n         * @param {?=} result\r\n         * @return {?}\r\n         */\r\n        function (result) {\r\n            if (this._windowCmptRef) {\r\n                this._resolve(result);\r\n                this._removeModalElements();\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        NgbModalRef.prototype._dismiss = /**\r\n         * @private\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        function (reason) {\r\n            this._reject(reason);\r\n            this._removeModalElements();\r\n        };\r\n        /**\r\n         * Dismisses the modal with an optional `reason` value.\r\n         *\r\n         * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n         */\r\n        /**\r\n         * Dismisses the modal with an optional `reason` value.\r\n         *\r\n         * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        NgbModalRef.prototype.dismiss = /**\r\n         * Dismisses the modal with an optional `reason` value.\r\n         *\r\n         * The `NgbModalRef.result` promise will be rejected with the provided value.\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        function (reason) {\r\n            var _this = this;\r\n            if (this._windowCmptRef) {\r\n                if (!this._beforeDismiss) {\r\n                    this._dismiss(reason);\r\n                }\r\n                else {\r\n                    /** @type {?} */\r\n                    var dismiss = this._beforeDismiss();\r\n                    if (dismiss && dismiss.then) {\r\n                        dismiss.then((/**\r\n                         * @param {?} result\r\n                         * @return {?}\r\n                         */\r\n                        function (result) {\r\n                            if (result !== false) {\r\n                                _this._dismiss(reason);\r\n                            }\r\n                        }), (/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { }));\r\n                    }\r\n                    else if (dismiss !== false) {\r\n                        this._dismiss(reason);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbModalRef.prototype._removeModalElements = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var windowNativeEl = this._windowCmptRef.location.nativeElement;\r\n            windowNativeEl.parentNode.removeChild(windowNativeEl);\r\n            this._windowCmptRef.destroy();\r\n            if (this._backdropCmptRef) {\r\n                /** @type {?} */\r\n                var backdropNativeEl = this._backdropCmptRef.location.nativeElement;\r\n                backdropNativeEl.parentNode.removeChild(backdropNativeEl);\r\n                this._backdropCmptRef.destroy();\r\n            }\r\n            if (this._contentRef && this._contentRef.viewRef) {\r\n                this._contentRef.viewRef.destroy();\r\n            }\r\n            this._windowCmptRef = null;\r\n            this._backdropCmptRef = null;\r\n            this._contentRef = null;\r\n        };\r\n        return NgbModalRef;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @enum {number} */\r\n    var ModalDismissReasons = {\r\n        BACKDROP_CLICK: 0,\r\n        ESC: 1,\r\n    };\r\n    ModalDismissReasons[ModalDismissReasons.BACKDROP_CLICK] = 'BACKDROP_CLICK';\r\n    ModalDismissReasons[ModalDismissReasons.ESC] = 'ESC';\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbModalWindow = /** @class */ (function () {\r\n        function NgbModalWindow(_document, _elRef, _zone) {\r\n            this._document = _document;\r\n            this._elRef = _elRef;\r\n            this._zone = _zone;\r\n            this._closed$ = new rxjs.Subject();\r\n            this.backdrop = true;\r\n            this.keyboard = true;\r\n            this.dismissEvent = new core.EventEmitter();\r\n        }\r\n        /**\r\n         * @param {?} reason\r\n         * @return {?}\r\n         */\r\n        NgbModalWindow.prototype.dismiss = /**\r\n         * @param {?} reason\r\n         * @return {?}\r\n         */\r\n        function (reason) { this.dismissEvent.emit(reason); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbModalWindow.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._elWithFocus = this._document.activeElement; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbModalWindow.prototype.ngAfterViewInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            var nativeElement = this._elRef.nativeElement;\r\n            this._zone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                rxjs.fromEvent(nativeElement, 'keydown')\r\n                    .pipe(operators.takeUntil(_this._closed$), \r\n                // tslint:disable-next-line:deprecation\r\n                operators.filter((/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                function (e) { return e.which === Key.Escape && _this.keyboard; })))\r\n                    .subscribe((/**\r\n                 * @param {?} event\r\n                 * @return {?}\r\n                 */\r\n                function (event) { return requestAnimationFrame((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    if (!event.defaultPrevented) {\r\n                        _this._zone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return _this.dismiss(ModalDismissReasons.ESC); }));\r\n                    }\r\n                })); }));\r\n                // We're listening to 'mousedown' and 'mouseup' to prevent modal from closing when pressing the mouse\r\n                // inside the modal dialog and releasing it outside\r\n                /** @type {?} */\r\n                var preventClose = false;\r\n                rxjs.fromEvent(_this._dialogEl.nativeElement, 'mousedown')\r\n                    .pipe(operators.takeUntil(_this._closed$), operators.tap((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return preventClose = false; })), operators.switchMap((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return rxjs.fromEvent(nativeElement, 'mouseup').pipe(operators.takeUntil(_this._closed$), operators.take(1)); })), operators.filter((/**\r\n                 * @param {?} __0\r\n                 * @return {?}\r\n                 */\r\n                function (_a) {\r\n                    var target = _a.target;\r\n                    return nativeElement === target;\r\n                })))\r\n                    .subscribe((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { preventClose = true; }));\r\n                // We're listening to 'click' to dismiss modal on modal window click, except when:\r\n                // 1. clicking on modal dialog itself\r\n                // 2. closing was prevented by mousedown/up handlers\r\n                // 3. clicking on scrollbar when the viewport is too small and modal doesn't fit (click is not triggered at all)\r\n                rxjs.fromEvent(nativeElement, 'click').pipe(operators.takeUntil(_this._closed$)).subscribe((/**\r\n                 * @param {?} __0\r\n                 * @return {?}\r\n                 */\r\n                function (_a) {\r\n                    var target = _a.target;\r\n                    if (_this.backdrop === true && nativeElement === target && !preventClose) {\r\n                        _this._zone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return _this.dismiss(ModalDismissReasons.BACKDROP_CLICK); }));\r\n                    }\r\n                    preventClose = false;\r\n                }));\r\n            }));\r\n            if (!nativeElement.contains(document.activeElement)) {\r\n                /** @type {?} */\r\n                var autoFocusable = (/** @type {?} */ (nativeElement.querySelector(\"[ngbAutofocus]\")));\r\n                /** @type {?} */\r\n                var firstFocusable = getFocusableBoundaryElements(nativeElement)[0];\r\n                /** @type {?} */\r\n                var elementToFocus = autoFocusable || firstFocusable || nativeElement;\r\n                elementToFocus.focus();\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbModalWindow.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var body = this._document.body;\r\n            /** @type {?} */\r\n            var elWithFocus = this._elWithFocus;\r\n            /** @type {?} */\r\n            var elementToFocus;\r\n            if (elWithFocus && elWithFocus['focus'] && body.contains(elWithFocus)) {\r\n                elementToFocus = elWithFocus;\r\n            }\r\n            else {\r\n                elementToFocus = body;\r\n            }\r\n            this._zone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return elementToFocus.focus(); }));\r\n                _this._elWithFocus = null;\r\n            }));\r\n            this._closed$.next();\r\n        };\r\n        NgbModalWindow.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-modal-window',\r\n                        host: {\r\n                            '[class]': '\"modal fade show d-block\" + (windowClass ? \" \" + windowClass : \"\")',\r\n                            'role': 'dialog',\r\n                            'tabindex': '-1',\r\n                            '[attr.aria-modal]': 'true',\r\n                            '[attr.aria-labelledby]': 'ariaLabelledBy',\r\n                        },\r\n                        template: \"\\n    <div #dialog [class]=\\\"'modal-dialog' + (size ? ' modal-' + size : '') + (centered ? ' modal-dialog-centered' : '') +\\n     (scrollable ? ' modal-dialog-scrollable' : '')\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\"><ng-content></ng-content></div>\\n    </div>\\n    \",\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        styles: [\"ngb-modal-window .component-host-scrollable{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbModalWindow.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: core.ElementRef },\r\n            { type: core.NgZone }\r\n        ]; };\r\n        NgbModalWindow.propDecorators = {\r\n            _dialogEl: [{ type: core.ViewChild, args: ['dialog', { static: true },] }],\r\n            ariaLabelledBy: [{ type: core.Input }],\r\n            backdrop: [{ type: core.Input }],\r\n            centered: [{ type: core.Input }],\r\n            keyboard: [{ type: core.Input }],\r\n            scrollable: [{ type: core.Input }],\r\n            size: [{ type: core.Input }],\r\n            windowClass: [{ type: core.Input }],\r\n            dismissEvent: [{ type: core.Output, args: ['dismiss',] }]\r\n        };\r\n        return NgbModalWindow;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbModalStack = /** @class */ (function () {\r\n        function NgbModalStack(_applicationRef, _injector, _document, _scrollBar, _rendererFactory, _ngZone) {\r\n            var _this = this;\r\n            this._applicationRef = _applicationRef;\r\n            this._injector = _injector;\r\n            this._document = _document;\r\n            this._scrollBar = _scrollBar;\r\n            this._rendererFactory = _rendererFactory;\r\n            this._ngZone = _ngZone;\r\n            this._activeWindowCmptHasChanged = new rxjs.Subject();\r\n            this._ariaHiddenValues = new Map();\r\n            this._backdropAttributes = ['backdropClass'];\r\n            this._modalRefs = [];\r\n            this._windowAttributes = ['ariaLabelledBy', 'backdrop', 'centered', 'keyboard', 'scrollable', 'size', 'windowClass'];\r\n            this._windowCmpts = [];\r\n            // Trap focus on active WindowCmpt\r\n            this._activeWindowCmptHasChanged.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                if (_this._windowCmpts.length) {\r\n                    /** @type {?} */\r\n                    var activeWindowCmpt = _this._windowCmpts[_this._windowCmpts.length - 1];\r\n                    ngbFocusTrap(_this._ngZone, activeWindowCmpt.location.nativeElement, _this._activeWindowCmptHasChanged);\r\n                    _this._revertAriaHidden();\r\n                    _this._setAriaHidden(activeWindowCmpt.location.nativeElement);\r\n                }\r\n            }));\r\n        }\r\n        /**\r\n         * @param {?} moduleCFR\r\n         * @param {?} contentInjector\r\n         * @param {?} content\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype.open = /**\r\n         * @param {?} moduleCFR\r\n         * @param {?} contentInjector\r\n         * @param {?} content\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        function (moduleCFR, contentInjector, content, options) {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var containerEl = options.container instanceof HTMLElement ? options.container : isDefined(options.container) ?\r\n                this._document.querySelector(options.container) :\r\n                this._document.body;\r\n            /** @type {?} */\r\n            var renderer = this._rendererFactory.createRenderer(null, null);\r\n            /** @type {?} */\r\n            var revertPaddingForScrollBar = this._scrollBar.compensate();\r\n            /** @type {?} */\r\n            var removeBodyClass = (/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                if (!_this._modalRefs.length) {\r\n                    renderer.removeClass(_this._document.body, 'modal-open');\r\n                    _this._revertAriaHidden();\r\n                }\r\n            });\r\n            if (!containerEl) {\r\n                throw new Error(\"The specified modal container \\\"\" + (options.container || 'body') + \"\\\" was not found in the DOM.\");\r\n            }\r\n            /** @type {?} */\r\n            var activeModal = new NgbActiveModal();\r\n            /** @type {?} */\r\n            var contentRef = this._getContentRef(moduleCFR, options.injector || contentInjector, content, activeModal, options);\r\n            /** @type {?} */\r\n            var backdropCmptRef = options.backdrop !== false ? this._attachBackdrop(moduleCFR, containerEl) : null;\r\n            /** @type {?} */\r\n            var windowCmptRef = this._attachWindowComponent(moduleCFR, containerEl, contentRef);\r\n            /** @type {?} */\r\n            var ngbModalRef = new NgbModalRef(windowCmptRef, contentRef, backdropCmptRef, options.beforeDismiss);\r\n            this._registerModalRef(ngbModalRef);\r\n            this._registerWindowCmpt(windowCmptRef);\r\n            ngbModalRef.result.then(revertPaddingForScrollBar, revertPaddingForScrollBar);\r\n            ngbModalRef.result.then(removeBodyClass, removeBodyClass);\r\n            activeModal.close = (/**\r\n             * @param {?} result\r\n             * @return {?}\r\n             */\r\n            function (result) { ngbModalRef.close(result); });\r\n            activeModal.dismiss = (/**\r\n             * @param {?} reason\r\n             * @return {?}\r\n             */\r\n            function (reason) { ngbModalRef.dismiss(reason); });\r\n            this._applyWindowOptions(windowCmptRef.instance, options);\r\n            if (this._modalRefs.length === 1) {\r\n                renderer.addClass(this._document.body, 'modal-open');\r\n            }\r\n            if (backdropCmptRef && backdropCmptRef.instance) {\r\n                this._applyBackdropOptions(backdropCmptRef.instance, options);\r\n            }\r\n            return ngbModalRef;\r\n        };\r\n        /**\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype.dismissAll = /**\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        function (reason) { this._modalRefs.forEach((/**\r\n         * @param {?} ngbModalRef\r\n         * @return {?}\r\n         */\r\n        function (ngbModalRef) { return ngbModalRef.dismiss(reason); })); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype.hasOpenModals = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._modalRefs.length > 0; };\r\n        /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} containerEl\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._attachBackdrop = /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} containerEl\r\n         * @return {?}\r\n         */\r\n        function (moduleCFR, containerEl) {\r\n            /** @type {?} */\r\n            var backdropFactory = moduleCFR.resolveComponentFactory(NgbModalBackdrop);\r\n            /** @type {?} */\r\n            var backdropCmptRef = backdropFactory.create(this._injector);\r\n            this._applicationRef.attachView(backdropCmptRef.hostView);\r\n            containerEl.appendChild(backdropCmptRef.location.nativeElement);\r\n            return backdropCmptRef;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} containerEl\r\n         * @param {?} contentRef\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._attachWindowComponent = /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} containerEl\r\n         * @param {?} contentRef\r\n         * @return {?}\r\n         */\r\n        function (moduleCFR, containerEl, contentRef) {\r\n            /** @type {?} */\r\n            var windowFactory = moduleCFR.resolveComponentFactory(NgbModalWindow);\r\n            /** @type {?} */\r\n            var windowCmptRef = windowFactory.create(this._injector, contentRef.nodes);\r\n            this._applicationRef.attachView(windowCmptRef.hostView);\r\n            containerEl.appendChild(windowCmptRef.location.nativeElement);\r\n            return windowCmptRef;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} windowInstance\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._applyWindowOptions = /**\r\n         * @private\r\n         * @param {?} windowInstance\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        function (windowInstance, options) {\r\n            this._windowAttributes.forEach((/**\r\n             * @param {?} optionName\r\n             * @return {?}\r\n             */\r\n            function (optionName) {\r\n                if (isDefined(options[optionName])) {\r\n                    windowInstance[optionName] = options[optionName];\r\n                }\r\n            }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} backdropInstance\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._applyBackdropOptions = /**\r\n         * @private\r\n         * @param {?} backdropInstance\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        function (backdropInstance, options) {\r\n            this._backdropAttributes.forEach((/**\r\n             * @param {?} optionName\r\n             * @return {?}\r\n             */\r\n            function (optionName) {\r\n                if (isDefined(options[optionName])) {\r\n                    backdropInstance[optionName] = options[optionName];\r\n                }\r\n            }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} contentInjector\r\n         * @param {?} content\r\n         * @param {?} activeModal\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._getContentRef = /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} contentInjector\r\n         * @param {?} content\r\n         * @param {?} activeModal\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        function (moduleCFR, contentInjector, content, activeModal, options) {\r\n            if (!content) {\r\n                return new ContentRef([]);\r\n            }\r\n            else if (content instanceof core.TemplateRef) {\r\n                return this._createFromTemplateRef(content, activeModal);\r\n            }\r\n            else if (isString(content)) {\r\n                return this._createFromString(content);\r\n            }\r\n            else {\r\n                return this._createFromComponent(moduleCFR, contentInjector, content, activeModal, options);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} content\r\n         * @param {?} activeModal\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._createFromTemplateRef = /**\r\n         * @private\r\n         * @param {?} content\r\n         * @param {?} activeModal\r\n         * @return {?}\r\n         */\r\n        function (content, activeModal) {\r\n            /** @type {?} */\r\n            var context = {\r\n                $implicit: activeModal,\r\n                close: /**\r\n                 * @param {?} result\r\n                 * @return {?}\r\n                 */\r\n                function (result) { activeModal.close(result); },\r\n                dismiss: /**\r\n                 * @param {?} reason\r\n                 * @return {?}\r\n                 */\r\n                function (reason) { activeModal.dismiss(reason); }\r\n            };\r\n            /** @type {?} */\r\n            var viewRef = content.createEmbeddedView(context);\r\n            this._applicationRef.attachView(viewRef);\r\n            return new ContentRef([viewRef.rootNodes], viewRef);\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} content\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._createFromString = /**\r\n         * @private\r\n         * @param {?} content\r\n         * @return {?}\r\n         */\r\n        function (content) {\r\n            /** @type {?} */\r\n            var component = this._document.createTextNode(\"\" + content);\r\n            return new ContentRef([[component]]);\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} contentInjector\r\n         * @param {?} content\r\n         * @param {?} context\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._createFromComponent = /**\r\n         * @private\r\n         * @param {?} moduleCFR\r\n         * @param {?} contentInjector\r\n         * @param {?} content\r\n         * @param {?} context\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        function (moduleCFR, contentInjector, content, context, options) {\r\n            /** @type {?} */\r\n            var contentCmptFactory = moduleCFR.resolveComponentFactory(content);\r\n            /** @type {?} */\r\n            var modalContentInjector = core.Injector.create({ providers: [{ provide: NgbActiveModal, useValue: context }], parent: contentInjector });\r\n            /** @type {?} */\r\n            var componentRef = contentCmptFactory.create(modalContentInjector);\r\n            /** @type {?} */\r\n            var componentNativeEl = componentRef.location.nativeElement;\r\n            if (options.scrollable) {\r\n                ((/** @type {?} */ (componentNativeEl))).classList.add('component-host-scrollable');\r\n            }\r\n            this._applicationRef.attachView(componentRef.hostView);\r\n            // FIXME: we should here get rid of the component nativeElement\r\n            // and use `[Array.from(componentNativeEl.childNodes)]` instead and remove the above CSS class.\r\n            return new ContentRef([[componentNativeEl]], componentRef.hostView, componentRef);\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._setAriaHidden = /**\r\n         * @private\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        function (element) {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var parent = element.parentElement;\r\n            if (parent && element !== this._document.body) {\r\n                Array.from(parent.children).forEach((/**\r\n                 * @param {?} sibling\r\n                 * @return {?}\r\n                 */\r\n                function (sibling) {\r\n                    if (sibling !== element && sibling.nodeName !== 'SCRIPT') {\r\n                        _this._ariaHiddenValues.set(sibling, sibling.getAttribute('aria-hidden'));\r\n                        sibling.setAttribute('aria-hidden', 'true');\r\n                    }\r\n                }));\r\n                this._setAriaHidden(parent);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._revertAriaHidden = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._ariaHiddenValues.forEach((/**\r\n             * @param {?} value\r\n             * @param {?} element\r\n             * @return {?}\r\n             */\r\n            function (value, element) {\r\n                if (value) {\r\n                    element.setAttribute('aria-hidden', value);\r\n                }\r\n                else {\r\n                    element.removeAttribute('aria-hidden');\r\n                }\r\n            }));\r\n            this._ariaHiddenValues.clear();\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} ngbModalRef\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._registerModalRef = /**\r\n         * @private\r\n         * @param {?} ngbModalRef\r\n         * @return {?}\r\n         */\r\n        function (ngbModalRef) {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var unregisterModalRef = (/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var index = _this._modalRefs.indexOf(ngbModalRef);\r\n                if (index > -1) {\r\n                    _this._modalRefs.splice(index, 1);\r\n                }\r\n            });\r\n            this._modalRefs.push(ngbModalRef);\r\n            ngbModalRef.result.then(unregisterModalRef, unregisterModalRef);\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} ngbWindowCmpt\r\n         * @return {?}\r\n         */\r\n        NgbModalStack.prototype._registerWindowCmpt = /**\r\n         * @private\r\n         * @param {?} ngbWindowCmpt\r\n         * @return {?}\r\n         */\r\n        function (ngbWindowCmpt) {\r\n            var _this = this;\r\n            this._windowCmpts.push(ngbWindowCmpt);\r\n            this._activeWindowCmptHasChanged.next();\r\n            ngbWindowCmpt.onDestroy((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var index = _this._windowCmpts.indexOf(ngbWindowCmpt);\r\n                if (index > -1) {\r\n                    _this._windowCmpts.splice(index, 1);\r\n                    _this._activeWindowCmptHasChanged.next();\r\n                }\r\n            }));\r\n        };\r\n        NgbModalStack.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbModalStack.ctorParameters = function () { return [\r\n            { type: core.ApplicationRef },\r\n            { type: core.Injector },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: ScrollBar },\r\n            { type: core.RendererFactory2 },\r\n            { type: core.NgZone }\r\n        ]; };\r\n        /** @nocollapse */ NgbModalStack.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbModalStack_Factory() { return new NgbModalStack(core.ɵɵinject(core.ApplicationRef), core.ɵɵinject(core.INJECTOR), core.ɵɵinject(common.DOCUMENT), core.ɵɵinject(ScrollBar), core.ɵɵinject(core.RendererFactory2), core.ɵɵinject(core.NgZone)); }, token: NgbModalStack, providedIn: \"root\" });\r\n        return NgbModalStack;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A service for opening modal windows.\r\n     *\r\n     * Creating a modal is straightforward: create a component or a template and pass it as an argument to\r\n     * the `.open()` method.\r\n     */\r\n    var NgbModal = /** @class */ (function () {\r\n        function NgbModal(_moduleCFR, _injector, _modalStack, _config) {\r\n            this._moduleCFR = _moduleCFR;\r\n            this._injector = _injector;\r\n            this._modalStack = _modalStack;\r\n            this._config = _config;\r\n        }\r\n        /**\r\n         * Opens a new modal window with the specified content and supplied options.\r\n         *\r\n         * Content can be provided as a `TemplateRef` or a component type. If you pass a component type as content,\r\n         * then instances of those components can be injected with an instance of the `NgbActiveModal` class. You can then\r\n         * use `NgbActiveModal` methods to close / dismiss modals from \"inside\" of your component.\r\n         *\r\n         * Also see the [`NgbModalOptions`](#/components/modal/api#NgbModalOptions) for the list of supported options.\r\n         */\r\n        /**\r\n         * Opens a new modal window with the specified content and supplied options.\r\n         *\r\n         * Content can be provided as a `TemplateRef` or a component type. If you pass a component type as content,\r\n         * then instances of those components can be injected with an instance of the `NgbActiveModal` class. You can then\r\n         * use `NgbActiveModal` methods to close / dismiss modals from \"inside\" of your component.\r\n         *\r\n         * Also see the [`NgbModalOptions`](#/components/modal/api#NgbModalOptions) for the list of supported options.\r\n         * @param {?} content\r\n         * @param {?=} options\r\n         * @return {?}\r\n         */\r\n        NgbModal.prototype.open = /**\r\n         * Opens a new modal window with the specified content and supplied options.\r\n         *\r\n         * Content can be provided as a `TemplateRef` or a component type. If you pass a component type as content,\r\n         * then instances of those components can be injected with an instance of the `NgbActiveModal` class. You can then\r\n         * use `NgbActiveModal` methods to close / dismiss modals from \"inside\" of your component.\r\n         *\r\n         * Also see the [`NgbModalOptions`](#/components/modal/api#NgbModalOptions) for the list of supported options.\r\n         * @param {?} content\r\n         * @param {?=} options\r\n         * @return {?}\r\n         */\r\n        function (content, options) {\r\n            if (options === void 0) { options = {}; }\r\n            /** @type {?} */\r\n            var combinedOptions = Object.assign({}, this._config, options);\r\n            return this._modalStack.open(this._moduleCFR, this._injector, content, combinedOptions);\r\n        };\r\n        /**\r\n         * Dismisses all currently displayed modal windows with the supplied reason.\r\n         *\r\n         * @since 3.1.0\r\n         */\r\n        /**\r\n         * Dismisses all currently displayed modal windows with the supplied reason.\r\n         *\r\n         * \\@since 3.1.0\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        NgbModal.prototype.dismissAll = /**\r\n         * Dismisses all currently displayed modal windows with the supplied reason.\r\n         *\r\n         * \\@since 3.1.0\r\n         * @param {?=} reason\r\n         * @return {?}\r\n         */\r\n        function (reason) { this._modalStack.dismissAll(reason); };\r\n        /**\r\n         * Indicates if there are currently any open modal windows in the application.\r\n         *\r\n         * @since 3.3.0\r\n         */\r\n        /**\r\n         * Indicates if there are currently any open modal windows in the application.\r\n         *\r\n         * \\@since 3.3.0\r\n         * @return {?}\r\n         */\r\n        NgbModal.prototype.hasOpenModals = /**\r\n         * Indicates if there are currently any open modal windows in the application.\r\n         *\r\n         * \\@since 3.3.0\r\n         * @return {?}\r\n         */\r\n        function () { return this._modalStack.hasOpenModals(); };\r\n        NgbModal.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbModal.ctorParameters = function () { return [\r\n            { type: core.ComponentFactoryResolver },\r\n            { type: core.Injector },\r\n            { type: NgbModalStack },\r\n            { type: NgbModalConfig }\r\n        ]; };\r\n        /** @nocollapse */ NgbModal.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbModal_Factory() { return new NgbModal(core.ɵɵinject(core.ComponentFactoryResolver), core.ɵɵinject(core.INJECTOR), core.ɵɵinject(NgbModalStack), core.ɵɵinject(NgbModalConfig)); }, token: NgbModal, providedIn: \"root\" });\r\n        return NgbModal;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbModalModule = /** @class */ (function () {\r\n        function NgbModalModule() {\r\n        }\r\n        NgbModalModule.decorators = [\r\n            { type: core.NgModule, args: [{\r\n                        declarations: [NgbModalBackdrop, NgbModalWindow],\r\n                        entryComponents: [NgbModalBackdrop, NgbModalWindow],\r\n                        providers: [NgbModal]\r\n                    },] }\r\n        ];\r\n        return NgbModalModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbNav`](#/components/nav/api#NgbNav) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the navs used in the application.\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbNavConfig = /** @class */ (function () {\r\n        function NgbNavConfig() {\r\n            this.destroyOnHide = true;\r\n            this.orientation = 'horizontal';\r\n            this.roles = 'tablist';\r\n        }\r\n        NgbNavConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbNavConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbNavConfig_Factory() { return new NgbNavConfig(); }, token: NgbNavConfig, providedIn: \"root\" });\r\n        return NgbNavConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var isValidNavId = (/**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    function (id) { return isDefined(id) && id !== ''; });\r\n    /** @type {?} */\r\n    var navCounter = 0;\r\n    /**\r\n     * This directive must be used to wrap content to be displayed in the nav.\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbNavContent = /** @class */ (function () {\r\n        function NgbNavContent(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbNavContent.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbNavContent]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbNavContent.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbNavContent;\r\n    }());\r\n    /**\r\n     * The directive used to group nav link and related nav content. As well as set nav identifier and some options.\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbNavItem = /** @class */ (function () {\r\n        function NgbNavItem(nav, elementRef) {\r\n            this.elementRef = elementRef;\r\n            /**\r\n             * If `true`, the current nav item is disabled and can't be toggled by user.\r\n             *\r\n             * Nevertheless disabled nav can be selected programmatically via the `.select()` method and the `[activeId]` binding.\r\n             */\r\n            this.disabled = false;\r\n            // TODO: cf https://github.com/angular/angular/issues/30106\r\n            this._nav = nav;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbNavItem.prototype.ngAfterContentChecked = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\r\n            // only @ContentChildren allows us to specify the {descendants: false} option.\r\n            // Without {descendants: false} we are hitting bugs described in:\r\n            // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n            this.contentTpl = this.contentTpls.first;\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbNavItem.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (!isDefined(this.domId)) {\r\n                this.domId = \"ngb-nav-\" + navCounter++;\r\n            }\r\n        };\r\n        Object.defineProperty(NgbNavItem.prototype, \"active\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._nav.activeId === this.id; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbNavItem.prototype, \"id\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return isValidNavId(this._id) ? this._id : this.domId; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbNavItem.prototype, \"panelDomId\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this.domId + \"-panel\"; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbNavItem.prototype.isPanelInDom = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return (isDefined(this.destroyOnHide) ? !this.destroyOnHide : !this._nav.destroyOnHide) || this.active;\r\n        };\r\n        NgbNavItem.decorators = [\r\n            { type: core.Directive, args: [{ selector: '[ngbNavItem]', exportAs: 'ngbNavItem', host: { '[class.nav-item]': 'true' } },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbNavItem.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef((/**\r\n                             * @return {?}\r\n                             */\r\n                            function () { return NgbNav; })),] }] },\r\n            { type: core.ElementRef }\r\n        ]; };\r\n        NgbNavItem.propDecorators = {\r\n            destroyOnHide: [{ type: core.Input }],\r\n            disabled: [{ type: core.Input }],\r\n            domId: [{ type: core.Input }],\r\n            _id: [{ type: core.Input, args: ['ngbNavItem',] }],\r\n            contentTpls: [{ type: core.ContentChildren, args: [NgbNavContent, { descendants: false },] }]\r\n        };\r\n        return NgbNavItem;\r\n    }());\r\n    /**\r\n     * A nav directive that helps with implementing tabbed navigation components.\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbNav = /** @class */ (function () {\r\n        function NgbNav(role, config, _cd) {\r\n            this.role = role;\r\n            this._cd = _cd;\r\n            /**\r\n             * The event emitted after the active nav changes\r\n             * The payload of the event is the newly active nav id\r\n             *\r\n             * If you want to prevent nav change, you should use `(navChange)` event\r\n             */\r\n            this.activeIdChange = new core.EventEmitter();\r\n            /**\r\n             * The nav change event emitted right before the nav change happens on user click.\r\n             *\r\n             * This event won't be emitted if nav is changed programmatically via `[activeId]` or `.select()`.\r\n             *\r\n             * See [`NgbNavChangeEvent`](#/components/nav/api#NgbNavChangeEvent) for payload details.\r\n             */\r\n            this.navChange = new core.EventEmitter();\r\n            this.destroyOnHide = config.destroyOnHide;\r\n            this.orientation = config.orientation;\r\n            this.roles = config.roles;\r\n        }\r\n        /**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        NgbNav.prototype.click = /**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        function (item) {\r\n            if (!item.disabled) {\r\n                this._updateActiveId(item.id);\r\n            }\r\n        };\r\n        /**\r\n         * Selects the nav with the given id and shows its associated pane.\r\n         * Any other nav that was previously selected becomes unselected and its associated pane is hidden.\r\n         */\r\n        /**\r\n         * Selects the nav with the given id and shows its associated pane.\r\n         * Any other nav that was previously selected becomes unselected and its associated pane is hidden.\r\n         * @param {?} id\r\n         * @return {?}\r\n         */\r\n        NgbNav.prototype.select = /**\r\n         * Selects the nav with the given id and shows its associated pane.\r\n         * Any other nav that was previously selected becomes unselected and its associated pane is hidden.\r\n         * @param {?} id\r\n         * @return {?}\r\n         */\r\n        function (id) { this._updateActiveId(id, false); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbNav.prototype.ngAfterContentInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (!isDefined(this.activeId)) {\r\n                /** @type {?} */\r\n                var nextId = this.items.first ? this.items.first.id : null;\r\n                if (isValidNavId(nextId)) {\r\n                    this._updateActiveId(nextId, false);\r\n                    this._cd.detectChanges();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} nextId\r\n         * @param {?=} emitNavChange\r\n         * @return {?}\r\n         */\r\n        NgbNav.prototype._updateActiveId = /**\r\n         * @private\r\n         * @param {?} nextId\r\n         * @param {?=} emitNavChange\r\n         * @return {?}\r\n         */\r\n        function (nextId, emitNavChange) {\r\n            if (emitNavChange === void 0) { emitNavChange = true; }\r\n            if (this.activeId !== nextId) {\r\n                /** @type {?} */\r\n                var defaultPrevented_1 = false;\r\n                if (emitNavChange) {\r\n                    this.navChange.emit({ activeId: this.activeId, nextId: nextId, preventDefault: (/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { defaultPrevented_1 = true; }) });\r\n                }\r\n                if (!defaultPrevented_1) {\r\n                    this.activeId = nextId;\r\n                    this.activeIdChange.emit(nextId);\r\n                }\r\n            }\r\n        };\r\n        NgbNav.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[ngbNav]',\r\n                        exportAs: 'ngbNav',\r\n                        host: {\r\n                            '[class.nav]': 'true',\r\n                            '[class.flex-column]': \"orientation === 'vertical'\",\r\n                            '[attr.aria-orientation]': \"orientation === 'vertical' && roles === 'tablist' ? 'vertical' : undefined\",\r\n                            '[attr.role]': \"role ? role : roles ? 'tablist' : undefined\",\r\n                        }\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbNav.ctorParameters = function () { return [\r\n            { type: String, decorators: [{ type: core.Attribute, args: ['role',] }] },\r\n            { type: NgbNavConfig },\r\n            { type: core.ChangeDetectorRef }\r\n        ]; };\r\n        NgbNav.propDecorators = {\r\n            activeId: [{ type: core.Input }],\r\n            activeIdChange: [{ type: core.Output }],\r\n            destroyOnHide: [{ type: core.Input }],\r\n            orientation: [{ type: core.Input }],\r\n            roles: [{ type: core.Input }],\r\n            items: [{ type: core.ContentChildren, args: [NgbNavItem,] }],\r\n            navChange: [{ type: core.Output }]\r\n        };\r\n        return NgbNav;\r\n    }());\r\n    /**\r\n     * A directive to put on the nav link.\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbNavLink = /** @class */ (function () {\r\n        function NgbNavLink(role, navItem, nav) {\r\n            this.role = role;\r\n            this.navItem = navItem;\r\n            this.nav = nav;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbNavLink.prototype.hasNavItemClass = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // with alternative markup we have to add `.nav-item` class, because `ngbNavItem` is on the ng-container\r\n            return this.navItem.elementRef.nativeElement.nodeType === Node.COMMENT_NODE;\r\n        };\r\n        NgbNavLink.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'a[ngbNavLink]',\r\n                        host: {\r\n                            '[id]': 'navItem.domId',\r\n                            '[class.nav-link]': 'true',\r\n                            '[class.nav-item]': 'hasNavItemClass()',\r\n                            '[attr.role]': \"role ? role : nav.roles ? 'tab' : undefined\",\r\n                            'href': '',\r\n                            '[class.active]': 'navItem.active',\r\n                            '[class.disabled]': 'navItem.disabled',\r\n                            '[attr.tabindex]': 'navItem.disabled ? -1 : undefined',\r\n                            '[attr.aria-controls]': 'navItem.isPanelInDom() ? navItem.panelDomId : null',\r\n                            '[attr.aria-selected]': 'navItem.active',\r\n                            '[attr.aria-disabled]': 'navItem.disabled',\r\n                            '(click)': 'nav.click(navItem); $event.preventDefault()'\r\n                        }\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbNavLink.ctorParameters = function () { return [\r\n            { type: String, decorators: [{ type: core.Attribute, args: ['role',] }] },\r\n            { type: NgbNavItem },\r\n            { type: NgbNav }\r\n        ]; };\r\n        return NgbNavLink;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * The outlet where currently active nav content will be displayed.\r\n     *\r\n     * \\@since 5.2.0\r\n     */\r\n    var NgbNavOutlet = /** @class */ (function () {\r\n        function NgbNavOutlet() {\r\n        }\r\n        NgbNavOutlet.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: '[ngbNavOutlet]',\r\n                        host: { '[class.tab-content]': 'true' },\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n      <ng-template ngFor let-item [ngForOf]=\\\"nav.items\\\">\\n          <div class=\\\"tab-pane\\\"\\n               *ngIf=\\\"item.isPanelInDom()\\\"\\n               [id]=\\\"item.panelDomId\\\"\\n               [class.active]=\\\"item.active\\\"\\n               [attr.role]=\\\"paneRole ? paneRole : nav.roles ? 'tabpanel' : undefined\\\"\\n               [attr.aria-labelledby]=\\\"item.domId\\\">\\n              <ng-template [ngTemplateOutlet]=\\\"item.contentTpl?.templateRef\\\" [ngTemplateOutletContext]=\\\"{$implicit: item.active}\\\"></ng-template>\\n          </div>\\n      </ng-template>\\n  \"\r\n                    }] }\r\n        ];\r\n        NgbNavOutlet.propDecorators = {\r\n            paneRole: [{ type: core.Input }],\r\n            nav: [{ type: core.Input, args: ['ngbNavOutlet',] }]\r\n        };\r\n        return NgbNavOutlet;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_NAV_DIRECTIVES = [NgbNavContent, NgbNav, NgbNavItem, NgbNavLink, NgbNavOutlet];\r\n    var NgbNavModule = /** @class */ (function () {\r\n        function NgbNavModule() {\r\n        }\r\n        NgbNavModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: NGB_NAV_DIRECTIVES, exports: NGB_NAV_DIRECTIVES, imports: [common.CommonModule] },] }\r\n        ];\r\n        return NgbNavModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbPagination`](#/components/pagination/api#NgbPagination) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the paginations used in the application.\r\n     */\r\n    var NgbPaginationConfig = /** @class */ (function () {\r\n        function NgbPaginationConfig() {\r\n            this.disabled = false;\r\n            this.boundaryLinks = false;\r\n            this.directionLinks = true;\r\n            this.ellipses = true;\r\n            this.maxSize = 0;\r\n            this.pageSize = 10;\r\n            this.rotate = false;\r\n        }\r\n        NgbPaginationConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbPaginationConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbPaginationConfig_Factory() { return new NgbPaginationConfig(); }, token: NgbPaginationConfig, providedIn: \"root\" });\r\n        return NgbPaginationConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A directive to match the 'ellipsis' link template\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPaginationEllipsis = /** @class */ (function () {\r\n        function NgbPaginationEllipsis(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPaginationEllipsis.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPaginationEllipsis]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPaginationEllipsis.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPaginationEllipsis;\r\n    }());\r\n    /**\r\n     * A directive to match the 'first' link template\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPaginationFirst = /** @class */ (function () {\r\n        function NgbPaginationFirst(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPaginationFirst.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPaginationFirst]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPaginationFirst.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPaginationFirst;\r\n    }());\r\n    /**\r\n     * A directive to match the 'last' link template\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPaginationLast = /** @class */ (function () {\r\n        function NgbPaginationLast(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPaginationLast.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPaginationLast]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPaginationLast.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPaginationLast;\r\n    }());\r\n    /**\r\n     * A directive to match the 'next' link template\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPaginationNext = /** @class */ (function () {\r\n        function NgbPaginationNext(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPaginationNext.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPaginationNext]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPaginationNext.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPaginationNext;\r\n    }());\r\n    /**\r\n     * A directive to match the page 'number' link template\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPaginationNumber = /** @class */ (function () {\r\n        function NgbPaginationNumber(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPaginationNumber.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPaginationNumber]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPaginationNumber.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPaginationNumber;\r\n    }());\r\n    /**\r\n     * A directive to match the 'previous' link template\r\n     *\r\n     * \\@since 4.1.0\r\n     */\r\n    var NgbPaginationPrevious = /** @class */ (function () {\r\n        function NgbPaginationPrevious(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbPaginationPrevious.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbPaginationPrevious]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPaginationPrevious.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbPaginationPrevious;\r\n    }());\r\n    /**\r\n     * A component that displays page numbers and allows to customize them in several ways.\r\n     */\r\n    var NgbPagination = /** @class */ (function () {\r\n        function NgbPagination(config) {\r\n            this.pageCount = 0;\r\n            this.pages = [];\r\n            /**\r\n             *  The current page.\r\n             *\r\n             *  Page numbers start with `1`.\r\n             */\r\n            this.page = 1;\r\n            /**\r\n             *  An event fired when the page is changed. Will fire only if collection size is set and all values are valid.\r\n             *\r\n             *  Event payload is the number of the newly selected page.\r\n             *\r\n             *  Page numbers start with `1`.\r\n             */\r\n            this.pageChange = new core.EventEmitter(true);\r\n            this.disabled = config.disabled;\r\n            this.boundaryLinks = config.boundaryLinks;\r\n            this.directionLinks = config.directionLinks;\r\n            this.ellipses = config.ellipses;\r\n            this.maxSize = config.maxSize;\r\n            this.pageSize = config.pageSize;\r\n            this.rotate = config.rotate;\r\n            this.size = config.size;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype.hasPrevious = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.page > 1; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype.hasNext = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.page < this.pageCount; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype.nextDisabled = /**\r\n         * @return {?}\r\n         */\r\n        function () { return !this.hasNext() || this.disabled; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype.previousDisabled = /**\r\n         * @return {?}\r\n         */\r\n        function () { return !this.hasPrevious() || this.disabled; };\r\n        /**\r\n         * @param {?} pageNumber\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype.selectPage = /**\r\n         * @param {?} pageNumber\r\n         * @return {?}\r\n         */\r\n        function (pageNumber) { this._updatePages(pageNumber); };\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) { this._updatePages(this.page); };\r\n        /**\r\n         * @param {?} pageNumber\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype.isEllipsis = /**\r\n         * @param {?} pageNumber\r\n         * @return {?}\r\n         */\r\n        function (pageNumber) { return pageNumber === -1; };\r\n        /**\r\n         * Appends ellipses and first/last page number to the displayed pages\r\n         */\r\n        /**\r\n         * Appends ellipses and first/last page number to the displayed pages\r\n         * @private\r\n         * @param {?} start\r\n         * @param {?} end\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype._applyEllipses = /**\r\n         * Appends ellipses and first/last page number to the displayed pages\r\n         * @private\r\n         * @param {?} start\r\n         * @param {?} end\r\n         * @return {?}\r\n         */\r\n        function (start, end) {\r\n            if (this.ellipses) {\r\n                if (start > 0) {\r\n                    // The first page will always be included. If the displayed range\r\n                    // starts after the third page, then add ellipsis. But if the range\r\n                    // starts on the third page, then add the second page instead of\r\n                    // an ellipsis, because the ellipsis would only hide a single page.\r\n                    if (start > 2) {\r\n                        this.pages.unshift(-1);\r\n                    }\r\n                    else if (start === 2) {\r\n                        this.pages.unshift(2);\r\n                    }\r\n                    this.pages.unshift(1);\r\n                }\r\n                if (end < this.pageCount) {\r\n                    // The last page will always be included. If the displayed range\r\n                    // ends before the third-last page, then add ellipsis. But if the range\r\n                    // ends on third-last page, then add the second-last page instead of\r\n                    // an ellipsis, because the ellipsis would only hide a single page.\r\n                    if (end < (this.pageCount - 2)) {\r\n                        this.pages.push(-1);\r\n                    }\r\n                    else if (end === (this.pageCount - 2)) {\r\n                        this.pages.push(this.pageCount - 1);\r\n                    }\r\n                    this.pages.push(this.pageCount);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Rotates page numbers based on maxSize items visible.\r\n         * Currently selected page stays in the middle:\r\n         *\r\n         * Ex. for selected page = 6:\r\n         * [5,*6*,7] for maxSize = 3\r\n         * [4,5,*6*,7] for maxSize = 4\r\n         */\r\n        /**\r\n         * Rotates page numbers based on maxSize items visible.\r\n         * Currently selected page stays in the middle:\r\n         *\r\n         * Ex. for selected page = 6:\r\n         * [5,*6*,7] for maxSize = 3\r\n         * [4,5,*6*,7] for maxSize = 4\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype._applyRotation = /**\r\n         * Rotates page numbers based on maxSize items visible.\r\n         * Currently selected page stays in the middle:\r\n         *\r\n         * Ex. for selected page = 6:\r\n         * [5,*6*,7] for maxSize = 3\r\n         * [4,5,*6*,7] for maxSize = 4\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var start = 0;\r\n            /** @type {?} */\r\n            var end = this.pageCount;\r\n            /** @type {?} */\r\n            var leftOffset = Math.floor(this.maxSize / 2);\r\n            /** @type {?} */\r\n            var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\r\n            if (this.page <= leftOffset) {\r\n                // very beginning, no rotation -> [0..maxSize]\r\n                end = this.maxSize;\r\n            }\r\n            else if (this.pageCount - this.page < leftOffset) {\r\n                // very end, no rotation -> [len-maxSize..len]\r\n                start = this.pageCount - this.maxSize;\r\n            }\r\n            else {\r\n                // rotate\r\n                start = this.page - leftOffset - 1;\r\n                end = this.page + rightOffset;\r\n            }\r\n            return [start, end];\r\n        };\r\n        /**\r\n         * Paginates page numbers based on maxSize items per page.\r\n         */\r\n        /**\r\n         * Paginates page numbers based on maxSize items per page.\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype._applyPagination = /**\r\n         * Paginates page numbers based on maxSize items per page.\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var page = Math.ceil(this.page / this.maxSize) - 1;\r\n            /** @type {?} */\r\n            var start = page * this.maxSize;\r\n            /** @type {?} */\r\n            var end = start + this.maxSize;\r\n            return [start, end];\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} newPageNo\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype._setPageInRange = /**\r\n         * @private\r\n         * @param {?} newPageNo\r\n         * @return {?}\r\n         */\r\n        function (newPageNo) {\r\n            /** @type {?} */\r\n            var prevPageNo = this.page;\r\n            this.page = getValueInRange(newPageNo, this.pageCount, 1);\r\n            if (this.page !== prevPageNo && isNumber(this.collectionSize)) {\r\n                this.pageChange.emit(this.page);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} newPage\r\n         * @return {?}\r\n         */\r\n        NgbPagination.prototype._updatePages = /**\r\n         * @private\r\n         * @param {?} newPage\r\n         * @return {?}\r\n         */\r\n        function (newPage) {\r\n            var _a, _b;\r\n            this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\r\n            if (!isNumber(this.pageCount)) {\r\n                this.pageCount = 0;\r\n            }\r\n            // fill-in model needed to render pages\r\n            this.pages.length = 0;\r\n            for (var i = 1; i <= this.pageCount; i++) {\r\n                this.pages.push(i);\r\n            }\r\n            // set page within 1..max range\r\n            this._setPageInRange(newPage);\r\n            // apply maxSize if necessary\r\n            if (this.maxSize > 0 && this.pageCount > this.maxSize) {\r\n                /** @type {?} */\r\n                var start = 0;\r\n                /** @type {?} */\r\n                var end = this.pageCount;\r\n                // either paginating or rotating page numbers\r\n                if (this.rotate) {\r\n                    _a = __read(this._applyRotation(), 2), start = _a[0], end = _a[1];\r\n                }\r\n                else {\r\n                    _b = __read(this._applyPagination(), 2), start = _b[0], end = _b[1];\r\n                }\r\n                this.pages = this.pages.slice(start, end);\r\n                // adding ellipses\r\n                this._applyEllipses(start, end);\r\n            }\r\n        };\r\n        NgbPagination.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-pagination',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        host: { 'role': 'navigation' },\r\n                        template: \"\\n    <ng-template #first><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.first\\\">&laquo;&laquo;</span></ng-template>\\n    <ng-template #previous><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.previous\\\">&laquo;</span></ng-template>\\n    <ng-template #next><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.next\\\">&raquo;</span></ng-template>\\n    <ng-template #last><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.last\\\">&raquo;&raquo;</span></ng-template>\\n    <ng-template #ellipsis>...</ng-template>\\n    <ng-template #defaultNumber let-page let-currentPage=\\\"currentPage\\\">\\n      {{ page }}\\n      <span *ngIf=\\\"page === currentPage\\\" class=\\\"sr-only\\\">(current)</span>\\n    </ng-template>\\n    <ul [class]=\\\"'pagination' + (size ? ' pagination-' + size : '')\\\">\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"previousDisabled()\\\">\\n        <a aria-label=\\\"First\\\" i18n-aria-label=\\\"@@ngb.pagination.first-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(1); $event.preventDefault()\\\" [attr.tabindex]=\\\"previousDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"previousDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplFirst?.templateRef || first\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: previousDisabled(), currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"previousDisabled()\\\">\\n        <a aria-label=\\\"Previous\\\" i18n-aria-label=\\\"@@ngb.pagination.previous-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(page-1); $event.preventDefault()\\\" [attr.tabindex]=\\\"previousDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"previousDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplPrevious?.templateRef || previous\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: previousDisabled()}\\\"></ng-template>\\n        </a>\\n      </li>\\n      <li *ngFor=\\\"let pageNumber of pages\\\" class=\\\"page-item\\\" [class.active]=\\\"pageNumber === page\\\"\\n        [class.disabled]=\\\"isEllipsis(pageNumber) || disabled\\\" [attr.aria-current]=\\\"(pageNumber === page ? 'page' : null)\\\">\\n        <a *ngIf=\\\"isEllipsis(pageNumber)\\\" class=\\\"page-link\\\" tabindex=\\\"-1\\\" aria-disabled=\\\"true\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplEllipsis?.templateRef || ellipsis\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: true, currentPage: page}\\\"></ng-template>\\n        </a>\\n        <a *ngIf=\\\"!isEllipsis(pageNumber)\\\" class=\\\"page-link\\\" href (click)=\\\"selectPage(pageNumber); $event.preventDefault()\\\" [attr.tabindex]=\\\"disabled ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"disabled ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplNumber?.templateRef || defaultNumber\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: disabled, $implicit: pageNumber, currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"nextDisabled()\\\">\\n        <a aria-label=\\\"Next\\\" i18n-aria-label=\\\"@@ngb.pagination.next-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(page+1); $event.preventDefault()\\\" [attr.tabindex]=\\\"nextDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"nextDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplNext?.templateRef || next\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: nextDisabled(), currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"nextDisabled()\\\">\\n        <a aria-label=\\\"Last\\\" i18n-aria-label=\\\"@@ngb.pagination.last-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(pageCount); $event.preventDefault()\\\" [attr.tabindex]=\\\"nextDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"nextDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplLast?.templateRef || last\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: nextDisabled(), currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n    </ul>\\n  \"\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPagination.ctorParameters = function () { return [\r\n            { type: NgbPaginationConfig }\r\n        ]; };\r\n        NgbPagination.propDecorators = {\r\n            tplEllipsis: [{ type: core.ContentChild, args: [NgbPaginationEllipsis, { static: false },] }],\r\n            tplFirst: [{ type: core.ContentChild, args: [NgbPaginationFirst, { static: false },] }],\r\n            tplLast: [{ type: core.ContentChild, args: [NgbPaginationLast, { static: false },] }],\r\n            tplNext: [{ type: core.ContentChild, args: [NgbPaginationNext, { static: false },] }],\r\n            tplNumber: [{ type: core.ContentChild, args: [NgbPaginationNumber, { static: false },] }],\r\n            tplPrevious: [{ type: core.ContentChild, args: [NgbPaginationPrevious, { static: false },] }],\r\n            disabled: [{ type: core.Input }],\r\n            boundaryLinks: [{ type: core.Input }],\r\n            directionLinks: [{ type: core.Input }],\r\n            ellipses: [{ type: core.Input }],\r\n            rotate: [{ type: core.Input }],\r\n            collectionSize: [{ type: core.Input }],\r\n            maxSize: [{ type: core.Input }],\r\n            page: [{ type: core.Input }],\r\n            pageSize: [{ type: core.Input }],\r\n            pageChange: [{ type: core.Output }],\r\n            size: [{ type: core.Input }]\r\n        };\r\n        return NgbPagination;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var DIRECTIVES = [\r\n        NgbPagination, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationNext, NgbPaginationNumber,\r\n        NgbPaginationPrevious\r\n    ];\r\n    var NgbPaginationModule = /** @class */ (function () {\r\n        function NgbPaginationModule() {\r\n        }\r\n        NgbPaginationModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: DIRECTIVES, exports: DIRECTIVES, imports: [common.CommonModule] },] }\r\n        ];\r\n        return NgbPaginationModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var Trigger = /** @class */ (function () {\r\n        function Trigger(open, close) {\r\n            this.open = open;\r\n            this.close = close;\r\n            if (!close) {\r\n                this.close = open;\r\n            }\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        Trigger.prototype.isManual = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.open === 'manual' || this.close === 'manual'; };\r\n        return Trigger;\r\n    }());\r\n    /** @type {?} */\r\n    var DEFAULT_ALIASES = {\r\n        'hover': ['mouseenter', 'mouseleave'],\r\n        'focus': ['focusin', 'focusout'],\r\n    };\r\n    /**\r\n     * @param {?} triggers\r\n     * @param {?=} aliases\r\n     * @return {?}\r\n     */\r\n    function parseTriggers(triggers, aliases) {\r\n        if (aliases === void 0) { aliases = DEFAULT_ALIASES; }\r\n        /** @type {?} */\r\n        var trimmedTriggers = (triggers || '').trim();\r\n        if (trimmedTriggers.length === 0) {\r\n            return [];\r\n        }\r\n        /** @type {?} */\r\n        var parsedTriggers = trimmedTriggers.split(/\\s+/).map((/**\r\n         * @param {?} trigger\r\n         * @return {?}\r\n         */\r\n        function (trigger) { return trigger.split(':'); })).map((/**\r\n         * @param {?} triggerPair\r\n         * @return {?}\r\n         */\r\n        function (triggerPair) {\r\n            /** @type {?} */\r\n            var alias = aliases[triggerPair[0]] || triggerPair;\r\n            return new Trigger(alias[0], alias[1]);\r\n        }));\r\n        /** @type {?} */\r\n        var manualTriggers = parsedTriggers.filter((/**\r\n         * @param {?} triggerPair\r\n         * @return {?}\r\n         */\r\n        function (triggerPair) { return triggerPair.isManual(); }));\r\n        if (manualTriggers.length > 1) {\r\n            throw 'Triggers parse error: only one manual trigger is allowed';\r\n        }\r\n        if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\r\n            throw 'Triggers parse error: manual trigger can\\'t be mixed with other triggers';\r\n        }\r\n        return parsedTriggers;\r\n    }\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} nativeElement\r\n     * @param {?} triggers\r\n     * @param {?} isOpenedFn\r\n     * @return {?}\r\n     */\r\n    function observeTriggers(renderer, nativeElement, triggers, isOpenedFn) {\r\n        return new rxjs.Observable((/**\r\n         * @param {?} subscriber\r\n         * @return {?}\r\n         */\r\n        function (subscriber) {\r\n            /** @type {?} */\r\n            var listeners = [];\r\n            /** @type {?} */\r\n            var openFn = (/**\r\n             * @return {?}\r\n             */\r\n            function () { return subscriber.next(true); });\r\n            /** @type {?} */\r\n            var closeFn = (/**\r\n             * @return {?}\r\n             */\r\n            function () { return subscriber.next(false); });\r\n            /** @type {?} */\r\n            var toggleFn = (/**\r\n             * @return {?}\r\n             */\r\n            function () { return subscriber.next(!isOpenedFn()); });\r\n            triggers.forEach((/**\r\n             * @param {?} trigger\r\n             * @return {?}\r\n             */\r\n            function (trigger) {\r\n                if (trigger.open === trigger.close) {\r\n                    listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));\r\n                }\r\n                else {\r\n                    listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));\r\n                }\r\n            }));\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            function () { listeners.forEach((/**\r\n             * @param {?} unsubscribeFn\r\n             * @return {?}\r\n             */\r\n            function (unsubscribeFn) { return unsubscribeFn(); })); });\r\n        }));\r\n    }\r\n    /** @type {?} */\r\n    var delayOrNoop = (/**\r\n     * @template T\r\n     * @param {?} time\r\n     * @return {?}\r\n     */\r\n    function (time) { return time > 0 ? operators.delay(time) : (/**\r\n     * @param {?} a\r\n     * @return {?}\r\n     */\r\n    function (a) { return a; }); });\r\n    /**\r\n     * @param {?} openDelay\r\n     * @param {?} closeDelay\r\n     * @param {?} isOpenedFn\r\n     * @return {?}\r\n     */\r\n    function triggerDelay(openDelay, closeDelay, isOpenedFn) {\r\n        return (/**\r\n         * @param {?} input$\r\n         * @return {?}\r\n         */\r\n        function (input$) {\r\n            /** @type {?} */\r\n            var pending = null;\r\n            /** @type {?} */\r\n            var filteredInput$ = input$.pipe(operators.map((/**\r\n             * @param {?} open\r\n             * @return {?}\r\n             */\r\n            function (open) { return ({ open: open }); })), operators.filter((/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            function (event) {\r\n                /** @type {?} */\r\n                var currentlyOpen = isOpenedFn();\r\n                if (currentlyOpen !== event.open && (!pending || pending.open === currentlyOpen)) {\r\n                    pending = event;\r\n                    return true;\r\n                }\r\n                if (pending && pending.open !== event.open) {\r\n                    pending = null;\r\n                }\r\n                return false;\r\n            })), operators.share());\r\n            /** @type {?} */\r\n            var delayedOpen$ = filteredInput$.pipe(operators.filter((/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            function (event) { return event.open; })), delayOrNoop(openDelay));\r\n            /** @type {?} */\r\n            var delayedClose$ = filteredInput$.pipe(operators.filter((/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            function (event) { return !event.open; })), delayOrNoop(closeDelay));\r\n            return rxjs.merge(delayedOpen$, delayedClose$)\r\n                .pipe(operators.filter((/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            function (event) {\r\n                if (event === pending) {\r\n                    pending = null;\r\n                    return event.open !== isOpenedFn();\r\n                }\r\n                return false;\r\n            })), operators.map((/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            function (event) { return event.open; })));\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} nativeElement\r\n     * @param {?} triggers\r\n     * @param {?} isOpenedFn\r\n     * @param {?} openFn\r\n     * @param {?} closeFn\r\n     * @param {?=} openDelay\r\n     * @param {?=} closeDelay\r\n     * @return {?}\r\n     */\r\n    function listenToTriggers(renderer, nativeElement, triggers, isOpenedFn, openFn, closeFn, openDelay, closeDelay) {\r\n        if (openDelay === void 0) { openDelay = 0; }\r\n        if (closeDelay === void 0) { closeDelay = 0; }\r\n        /** @type {?} */\r\n        var parsedTriggers = parseTriggers(triggers);\r\n        if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n        }\r\n        /** @type {?} */\r\n        var subscription = observeTriggers(renderer, nativeElement, parsedTriggers, isOpenedFn)\r\n            .pipe(triggerDelay(openDelay, closeDelay, isOpenedFn))\r\n            .subscribe((/**\r\n         * @param {?} open\r\n         * @return {?}\r\n         */\r\n        function (open) { return (open ? openFn() : closeFn()); }));\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        function () { return subscription.unsubscribe(); });\r\n    }\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbPopover`](#/components/popover/api#NgbPopover) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the popovers used in the application.\r\n     */\r\n    var NgbPopoverConfig = /** @class */ (function () {\r\n        function NgbPopoverConfig() {\r\n            this.autoClose = true;\r\n            this.placement = 'auto';\r\n            this.triggers = 'click';\r\n            this.disablePopover = false;\r\n            this.openDelay = 0;\r\n            this.closeDelay = 0;\r\n        }\r\n        NgbPopoverConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbPopoverConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbPopoverConfig_Factory() { return new NgbPopoverConfig(); }, token: NgbPopoverConfig, providedIn: \"root\" });\r\n        return NgbPopoverConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var nextId$3 = 0;\r\n    var NgbPopoverWindow = /** @class */ (function () {\r\n        function NgbPopoverWindow() {\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPopoverWindow.prototype.isTitleTemplate = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.title instanceof core.TemplateRef; };\r\n        NgbPopoverWindow.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-popover-window',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: { '[class]': '\"popover\" + (popoverClass ? \" \" + popoverClass : \"\")', 'role': 'tooltip', '[id]': 'id' },\r\n                        template: \"\\n    <div class=\\\"arrow\\\"></div>\\n    <h3 class=\\\"popover-header\\\" *ngIf=\\\"title != null\\\">\\n      <ng-template #simpleTitle>{{title}}</ng-template>\\n      <ng-template [ngTemplateOutlet]=\\\"isTitleTemplate() ? title : simpleTitle\\\" [ngTemplateOutletContext]=\\\"context\\\"></ng-template>\\n    </h3>\\n    <div class=\\\"popover-body\\\"><ng-content></ng-content></div>\",\r\n                        styles: [\"ngb-popover-window.bs-popover-bottom>.arrow,ngb-popover-window.bs-popover-top>.arrow{left:50%;margin-left:-.5rem}ngb-popover-window.bs-popover-bottom-left>.arrow,ngb-popover-window.bs-popover-top-left>.arrow{left:2em}ngb-popover-window.bs-popover-bottom-right>.arrow,ngb-popover-window.bs-popover-top-right>.arrow{left:auto;right:2em}ngb-popover-window.bs-popover-left>.arrow,ngb-popover-window.bs-popover-right>.arrow{top:50%;margin-top:-.5rem}ngb-popover-window.bs-popover-left-top>.arrow,ngb-popover-window.bs-popover-right-top>.arrow{top:.7em}ngb-popover-window.bs-popover-left-bottom>.arrow,ngb-popover-window.bs-popover-right-bottom>.arrow{top:auto;bottom:.7em}\"]\r\n                    }] }\r\n        ];\r\n        NgbPopoverWindow.propDecorators = {\r\n            title: [{ type: core.Input }],\r\n            id: [{ type: core.Input }],\r\n            popoverClass: [{ type: core.Input }],\r\n            context: [{ type: core.Input }]\r\n        };\r\n        return NgbPopoverWindow;\r\n    }());\r\n    /**\r\n     * A lightweight and extensible directive for fancy popover creation.\r\n     */\r\n    var NgbPopover = /** @class */ (function () {\r\n        function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {\r\n            var _this = this;\r\n            this._elementRef = _elementRef;\r\n            this._renderer = _renderer;\r\n            this._ngZone = _ngZone;\r\n            this._document = _document;\r\n            this._changeDetector = _changeDetector;\r\n            /**\r\n             * An event emitted when the popover is shown. Contains no payload.\r\n             */\r\n            this.shown = new core.EventEmitter();\r\n            /**\r\n             * An event emitted when the popover is hidden. Contains no payload.\r\n             */\r\n            this.hidden = new core.EventEmitter();\r\n            this._ngbPopoverWindowId = \"ngb-popover-\" + nextId$3++;\r\n            this.autoClose = config.autoClose;\r\n            this.placement = config.placement;\r\n            this.triggers = config.triggers;\r\n            this.container = config.container;\r\n            this.disablePopover = config.disablePopover;\r\n            this.popoverClass = config.popoverClass;\r\n            this.openDelay = config.openDelay;\r\n            this.closeDelay = config.closeDelay;\r\n            this._popupService = new PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\r\n            this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                if (_this._windowRef) {\r\n                    positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body', 'bs-popover');\r\n                }\r\n            }));\r\n        }\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype._isDisabled = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.disablePopover) {\r\n                return true;\r\n            }\r\n            if (!this.ngbPopover && !this.popoverTitle) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Opens the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering.\r\n         * The `context` is an optional value to be injected into the popover template when it is created.\r\n         */\r\n        /**\r\n         * Opens the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering.\r\n         * The `context` is an optional value to be injected into the popover template when it is created.\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype.open = /**\r\n         * Opens the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering.\r\n         * The `context` is an optional value to be injected into the popover template when it is created.\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        function (context) {\r\n            var _this = this;\r\n            if (!this._windowRef && !this._isDisabled()) {\r\n                this._windowRef = this._popupService.open(this.ngbPopover, context);\r\n                this._windowRef.instance.title = this.popoverTitle;\r\n                this._windowRef.instance.context = context;\r\n                this._windowRef.instance.popoverClass = this.popoverClass;\r\n                this._windowRef.instance.id = this._ngbPopoverWindowId;\r\n                this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbPopoverWindowId);\r\n                if (this.container === 'body') {\r\n                    this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n                }\r\n                // We need to detect changes, because we don't know where .open() might be called from.\r\n                // Ex. opening popover from one of lifecycle hooks that run after the CD\r\n                // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception\r\n                this._windowRef.changeDetectorRef.detectChanges();\r\n                // We need to mark for check, because popover won't work inside the OnPush component.\r\n                // Ex. when we use expression like `{{ popover.isOpen() : 'opened' : 'closed' }}`\r\n                // inside the template of an OnPush component and we change the popover from\r\n                // open -> closed, the expression in question won't be updated unless we explicitly\r\n                // mark the parent component to be checked.\r\n                this._windowRef.changeDetectorRef.markForCheck();\r\n                ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.close(); }), this.hidden, [this._windowRef.location.nativeElement]);\r\n                this.shown.emit();\r\n            }\r\n        };\r\n        /**\r\n         * Closes the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the popover.\r\n         */\r\n        /**\r\n         * Closes the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the popover.\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype.close = /**\r\n         * Closes the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the popover.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._windowRef) {\r\n                this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n                this._popupService.close();\r\n                this._windowRef = null;\r\n                this.hidden.emit();\r\n                this._changeDetector.markForCheck();\r\n            }\r\n        };\r\n        /**\r\n         * Toggles the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the popover.\r\n         */\r\n        /**\r\n         * Toggles the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the popover.\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype.toggle = /**\r\n         * Toggles the popover.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the popover.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._windowRef) {\r\n                this.close();\r\n            }\r\n            else {\r\n                this.open();\r\n            }\r\n        };\r\n        /**\r\n         * Returns `true`, if the popover is currently shown.\r\n         */\r\n        /**\r\n         * Returns `true`, if the popover is currently shown.\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype.isOpen = /**\r\n         * Returns `true`, if the popover is currently shown.\r\n         * @return {?}\r\n         */\r\n        function () { return this._windowRef != null; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);\r\n        };\r\n        /**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype.ngOnChanges = /**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        function (_a) {\r\n            var ngbPopover = _a.ngbPopover, popoverTitle = _a.popoverTitle, disablePopover = _a.disablePopover, popoverClass = _a.popoverClass;\r\n            if (popoverClass && this.isOpen()) {\r\n                this._windowRef.instance.popoverClass = popoverClass.currentValue;\r\n            }\r\n            // close popover if title and content become empty, or disablePopover set to true\r\n            if ((ngbPopover || popoverTitle || disablePopover) && this._isDisabled()) {\r\n                this.close();\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbPopover.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.close();\r\n            // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\r\n            // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\r\n            if (this._unregisterListenersFn) {\r\n                this._unregisterListenersFn();\r\n            }\r\n            this._zoneSubscription.unsubscribe();\r\n        };\r\n        NgbPopover.decorators = [\r\n            { type: core.Directive, args: [{ selector: '[ngbPopover]', exportAs: 'ngbPopover' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbPopover.ctorParameters = function () { return [\r\n            { type: core.ElementRef },\r\n            { type: core.Renderer2 },\r\n            { type: core.Injector },\r\n            { type: core.ComponentFactoryResolver },\r\n            { type: core.ViewContainerRef },\r\n            { type: NgbPopoverConfig },\r\n            { type: core.NgZone },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: core.ChangeDetectorRef },\r\n            { type: core.ApplicationRef }\r\n        ]; };\r\n        NgbPopover.propDecorators = {\r\n            autoClose: [{ type: core.Input }],\r\n            ngbPopover: [{ type: core.Input }],\r\n            popoverTitle: [{ type: core.Input }],\r\n            placement: [{ type: core.Input }],\r\n            triggers: [{ type: core.Input }],\r\n            container: [{ type: core.Input }],\r\n            disablePopover: [{ type: core.Input }],\r\n            popoverClass: [{ type: core.Input }],\r\n            openDelay: [{ type: core.Input }],\r\n            closeDelay: [{ type: core.Input }],\r\n            shown: [{ type: core.Output }],\r\n            hidden: [{ type: core.Output }]\r\n        };\r\n        return NgbPopover;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbPopoverModule = /** @class */ (function () {\r\n        function NgbPopoverModule() {\r\n        }\r\n        NgbPopoverModule.decorators = [\r\n            { type: core.NgModule, args: [{\r\n                        declarations: [NgbPopover, NgbPopoverWindow],\r\n                        exports: [NgbPopover],\r\n                        imports: [common.CommonModule],\r\n                        entryComponents: [NgbPopoverWindow]\r\n                    },] }\r\n        ];\r\n        return NgbPopoverModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbProgressbar`](#/components/progressbar/api#NgbProgressbar) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the progress bars used in the application.\r\n     */\r\n    var NgbProgressbarConfig = /** @class */ (function () {\r\n        function NgbProgressbarConfig() {\r\n            this.max = 100;\r\n            this.animated = false;\r\n            this.striped = false;\r\n            this.showValue = false;\r\n        }\r\n        NgbProgressbarConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbProgressbarConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbProgressbarConfig_Factory() { return new NgbProgressbarConfig(); }, token: NgbProgressbarConfig, providedIn: \"root\" });\r\n        return NgbProgressbarConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A directive that provides feedback on the progress of a workflow or an action.\r\n     */\r\n    var NgbProgressbar = /** @class */ (function () {\r\n        function NgbProgressbar(config) {\r\n            /**\r\n             * The current value for the progress bar.\r\n             *\r\n             * Should be in the `[0, max]` range.\r\n             */\r\n            this.value = 0;\r\n            this.max = config.max;\r\n            this.animated = config.animated;\r\n            this.striped = config.striped;\r\n            this.textType = config.textType;\r\n            this.type = config.type;\r\n            this.showValue = config.showValue;\r\n            this.height = config.height;\r\n        }\r\n        Object.defineProperty(NgbProgressbar.prototype, \"max\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._max; },\r\n            /**\r\n             * The maximal value to be displayed in the progress bar.\r\n             *\r\n             * Should be a positive number. Will default to 100 otherwise.\r\n             */\r\n            set: /**\r\n             * The maximal value to be displayed in the progress bar.\r\n             *\r\n             * Should be a positive number. Will default to 100 otherwise.\r\n             * @param {?} max\r\n             * @return {?}\r\n             */\r\n            function (max) {\r\n                this._max = !isNumber(max) || max <= 0 ? 100 : max;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbProgressbar.prototype.getValue = /**\r\n         * @return {?}\r\n         */\r\n        function () { return getValueInRange(this.value, this.max); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbProgressbar.prototype.getPercentValue = /**\r\n         * @return {?}\r\n         */\r\n        function () { return 100 * this.getValue() / this.max; };\r\n        NgbProgressbar.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-progressbar',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n    <div class=\\\"progress\\\" [style.height]=\\\"height\\\">\\n      <div class=\\\"progress-bar{{type ? ' bg-' + type : ''}}{{textType ? ' text-' + textType : ''}}\\n      {{animated ? ' progress-bar-animated' : ''}}{{striped ? ' progress-bar-striped' : ''}}\\\" role=\\\"progressbar\\\" [style.width.%]=\\\"getPercentValue()\\\"\\n      [attr.aria-valuenow]=\\\"getValue()\\\" aria-valuemin=\\\"0\\\" [attr.aria-valuemax]=\\\"max\\\">\\n        <span *ngIf=\\\"showValue\\\" i18n=\\\"@@ngb.progressbar.value\\\">{{getPercentValue()}}%</span><ng-content></ng-content>\\n      </div>\\n    </div>\\n  \"\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbProgressbar.ctorParameters = function () { return [\r\n            { type: NgbProgressbarConfig }\r\n        ]; };\r\n        NgbProgressbar.propDecorators = {\r\n            max: [{ type: core.Input }],\r\n            animated: [{ type: core.Input }],\r\n            striped: [{ type: core.Input }],\r\n            showValue: [{ type: core.Input }],\r\n            textType: [{ type: core.Input }],\r\n            type: [{ type: core.Input }],\r\n            value: [{ type: core.Input }],\r\n            height: [{ type: core.Input }]\r\n        };\r\n        return NgbProgressbar;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbProgressbarModule = /** @class */ (function () {\r\n        function NgbProgressbarModule() {\r\n        }\r\n        NgbProgressbarModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: [NgbProgressbar], exports: [NgbProgressbar], imports: [common.CommonModule] },] }\r\n        ];\r\n        return NgbProgressbarModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbRating`](#/components/rating/api#NgbRating) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the ratings used in the application.\r\n     */\r\n    var NgbRatingConfig = /** @class */ (function () {\r\n        function NgbRatingConfig() {\r\n            this.max = 10;\r\n            this.readonly = false;\r\n            this.resettable = false;\r\n        }\r\n        NgbRatingConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbRatingConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbRatingConfig_Factory() { return new NgbRatingConfig(); }, token: NgbRatingConfig, providedIn: \"root\" });\r\n        return NgbRatingConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_RATING_VALUE_ACCESSOR = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbRating; })),\r\n        multi: true\r\n    };\r\n    /**\r\n     * A directive that helps visualising and interacting with a star rating bar.\r\n     */\r\n    var NgbRating = /** @class */ (function () {\r\n        function NgbRating(config, _changeDetectorRef) {\r\n            this._changeDetectorRef = _changeDetectorRef;\r\n            this.contexts = [];\r\n            this.disabled = false;\r\n            /**\r\n             * An event emitted when the user is hovering over a given rating.\r\n             *\r\n             * Event payload equals to the rating being hovered over.\r\n             */\r\n            this.hover = new core.EventEmitter();\r\n            /**\r\n             * An event emitted when the user stops hovering over a given rating.\r\n             *\r\n             * Event payload equals to the rating of the last item being hovered over.\r\n             */\r\n            this.leave = new core.EventEmitter();\r\n            /**\r\n             * An event emitted when the user selects a new rating.\r\n             *\r\n             * Event payload equals to the newly selected rating.\r\n             */\r\n            this.rateChange = new core.EventEmitter(true);\r\n            this.onChange = (/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            function (_) { });\r\n            this.onTouched = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n            this.max = config.max;\r\n            this.readonly = config.readonly;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.ariaValueText = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.nextRate + \" out of \" + this.max; };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.enter = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (!this.readonly && !this.disabled) {\r\n                this._updateState(value);\r\n            }\r\n            this.hover.emit(value);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.handleBlur = /**\r\n         * @return {?}\r\n         */\r\n        function () { this.onTouched(); };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.handleClick = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (!this.readonly && !this.disabled) {\r\n                this.update(this.resettable && this.rate === value ? 0 : value);\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.handleKeyDown = /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            // tslint:disable-next-line:deprecation\r\n            switch (event.which) {\r\n                case Key.ArrowDown:\r\n                case Key.ArrowLeft:\r\n                    this.update(this.rate - 1);\r\n                    break;\r\n                case Key.ArrowUp:\r\n                case Key.ArrowRight:\r\n                    this.update(this.rate + 1);\r\n                    break;\r\n                case Key.Home:\r\n                    this.update(0);\r\n                    break;\r\n                case Key.End:\r\n                    this.update(this.max);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            // note 'return' in default case\r\n            event.preventDefault();\r\n        };\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            if (changes['rate']) {\r\n                this.update(this.rate);\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.contexts = Array.from({ length: this.max }, (/**\r\n             * @param {?} v\r\n             * @param {?} k\r\n             * @return {?}\r\n             */\r\n            function (v, k) { return ({ fill: 0, index: k }); }));\r\n            this._updateState(this.rate);\r\n        };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.registerOnChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onChange = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.registerOnTouched = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onTouched = fn; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.reset = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.leave.emit(this.nextRate);\r\n            this._updateState(this.rate);\r\n        };\r\n        /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.setDisabledState = /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        function (isDisabled) { this.disabled = isDisabled; };\r\n        /**\r\n         * @param {?} value\r\n         * @param {?=} internalChange\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.update = /**\r\n         * @param {?} value\r\n         * @param {?=} internalChange\r\n         * @return {?}\r\n         */\r\n        function (value, internalChange) {\r\n            if (internalChange === void 0) { internalChange = true; }\r\n            /** @type {?} */\r\n            var newRate = getValueInRange(value, this.max, 0);\r\n            if (!this.readonly && !this.disabled && this.rate !== newRate) {\r\n                this.rate = newRate;\r\n                this.rateChange.emit(this.rate);\r\n            }\r\n            if (internalChange) {\r\n                this.onChange(this.rate);\r\n                this.onTouched();\r\n            }\r\n            this._updateState(this.rate);\r\n        };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype.writeValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this.update(value, false);\r\n            this._changeDetectorRef.markForCheck();\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype._getFillValue = /**\r\n         * @private\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        function (index) {\r\n            /** @type {?} */\r\n            var diff = this.nextRate - index;\r\n            if (diff >= 1) {\r\n                return 100;\r\n            }\r\n            if (diff < 1 && diff > 0) {\r\n                return parseInt((diff * 100).toFixed(2), 10);\r\n            }\r\n            return 0;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} nextValue\r\n         * @return {?}\r\n         */\r\n        NgbRating.prototype._updateState = /**\r\n         * @private\r\n         * @param {?} nextValue\r\n         * @return {?}\r\n         */\r\n        function (nextValue) {\r\n            var _this = this;\r\n            this.nextRate = nextValue;\r\n            this.contexts.forEach((/**\r\n             * @param {?} context\r\n             * @param {?} index\r\n             * @return {?}\r\n             */\r\n            function (context, index) { return context.fill = _this._getFillValue(index); }));\r\n        };\r\n        NgbRating.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-rating',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: {\r\n                            'class': 'd-inline-flex',\r\n                            '[tabindex]': 'disabled ? -1 : 0',\r\n                            'role': 'slider',\r\n                            'aria-valuemin': '0',\r\n                            '[attr.aria-valuemax]': 'max',\r\n                            '[attr.aria-valuenow]': 'nextRate',\r\n                            '[attr.aria-valuetext]': 'ariaValueText()',\r\n                            '[attr.aria-disabled]': 'readonly ? true : null',\r\n                            '(blur)': 'handleBlur()',\r\n                            '(keydown)': 'handleKeyDown($event)',\r\n                            '(mouseleave)': 'reset()'\r\n                        },\r\n                        template: \"\\n    <ng-template #t let-fill=\\\"fill\\\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"contexts\\\" let-index=\\\"index\\\">\\n      <span class=\\\"sr-only\\\">({{ index < nextRate ? '*' : ' ' }})</span>\\n      <span (mouseenter)=\\\"enter(index + 1)\\\" (click)=\\\"handleClick(index + 1)\\\" [style.cursor]=\\\"readonly || disabled ? 'default' : 'pointer'\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"starTemplate || starTemplateFromContent || t\\\" [ngTemplateOutletContext]=\\\"contexts[index]\\\">\\n        </ng-template>\\n      </span>\\n    </ng-template>\\n  \",\r\n                        providers: [NGB_RATING_VALUE_ACCESSOR]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbRating.ctorParameters = function () { return [\r\n            { type: NgbRatingConfig },\r\n            { type: core.ChangeDetectorRef }\r\n        ]; };\r\n        NgbRating.propDecorators = {\r\n            max: [{ type: core.Input }],\r\n            rate: [{ type: core.Input }],\r\n            readonly: [{ type: core.Input }],\r\n            resettable: [{ type: core.Input }],\r\n            starTemplate: [{ type: core.Input }],\r\n            starTemplateFromContent: [{ type: core.ContentChild, args: [core.TemplateRef, { static: false },] }],\r\n            hover: [{ type: core.Output }],\r\n            leave: [{ type: core.Output }],\r\n            rateChange: [{ type: core.Output }]\r\n        };\r\n        return NgbRating;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbRatingModule = /** @class */ (function () {\r\n        function NgbRatingModule() {\r\n        }\r\n        NgbRatingModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: [NgbRating], exports: [NgbRating], imports: [common.CommonModule] },] }\r\n        ];\r\n        return NgbRatingModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbTabset`](#/components/tabset/api#NgbTabset) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the tabsets used in the application.\r\n     */\r\n    var NgbTabsetConfig = /** @class */ (function () {\r\n        function NgbTabsetConfig() {\r\n            this.justify = 'start';\r\n            this.orientation = 'horizontal';\r\n            this.type = 'tabs';\r\n        }\r\n        NgbTabsetConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbTabsetConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbTabsetConfig_Factory() { return new NgbTabsetConfig(); }, token: NgbTabsetConfig, providedIn: \"root\" });\r\n        return NgbTabsetConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var nextId$4 = 0;\r\n    /**\r\n     * A directive to wrap tab titles that need to contain HTML markup or other directives.\r\n     *\r\n     * Alternatively you could use the `NgbTab.title` input for string titles.\r\n     */\r\n    var NgbTabTitle = /** @class */ (function () {\r\n        function NgbTabTitle(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbTabTitle.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbTabTitle]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbTabTitle.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbTabTitle;\r\n    }());\r\n    /**\r\n     * A directive to wrap content to be displayed in a tab.\r\n     */\r\n    var NgbTabContent = /** @class */ (function () {\r\n        function NgbTabContent(templateRef) {\r\n            this.templateRef = templateRef;\r\n        }\r\n        NgbTabContent.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ng-template[ngbTabContent]' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbTabContent.ctorParameters = function () { return [\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        return NgbTabContent;\r\n    }());\r\n    /**\r\n     * A directive representing an individual tab.\r\n     */\r\n    var NgbTab = /** @class */ (function () {\r\n        function NgbTab() {\r\n            /**\r\n             * The tab identifier.\r\n             *\r\n             * Must be unique for the entire document for proper accessibility support.\r\n             */\r\n            this.id = \"ngb-tab-\" + nextId$4++;\r\n            /**\r\n             * If `true`, the current tab is disabled and can't be toggled.\r\n             */\r\n            this.disabled = false;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTab.prototype.ngAfterContentChecked = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\r\n            // only @ContentChildren allows us to specify the {descendants: false} option.\r\n            // Without {descendants: false} we are hitting bugs described in:\r\n            // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n            this.titleTpl = this.titleTpls.first;\r\n            this.contentTpl = this.contentTpls.first;\r\n        };\r\n        NgbTab.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'ngb-tab' },] }\r\n        ];\r\n        NgbTab.propDecorators = {\r\n            id: [{ type: core.Input }],\r\n            title: [{ type: core.Input }],\r\n            disabled: [{ type: core.Input }],\r\n            titleTpls: [{ type: core.ContentChildren, args: [NgbTabTitle, { descendants: false },] }],\r\n            contentTpls: [{ type: core.ContentChildren, args: [NgbTabContent, { descendants: false },] }]\r\n        };\r\n        return NgbTab;\r\n    }());\r\n    /**\r\n     * A component that makes it easy to create tabbed interface.\r\n     */\r\n    var NgbTabset = /** @class */ (function () {\r\n        function NgbTabset(config) {\r\n            /**\r\n             * If `true`, non-visible tabs content will be removed from DOM. Otherwise it will just be hidden.\r\n             */\r\n            this.destroyOnHide = true;\r\n            /**\r\n             * A tab change event emitted right before the tab change happens.\r\n             *\r\n             * See [`NgbTabChangeEvent`](#/components/tabset/api#NgbTabChangeEvent) for payload details.\r\n             */\r\n            this.tabChange = new core.EventEmitter();\r\n            this.type = config.type;\r\n            this.justify = config.justify;\r\n            this.orientation = config.orientation;\r\n        }\r\n        Object.defineProperty(NgbTabset.prototype, \"justify\", {\r\n            /**\r\n             * The horizontal alignment of the tabs with flexbox utilities.\r\n             */\r\n            set: /**\r\n             * The horizontal alignment of the tabs with flexbox utilities.\r\n             * @param {?} className\r\n             * @return {?}\r\n             */\r\n            function (className) {\r\n                if (className === 'fill' || className === 'justified') {\r\n                    this.justifyClass = \"nav-\" + className;\r\n                }\r\n                else {\r\n                    this.justifyClass = \"justify-content-\" + className;\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Selects the tab with the given id and shows its associated content panel.\r\n         *\r\n         * Any other tab that was previously selected becomes unselected and its associated pane is removed from DOM or\r\n         * hidden depending on the `destroyOnHide` value.\r\n         */\r\n        /**\r\n         * Selects the tab with the given id and shows its associated content panel.\r\n         *\r\n         * Any other tab that was previously selected becomes unselected and its associated pane is removed from DOM or\r\n         * hidden depending on the `destroyOnHide` value.\r\n         * @param {?} tabId\r\n         * @return {?}\r\n         */\r\n        NgbTabset.prototype.select = /**\r\n         * Selects the tab with the given id and shows its associated content panel.\r\n         *\r\n         * Any other tab that was previously selected becomes unselected and its associated pane is removed from DOM or\r\n         * hidden depending on the `destroyOnHide` value.\r\n         * @param {?} tabId\r\n         * @return {?}\r\n         */\r\n        function (tabId) {\r\n            /** @type {?} */\r\n            var selectedTab = this._getTabById(tabId);\r\n            if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\r\n                /** @type {?} */\r\n                var defaultPrevented_1 = false;\r\n                this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: (/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { defaultPrevented_1 = true; }) });\r\n                if (!defaultPrevented_1) {\r\n                    this.activeId = selectedTab.id;\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTabset.prototype.ngAfterContentChecked = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // auto-correct activeId that might have been set incorrectly as input\r\n            /** @type {?} */\r\n            var activeTab = this._getTabById(this.activeId);\r\n            this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} id\r\n         * @return {?}\r\n         */\r\n        NgbTabset.prototype._getTabById = /**\r\n         * @private\r\n         * @param {?} id\r\n         * @return {?}\r\n         */\r\n        function (id) {\r\n            /** @type {?} */\r\n            var tabsWithId = this.tabs.filter((/**\r\n             * @param {?} tab\r\n             * @return {?}\r\n             */\r\n            function (tab) { return tab.id === id; }));\r\n            return tabsWithId.length ? tabsWithId[0] : null;\r\n        };\r\n        NgbTabset.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-tabset',\r\n                        exportAs: 'ngbTabset',\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n    <ul [class]=\\\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\\\" role=\\\"tablist\\\">\\n      <li class=\\\"nav-item\\\" *ngFor=\\\"let tab of tabs\\\">\\n        <a [id]=\\\"tab.id\\\" class=\\\"nav-link\\\" [class.active]=\\\"tab.id === activeId\\\" [class.disabled]=\\\"tab.disabled\\\"\\n          href (click)=\\\"select(tab.id); $event.preventDefault()\\\" role=\\\"tab\\\" [attr.tabindex]=\\\"(tab.disabled ? '-1': undefined)\\\"\\n          [attr.aria-controls]=\\\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\\\"\\n          [attr.aria-selected]=\\\"tab.id === activeId\\\" [attr.aria-disabled]=\\\"tab.disabled\\\">\\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\\\"tab.titleTpl?.templateRef\\\"></ng-template>\\n        </a>\\n      </li>\\n    </ul>\\n    <div class=\\\"tab-content\\\">\\n      <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n        <div\\n          class=\\\"tab-pane {{tab.id === activeId ? 'active' : null}}\\\"\\n          *ngIf=\\\"!destroyOnHide || tab.id === activeId\\\"\\n          role=\\\"tabpanel\\\"\\n          [attr.aria-labelledby]=\\\"tab.id\\\" id=\\\"{{tab.id}}-panel\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tab.contentTpl?.templateRef\\\"></ng-template>\\n        </div>\\n      </ng-template>\\n    </div>\\n  \"\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbTabset.ctorParameters = function () { return [\r\n            { type: NgbTabsetConfig }\r\n        ]; };\r\n        NgbTabset.propDecorators = {\r\n            tabs: [{ type: core.ContentChildren, args: [NgbTab,] }],\r\n            activeId: [{ type: core.Input }],\r\n            destroyOnHide: [{ type: core.Input }],\r\n            justify: [{ type: core.Input }],\r\n            orientation: [{ type: core.Input }],\r\n            type: [{ type: core.Input }],\r\n            tabChange: [{ type: core.Output }]\r\n        };\r\n        return NgbTabset;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_TABSET_DIRECTIVES = [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];\r\n    var NgbTabsetModule = /** @class */ (function () {\r\n        function NgbTabsetModule() {\r\n        }\r\n        NgbTabsetModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [common.CommonModule, NgbNavModule] },] }\r\n        ];\r\n        return NgbTabsetModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbTime = /** @class */ (function () {\r\n        function NgbTime(hour, minute, second) {\r\n            this.hour = toInteger(hour);\r\n            this.minute = toInteger(minute);\r\n            this.second = toInteger(second);\r\n        }\r\n        /**\r\n         * @param {?=} step\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.changeHour = /**\r\n         * @param {?=} step\r\n         * @return {?}\r\n         */\r\n        function (step) {\r\n            if (step === void 0) { step = 1; }\r\n            this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);\r\n        };\r\n        /**\r\n         * @param {?} hour\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.updateHour = /**\r\n         * @param {?} hour\r\n         * @return {?}\r\n         */\r\n        function (hour) {\r\n            if (isNumber(hour)) {\r\n                this.hour = (hour < 0 ? 24 + hour : hour) % 24;\r\n            }\r\n            else {\r\n                this.hour = NaN;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?=} step\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.changeMinute = /**\r\n         * @param {?=} step\r\n         * @return {?}\r\n         */\r\n        function (step) {\r\n            if (step === void 0) { step = 1; }\r\n            this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);\r\n        };\r\n        /**\r\n         * @param {?} minute\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.updateMinute = /**\r\n         * @param {?} minute\r\n         * @return {?}\r\n         */\r\n        function (minute) {\r\n            if (isNumber(minute)) {\r\n                this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;\r\n                this.changeHour(Math.floor(minute / 60));\r\n            }\r\n            else {\r\n                this.minute = NaN;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?=} step\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.changeSecond = /**\r\n         * @param {?=} step\r\n         * @return {?}\r\n         */\r\n        function (step) {\r\n            if (step === void 0) { step = 1; }\r\n            this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);\r\n        };\r\n        /**\r\n         * @param {?} second\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.updateSecond = /**\r\n         * @param {?} second\r\n         * @return {?}\r\n         */\r\n        function (second) {\r\n            if (isNumber(second)) {\r\n                this.second = second < 0 ? 60 + second % 60 : second % 60;\r\n                this.changeMinute(Math.floor(second / 60));\r\n            }\r\n            else {\r\n                this.second = NaN;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?=} checkSecs\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.isValid = /**\r\n         * @param {?=} checkSecs\r\n         * @return {?}\r\n         */\r\n        function (checkSecs) {\r\n            if (checkSecs === void 0) { checkSecs = true; }\r\n            return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTime.prototype.toString = /**\r\n         * @return {?}\r\n         */\r\n        function () { return (this.hour || 0) + \":\" + (this.minute || 0) + \":\" + (this.second || 0); };\r\n        return NgbTime;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbTimepicker`](#/components/timepicker/api#NgbTimepicker) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the timepickers used in the application.\r\n     */\r\n    var NgbTimepickerConfig = /** @class */ (function () {\r\n        function NgbTimepickerConfig() {\r\n            this.meridian = false;\r\n            this.spinners = true;\r\n            this.seconds = false;\r\n            this.hourStep = 1;\r\n            this.minuteStep = 1;\r\n            this.secondStep = 1;\r\n            this.disabled = false;\r\n            this.readonlyInputs = false;\r\n            this.size = 'medium';\r\n        }\r\n        NgbTimepickerConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbTimepickerConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbTimepickerConfig_Factory() { return new NgbTimepickerConfig(); }, token: NgbTimepickerConfig, providedIn: \"root\" });\r\n        return NgbTimepickerConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @return {?}\r\n     */\r\n    function NGB_DATEPICKER_TIME_ADAPTER_FACTORY() {\r\n        return new NgbTimeStructAdapter();\r\n    }\r\n    /**\r\n     * An abstract service that does the conversion between the internal timepicker `NgbTimeStruct` model and\r\n     * any provided user time model `T`, ex. a string, a native date, etc.\r\n     *\r\n     * The adapter is used **only** for conversion when binding timepicker to a form control,\r\n     * ex. `[(ngModel)]=\"userTimeModel\"`. Here `userTimeModel` can be of any type.\r\n     *\r\n     * The default timepicker implementation assumes we use `NgbTimeStruct` as a user model.\r\n     *\r\n     * See the [custom time adapter demo](#/components/timepicker/examples#adapter) for an example.\r\n     *\r\n     * \\@since 2.2.0\r\n     * @abstract\r\n     * @template T\r\n     */\r\n    var NgbTimeAdapter = /** @class */ (function () {\r\n        function NgbTimeAdapter() {\r\n        }\r\n        NgbTimeAdapter.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY },] }\r\n        ];\r\n        /** @nocollapse */ NgbTimeAdapter.ngInjectableDef = core.ɵɵdefineInjectable({ factory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY, token: NgbTimeAdapter, providedIn: \"root\" });\r\n        return NgbTimeAdapter;\r\n    }());\r\n    var NgbTimeStructAdapter = /** @class */ (function (_super) {\r\n        __extends(NgbTimeStructAdapter, _super);\r\n        function NgbTimeStructAdapter() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        /**\r\n         * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n         */\r\n        /**\r\n         * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n         * @param {?} time\r\n         * @return {?}\r\n         */\r\n        NgbTimeStructAdapter.prototype.fromModel = /**\r\n         * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n         * @param {?} time\r\n         * @return {?}\r\n         */\r\n        function (time) {\r\n            return (time && isInteger(time.hour) && isInteger(time.minute)) ?\r\n                { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\r\n                null;\r\n        };\r\n        /**\r\n         * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n         */\r\n        /**\r\n         * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n         * @param {?} time\r\n         * @return {?}\r\n         */\r\n        NgbTimeStructAdapter.prototype.toModel = /**\r\n         * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n         * @param {?} time\r\n         * @return {?}\r\n         */\r\n        function (time) {\r\n            return (time && isInteger(time.hour) && isInteger(time.minute)) ?\r\n                { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\r\n                null;\r\n        };\r\n        NgbTimeStructAdapter.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        return NgbTimeStructAdapter;\r\n    }(NgbTimeAdapter));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    function NGB_TIMEPICKER_I18N_FACTORY(locale) {\r\n        return new NgbTimepickerI18nDefault(locale);\r\n    }\r\n    /**\r\n     * Type of the service supplying day periods (for example, 'AM' and 'PM') to NgbTimepicker component.\r\n     * The default implementation of this service honors the Angular locale, and uses the registered locale data,\r\n     * as explained in the Angular i18n guide.\r\n     * @abstract\r\n     */\r\n    var NgbTimepickerI18n = /** @class */ (function () {\r\n        function NgbTimepickerI18n() {\r\n        }\r\n        NgbTimepickerI18n.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root', useFactory: NGB_TIMEPICKER_I18N_FACTORY, deps: [core.LOCALE_ID] },] }\r\n        ];\r\n        /** @nocollapse */ NgbTimepickerI18n.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbTimepickerI18n_Factory() { return NGB_TIMEPICKER_I18N_FACTORY(core.ɵɵinject(core.LOCALE_ID)); }, token: NgbTimepickerI18n, providedIn: \"root\" });\r\n        return NgbTimepickerI18n;\r\n    }());\r\n    var NgbTimepickerI18nDefault = /** @class */ (function (_super) {\r\n        __extends(NgbTimepickerI18nDefault, _super);\r\n        function NgbTimepickerI18nDefault(locale) {\r\n            var _this = _super.call(this) || this;\r\n            _this._periods = common.getLocaleDayPeriods(locale, common.FormStyle.Standalone, common.TranslationWidth.Narrow);\r\n            return _this;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTimepickerI18nDefault.prototype.getMorningPeriod = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._periods[0]; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTimepickerI18nDefault.prototype.getAfternoonPeriod = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._periods[1]; };\r\n        NgbTimepickerI18nDefault.decorators = [\r\n            { type: core.Injectable }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbTimepickerI18nDefault.ctorParameters = function () { return [\r\n            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] }\r\n        ]; };\r\n        return NgbTimepickerI18nDefault;\r\n    }(NgbTimepickerI18n));\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var FILTER_REGEX = /[^0-9]/g;\r\n    /** @type {?} */\r\n    var NGB_TIMEPICKER_VALUE_ACCESSOR = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbTimepicker; })),\r\n        multi: true\r\n    };\r\n    /**\r\n     * A directive that helps with wth picking hours, minutes and seconds.\r\n     */\r\n    var NgbTimepicker = /** @class */ (function () {\r\n        function NgbTimepicker(_config, _ngbTimeAdapter, _cd, i18n) {\r\n            this._config = _config;\r\n            this._ngbTimeAdapter = _ngbTimeAdapter;\r\n            this._cd = _cd;\r\n            this.i18n = i18n;\r\n            this.onChange = (/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            function (_) { });\r\n            this.onTouched = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n            this.meridian = _config.meridian;\r\n            this.spinners = _config.spinners;\r\n            this.seconds = _config.seconds;\r\n            this.hourStep = _config.hourStep;\r\n            this.minuteStep = _config.minuteStep;\r\n            this.secondStep = _config.secondStep;\r\n            this.disabled = _config.disabled;\r\n            this.readonlyInputs = _config.readonlyInputs;\r\n            this.size = _config.size;\r\n        }\r\n        Object.defineProperty(NgbTimepicker.prototype, \"hourStep\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._hourStep; },\r\n            /**\r\n             * The number of hours to add/subtract when clicking hour spinners.\r\n             */\r\n            set: /**\r\n             * The number of hours to add/subtract when clicking hour spinners.\r\n             * @param {?} step\r\n             * @return {?}\r\n             */\r\n            function (step) {\r\n                this._hourStep = isInteger(step) ? step : this._config.hourStep;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbTimepicker.prototype, \"minuteStep\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._minuteStep; },\r\n            /**\r\n             * The number of minutes to add/subtract when clicking minute spinners.\r\n             */\r\n            set: /**\r\n             * The number of minutes to add/subtract when clicking minute spinners.\r\n             * @param {?} step\r\n             * @return {?}\r\n             */\r\n            function (step) {\r\n                this._minuteStep = isInteger(step) ? step : this._config.minuteStep;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbTimepicker.prototype, \"secondStep\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._secondStep; },\r\n            /**\r\n             * The number of seconds to add/subtract when clicking second spinners.\r\n             */\r\n            set: /**\r\n             * The number of seconds to add/subtract when clicking second spinners.\r\n             * @param {?} step\r\n             * @return {?}\r\n             */\r\n            function (step) {\r\n                this._secondStep = isInteger(step) ? step : this._config.secondStep;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.writeValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            /** @type {?} */\r\n            var structValue = this._ngbTimeAdapter.fromModel(value);\r\n            this.model = structValue ? new NgbTime(structValue.hour, structValue.minute, structValue.second) : new NgbTime();\r\n            if (!this.seconds && (!structValue || !isNumber(structValue.second))) {\r\n                this.model.second = 0;\r\n            }\r\n            this._cd.markForCheck();\r\n        };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.registerOnChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onChange = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.registerOnTouched = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this.onTouched = fn; };\r\n        /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.setDisabledState = /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        function (isDisabled) { this.disabled = isDisabled; };\r\n        /**\r\n         * @param {?} step\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.changeHour = /**\r\n         * @param {?} step\r\n         * @return {?}\r\n         */\r\n        function (step) {\r\n            this.model.changeHour(step);\r\n            this.propagateModelChange();\r\n        };\r\n        /**\r\n         * @param {?} step\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.changeMinute = /**\r\n         * @param {?} step\r\n         * @return {?}\r\n         */\r\n        function (step) {\r\n            this.model.changeMinute(step);\r\n            this.propagateModelChange();\r\n        };\r\n        /**\r\n         * @param {?} step\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.changeSecond = /**\r\n         * @param {?} step\r\n         * @return {?}\r\n         */\r\n        function (step) {\r\n            this.model.changeSecond(step);\r\n            this.propagateModelChange();\r\n        };\r\n        /**\r\n         * @param {?} newVal\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.updateHour = /**\r\n         * @param {?} newVal\r\n         * @return {?}\r\n         */\r\n        function (newVal) {\r\n            /** @type {?} */\r\n            var isPM = this.model.hour >= 12;\r\n            /** @type {?} */\r\n            var enteredHour = toInteger(newVal);\r\n            if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {\r\n                this.model.updateHour(enteredHour + 12);\r\n            }\r\n            else {\r\n                this.model.updateHour(enteredHour);\r\n            }\r\n            this.propagateModelChange();\r\n        };\r\n        /**\r\n         * @param {?} newVal\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.updateMinute = /**\r\n         * @param {?} newVal\r\n         * @return {?}\r\n         */\r\n        function (newVal) {\r\n            this.model.updateMinute(toInteger(newVal));\r\n            this.propagateModelChange();\r\n        };\r\n        /**\r\n         * @param {?} newVal\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.updateSecond = /**\r\n         * @param {?} newVal\r\n         * @return {?}\r\n         */\r\n        function (newVal) {\r\n            this.model.updateSecond(toInteger(newVal));\r\n            this.propagateModelChange();\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.toggleMeridian = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.meridian) {\r\n                this.changeHour(12);\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} input\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.formatInput = /**\r\n         * @param {?} input\r\n         * @return {?}\r\n         */\r\n        function (input) { input.value = input.value.replace(FILTER_REGEX, ''); };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.formatHour = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (isNumber(value)) {\r\n                if (this.meridian) {\r\n                    return padNumber(value % 12 === 0 ? 12 : value % 12);\r\n                }\r\n                else {\r\n                    return padNumber(value % 24);\r\n                }\r\n            }\r\n            else {\r\n                return padNumber(NaN);\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.formatMinSec = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { return padNumber(value); };\r\n        Object.defineProperty(NgbTimepicker.prototype, \"isSmallSize\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this.size === 'small'; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(NgbTimepicker.prototype, \"isLargeSize\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this.size === 'large'; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\r\n                this.model.second = 0;\r\n                this.propagateModelChange(false);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?=} touched\r\n         * @return {?}\r\n         */\r\n        NgbTimepicker.prototype.propagateModelChange = /**\r\n         * @private\r\n         * @param {?=} touched\r\n         * @return {?}\r\n         */\r\n        function (touched) {\r\n            if (touched === void 0) { touched = true; }\r\n            if (touched) {\r\n                this.onTouched();\r\n            }\r\n            if (this.model.isValid(this.seconds)) {\r\n                this.onChange(this._ngbTimeAdapter.toModel({ hour: this.model.hour, minute: this.model.minute, second: this.model.second }));\r\n            }\r\n            else {\r\n                this.onChange(this._ngbTimeAdapter.toModel(null));\r\n            }\r\n        };\r\n        NgbTimepicker.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-timepicker',\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"\\n    <fieldset [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n      <div class=\\\"ngb-tp\\\">\\n        <div class=\\\"ngb-tp-input-container ngb-tp-hour\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeHour(hourStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-hours\\\">Increment hours</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"ngb-tp-input form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\"\\n            [class.form-control-lg]=\\\"isLargeSize\\\"\\n            maxlength=\\\"2\\\" inputmode=\\\"numeric\\\" placeholder=\\\"HH\\\" i18n-placeholder=\\\"@@ngb.timepicker.HH\\\"\\n            [value]=\\\"formatHour(model?.hour)\\\" (change)=\\\"updateHour($event.target.value)\\\"\\n            [readOnly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Hours\\\" i18n-aria-label=\\\"@@ngb.timepicker.hours\\\"\\n            (input)=\\\"formatInput($event.target)\\\"\\n            (keydown.ArrowUp)=\\\"changeHour(hourStep); $event.preventDefault()\\\"\\n            (keydown.ArrowDown)=\\\"changeHour(-hourStep); $event.preventDefault()\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeHour(-hourStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-hours\\\">Decrement hours</span>\\n          </button>\\n        </div>\\n        <div class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div class=\\\"ngb-tp-input-container ngb-tp-minute\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeMinute(minuteStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-minutes\\\">Increment minutes</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"ngb-tp-input form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\" [class.form-control-lg]=\\\"isLargeSize\\\"\\n            maxlength=\\\"2\\\" inputmode=\\\"numeric\\\" placeholder=\\\"MM\\\" i18n-placeholder=\\\"@@ngb.timepicker.MM\\\"\\n            [value]=\\\"formatMinSec(model?.minute)\\\" (change)=\\\"updateMinute($event.target.value)\\\"\\n            [readOnly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Minutes\\\" i18n-aria-label=\\\"@@ngb.timepicker.minutes\\\"\\n            (input)=\\\"formatInput($event.target)\\\"\\n            (keydown.ArrowUp)=\\\"changeMinute(minuteStep); $event.preventDefault()\\\"\\n            (keydown.ArrowDown)=\\\"changeMinute(-minuteStep); $event.preventDefault()\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeMinute(-minuteStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"  [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\"  i18n=\\\"@@ngb.timepicker.decrement-minutes\\\">Decrement minutes</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-input-container ngb-tp-second\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeSecond(secondStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-seconds\\\">Increment seconds</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"ngb-tp-input form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\" [class.form-control-lg]=\\\"isLargeSize\\\"\\n            maxlength=\\\"2\\\" inputmode=\\\"numeric\\\" placeholder=\\\"SS\\\" i18n-placeholder=\\\"@@ngb.timepicker.SS\\\"\\n            [value]=\\\"formatMinSec(model?.second)\\\" (change)=\\\"updateSecond($event.target.value)\\\"\\n            [readOnly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Seconds\\\" i18n-aria-label=\\\"@@ngb.timepicker.seconds\\\"\\n            (input)=\\\"formatInput($event.target)\\\"\\n            (keydown.ArrowUp)=\\\"changeSecond(secondStep); $event.preventDefault()\\\"\\n            (keydown.ArrowDown)=\\\"changeSecond(-secondStep); $event.preventDefault()\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeSecond(-secondStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"  [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-seconds\\\">Decrement seconds</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-spacer\\\"></div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-meridian\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\"\\n                  (click)=\\\"toggleMeridian()\\\">\\n            <ng-container *ngIf=\\\"model?.hour >= 12; else am\\\" i18n=\\\"@@ngb.timepicker.PM\\\">{{ i18n.getAfternoonPeriod() }}</ng-container>\\n            <ng-template #am i18n=\\\"@@ngb.timepicker.AM\\\">{{ i18n.getMorningPeriod() }}</ng-template>\\n          </button>\\n        </div>\\n      </div>\\n    </fieldset>\\n  \",\r\n                        providers: [NGB_TIMEPICKER_VALUE_ACCESSOR],\r\n                        styles: [\"ngb-timepicker{font-size:1rem}.ngb-tp{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-tp-input-container{width:4em}.ngb-tp-chevron::before{border-style:solid;border-width:.29em .29em 0 0;content:\\\"\\\";display:inline-block;height:.69em;left:.05em;position:relative;top:.15em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);vertical-align:middle;width:.69em}.ngb-tp-chevron.bottom:before{top:-.3em;-webkit-transform:rotate(135deg);transform:rotate(135deg)}.ngb-tp-input{text-align:center}.ngb-tp-hour,.ngb-tp-meridian,.ngb-tp-minute,.ngb-tp-second{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.ngb-tp-spacer{width:1em;text-align:center}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbTimepicker.ctorParameters = function () { return [\r\n            { type: NgbTimepickerConfig },\r\n            { type: NgbTimeAdapter },\r\n            { type: core.ChangeDetectorRef },\r\n            { type: NgbTimepickerI18n }\r\n        ]; };\r\n        NgbTimepicker.propDecorators = {\r\n            meridian: [{ type: core.Input }],\r\n            spinners: [{ type: core.Input }],\r\n            seconds: [{ type: core.Input }],\r\n            hourStep: [{ type: core.Input }],\r\n            minuteStep: [{ type: core.Input }],\r\n            secondStep: [{ type: core.Input }],\r\n            readonlyInputs: [{ type: core.Input }],\r\n            size: [{ type: core.Input }]\r\n        };\r\n        return NgbTimepicker;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbTimepickerModule = /** @class */ (function () {\r\n        function NgbTimepickerModule() {\r\n        }\r\n        NgbTimepickerModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: [NgbTimepicker], exports: [NgbTimepicker], imports: [common.CommonModule] },] }\r\n        ];\r\n        return NgbTimepickerModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * Configuration service for the NgbToast component. You can inject this service, typically in your root component,\r\n     * and customize the values of its properties in order to provide default values for all the toasts used in the\r\n     * application.\r\n     *\r\n     * \\@since 5.0.0\r\n     */\r\n    var NgbToastConfig = /** @class */ (function () {\r\n        function NgbToastConfig() {\r\n            this.autohide = true;\r\n            this.delay = 500;\r\n            this.ariaLive = 'polite';\r\n        }\r\n        NgbToastConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbToastConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(); }, token: NgbToastConfig, providedIn: \"root\" });\r\n        return NgbToastConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * This directive allows the usage of HTML markup or other directives\r\n     * inside of the toast's header.\r\n     *\r\n     * \\@since 5.0.0\r\n     */\r\n    var NgbToastHeader = /** @class */ (function () {\r\n        function NgbToastHeader() {\r\n        }\r\n        NgbToastHeader.decorators = [\r\n            { type: core.Directive, args: [{ selector: '[ngbToastHeader]' },] }\r\n        ];\r\n        return NgbToastHeader;\r\n    }());\r\n    /**\r\n     * Toasts provide feedback messages as notifications to the user.\r\n     * Goal is to mimic the push notifications available both on mobile and desktop operating systems.\r\n     *\r\n     * \\@since 5.0.0\r\n     */\r\n    var NgbToast = /** @class */ (function () {\r\n        function NgbToast(ariaLive, config) {\r\n            this.ariaLive = ariaLive;\r\n            /**\r\n             * A template like `<ng-template ngbToastHeader></ng-template>` can be\r\n             * used in the projected content to allow markup usage.\r\n             */\r\n            this.contentHeaderTpl = null;\r\n            /**\r\n             * An event fired immediately when toast's `hide()` method has been called.\r\n             * It can only occur in 2 different scenarios:\r\n             * - `autohide` timeout fires\r\n             * - user clicks on a closing cross (&times)\r\n             *\r\n             * Additionally this output is purely informative. The toast won't disappear. It's up to the user to take care of\r\n             * that.\r\n             */\r\n            this.hideOutput = new core.EventEmitter();\r\n            if (this.ariaLive == null) {\r\n                this.ariaLive = config.ariaLive;\r\n            }\r\n            this.delay = config.delay;\r\n            this.autohide = config.autohide;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbToast.prototype.ngAfterContentInit = /**\r\n         * @return {?}\r\n         */\r\n        function () { this._init(); };\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbToast.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            if ('autohide' in changes) {\r\n                this._clearTimeout();\r\n                this._init();\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbToast.prototype.hide = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._clearTimeout();\r\n            this.hideOutput.emit();\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbToast.prototype._init = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            if (this.autohide && !this._timeoutID) {\r\n                this._timeoutID = setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.hide(); }), this.delay);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbToast.prototype._clearTimeout = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._timeoutID) {\r\n                clearTimeout(this._timeoutID);\r\n                this._timeoutID = null;\r\n            }\r\n        };\r\n        NgbToast.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-toast',\r\n                        exportAs: 'ngbToast',\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: {\r\n                            'role': 'alert',\r\n                            '[attr.aria-live]': 'ariaLive',\r\n                            'aria-atomic': 'true',\r\n                            '[class.toast]': 'true',\r\n                            '[class.show]': 'true',\r\n                        },\r\n                        template: \"\\n    <ng-template #headerTpl>\\n      <strong class=\\\"mr-auto\\\">{{header}}</strong>\\n    </ng-template>\\n    <ng-template [ngIf]=\\\"contentHeaderTpl || header\\\">\\n      <div class=\\\"toast-header\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"contentHeaderTpl || headerTpl\\\"></ng-template>\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" i18n-aria-label=\\\"@@ngb.toast.close-aria\\\" (click)=\\\"hide()\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n    </ng-template>\\n    <div class=\\\"toast-body\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  \",\r\n                        styles: [\".ngb-toasts{position:fixed;top:0;right:0;margin:.5em;z-index:1200}ngb-toast .toast-header .close{margin-left:auto;margin-bottom:.25rem}\"]\r\n                    }] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbToast.ctorParameters = function () { return [\r\n            { type: String, decorators: [{ type: core.Attribute, args: ['aria-live',] }] },\r\n            { type: NgbToastConfig }\r\n        ]; };\r\n        NgbToast.propDecorators = {\r\n            delay: [{ type: core.Input }],\r\n            autohide: [{ type: core.Input }],\r\n            header: [{ type: core.Input }],\r\n            contentHeaderTpl: [{ type: core.ContentChild, args: [NgbToastHeader, { read: core.TemplateRef, static: true },] }],\r\n            hideOutput: [{ type: core.Output, args: ['hide',] }]\r\n        };\r\n        return NgbToast;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbToastModule = /** @class */ (function () {\r\n        function NgbToastModule() {\r\n        }\r\n        NgbToastModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: [NgbToast, NgbToastHeader], imports: [common.CommonModule], exports: [NgbToast, NgbToastHeader] },] }\r\n        ];\r\n        return NgbToastModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbTooltip`](#/components/tooltip/api#NgbTooltip) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the tooltips used in the application.\r\n     */\r\n    var NgbTooltipConfig = /** @class */ (function () {\r\n        function NgbTooltipConfig() {\r\n            this.autoClose = true;\r\n            this.placement = 'auto';\r\n            this.triggers = 'hover focus';\r\n            this.disableTooltip = false;\r\n            this.openDelay = 0;\r\n            this.closeDelay = 0;\r\n        }\r\n        NgbTooltipConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbTooltipConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbTooltipConfig_Factory() { return new NgbTooltipConfig(); }, token: NgbTooltipConfig, providedIn: \"root\" });\r\n        return NgbTooltipConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var nextId$5 = 0;\r\n    var NgbTooltipWindow = /** @class */ (function () {\r\n        function NgbTooltipWindow() {\r\n        }\r\n        NgbTooltipWindow.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-tooltip-window',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: { '[class]': '\"tooltip show\" + (tooltipClass ? \" \" + tooltipClass : \"\")', 'role': 'tooltip', '[id]': 'id' },\r\n                        template: \"<div class=\\\"arrow\\\"></div><div class=\\\"tooltip-inner\\\"><ng-content></ng-content></div>\",\r\n                        styles: [\"ngb-tooltip-window.bs-tooltip-bottom .arrow,ngb-tooltip-window.bs-tooltip-top .arrow{left:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-bottom-left .arrow,ngb-tooltip-window.bs-tooltip-top-left .arrow{left:1em}ngb-tooltip-window.bs-tooltip-bottom-right .arrow,ngb-tooltip-window.bs-tooltip-top-right .arrow{left:auto;right:.8rem}ngb-tooltip-window.bs-tooltip-left .arrow,ngb-tooltip-window.bs-tooltip-right .arrow{top:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-left-top .arrow,ngb-tooltip-window.bs-tooltip-right-top .arrow{top:.4rem}ngb-tooltip-window.bs-tooltip-left-bottom .arrow,ngb-tooltip-window.bs-tooltip-right-bottom .arrow{top:auto;bottom:.4rem}\"]\r\n                    }] }\r\n        ];\r\n        NgbTooltipWindow.propDecorators = {\r\n            id: [{ type: core.Input }],\r\n            tooltipClass: [{ type: core.Input }]\r\n        };\r\n        return NgbTooltipWindow;\r\n    }());\r\n    /**\r\n     * A lightweight and extensible directive for fancy tooltip creation.\r\n     */\r\n    var NgbTooltip = /** @class */ (function () {\r\n        function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {\r\n            var _this = this;\r\n            this._elementRef = _elementRef;\r\n            this._renderer = _renderer;\r\n            this._ngZone = _ngZone;\r\n            this._document = _document;\r\n            this._changeDetector = _changeDetector;\r\n            /**\r\n             * An event emitted when the tooltip is shown. Contains no payload.\r\n             */\r\n            this.shown = new core.EventEmitter();\r\n            /**\r\n             * An event emitted when the popover is hidden. Contains no payload.\r\n             */\r\n            this.hidden = new core.EventEmitter();\r\n            this._ngbTooltipWindowId = \"ngb-tooltip-\" + nextId$5++;\r\n            this.autoClose = config.autoClose;\r\n            this.placement = config.placement;\r\n            this.triggers = config.triggers;\r\n            this.container = config.container;\r\n            this.disableTooltip = config.disableTooltip;\r\n            this.tooltipClass = config.tooltipClass;\r\n            this.openDelay = config.openDelay;\r\n            this.closeDelay = config.closeDelay;\r\n            this._popupService = new PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\r\n            this._zoneSubscription = _ngZone.onStable.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                if (_this._windowRef) {\r\n                    positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body', 'bs-tooltip');\r\n                }\r\n            }));\r\n        }\r\n        Object.defineProperty(NgbTooltip.prototype, \"ngbTooltip\", {\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () { return this._ngbTooltip; },\r\n            /**\r\n             * The string content or a `TemplateRef` for the content to be displayed in the tooltip.\r\n             *\r\n             * If the content if falsy, the tooltip won't open.\r\n             */\r\n            set: /**\r\n             * The string content or a `TemplateRef` for the content to be displayed in the tooltip.\r\n             *\r\n             * If the content if falsy, the tooltip won't open.\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                this._ngbTooltip = value;\r\n                if (!value && this._windowRef) {\r\n                    this.close();\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Opens the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering.\r\n         * The `context` is an optional value to be injected into the tooltip template when it is created.\r\n         */\r\n        /**\r\n         * Opens the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering.\r\n         * The `context` is an optional value to be injected into the tooltip template when it is created.\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        NgbTooltip.prototype.open = /**\r\n         * Opens the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering.\r\n         * The `context` is an optional value to be injected into the tooltip template when it is created.\r\n         * @param {?=} context\r\n         * @return {?}\r\n         */\r\n        function (context) {\r\n            var _this = this;\r\n            if (!this._windowRef && this._ngbTooltip && !this.disableTooltip) {\r\n                this._windowRef = this._popupService.open(this._ngbTooltip, context);\r\n                this._windowRef.instance.tooltipClass = this.tooltipClass;\r\n                this._windowRef.instance.id = this._ngbTooltipWindowId;\r\n                this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);\r\n                if (this.container === 'body') {\r\n                    this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n                }\r\n                // We need to detect changes, because we don't know where .open() might be called from.\r\n                // Ex. opening tooltip from one of lifecycle hooks that run after the CD\r\n                // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception\r\n                this._windowRef.changeDetectorRef.detectChanges();\r\n                // We need to mark for check, because tooltip won't work inside the OnPush component.\r\n                // Ex. when we use expression like `{{ tooltip.isOpen() : 'opened' : 'closed' }}`\r\n                // inside the template of an OnPush component and we change the tooltip from\r\n                // open -> closed, the expression in question won't be updated unless we explicitly\r\n                // mark the parent component to be checked.\r\n                this._windowRef.changeDetectorRef.markForCheck();\r\n                ngbAutoClose(this._ngZone, this._document, this.autoClose, (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.close(); }), this.hidden, [this._windowRef.location.nativeElement]);\r\n                this.shown.emit();\r\n            }\r\n        };\r\n        /**\r\n         * Closes the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the tooltip.\r\n         */\r\n        /**\r\n         * Closes the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the tooltip.\r\n         * @return {?}\r\n         */\r\n        NgbTooltip.prototype.close = /**\r\n         * Closes the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the tooltip.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._windowRef != null) {\r\n                this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n                this._popupService.close();\r\n                this._windowRef = null;\r\n                this.hidden.emit();\r\n                this._changeDetector.markForCheck();\r\n            }\r\n        };\r\n        /**\r\n         * Toggles the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the tooltip.\r\n         */\r\n        /**\r\n         * Toggles the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the tooltip.\r\n         * @return {?}\r\n         */\r\n        NgbTooltip.prototype.toggle = /**\r\n         * Toggles the tooltip.\r\n         *\r\n         * This is considered to be a \"manual\" triggering of the tooltip.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._windowRef) {\r\n                this.close();\r\n            }\r\n            else {\r\n                this.open();\r\n            }\r\n        };\r\n        /**\r\n         * Returns `true`, if the popover is currently shown.\r\n         */\r\n        /**\r\n         * Returns `true`, if the popover is currently shown.\r\n         * @return {?}\r\n         */\r\n        NgbTooltip.prototype.isOpen = /**\r\n         * Returns `true`, if the popover is currently shown.\r\n         * @return {?}\r\n         */\r\n        function () { return this._windowRef != null; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTooltip.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);\r\n        };\r\n        /**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        NgbTooltip.prototype.ngOnChanges = /**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        function (_a) {\r\n            var tooltipClass = _a.tooltipClass;\r\n            if (tooltipClass && this.isOpen()) {\r\n                this._windowRef.instance.tooltipClass = tooltipClass.currentValue;\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTooltip.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.close();\r\n            // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\r\n            // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\r\n            if (this._unregisterListenersFn) {\r\n                this._unregisterListenersFn();\r\n            }\r\n            this._zoneSubscription.unsubscribe();\r\n        };\r\n        NgbTooltip.decorators = [\r\n            { type: core.Directive, args: [{ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbTooltip.ctorParameters = function () { return [\r\n            { type: core.ElementRef },\r\n            { type: core.Renderer2 },\r\n            { type: core.Injector },\r\n            { type: core.ComponentFactoryResolver },\r\n            { type: core.ViewContainerRef },\r\n            { type: NgbTooltipConfig },\r\n            { type: core.NgZone },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: core.ChangeDetectorRef },\r\n            { type: core.ApplicationRef }\r\n        ]; };\r\n        NgbTooltip.propDecorators = {\r\n            autoClose: [{ type: core.Input }],\r\n            placement: [{ type: core.Input }],\r\n            triggers: [{ type: core.Input }],\r\n            container: [{ type: core.Input }],\r\n            disableTooltip: [{ type: core.Input }],\r\n            tooltipClass: [{ type: core.Input }],\r\n            openDelay: [{ type: core.Input }],\r\n            closeDelay: [{ type: core.Input }],\r\n            shown: [{ type: core.Output }],\r\n            hidden: [{ type: core.Output }],\r\n            ngbTooltip: [{ type: core.Input }]\r\n        };\r\n        return NgbTooltip;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbTooltipModule = /** @class */ (function () {\r\n        function NgbTooltipModule() {\r\n        }\r\n        NgbTooltipModule.decorators = [\r\n            { type: core.NgModule, args: [{ declarations: [NgbTooltip, NgbTooltipWindow], exports: [NgbTooltip], entryComponents: [NgbTooltipWindow] },] }\r\n        ];\r\n        return NgbTooltipModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A component that helps with text highlighting.\r\n     *\r\n     * If splits the `result` text into parts that contain the searched `term` and generates the HTML markup to simplify\r\n     * highlighting:\r\n     *\r\n     * Ex. `result=\"Alaska\"` and `term=\"as\"` will produce `Al<span class=\"ngb-highlight\">as</span>ka`.\r\n     */\r\n    var NgbHighlight = /** @class */ (function () {\r\n        function NgbHighlight() {\r\n            /**\r\n             * The CSS class for `<span>` elements wrapping the `term` inside the `result`.\r\n             */\r\n            this.highlightClass = 'ngb-highlight';\r\n        }\r\n        /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        NgbHighlight.prototype.ngOnChanges = /**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        function (changes) {\r\n            /** @type {?} */\r\n            var result = toString(this.result);\r\n            /** @type {?} */\r\n            var terms = Array.isArray(this.term) ? this.term : [this.term];\r\n            /** @type {?} */\r\n            var escapedTerms = terms.map((/**\r\n             * @param {?} term\r\n             * @return {?}\r\n             */\r\n            function (term) { return regExpEscape(toString(term)); })).filter((/**\r\n             * @param {?} term\r\n             * @return {?}\r\n             */\r\n            function (term) { return term; }));\r\n            this.parts = escapedTerms.length ? result.split(new RegExp(\"(\" + escapedTerms.join('|') + \")\", 'gmi')) : [result];\r\n        };\r\n        NgbHighlight.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-highlight',\r\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        template: \"<ng-template ngFor [ngForOf]=\\\"parts\\\" let-part let-isOdd=\\\"odd\\\">\" +\r\n                            \"<span *ngIf=\\\"isOdd; else even\\\" [class]=\\\"highlightClass\\\">{{part}}</span><ng-template #even>{{part}}</ng-template>\" +\r\n                            \"</ng-template>\",\r\n                        styles: [\".ngb-highlight{font-weight:700}\"]\r\n                    }] }\r\n        ];\r\n        NgbHighlight.propDecorators = {\r\n            highlightClass: [{ type: core.Input }],\r\n            result: [{ type: core.Input }],\r\n            term: [{ type: core.Input }]\r\n        };\r\n        return NgbHighlight;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbTypeaheadWindow = /** @class */ (function () {\r\n        function NgbTypeaheadWindow() {\r\n            this.activeIdx = 0;\r\n            /**\r\n             * Flag indicating if the first row should be active initially\r\n             */\r\n            this.focusFirst = true;\r\n            /**\r\n             * A function used to format a given result before display. This function should return a formatted string without any\r\n             * HTML markup\r\n             */\r\n            this.formatter = toString;\r\n            /**\r\n             * Event raised when user selects a particular result row\r\n             */\r\n            this.selectEvent = new core.EventEmitter();\r\n            this.activeChangeEvent = new core.EventEmitter();\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.hasActive = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.activeIdx > -1 && this.activeIdx < this.results.length; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.getActive = /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.results[this.activeIdx]; };\r\n        /**\r\n         * @param {?} activeIdx\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.markActive = /**\r\n         * @param {?} activeIdx\r\n         * @return {?}\r\n         */\r\n        function (activeIdx) {\r\n            this.activeIdx = activeIdx;\r\n            this._activeChanged();\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.next = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.activeIdx === this.results.length - 1) {\r\n                this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\r\n            }\r\n            else {\r\n                this.activeIdx++;\r\n            }\r\n            this._activeChanged();\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.prev = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.activeIdx < 0) {\r\n                this.activeIdx = this.results.length - 1;\r\n            }\r\n            else if (this.activeIdx === 0) {\r\n                this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\r\n            }\r\n            else {\r\n                this.activeIdx--;\r\n            }\r\n            this._activeChanged();\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.resetActive = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.activeIdx = this.focusFirst ? 0 : -1;\r\n            this._activeChanged();\r\n        };\r\n        /**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.select = /**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        function (item) { this.selectEvent.emit(item); };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () { this.resetActive(); };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbTypeaheadWindow.prototype._activeChanged = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\r\n        };\r\n        NgbTypeaheadWindow.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'ngb-typeahead-window',\r\n                        exportAs: 'ngbTypeaheadWindow',\r\n                        encapsulation: core.ViewEncapsulation.None,\r\n                        host: { '(mousedown)': '$event.preventDefault()', 'class': 'dropdown-menu show', 'role': 'listbox', '[id]': 'id' },\r\n                        template: \"\\n    <ng-template #rt let-result=\\\"result\\\" let-term=\\\"term\\\" let-formatter=\\\"formatter\\\">\\n      <ngb-highlight [result]=\\\"formatter(result)\\\" [term]=\\\"term\\\"></ngb-highlight>\\n    </ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"results\\\" let-result let-idx=\\\"index\\\">\\n      <button type=\\\"button\\\" class=\\\"dropdown-item\\\" role=\\\"option\\\"\\n        [id]=\\\"id + '-' + idx\\\"\\n        [class.active]=\\\"idx === activeIdx\\\"\\n        (mouseenter)=\\\"markActive(idx)\\\"\\n        (click)=\\\"select(result)\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"resultTemplate || rt\\\"\\n          [ngTemplateOutletContext]=\\\"{result: result, term: term, formatter: formatter}\\\"></ng-template>\\n      </button>\\n    </ng-template>\\n  \"\r\n                    }] }\r\n        ];\r\n        NgbTypeaheadWindow.propDecorators = {\r\n            id: [{ type: core.Input }],\r\n            focusFirst: [{ type: core.Input }],\r\n            results: [{ type: core.Input }],\r\n            term: [{ type: core.Input }],\r\n            formatter: [{ type: core.Input }],\r\n            resultTemplate: [{ type: core.Input }],\r\n            selectEvent: [{ type: core.Output, args: ['select',] }],\r\n            activeChangeEvent: [{ type: core.Output, args: ['activeChange',] }]\r\n        };\r\n        return NgbTypeaheadWindow;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var ARIA_LIVE_DELAY = new core.InjectionToken('live announcer delay', { providedIn: 'root', factory: ARIA_LIVE_DELAY_FACTORY });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    function ARIA_LIVE_DELAY_FACTORY() {\r\n        return 100;\r\n    }\r\n    /**\r\n     * @param {?} document\r\n     * @param {?=} lazyCreate\r\n     * @return {?}\r\n     */\r\n    function getLiveElement(document, lazyCreate) {\r\n        if (lazyCreate === void 0) { lazyCreate = false; }\r\n        /** @type {?} */\r\n        var element = (/** @type {?} */ (document.body.querySelector('#ngb-live')));\r\n        if (element == null && lazyCreate) {\r\n            element = document.createElement('div');\r\n            element.setAttribute('id', 'ngb-live');\r\n            element.setAttribute('aria-live', 'polite');\r\n            element.setAttribute('aria-atomic', 'true');\r\n            element.classList.add('sr-only');\r\n            document.body.appendChild(element);\r\n        }\r\n        return element;\r\n    }\r\n    var Live = /** @class */ (function () {\r\n        function Live(_document, _delay) {\r\n            this._document = _document;\r\n            this._delay = _delay;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        Live.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var element = getLiveElement(this._document);\r\n            if (element) {\r\n                element.parentElement.removeChild(element);\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} message\r\n         * @return {?}\r\n         */\r\n        Live.prototype.say = /**\r\n         * @param {?} message\r\n         * @return {?}\r\n         */\r\n        function (message) {\r\n            /** @type {?} */\r\n            var element = getLiveElement(this._document, true);\r\n            /** @type {?} */\r\n            var delay = this._delay;\r\n            element.textContent = '';\r\n            /** @type {?} */\r\n            var setText = (/**\r\n             * @return {?}\r\n             */\r\n            function () { return element.textContent = message; });\r\n            if (delay === null) {\r\n                setText();\r\n            }\r\n            else {\r\n                setTimeout(setText, delay);\r\n            }\r\n        };\r\n        Live.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */\r\n        Live.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [ARIA_LIVE_DELAY,] }] }\r\n        ]; };\r\n        /** @nocollapse */ Live.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function Live_Factory() { return new Live(core.ɵɵinject(common.DOCUMENT), core.ɵɵinject(ARIA_LIVE_DELAY)); }, token: Live, providedIn: \"root\" });\r\n        return Live;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /**\r\n     * A configuration service for the [`NgbTypeahead`](#/components/typeahead/api#NgbTypeahead) component.\r\n     *\r\n     * You can inject this service, typically in your root component, and customize the values of its properties in\r\n     * order to provide default values for all the typeaheads used in the application.\r\n     */\r\n    var NgbTypeaheadConfig = /** @class */ (function () {\r\n        function NgbTypeaheadConfig() {\r\n            this.editable = true;\r\n            this.focusFirst = true;\r\n            this.showHint = false;\r\n            this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\r\n        }\r\n        NgbTypeaheadConfig.decorators = [\r\n            { type: core.Injectable, args: [{ providedIn: 'root' },] }\r\n        ];\r\n        /** @nocollapse */ NgbTypeaheadConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgbTypeaheadConfig_Factory() { return new NgbTypeaheadConfig(); }, token: NgbTypeaheadConfig, providedIn: \"root\" });\r\n        return NgbTypeaheadConfig;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_TYPEAHEAD_VALUE_ACCESSOR = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef((/**\r\n         * @return {?}\r\n         */\r\n        function () { return NgbTypeahead; })),\r\n        multi: true\r\n    };\r\n    /** @type {?} */\r\n    var nextWindowId = 0;\r\n    /**\r\n     * A directive providing a simple way of creating powerful typeaheads from any text input.\r\n     */\r\n    var NgbTypeahead = /** @class */ (function () {\r\n        function NgbTypeahead(_elementRef, viewContainerRef, _renderer, injector, componentFactoryResolver, config, ngZone, _live, _document, _ngZone, _changeDetector, applicationRef) {\r\n            var _this = this;\r\n            this._elementRef = _elementRef;\r\n            this._renderer = _renderer;\r\n            this._live = _live;\r\n            this._document = _document;\r\n            this._ngZone = _ngZone;\r\n            this._changeDetector = _changeDetector;\r\n            this._closed$ = new rxjs.Subject();\r\n            /**\r\n             * The value for the `autocomplete` attribute for the `<input>` element.\r\n             *\r\n             * Defaults to `\"off\"` to disable the native browser autocomplete, but you can override it if necessary.\r\n             *\r\n             * \\@since 2.1.0\r\n             */\r\n            this.autocomplete = 'off';\r\n            /**\r\n             * The preferred placement of the typeahead.\r\n             *\r\n             * Possible values are `\"top\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom\"`, `\"bottom-left\"`,\r\n             * `\"bottom-right\"`, `\"left\"`, `\"left-top\"`, `\"left-bottom\"`, `\"right\"`, `\"right-top\"`,\r\n             * `\"right-bottom\"`\r\n             *\r\n             * Accepts an array of strings or a string with space separated possible values.\r\n             *\r\n             * The default order of preference is `\"bottom-left bottom-right top-left top-right\"`\r\n             *\r\n             * Please see the [positioning overview](#/positioning) for more details.\r\n             */\r\n            this.placement = 'bottom-left';\r\n            /**\r\n             * An event emitted right before an item is selected from the result list.\r\n             *\r\n             * Event payload is of type [`NgbTypeaheadSelectItemEvent`](#/components/typeahead/api#NgbTypeaheadSelectItemEvent).\r\n             */\r\n            this.selectItem = new core.EventEmitter();\r\n            this.popupId = \"ngb-typeahead-\" + nextWindowId++;\r\n            this._onTouched = (/**\r\n             * @return {?}\r\n             */\r\n            function () { });\r\n            this._onChange = (/**\r\n             * @param {?} _\r\n             * @return {?}\r\n             */\r\n            function (_) { });\r\n            this.container = config.container;\r\n            this.editable = config.editable;\r\n            this.focusFirst = config.focusFirst;\r\n            this.showHint = config.showHint;\r\n            this.placement = config.placement;\r\n            this._valueChanges = rxjs.fromEvent(_elementRef.nativeElement, 'input')\r\n                .pipe(operators.map((/**\r\n             * @param {?} $event\r\n             * @return {?}\r\n             */\r\n            function ($event) { return ((/** @type {?} */ ($event.target))).value; })));\r\n            this._resubscribeTypeahead = new rxjs.BehaviorSubject(null);\r\n            this._popupService = new PopupService(NgbTypeaheadWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\r\n            this._zoneSubscription = ngZone.onStable.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                if (_this.isPopupOpen()) {\r\n                    positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');\r\n                }\r\n            }));\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            /** @type {?} */\r\n            var inputValues$ = this._valueChanges.pipe(operators.tap((/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                _this._inputValueBackup = _this.showHint ? value : null;\r\n                _this._onChange(_this.editable ? value : undefined);\r\n            })));\r\n            /** @type {?} */\r\n            var results$ = inputValues$.pipe(this.ngbTypeahead);\r\n            /** @type {?} */\r\n            var userInput$ = this._resubscribeTypeahead.pipe(operators.switchMap((/**\r\n             * @return {?}\r\n             */\r\n            function () { return results$; })));\r\n            this._subscription = this._subscribeToUserInput(userInput$);\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._closePopup();\r\n            this._unsubscribeFromUserInput();\r\n            this._zoneSubscription.unsubscribe();\r\n        };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.registerOnChange = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this._onChange = fn; };\r\n        /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.registerOnTouched = /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) { this._onTouched = fn; };\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.writeValue = /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._writeInputValue(this._formatItemForInput(value));\r\n            if (this.showHint) {\r\n                this._inputValueBackup = value;\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.setDisabledState = /**\r\n         * @param {?} isDisabled\r\n         * @return {?}\r\n         */\r\n        function (isDisabled) {\r\n            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n        };\r\n        /**\r\n         * Dismisses typeahead popup window\r\n         */\r\n        /**\r\n         * Dismisses typeahead popup window\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.dismissPopup = /**\r\n         * Dismisses typeahead popup window\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.isPopupOpen()) {\r\n                this._resubscribeTypeahead.next(null);\r\n                this._closePopup();\r\n                if (this.showHint && this._inputValueBackup !== null) {\r\n                    this._writeInputValue(this._inputValueBackup);\r\n                }\r\n                this._changeDetector.markForCheck();\r\n            }\r\n        };\r\n        /**\r\n         * Returns true if the typeahead popup window is displayed\r\n         */\r\n        /**\r\n         * Returns true if the typeahead popup window is displayed\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.isPopupOpen = /**\r\n         * Returns true if the typeahead popup window is displayed\r\n         * @return {?}\r\n         */\r\n        function () { return this._windowRef != null; };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.handleBlur = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._resubscribeTypeahead.next(null);\r\n            this._onTouched();\r\n        };\r\n        /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype.handleKeyDown = /**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            if (!this.isPopupOpen()) {\r\n                return;\r\n            }\r\n            // tslint:disable-next-line:deprecation\r\n            switch (event.which) {\r\n                case Key.ArrowDown:\r\n                    event.preventDefault();\r\n                    this._windowRef.instance.next();\r\n                    this._showHint();\r\n                    break;\r\n                case Key.ArrowUp:\r\n                    event.preventDefault();\r\n                    this._windowRef.instance.prev();\r\n                    this._showHint();\r\n                    break;\r\n                case Key.Enter:\r\n                case Key.Tab:\r\n                    /** @type {?} */\r\n                    var result = this._windowRef.instance.getActive();\r\n                    if (isDefined(result)) {\r\n                        event.preventDefault();\r\n                        event.stopPropagation();\r\n                        this._selectResult(result);\r\n                    }\r\n                    this._closePopup();\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._openPopup = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            if (!this.isPopupOpen()) {\r\n                this._inputValueBackup = this._elementRef.nativeElement.value;\r\n                this._windowRef = this._popupService.open();\r\n                this._windowRef.instance.id = this.popupId;\r\n                this._windowRef.instance.selectEvent.subscribe((/**\r\n                 * @param {?} result\r\n                 * @return {?}\r\n                 */\r\n                function (result) { return _this._selectResultClosePopup(result); }));\r\n                this._windowRef.instance.activeChangeEvent.subscribe((/**\r\n                 * @param {?} activeId\r\n                 * @return {?}\r\n                 */\r\n                function (activeId) { return _this.activeDescendant = activeId; }));\r\n                if (this.container === 'body') {\r\n                    window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n                }\r\n                this._changeDetector.markForCheck();\r\n                ngbAutoClose(this._ngZone, this._document, 'outside', (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.dismissPopup(); }), this._closed$, [this._elementRef.nativeElement, this._windowRef.location.nativeElement]);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._closePopup = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._closed$.next();\r\n            this._popupService.close();\r\n            this._windowRef = null;\r\n            this.activeDescendant = undefined;\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._selectResult = /**\r\n         * @private\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        function (result) {\r\n            /** @type {?} */\r\n            var defaultPrevented = false;\r\n            this.selectItem.emit({ item: result, preventDefault: (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { defaultPrevented = true; }) });\r\n            this._resubscribeTypeahead.next(null);\r\n            if (!defaultPrevented) {\r\n                this.writeValue(result);\r\n                this._onChange(result);\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._selectResultClosePopup = /**\r\n         * @private\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        function (result) {\r\n            this._selectResult(result);\r\n            this._closePopup();\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._showHint = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.showHint && this._windowRef.instance.hasActive() && this._inputValueBackup != null) {\r\n                /** @type {?} */\r\n                var userInputLowerCase = this._inputValueBackup.toLowerCase();\r\n                /** @type {?} */\r\n                var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());\r\n                if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {\r\n                    this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));\r\n                    this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);\r\n                }\r\n                else {\r\n                    this._writeInputValue(formattedVal);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._formatItemForInput = /**\r\n         * @private\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        function (item) {\r\n            return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._writeInputValue = /**\r\n         * @private\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));\r\n        };\r\n        /**\r\n         * @private\r\n         * @param {?} userInput$\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._subscribeToUserInput = /**\r\n         * @private\r\n         * @param {?} userInput$\r\n         * @return {?}\r\n         */\r\n        function (userInput$) {\r\n            var _this = this;\r\n            return userInput$.subscribe((/**\r\n             * @param {?} results\r\n             * @return {?}\r\n             */\r\n            function (results) {\r\n                if (!results || results.length === 0) {\r\n                    _this._closePopup();\r\n                }\r\n                else {\r\n                    _this._openPopup();\r\n                    _this._windowRef.instance.focusFirst = _this.focusFirst;\r\n                    _this._windowRef.instance.results = results;\r\n                    _this._windowRef.instance.term = _this._elementRef.nativeElement.value;\r\n                    if (_this.resultFormatter) {\r\n                        _this._windowRef.instance.formatter = _this.resultFormatter;\r\n                    }\r\n                    if (_this.resultTemplate) {\r\n                        _this._windowRef.instance.resultTemplate = _this.resultTemplate;\r\n                    }\r\n                    _this._windowRef.instance.resetActive();\r\n                    // The observable stream we are subscribing to might have async steps\r\n                    // and if a component containing typeahead is using the OnPush strategy\r\n                    // the change detection turn wouldn't be invoked automatically.\r\n                    _this._windowRef.changeDetectorRef.detectChanges();\r\n                    _this._showHint();\r\n                }\r\n                // live announcer\r\n                /** @type {?} */\r\n                var count = results ? results.length : 0;\r\n                _this._live.say(count === 0 ? 'No results available' : count + \" result\" + (count === 1 ? '' : 's') + \" available\");\r\n            }));\r\n        };\r\n        /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        NgbTypeahead.prototype._unsubscribeFromUserInput = /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this._subscription) {\r\n                this._subscription.unsubscribe();\r\n            }\r\n            this._subscription = null;\r\n        };\r\n        NgbTypeahead.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'input[ngbTypeahead]',\r\n                        exportAs: 'ngbTypeahead',\r\n                        host: {\r\n                            '(blur)': 'handleBlur()',\r\n                            '[class.open]': 'isPopupOpen()',\r\n                            '(keydown)': 'handleKeyDown($event)',\r\n                            '[autocomplete]': 'autocomplete',\r\n                            'autocapitalize': 'off',\r\n                            'autocorrect': 'off',\r\n                            'role': 'combobox',\r\n                            'aria-multiline': 'false',\r\n                            '[attr.aria-autocomplete]': 'showHint ? \"both\" : \"list\"',\r\n                            '[attr.aria-activedescendant]': 'activeDescendant',\r\n                            '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',\r\n                            '[attr.aria-expanded]': 'isPopupOpen()'\r\n                        },\r\n                        providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        NgbTypeahead.ctorParameters = function () { return [\r\n            { type: core.ElementRef },\r\n            { type: core.ViewContainerRef },\r\n            { type: core.Renderer2 },\r\n            { type: core.Injector },\r\n            { type: core.ComponentFactoryResolver },\r\n            { type: NgbTypeaheadConfig },\r\n            { type: core.NgZone },\r\n            { type: Live },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: core.NgZone },\r\n            { type: core.ChangeDetectorRef },\r\n            { type: core.ApplicationRef }\r\n        ]; };\r\n        NgbTypeahead.propDecorators = {\r\n            autocomplete: [{ type: core.Input }],\r\n            container: [{ type: core.Input }],\r\n            editable: [{ type: core.Input }],\r\n            focusFirst: [{ type: core.Input }],\r\n            inputFormatter: [{ type: core.Input }],\r\n            ngbTypeahead: [{ type: core.Input }],\r\n            resultFormatter: [{ type: core.Input }],\r\n            resultTemplate: [{ type: core.Input }],\r\n            showHint: [{ type: core.Input }],\r\n            placement: [{ type: core.Input }],\r\n            selectItem: [{ type: core.Output }]\r\n        };\r\n        return NgbTypeahead;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    var NgbTypeaheadModule = /** @class */ (function () {\r\n        function NgbTypeaheadModule() {\r\n        }\r\n        NgbTypeaheadModule.decorators = [\r\n            { type: core.NgModule, args: [{\r\n                        declarations: [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow],\r\n                        exports: [NgbTypeahead, NgbHighlight],\r\n                        imports: [common.CommonModule],\r\n                        entryComponents: [NgbTypeaheadWindow]\r\n                    },] }\r\n        ];\r\n        return NgbTypeaheadModule;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n     */\r\n    /** @type {?} */\r\n    var NGB_MODULES = [\r\n        NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule,\r\n        NgbDropdownModule, NgbModalModule, NgbNavModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule,\r\n        NgbRatingModule, NgbTabsetModule, NgbTimepickerModule, NgbToastModule, NgbTooltipModule, NgbTypeaheadModule\r\n    ];\r\n    var NgbModule = /** @class */ (function () {\r\n        function NgbModule() {\r\n        }\r\n        NgbModule.decorators = [\r\n            { type: core.NgModule, args: [{ imports: NGB_MODULES, exports: NGB_MODULES },] }\r\n        ];\r\n        return NgbModule;\r\n    }());\r\n\r\n    exports.ModalDismissReasons = ModalDismissReasons;\r\n    exports.NgbAccordion = NgbAccordion;\r\n    exports.NgbAccordionConfig = NgbAccordionConfig;\r\n    exports.NgbAccordionModule = NgbAccordionModule;\r\n    exports.NgbActiveModal = NgbActiveModal;\r\n    exports.NgbAlert = NgbAlert;\r\n    exports.NgbAlertConfig = NgbAlertConfig;\r\n    exports.NgbAlertModule = NgbAlertModule;\r\n    exports.NgbButtonLabel = NgbButtonLabel;\r\n    exports.NgbButtonsModule = NgbButtonsModule;\r\n    exports.NgbCalendar = NgbCalendar;\r\n    exports.NgbCalendarGregorian = NgbCalendarGregorian;\r\n    exports.NgbCalendarHebrew = NgbCalendarHebrew;\r\n    exports.NgbCalendarIslamicCivil = NgbCalendarIslamicCivil;\r\n    exports.NgbCalendarIslamicUmalqura = NgbCalendarIslamicUmalqura;\r\n    exports.NgbCalendarPersian = NgbCalendarPersian;\r\n    exports.NgbCarousel = NgbCarousel;\r\n    exports.NgbCarouselConfig = NgbCarouselConfig;\r\n    exports.NgbCarouselModule = NgbCarouselModule;\r\n    exports.NgbCheckBox = NgbCheckBox;\r\n    exports.NgbCollapse = NgbCollapse;\r\n    exports.NgbCollapseModule = NgbCollapseModule;\r\n    exports.NgbDate = NgbDate;\r\n    exports.NgbDateAdapter = NgbDateAdapter;\r\n    exports.NgbDateNativeAdapter = NgbDateNativeAdapter;\r\n    exports.NgbDateNativeUTCAdapter = NgbDateNativeUTCAdapter;\r\n    exports.NgbDateParserFormatter = NgbDateParserFormatter;\r\n    exports.NgbDatepicker = NgbDatepicker;\r\n    exports.NgbDatepickerConfig = NgbDatepickerConfig;\r\n    exports.NgbDatepickerContent = NgbDatepickerContent;\r\n    exports.NgbDatepickerI18n = NgbDatepickerI18n;\r\n    exports.NgbDatepickerI18nHebrew = NgbDatepickerI18nHebrew;\r\n    exports.NgbDatepickerKeyboardService = NgbDatepickerKeyboardService;\r\n    exports.NgbDatepickerModule = NgbDatepickerModule;\r\n    exports.NgbDatepickerMonth = NgbDatepickerMonth;\r\n    exports.NgbDropdown = NgbDropdown;\r\n    exports.NgbDropdownAnchor = NgbDropdownAnchor;\r\n    exports.NgbDropdownConfig = NgbDropdownConfig;\r\n    exports.NgbDropdownItem = NgbDropdownItem;\r\n    exports.NgbDropdownMenu = NgbDropdownMenu;\r\n    exports.NgbDropdownModule = NgbDropdownModule;\r\n    exports.NgbDropdownToggle = NgbDropdownToggle;\r\n    exports.NgbHighlight = NgbHighlight;\r\n    exports.NgbInputDatepicker = NgbInputDatepicker;\r\n    exports.NgbInputDatepickerConfig = NgbInputDatepickerConfig;\r\n    exports.NgbModal = NgbModal;\r\n    exports.NgbModalConfig = NgbModalConfig;\r\n    exports.NgbModalModule = NgbModalModule;\r\n    exports.NgbModalRef = NgbModalRef;\r\n    exports.NgbModule = NgbModule;\r\n    exports.NgbNav = NgbNav;\r\n    exports.NgbNavConfig = NgbNavConfig;\r\n    exports.NgbNavContent = NgbNavContent;\r\n    exports.NgbNavItem = NgbNavItem;\r\n    exports.NgbNavLink = NgbNavLink;\r\n    exports.NgbNavModule = NgbNavModule;\r\n    exports.NgbNavOutlet = NgbNavOutlet;\r\n    exports.NgbNavbar = NgbNavbar;\r\n    exports.NgbPagination = NgbPagination;\r\n    exports.NgbPaginationConfig = NgbPaginationConfig;\r\n    exports.NgbPaginationEllipsis = NgbPaginationEllipsis;\r\n    exports.NgbPaginationFirst = NgbPaginationFirst;\r\n    exports.NgbPaginationLast = NgbPaginationLast;\r\n    exports.NgbPaginationModule = NgbPaginationModule;\r\n    exports.NgbPaginationNext = NgbPaginationNext;\r\n    exports.NgbPaginationNumber = NgbPaginationNumber;\r\n    exports.NgbPaginationPrevious = NgbPaginationPrevious;\r\n    exports.NgbPanel = NgbPanel;\r\n    exports.NgbPanelContent = NgbPanelContent;\r\n    exports.NgbPanelHeader = NgbPanelHeader;\r\n    exports.NgbPanelTitle = NgbPanelTitle;\r\n    exports.NgbPanelToggle = NgbPanelToggle;\r\n    exports.NgbPopover = NgbPopover;\r\n    exports.NgbPopoverConfig = NgbPopoverConfig;\r\n    exports.NgbPopoverModule = NgbPopoverModule;\r\n    exports.NgbProgressbar = NgbProgressbar;\r\n    exports.NgbProgressbarConfig = NgbProgressbarConfig;\r\n    exports.NgbProgressbarModule = NgbProgressbarModule;\r\n    exports.NgbRadio = NgbRadio;\r\n    exports.NgbRadioGroup = NgbRadioGroup;\r\n    exports.NgbRating = NgbRating;\r\n    exports.NgbRatingConfig = NgbRatingConfig;\r\n    exports.NgbRatingModule = NgbRatingModule;\r\n    exports.NgbSlide = NgbSlide;\r\n    exports.NgbSlideEventDirection = NgbSlideEventDirection;\r\n    exports.NgbSlideEventSource = NgbSlideEventSource;\r\n    exports.NgbTab = NgbTab;\r\n    exports.NgbTabContent = NgbTabContent;\r\n    exports.NgbTabTitle = NgbTabTitle;\r\n    exports.NgbTabset = NgbTabset;\r\n    exports.NgbTabsetConfig = NgbTabsetConfig;\r\n    exports.NgbTabsetModule = NgbTabsetModule;\r\n    exports.NgbTimeAdapter = NgbTimeAdapter;\r\n    exports.NgbTimepicker = NgbTimepicker;\r\n    exports.NgbTimepickerConfig = NgbTimepickerConfig;\r\n    exports.NgbTimepickerI18n = NgbTimepickerI18n;\r\n    exports.NgbTimepickerModule = NgbTimepickerModule;\r\n    exports.NgbToast = NgbToast;\r\n    exports.NgbToastConfig = NgbToastConfig;\r\n    exports.NgbToastHeader = NgbToastHeader;\r\n    exports.NgbToastModule = NgbToastModule;\r\n    exports.NgbTooltip = NgbTooltip;\r\n    exports.NgbTooltipConfig = NgbTooltipConfig;\r\n    exports.NgbTooltipModule = NgbTooltipModule;\r\n    exports.NgbTypeahead = NgbTypeahead;\r\n    exports.NgbTypeaheadConfig = NgbTypeaheadConfig;\r\n    exports.NgbTypeaheadModule = NgbTypeaheadModule;\r\n    exports.ɵa = NGB_CAROUSEL_DIRECTIVES;\r\n    exports.ɵb = NGB_DATEPICKER_VALUE_ACCESSOR;\r\n    exports.ɵba = Live;\r\n    exports.ɵbb = NgbCalendarHijri;\r\n    exports.ɵbc = ContentRef;\r\n    exports.ɵc = NGB_DATEPICKER_CALENDAR_FACTORY;\r\n    exports.ɵd = NgbDatepickerDayView;\r\n    exports.ɵe = NgbDatepickerNavigation;\r\n    exports.ɵf = NgbDatepickerNavigationSelect;\r\n    exports.ɵg = NGB_DATEPICKER_18N_FACTORY;\r\n    exports.ɵh = NgbDatepickerI18nDefault;\r\n    exports.ɵi = NGB_DATEPICKER_DATE_ADAPTER_FACTORY;\r\n    exports.ɵj = NgbDateStructAdapter;\r\n    exports.ɵk = NGB_DATEPICKER_PARSER_FORMATTER_FACTORY;\r\n    exports.ɵl = NgbDateISOParserFormatter;\r\n    exports.ɵm = NgbPopoverWindow;\r\n    exports.ɵn = NGB_DATEPICKER_TIME_ADAPTER_FACTORY;\r\n    exports.ɵo = NgbTimeStructAdapter;\r\n    exports.ɵp = NGB_TIMEPICKER_I18N_FACTORY;\r\n    exports.ɵq = NgbTimepickerI18nDefault;\r\n    exports.ɵr = NgbTooltipWindow;\r\n    exports.ɵs = NgbTypeaheadWindow;\r\n    exports.ɵt = NgbDatepickerService;\r\n    exports.ɵu = NgbModalBackdrop;\r\n    exports.ɵv = NgbModalWindow;\r\n    exports.ɵw = NgbModalStack;\r\n    exports.ɵx = ScrollBar;\r\n    exports.ɵy = ARIA_LIVE_DELAY;\r\n    exports.ɵz = ARIA_LIVE_DELAY_FACTORY;\r\n\r\n    Object.defineProperty(exports, '__esModule', { value: true });\r\n\r\n}));\r\n\r\n"]}