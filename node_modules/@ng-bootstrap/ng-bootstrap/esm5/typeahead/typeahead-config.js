/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbTypeahead`](#/components/typeahead/api#NgbTypeahead) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the typeaheads used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbTypeaheadConfig = /** @class */ (function () {
    function NgbTypeaheadConfig() {
        this.editable = true;
        this.focusFirst = true;
        this.showHint = false;
        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
    }
    /** @nocollapse */ NgbTypeaheadConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbTypeaheadConfig_Factory() { return new NgbTypeaheadConfig(); }, token: NgbTypeaheadConfig, providedIn: "root" });
NgbTypeaheadConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbTypeaheadConfig, factory: function NgbTypeaheadConfig_Factory(t) { return new (t || NgbTypeaheadConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbTypeaheadConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { editable: [], focusFirst: [], showHint: [], placement: [] });
    return NgbTypeaheadConfig;
}());
export { NgbTypeaheadConfig };
if (false) {
    /** @type {?} */
    NgbTypeaheadConfig.prototype.container;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.editable;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.focusFirst;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.showHint;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.placement;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS90eXBlYWhlYWQvdHlwZWFoZWFkLWNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7S0FNSyxBQUdDOzs7Ozs7bUdBQ29OIiwiZmlsZSI6InR5cGVhaGVhZC1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JUeXBlYWhlYWRgXSgjL2NvbXBvbmVudHMvdHlwZWFoZWFkL2FwaSNOZ2JUeXBlYWhlYWQpIGNvbXBvbmVudC5cclxuICpcclxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXHJcbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgdHlwZWFoZWFkcyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuICovXHJcbnZhciBOZ2JUeXBlYWhlYWRDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOZ2JUeXBlYWhlYWRDb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5mb2N1c0ZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dIaW50ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wbGFjZW1lbnQgPSBbJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCcsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnXTtcclxuICAgIH1cclxuICAgIE5nYlR5cGVhaGVhZENvbmZpZy5kZWNvcmF0b3JzID0gW1xyXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XHJcbiAgICBdO1xyXG4gICAgLyoqIEBub2NvbGxhcHNlICovIE5nYlR5cGVhaGVhZENvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYlR5cGVhaGVhZENvbmZpZ19GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE5nYlR5cGVhaGVhZENvbmZpZygpOyB9LCB0b2tlbjogTmdiVHlwZWFoZWFkQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuICAgIHJldHVybiBOZ2JUeXBlYWhlYWRDb25maWc7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IE5nYlR5cGVhaGVhZENvbmZpZyB9O1xyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuY29udGFpbmVyO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5lZGl0YWJsZTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuZm9jdXNGaXJzdDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuc2hvd0hpbnQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLnBsYWNlbWVudDtcclxufVxyIl19