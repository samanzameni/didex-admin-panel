/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbNav`](#/components/nav/api#NgbNav) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the navs used in the application.
 *
 * \@since 5.2.0
 */
import * as ɵngcc0 from '@angular/core';
var NgbNavConfig = /** @class */ (function () {
    function NgbNavConfig() {
        this.destroyOnHide = true;
        this.orientation = 'horizontal';
        this.roles = 'tablist';
    }
    /** @nocollapse */ NgbNavConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbNavConfig_Factory() { return new NgbNavConfig(); }, token: NgbNavConfig, providedIn: "root" });
NgbNavConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbNavConfig, factory: function NgbNavConfig_Factory(t) { return new (t || NgbNavConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbNavConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { destroyOnHide: [], orientation: [], roles: [] });
    return NgbNavConfig;
}());
export { NgbNavConfig };
if (false) {
    /** @type {?} */
    NgbNavConfig.prototype.destroyOnHide;
    /** @type {?} */
    NgbNavConfig.prototype.orientation;
    /** @type {?} */
    NgbNavConfig.prototype.roles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9uYXYvbmF2LWNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7O0tBS0ssQUFHQzs7Ozs7O3VGQUM0TCIsImZpbGUiOiJuYXYtY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxyXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXHJcbiAqL1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIGkwIGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiTmF2YF0oIy9jb21wb25lbnRzL25hdi9hcGkjTmdiTmF2KSBjb21wb25lbnQuXHJcbiAqXHJcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgdGhlIHZhbHVlcyBvZiBpdHMgcHJvcGVydGllcyBpblxyXG4gKiBvcmRlciB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgdGhlIG5hdnMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIFxcQHNpbmNlIDUuMi4wXHJcbiAqL1xyXG52YXIgTmdiTmF2Q29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdiTmF2Q29uZmlnKCkge1xyXG4gICAgICAgIHRoaXMuZGVzdHJveU9uSGlkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJztcclxuICAgICAgICB0aGlzLnJvbGVzID0gJ3RhYmxpc3QnO1xyXG4gICAgfVxyXG4gICAgTmdiTmF2Q29uZmlnLmRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cclxuICAgIF07XHJcbiAgICAvKiogQG5vY29sbGFwc2UgKi8gTmdiTmF2Q29uZmlnLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTmdiTmF2Q29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiTmF2Q29uZmlnKCk7IH0sIHRva2VuOiBOZ2JOYXZDb25maWcsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xyXG4gICAgcmV0dXJuIE5nYk5hdkNvbmZpZztcclxufSgpKTtcclxuZXhwb3J0IHsgTmdiTmF2Q29uZmlnIH07XHJcbmlmIChmYWxzZSkge1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiTmF2Q29uZmlnLnByb3RvdHlwZS5kZXN0cm95T25IaWRlO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiTmF2Q29uZmlnLnByb3RvdHlwZS5vcmllbnRhdGlvbjtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYk5hdkNvbmZpZy5wcm90b3R5cGUucm9sZXM7XHJcbn1cciJdfQ==