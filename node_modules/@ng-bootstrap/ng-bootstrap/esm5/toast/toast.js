/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Attribute, Component, ContentChild, Directive, EventEmitter, Input, Output, TemplateRef, ViewEncapsulation, } from '@angular/core';
import { NgbToastConfig } from './toast-config';
/**
 * This directive allows the usage of HTML markup or other directives
 * inside of the toast's header.
 *
 * \@since 5.0.0
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["role", "alert", "aria-atomic", "true"];
const _c1 = ["headerTpl", ""];
const _c2 = [3, "ngIf"];
const _c3 = [1, "toast-body"];
const _c4 = [1, "mr-auto"];
function NgbToast_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "strong", _c4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r811 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r811.header);
} }
const _c5 = [1, "toast-header"];
const _c6 = [3, "ngTemplateOutlet"];
const _c7 = ["type", "button", 1, "close", 3, "click", 6, "aria-label"];
var I18N_8;
if (ngI18nClosureMode) {
    const MSG_EXTERNAL_ngb_toast_close_aria$$ESM5_TOAST_TOAST_JS__9 = goog.getMsg("Close");
    I18N_8 = MSG_EXTERNAL_ngb_toast_close_aria$$ESM5_TOAST_TOAST_JS__9;
}
else {
    I18N_8 = ɵngcc0.ɵɵi18nLocalize("Close");
}
const _c10 = ["aria-label", I18N_8];
const _c11 = ["aria-hidden", "true"];
function NgbToast_ng_template_2_ng_template_1_Template(rf, ctx) { }
function NgbToast_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r815 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", _c5);
    ɵngcc0.ɵɵtemplate(1, NgbToast_ng_template_2_ng_template_1_Template, 0, 0, "ng-template", _c6);
    ɵngcc0.ɵɵelementStart(2, "button", _c7);
    ɵngcc0.ɵɵi18nAttributes(3, _c10);
    ɵngcc0.ɵɵlistener("click", function NgbToast_ng_template_2_Template_button_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r815); const ctx_r814 = ɵngcc0.ɵɵnextContext(); return ctx_r814.hide(); });
    ɵngcc0.ɵɵelementStart(4, "span", _c11);
    ɵngcc0.ɵɵtext(5, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r812 = ɵngcc0.ɵɵnextContext();
    const _r810 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r812.contentHeaderTpl || _r810);
} }
const _c12 = ["*"];
var NgbToastHeader = /** @class */ (function () {
    function NgbToastHeader() {
    }
NgbToastHeader.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgbToastHeader, selectors: [["", "ngbToastHeader", ""]], factory: function NgbToastHeader_Factory(t) { return new (t || NgbToastHeader)(); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbToastHeader, [{
        type: Directive,
        args: [{ selector: '[ngbToastHeader]' }]
    }], function () { return []; }, null);
    return NgbToastHeader;
}());
export { NgbToastHeader };
/**
 * Toasts provide feedback messages as notifications to the user.
 * Goal is to mimic the push notifications available both on mobile and desktop operating systems.
 *
 * \@since 5.0.0
 */
var NgbToast = /** @class */ (function () {
    function NgbToast(ariaLive, config) {
        this.ariaLive = ariaLive;
        /**
         * A template like `<ng-template ngbToastHeader></ng-template>` can be
         * used in the projected content to allow markup usage.
         */
        this.contentHeaderTpl = null;
        /**
         * An event fired immediately when toast's `hide()` method has been called.
         * It can only occur in 2 different scenarios:
         * - `autohide` timeout fires
         * - user clicks on a closing cross (&times)
         *
         * Additionally this output is purely informative. The toast won't disappear. It's up to the user to take care of
         * that.
         */
        this.hideOutput = new EventEmitter();
        if (this.ariaLive == null) {
            this.ariaLive = config.ariaLive;
        }
        this.delay = config.delay;
        this.autohide = config.autohide;
    }
    /**
     * @return {?}
     */
    NgbToast.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () { this._init(); };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgbToast.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('autohide' in changes) {
            this._clearTimeout();
            this._init();
        }
    };
    /**
     * @return {?}
     */
    NgbToast.prototype.hide = /**
     * @return {?}
     */
    function () {
        this._clearTimeout();
        this.hideOutput.emit();
    };
    /**
     * @private
     * @return {?}
     */
    NgbToast.prototype._init = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.autohide && !this._timeoutID) {
            this._timeoutID = setTimeout((/**
             * @return {?}
             */
            function () { return _this.hide(); }), this.delay);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgbToast.prototype._clearTimeout = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._timeoutID) {
            clearTimeout(this._timeoutID);
            this._timeoutID = null;
        }
    };
    /** @nocollapse */
    NgbToast.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ['aria-live',] }] },
        { type: NgbToastConfig }
    ]; };
    NgbToast.propDecorators = {
        delay: [{ type: Input }],
        autohide: [{ type: Input }],
        header: [{ type: Input }],
        contentHeaderTpl: [{ type: ContentChild, args: [NgbToastHeader, { read: TemplateRef, static: true },] }],
        hideOutput: [{ type: Output, args: ['hide',] }]
    };
NgbToast.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: NgbToast, selectors: [["ngb-toast"]], factory: function NgbToast_Factory(t) { return new (t || NgbToast)(ɵngcc0.ɵɵinjectAttribute('aria-live'), ɵngcc0.ɵɵdirectiveInject(NgbToastConfig)); }, contentQueries: function NgbToast_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, NgbToastHeader, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx.contentHeaderTpl = _t.first);
    } }, hostBindings: function NgbToast_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(3);
        ɵngcc0.ɵɵelementHostAttrs(_c0);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-live", ctx.ariaLive);
        ɵngcc0.ɵɵclassProp("toast", true);
        ɵngcc0.ɵɵclassProp("show", true);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { delay: "delay", autohide: "autohide", header: "header" }, outputs: { hideOutput: "hide" }, exportAs: ["ngbToast"], features: [ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c12, consts: 5, vars: 1, template: function NgbToast_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, NgbToast_ng_template_0_Template, 2, 1, "ng-template", null, _c1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, NgbToast_ng_template_2_Template, 6, 1, "ng-template", _c2);
        ɵngcc0.ɵɵelementStart(3, "div", _c3);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.contentHeaderTpl || ctx.header);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], styles: [".ngb-toasts{position:fixed;top:0;right:0;margin:.5em;z-index:1200}ngb-toast .toast-header .close{margin-left:auto;margin-bottom:.25rem}"], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbToast, [{
        type: Component,
        args: [{
                selector: 'ngb-toast',
                exportAs: 'ngbToast',
                encapsulation: ViewEncapsulation.None,
                host: {
                    'role': 'alert',
                    '[attr.aria-live]': 'ariaLive',
                    'aria-atomic': 'true',
                    '[class.toast]': 'true',
                    '[class.show]': 'true'
                },
                template: "\n    <ng-template #headerTpl>\n      <strong class=\"mr-auto\">{{header}}</strong>\n    </ng-template>\n    <ng-template [ngIf]=\"contentHeaderTpl || header\">\n      <div class=\"toast-header\">\n        <ng-template [ngTemplateOutlet]=\"contentHeaderTpl || headerTpl\"></ng-template>\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" i18n-aria-label=\"@@ngb.toast.close-aria\" (click)=\"hide()\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    </ng-template>\n    <div class=\"toast-body\">\n      <ng-content></ng-content>\n    </div>\n  ",
                styles: [".ngb-toasts{position:fixed;top:0;right:0;margin:.5em;z-index:1200}ngb-toast .toast-header .close{margin-left:auto;margin-bottom:.25rem}"]
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Attribute,
                args: ['aria-live']
            }] }, { type: NgbToastConfig }]; }, { ariaLive: [], contentHeaderTpl: [{
            type: ContentChild,
            args: [NgbToastHeader, { read: TemplateRef, static: true }]
        }], hideOutput: [{
            type: Output,
            args: ['hide']
        }], delay: [{
            type: Input
        }], autohide: [{
            type: Input
        }], ngAfterContentInit: [], ngOnChanges: [], hide: [], _init: [], _timeoutID: [], _clearTimeout: [], header: [{
            type: Input
        }] });
    return NgbToast;
}());
export { NgbToast };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgbToast.prototype._timeoutID;
    /**
     * Delay after which the toast will hide (ms).
     * default: `500` (ms) (inherited from NgbToastConfig)
     * @type {?}
     */
    NgbToast.prototype.delay;
    /**
     * Auto hide the toast after a delay in ms.
     * default: `true` (inherited from NgbToastConfig)
     * @type {?}
     */
    NgbToast.prototype.autohide;
    /**
     * Text to be used as toast's header.
     * Ignored if a ContentChild template is specified at the same time.
     * @type {?}
     */
    NgbToast.prototype.header;
    /**
     * A template like `<ng-template ngbToastHeader></ng-template>` can be
     * used in the projected content to allow markup usage.
     * @type {?}
     */
    NgbToast.prototype.contentHeaderTpl;
    /**
     * An event fired immediately when toast's `hide()` method has been called.
     * It can only occur in 2 different scenarios:
     * - `autohide` timeout fires
     * - user clicks on a closing cross (&times)
     *
     * Additionally this output is purely informative. The toast won't disappear. It's up to the user to take care of
     * that.
     * @type {?}
     */
    NgbToast.prototype.hideOutput;
    /** @type {?} */
    NgbToast.prototype.ariaLive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS90b2FzdC90b2FzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTs7S0FFSzs7Ozs7MENBR0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BK0ZBLEFBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Y0FZQSIsImZpbGUiOiJ0b2FzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcclxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xyXG4gKi9cclxuaW1wb3J0IHsgQXR0cmlidXRlLCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFRlbXBsYXRlUmVmLCBWaWV3RW5jYXBzdWxhdGlvbiwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdiVG9hc3RDb25maWcgfSBmcm9tICcuL3RvYXN0LWNvbmZpZyc7XHJcbi8qKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSBhbGxvd3MgdGhlIHVzYWdlIG9mIEhUTUwgbWFya3VwIG9yIG90aGVyIGRpcmVjdGl2ZXNcclxuICogaW5zaWRlIG9mIHRoZSB0b2FzdCdzIGhlYWRlci5cclxuICpcclxuICogXFxAc2luY2UgNS4wLjBcclxuICovXHJcbnZhciBOZ2JUb2FzdEhlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5nYlRvYXN0SGVhZGVyKCkge1xyXG4gICAgfVxyXG4gICAgTmdiVG9hc3RIZWFkZXIuZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbbmdiVG9hc3RIZWFkZXJdJyB9LF0gfVxyXG4gICAgXTtcclxuICAgIHJldHVybiBOZ2JUb2FzdEhlYWRlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgTmdiVG9hc3RIZWFkZXIgfTtcclxuLyoqXHJcbiAqIFRvYXN0cyBwcm92aWRlIGZlZWRiYWNrIG1lc3NhZ2VzIGFzIG5vdGlmaWNhdGlvbnMgdG8gdGhlIHVzZXIuXHJcbiAqIEdvYWwgaXMgdG8gbWltaWMgdGhlIHB1c2ggbm90aWZpY2F0aW9ucyBhdmFpbGFibGUgYm90aCBvbiBtb2JpbGUgYW5kIGRlc2t0b3Agb3BlcmF0aW5nIHN5c3RlbXMuXHJcbiAqXHJcbiAqIFxcQHNpbmNlIDUuMC4wXHJcbiAqL1xyXG52YXIgTmdiVG9hc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOZ2JUb2FzdChhcmlhTGl2ZSwgY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5hcmlhTGl2ZSA9IGFyaWFMaXZlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgdGVtcGxhdGUgbGlrZSBgPG5nLXRlbXBsYXRlIG5nYlRvYXN0SGVhZGVyPjwvbmctdGVtcGxhdGU+YCBjYW4gYmVcclxuICAgICAgICAgKiB1c2VkIGluIHRoZSBwcm9qZWN0ZWQgY29udGVudCB0byBhbGxvdyBtYXJrdXAgdXNhZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb250ZW50SGVhZGVyVHBsID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBldmVudCBmaXJlZCBpbW1lZGlhdGVseSB3aGVuIHRvYXN0J3MgYGhpZGUoKWAgbWV0aG9kIGhhcyBiZWVuIGNhbGxlZC5cclxuICAgICAgICAgKiBJdCBjYW4gb25seSBvY2N1ciBpbiAyIGRpZmZlcmVudCBzY2VuYXJpb3M6XHJcbiAgICAgICAgICogLSBgYXV0b2hpZGVgIHRpbWVvdXQgZmlyZXNcclxuICAgICAgICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgY2xvc2luZyBjcm9zcyAoJnRpbWVzKVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQWRkaXRpb25hbGx5IHRoaXMgb3V0cHV0IGlzIHB1cmVseSBpbmZvcm1hdGl2ZS4gVGhlIHRvYXN0IHdvbid0IGRpc2FwcGVhci4gSXQncyB1cCB0byB0aGUgdXNlciB0byB0YWtlIGNhcmUgb2ZcclxuICAgICAgICAgKiB0aGF0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaGlkZU91dHB1dCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICBpZiAodGhpcy5hcmlhTGl2ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXJpYUxpdmUgPSBjb25maWcuYXJpYUxpdmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGVsYXkgPSBjb25maWcuZGVsYXk7XHJcbiAgICAgICAgdGhpcy5hdXRvaGlkZSA9IGNvbmZpZy5hdXRvaGlkZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgTmdiVG9hc3QucHJvdG90eXBlLm5nQWZ0ZXJDb250ZW50SW5pdCA9IC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl9pbml0KCk7IH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P30gY2hhbmdlc1xyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgTmdiVG9hc3QucHJvdG90eXBlLm5nT25DaGFuZ2VzID0gLyoqXHJcbiAgICAgKiBAcGFyYW0gez99IGNoYW5nZXNcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKCdhdXRvaGlkZScgaW4gY2hhbmdlcykge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcclxuICAgICAgICAgICAgdGhpcy5faW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIE5nYlRvYXN0LnByb3RvdHlwZS5oaWRlID0gLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XHJcbiAgICAgICAgdGhpcy5oaWRlT3V0cHV0LmVtaXQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBOZ2JUb2FzdC5wcm90b3R5cGUuX2luaXQgPSAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5hdXRvaGlkZSAmJiAhdGhpcy5fdGltZW91dElEKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRJRCA9IHNldFRpbWVvdXQoKC8qKlxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaGlkZSgpOyB9KSwgdGhpcy5kZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIE5nYlRvYXN0LnByb3RvdHlwZS5fY2xlYXJUaW1lb3V0ID0gLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0SUQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXRJRCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRJRCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5nYlRvYXN0LmRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICduZ2ItdG9hc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydEFzOiAnbmdiVG9hc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdhbGVydCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdbYXR0ci5hcmlhLWxpdmVdJzogJ2FyaWFMaXZlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtYXRvbWljJzogJ3RydWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnW2NsYXNzLnRvYXN0XSc6ICd0cnVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1tjbGFzcy5zaG93XSc6ICd0cnVlJyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICA8bmctdGVtcGxhdGUgI2hlYWRlclRwbD5cXG4gICAgICA8c3Ryb25nIGNsYXNzPVxcXCJtci1hdXRvXFxcIj57e2hlYWRlcn19PC9zdHJvbmc+XFxuICAgIDwvbmctdGVtcGxhdGU+XFxuICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XFxcImNvbnRlbnRIZWFkZXJUcGwgfHwgaGVhZGVyXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJ0b2FzdC1oZWFkZXJcXFwiPlxcbiAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ1RlbXBsYXRlT3V0bGV0XT1cXFwiY29udGVudEhlYWRlclRwbCB8fCBoZWFkZXJUcGxcXFwiPjwvbmctdGVtcGxhdGU+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBhcmlhLWxhYmVsPVxcXCJDbG9zZVxcXCIgaTE4bi1hcmlhLWxhYmVsPVxcXCJAQG5nYi50b2FzdC5jbG9zZS1hcmlhXFxcIiAoY2xpY2spPVxcXCJoaWRlKClcXFwiPlxcbiAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+JnRpbWVzOzwvc3Bhbj5cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L25nLXRlbXBsYXRlPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0b2FzdC1ib2R5XFxcIj5cXG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XFxuICAgIDwvZGl2PlxcbiAgXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiBbXCIubmdiLXRvYXN0c3twb3NpdGlvbjpmaXhlZDt0b3A6MDtyaWdodDowO21hcmdpbjouNWVtO3otaW5kZXg6MTIwMH1uZ2ItdG9hc3QgLnRvYXN0LWhlYWRlciAuY2xvc2V7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tYm90dG9tOi4yNXJlbX1cIl1cclxuICAgICAgICAgICAgICAgIH1dIH1cclxuICAgIF07XHJcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cclxuICAgIE5nYlRvYXN0LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xyXG4gICAgICAgIHsgdHlwZTogU3RyaW5nLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBBdHRyaWJ1dGUsIGFyZ3M6IFsnYXJpYS1saXZlJyxdIH1dIH0sXHJcbiAgICAgICAgeyB0eXBlOiBOZ2JUb2FzdENvbmZpZyB9XHJcbiAgICBdOyB9O1xyXG4gICAgTmdiVG9hc3QucHJvcERlY29yYXRvcnMgPSB7XHJcbiAgICAgICAgZGVsYXk6IFt7IHR5cGU6IElucHV0IH1dLFxyXG4gICAgICAgIGF1dG9oaWRlOiBbeyB0eXBlOiBJbnB1dCB9XSxcclxuICAgICAgICBoZWFkZXI6IFt7IHR5cGU6IElucHV0IH1dLFxyXG4gICAgICAgIGNvbnRlbnRIZWFkZXJUcGw6IFt7IHR5cGU6IENvbnRlbnRDaGlsZCwgYXJnczogW05nYlRvYXN0SGVhZGVyLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSxdIH1dLFxyXG4gICAgICAgIGhpZGVPdXRwdXQ6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWydoaWRlJyxdIH1dXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5nYlRvYXN0O1xyXG59KCkpO1xyXG5leHBvcnQgeyBOZ2JUb2FzdCB9O1xyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgez99XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBOZ2JUb2FzdC5wcm90b3R5cGUuX3RpbWVvdXRJRDtcclxuICAgIC8qKlxyXG4gICAgICogRGVsYXkgYWZ0ZXIgd2hpY2ggdGhlIHRvYXN0IHdpbGwgaGlkZSAobXMpLlxyXG4gICAgICogZGVmYXVsdDogYDUwMGAgKG1zKSAoaW5oZXJpdGVkIGZyb20gTmdiVG9hc3RDb25maWcpXHJcbiAgICAgKiBAdHlwZSB7P31cclxuICAgICAqL1xyXG4gICAgTmdiVG9hc3QucHJvdG90eXBlLmRlbGF5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdXRvIGhpZGUgdGhlIHRvYXN0IGFmdGVyIGEgZGVsYXkgaW4gbXMuXHJcbiAgICAgKiBkZWZhdWx0OiBgdHJ1ZWAgKGluaGVyaXRlZCBmcm9tIE5nYlRvYXN0Q29uZmlnKVxyXG4gICAgICogQHR5cGUgez99XHJcbiAgICAgKi9cclxuICAgIE5nYlRvYXN0LnByb3RvdHlwZS5hdXRvaGlkZTtcclxuICAgIC8qKlxyXG4gICAgICogVGV4dCB0byBiZSB1c2VkIGFzIHRvYXN0J3MgaGVhZGVyLlxyXG4gICAgICogSWdub3JlZCBpZiBhIENvbnRlbnRDaGlsZCB0ZW1wbGF0ZSBpcyBzcGVjaWZpZWQgYXQgdGhlIHNhbWUgdGltZS5cclxuICAgICAqIEB0eXBlIHs/fVxyXG4gICAgICovXHJcbiAgICBOZ2JUb2FzdC5wcm90b3R5cGUuaGVhZGVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHRlbXBsYXRlIGxpa2UgYDxuZy10ZW1wbGF0ZSBuZ2JUb2FzdEhlYWRlcj48L25nLXRlbXBsYXRlPmAgY2FuIGJlXHJcbiAgICAgKiB1c2VkIGluIHRoZSBwcm9qZWN0ZWQgY29udGVudCB0byBhbGxvdyBtYXJrdXAgdXNhZ2UuXHJcbiAgICAgKiBAdHlwZSB7P31cclxuICAgICAqL1xyXG4gICAgTmdiVG9hc3QucHJvdG90eXBlLmNvbnRlbnRIZWFkZXJUcGw7XHJcbiAgICAvKipcclxuICAgICAqIEFuIGV2ZW50IGZpcmVkIGltbWVkaWF0ZWx5IHdoZW4gdG9hc3QncyBgaGlkZSgpYCBtZXRob2QgaGFzIGJlZW4gY2FsbGVkLlxyXG4gICAgICogSXQgY2FuIG9ubHkgb2NjdXIgaW4gMiBkaWZmZXJlbnQgc2NlbmFyaW9zOlxyXG4gICAgICogLSBgYXV0b2hpZGVgIHRpbWVvdXQgZmlyZXNcclxuICAgICAqIC0gdXNlciBjbGlja3Mgb24gYSBjbG9zaW5nIGNyb3NzICgmdGltZXMpXHJcbiAgICAgKlxyXG4gICAgICogQWRkaXRpb25hbGx5IHRoaXMgb3V0cHV0IGlzIHB1cmVseSBpbmZvcm1hdGl2ZS4gVGhlIHRvYXN0IHdvbid0IGRpc2FwcGVhci4gSXQncyB1cCB0byB0aGUgdXNlciB0byB0YWtlIGNhcmUgb2ZcclxuICAgICAqIHRoYXQuXHJcbiAgICAgKiBAdHlwZSB7P31cclxuICAgICAqL1xyXG4gICAgTmdiVG9hc3QucHJvdG90eXBlLmhpZGVPdXRwdXQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUb2FzdC5wcm90b3R5cGUuYXJpYUxpdmU7XHJcbn1cciJdfQ==