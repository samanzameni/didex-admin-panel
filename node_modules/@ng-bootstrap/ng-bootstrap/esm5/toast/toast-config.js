/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Interface used to type all toast config options. See `NgbToastConfig`.
 *
 * \@since 5.0.0
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbToastOptions() { }
if (false) {
    /**
     * Specify if the toast component should emit the `hide()` output
     * after a certain `delay` in ms.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.autohide;
    /**
     * Delay in ms after which the `hide()` output should be emitted.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.delay;
    /**
     * Type of aria-live attribute to be used.
     *
     * Could be one of these 2 values (as string):
     * - `polite` (default)
     * - `alert`
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.ariaLive;
}
/**
 * Configuration service for the NgbToast component. You can inject this service, typically in your root component,
 * and customize the values of its properties in order to provide default values for all the toasts used in the
 * application.
 *
 * \@since 5.0.0
 */
var NgbToastConfig = /** @class */ (function () {
    function NgbToastConfig() {
        this.autohide = true;
        this.delay = 500;
        this.ariaLive = 'polite';
    }
    /** @nocollapse */ NgbToastConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(); }, token: NgbToastConfig, providedIn: "root" });
NgbToastConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbToastConfig, factory: function NgbToastConfig_Factory(t) { return new (t || NgbToastConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbToastConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { autohide: [], delay: [], ariaLive: [] });
    return NgbToastConfig;
}());
export { NgbToastConfig };
if (false) {
    /** @type {?} */
    NgbToastConfig.prototype.autohide;
    /** @type {?} */
    NgbToastConfig.prototype.delay;
    /** @type {?} */
    NgbToastConfig.prototype.ariaLive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS90b2FzdC90b2FzdC1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FtQ0ssQUFHQzs7Ozs7OytFQUNvTSIsImZpbGUiOiJ0b2FzdC1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEludGVyZmFjZSB1c2VkIHRvIHR5cGUgYWxsIHRvYXN0IGNvbmZpZyBvcHRpb25zLiBTZWUgYE5nYlRvYXN0Q29uZmlnYC5cclxuICpcclxuICogXFxAc2luY2UgNS4wLjBcclxuICogQHJlY29yZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIE5nYlRvYXN0T3B0aW9ucygpIHsgfVxyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKlxyXG4gICAgICogU3BlY2lmeSBpZiB0aGUgdG9hc3QgY29tcG9uZW50IHNob3VsZCBlbWl0IHRoZSBgaGlkZSgpYCBvdXRwdXRcclxuICAgICAqIGFmdGVyIGEgY2VydGFpbiBgZGVsYXlgIGluIG1zLlxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JUb2FzdE9wdGlvbnMucHJvdG90eXBlLmF1dG9oaWRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxheSBpbiBtcyBhZnRlciB3aGljaCB0aGUgYGhpZGUoKWAgb3V0cHV0IHNob3VsZCBiZSBlbWl0dGVkLlxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JUb2FzdE9wdGlvbnMucHJvdG90eXBlLmRlbGF5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUeXBlIG9mIGFyaWEtbGl2ZSBhdHRyaWJ1dGUgdG8gYmUgdXNlZC5cclxuICAgICAqXHJcbiAgICAgKiBDb3VsZCBiZSBvbmUgb2YgdGhlc2UgMiB2YWx1ZXMgKGFzIHN0cmluZyk6XHJcbiAgICAgKiAtIGBwb2xpdGVgIChkZWZhdWx0KVxyXG4gICAgICogLSBgYWxlcnRgXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYlRvYXN0T3B0aW9ucy5wcm90b3R5cGUuYXJpYUxpdmU7XHJcbn1cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIE5nYlRvYXN0IGNvbXBvbmVudC4gWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCxcclxuICogYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgdG9hc3RzIHVzZWQgaW4gdGhlXHJcbiAqIGFwcGxpY2F0aW9uLlxyXG4gKlxyXG4gKiBcXEBzaW5jZSA1LjAuMFxyXG4gKi9cclxudmFyIE5nYlRvYXN0Q29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdiVG9hc3RDb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5hdXRvaGlkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kZWxheSA9IDUwMDtcclxuICAgICAgICB0aGlzLmFyaWFMaXZlID0gJ3BvbGl0ZSc7XHJcbiAgICB9XHJcbiAgICBOZ2JUb2FzdENvbmZpZy5kZWNvcmF0b3JzID0gW1xyXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XHJcbiAgICBdO1xyXG4gICAgLyoqIEBub2NvbGxhcHNlICovIE5nYlRvYXN0Q29uZmlnLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTmdiVG9hc3RDb25maWdfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBOZ2JUb2FzdENvbmZpZygpOyB9LCB0b2tlbjogTmdiVG9hc3RDb25maWcsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xyXG4gICAgcmV0dXJuIE5nYlRvYXN0Q29uZmlnO1xyXG59KCkpO1xyXG5leHBvcnQgeyBOZ2JUb2FzdENvbmZpZyB9O1xyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRvYXN0Q29uZmlnLnByb3RvdHlwZS5hdXRvaGlkZTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRvYXN0Q29uZmlnLnByb3RvdHlwZS5kZWxheTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRvYXN0Q29uZmlnLnByb3RvdHlwZS5hcmlhTGl2ZTtcclxufVxyIl19