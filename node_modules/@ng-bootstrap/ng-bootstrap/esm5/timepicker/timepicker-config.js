/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbTimepicker`](#/components/timepicker/api#NgbTimepicker) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the timepickers used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbTimepickerConfig = /** @class */ (function () {
    function NgbTimepickerConfig() {
        this.meridian = false;
        this.spinners = true;
        this.seconds = false;
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.disabled = false;
        this.readonlyInputs = false;
        this.size = 'medium';
    }
    /** @nocollapse */ NgbTimepickerConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbTimepickerConfig_Factory() { return new NgbTimepickerConfig(); }, token: NgbTimepickerConfig, providedIn: "root" });
NgbTimepickerConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbTimepickerConfig, factory: function NgbTimepickerConfig_Factory(t) { return new (t || NgbTimepickerConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbTimepickerConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { meridian: [], spinners: [], seconds: [], hourStep: [], minuteStep: [], secondStep: [], disabled: [], readonlyInputs: [], size: [] });
    return NgbTimepickerConfig;
}());
export { NgbTimepickerConfig };
if (false) {
    /** @type {?} */
    NgbTimepickerConfig.prototype.meridian;
    /** @type {?} */
    NgbTimepickerConfig.prototype.spinners;
    /** @type {?} */
    NgbTimepickerConfig.prototype.seconds;
    /** @type {?} */
    NgbTimepickerConfig.prototype.hourStep;
    /** @type {?} */
    NgbTimepickerConfig.prototype.minuteStep;
    /** @type {?} */
    NgbTimepickerConfig.prototype.secondStep;
    /** @type {?} */
    NgbTimepickerConfig.prototype.disabled;
    /** @type {?} */
    NgbTimepickerConfig.prototype.readonlyInputs;
    /** @type {?} */
    NgbTimepickerConfig.prototype.size;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS90aW1lcGlja2VyL3RpbWVwaWNrZXItY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7O0tBV0ssQUFHQzs7Ozs7OzJLQUN3TiIsImZpbGUiOiJ0aW1lcGlja2VyLWNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcclxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xyXG4gKi9cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBpMCBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG4vKipcclxuICogQSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBbYE5nYlRpbWVwaWNrZXJgXSgjL2NvbXBvbmVudHMvdGltZXBpY2tlci9hcGkjTmdiVGltZXBpY2tlcikgY29tcG9uZW50LlxyXG4gKlxyXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW5cclxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHRoZSB0aW1lcGlja2VycyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuICovXHJcbnZhciBOZ2JUaW1lcGlja2VyQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdiVGltZXBpY2tlckNvbmZpZygpIHtcclxuICAgICAgICB0aGlzLm1lcmlkaWFuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zcGlubmVycyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ob3VyU3RlcCA9IDE7XHJcbiAgICAgICAgdGhpcy5taW51dGVTdGVwID0gMTtcclxuICAgICAgICB0aGlzLnNlY29uZFN0ZXAgPSAxO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlYWRvbmx5SW5wdXRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaXplID0gJ21lZGl1bSc7XHJcbiAgICB9XHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLmRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cclxuICAgIF07XHJcbiAgICAvKiogQG5vY29sbGFwc2UgKi8gTmdiVGltZXBpY2tlckNvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYlRpbWVwaWNrZXJDb25maWdfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBOZ2JUaW1lcGlja2VyQ29uZmlnKCk7IH0sIHRva2VuOiBOZ2JUaW1lcGlja2VyQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuICAgIHJldHVybiBOZ2JUaW1lcGlja2VyQ29uZmlnO1xyXG59KCkpO1xyXG5leHBvcnQgeyBOZ2JUaW1lcGlja2VyQ29uZmlnIH07XHJcbmlmIChmYWxzZSkge1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubWVyaWRpYW47XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zcGlubmVycztcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNlY29uZHM7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5ob3VyU3RlcDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLm1pbnV0ZVN0ZXA7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zZWNvbmRTdGVwO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuZGlzYWJsZWQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5yZWFkb25seUlucHV0cztcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNpemU7XHJcbn1cciJdfQ==