/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, LOCALE_ID } from '@angular/core';
import { FormStyle, getLocaleDayPeriods, TranslationWidth } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @param {?} locale
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
export function NGB_TIMEPICKER_I18N_FACTORY(locale) {
    return new NgbTimepickerI18nDefault(locale);
}
/**
 * Type of the service supplying day periods (for example, 'AM' and 'PM') to NgbTimepicker component.
 * The default implementation of this service honors the Angular locale, and uses the registered locale data,
 * as explained in the Angular i18n guide.
 * @abstract
 */
var NgbTimepickerI18n = /** @class */ (function () {
    function NgbTimepickerI18n() {
    }
    /** @nocollapse */ NgbTimepickerI18n.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbTimepickerI18n_Factory() { return NGB_TIMEPICKER_I18N_FACTORY(i0.ɵɵinject(i0.LOCALE_ID)); }, token: NgbTimepickerI18n, providedIn: "root" });
NgbTimepickerI18n.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbTimepickerI18n, factory: function NgbTimepickerI18n_Factory(t) { var r = null; if (t) {
        r = new t();
    }
    else {
        r = NGB_TIMEPICKER_I18N_FACTORY(ɵngcc0.ɵɵinject(LOCALE_ID));
    } return r; }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbTimepickerI18n, [{
        type: Injectable,
        args: [{ providedIn: 'root', useFactory: NGB_TIMEPICKER_I18N_FACTORY, deps: [LOCALE_ID] }]
    }], function () { return []; }, null);
    return NgbTimepickerI18n;
}());
export { NgbTimepickerI18n };
if (false) {
    /**
     * Returns the name for the period before midday.
     * @abstract
     * @return {?}
     */
    NgbTimepickerI18n.prototype.getMorningPeriod = function () { };
    /**
     * Returns the name for the period after midday.
     * @abstract
     * @return {?}
     */
    NgbTimepickerI18n.prototype.getAfternoonPeriod = function () { };
}
var NgbTimepickerI18nDefault = /** @class */ (function (_super) {
    tslib_1.__extends(NgbTimepickerI18nDefault, _super);
    function NgbTimepickerI18nDefault(locale) {
        var _this = _super.call(this) || this;
        _this._periods = getLocaleDayPeriods(locale, FormStyle.Standalone, TranslationWidth.Narrow);
        return _this;
    }
    /**
     * @return {?}
     */
    NgbTimepickerI18nDefault.prototype.getMorningPeriod = /**
     * @return {?}
     */
    function () { return this._periods[0]; };
    /**
     * @return {?}
     */
    NgbTimepickerI18nDefault.prototype.getAfternoonPeriod = /**
     * @return {?}
     */
    function () { return this._periods[1]; };
    /** @nocollapse */
    NgbTimepickerI18nDefault.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
NgbTimepickerI18nDefault.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbTimepickerI18nDefault, factory: function NgbTimepickerI18nDefault_Factory(t) { return new (t || NgbTimepickerI18nDefault)(ɵngcc0.ɵɵinject(LOCALE_ID)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbTimepickerI18nDefault, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { getMorningPeriod: [], getAfternoonPeriod: [] });
    return NgbTimepickerI18nDefault;
}(NgbTimepickerI18n));
export { NgbTimepickerI18nDefault };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgbTimepickerI18nDefault.prototype._periods;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS90aW1lcGlja2VyL3RpbWVwaWNrZXItaTE4bi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7OztLQVdLLEFBR0M7Ozs7Ozs7Ozs7OzBDQUMrTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkNBc0N4TSxBQUd2Qzs7Ozs7Ozs7Ozs7d0VBSUciLCJmaWxlIjoidGltZXBpY2tlci1pMThuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxyXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIExPQ0FMRV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtU3R5bGUsIGdldExvY2FsZURheVBlcmlvZHMsIFRyYW5zbGF0aW9uV2lkdGggfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgKiBhcyBpMCBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG4vKipcclxuICogQHBhcmFtIHs/fSBsb2NhbGVcclxuICogQHJldHVybiB7P31cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBOR0JfVElNRVBJQ0tFUl9JMThOX0ZBQ1RPUlkobG9jYWxlKSB7XHJcbiAgICByZXR1cm4gbmV3IE5nYlRpbWVwaWNrZXJJMThuRGVmYXVsdChsb2NhbGUpO1xyXG59XHJcbi8qKlxyXG4gKiBUeXBlIG9mIHRoZSBzZXJ2aWNlIHN1cHBseWluZyBkYXkgcGVyaW9kcyAoZm9yIGV4YW1wbGUsICdBTScgYW5kICdQTScpIHRvIE5nYlRpbWVwaWNrZXIgY29tcG9uZW50LlxyXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIHNlcnZpY2UgaG9ub3JzIHRoZSBBbmd1bGFyIGxvY2FsZSwgYW5kIHVzZXMgdGhlIHJlZ2lzdGVyZWQgbG9jYWxlIGRhdGEsXHJcbiAqIGFzIGV4cGxhaW5lZCBpbiB0aGUgQW5ndWxhciBpMThuIGd1aWRlLlxyXG4gKiBAYWJzdHJhY3RcclxuICovXHJcbnZhciBOZ2JUaW1lcGlja2VySTE4biA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5nYlRpbWVwaWNrZXJJMThuKCkge1xyXG4gICAgfVxyXG4gICAgTmdiVGltZXBpY2tlckkxOG4uZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JywgdXNlRmFjdG9yeTogTkdCX1RJTUVQSUNLRVJfSTE4Tl9GQUNUT1JZLCBkZXBzOiBbTE9DQUxFX0lEXSB9LF0gfVxyXG4gICAgXTtcclxuICAgIC8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JUaW1lcGlja2VySTE4bi5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYlRpbWVwaWNrZXJJMThuX0ZhY3RvcnkoKSB7IHJldHVybiBOR0JfVElNRVBJQ0tFUl9JMThOX0ZBQ1RPUlkoaTAuybXJtWluamVjdChpMC5MT0NBTEVfSUQpKTsgfSwgdG9rZW46IE5nYlRpbWVwaWNrZXJJMThuLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuICAgIHJldHVybiBOZ2JUaW1lcGlja2VySTE4bjtcclxufSgpKTtcclxuZXhwb3J0IHsgTmdiVGltZXBpY2tlckkxOG4gfTtcclxuaWYgKGZhbHNlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG5hbWUgZm9yIHRoZSBwZXJpb2QgYmVmb3JlIG1pZGRheS5cclxuICAgICAqIEBhYnN0cmFjdFxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgTmdiVGltZXBpY2tlckkxOG4ucHJvdG90eXBlLmdldE1vcm5pbmdQZXJpb2QgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG5hbWUgZm9yIHRoZSBwZXJpb2QgYWZ0ZXIgbWlkZGF5LlxyXG4gICAgICogQGFic3RyYWN0XHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBOZ2JUaW1lcGlja2VySTE4bi5wcm90b3R5cGUuZ2V0QWZ0ZXJub29uUGVyaW9kID0gZnVuY3Rpb24gKCkgeyB9O1xyXG59XHJcbnZhciBOZ2JUaW1lcGlja2VySTE4bkRlZmF1bHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhOZ2JUaW1lcGlja2VySTE4bkRlZmF1bHQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBOZ2JUaW1lcGlja2VySTE4bkRlZmF1bHQobG9jYWxlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5fcGVyaW9kcyA9IGdldExvY2FsZURheVBlcmlvZHMobG9jYWxlLCBGb3JtU3R5bGUuU3RhbmRhbG9uZSwgVHJhbnNsYXRpb25XaWR0aC5OYXJyb3cpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgTmdiVGltZXBpY2tlckkxOG5EZWZhdWx0LnByb3RvdHlwZS5nZXRNb3JuaW5nUGVyaW9kID0gLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wZXJpb2RzWzBdOyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBOZ2JUaW1lcGlja2VySTE4bkRlZmF1bHQucHJvdG90eXBlLmdldEFmdGVybm9vblBlcmlvZCA9IC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcGVyaW9kc1sxXTsgfTtcclxuICAgIE5nYlRpbWVwaWNrZXJJMThuRGVmYXVsdC5kZWNvcmF0b3JzID0gW1xyXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XHJcbiAgICBdO1xyXG4gICAgLyoqIEBub2NvbGxhcHNlICovXHJcbiAgICBOZ2JUaW1lcGlja2VySTE4bkRlZmF1bHQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICAgICAgeyB0eXBlOiBTdHJpbmcsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0xPQ0FMRV9JRCxdIH1dIH1cclxuICAgIF07IH07XHJcbiAgICByZXR1cm4gTmdiVGltZXBpY2tlckkxOG5EZWZhdWx0O1xyXG59KE5nYlRpbWVwaWNrZXJJMThuKSk7XHJcbmV4cG9ydCB7IE5nYlRpbWVwaWNrZXJJMThuRGVmYXVsdCB9O1xyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgez99XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBOZ2JUaW1lcGlja2VySTE4bkRlZmF1bHQucHJvdG90eXBlLl9wZXJpb2RzO1xyXG59XHIiXX0=