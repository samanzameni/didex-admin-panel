/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgbDatepickerConfig } from './datepicker-config';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbDatepickerInput`](#/components/datepicker/api#NgbDatepicker) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the datepicker inputs used in the application.
 *
 * \@since 5.2.0
 */
import * as ɵngcc0 from '@angular/core';
var NgbInputDatepickerConfig = /** @class */ (function (_super) {
    tslib_1.__extends(NgbInputDatepickerConfig, _super);
    function NgbInputDatepickerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.autoClose = true;
        _this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
        _this.restoreFocus = true;
        return _this;
    }
    /** @nocollapse */ NgbInputDatepickerConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbInputDatepickerConfig_Factory() { return new NgbInputDatepickerConfig(); }, token: NgbInputDatepickerConfig, providedIn: "root" });
NgbInputDatepickerConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbInputDatepickerConfig, factory: function NgbInputDatepickerConfig_Factory(t) { return ɵNgbInputDatepickerConfig_BaseFactory(t || NgbInputDatepickerConfig); }, providedIn: 'root' });
const ɵNgbInputDatepickerConfig_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NgbInputDatepickerConfig);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbInputDatepickerConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null);
    return NgbInputDatepickerConfig;
}(NgbDatepickerConfig));
export { NgbInputDatepickerConfig };
if (false) {
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.autoClose;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.container;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.positionTarget;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.placement;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.restoreFocus;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9kYXRlcGlja2VyL2RhdGVwaWNrZXItaW5wdXQtY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTs7Ozs7Ozs7S0FRSyxBQUdDOzs7Ozs7O29CQUM0TyIsImZpbGUiOiJkYXRlcGlja2VyLWlucHV0LWNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcclxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xyXG4gKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ2JEYXRlcGlja2VyQ29uZmlnIH0gZnJvbSAnLi9kYXRlcGlja2VyLWNvbmZpZyc7XHJcbmltcG9ydCAqIGFzIGkwIGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiRGF0ZXBpY2tlcklucHV0YF0oIy9jb21wb25lbnRzL2RhdGVwaWNrZXIvYXBpI05nYkRhdGVwaWNrZXIpIGNvbXBvbmVudC5cclxuICpcclxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXHJcbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgZGF0ZXBpY2tlciBpbnB1dHMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIFxcQHNpbmNlIDUuMi4wXHJcbiAqL1xyXG52YXIgTmdiSW5wdXREYXRlcGlja2VyQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTmdiSW5wdXREYXRlcGlja2VyQ29uZmlnLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTmdiSW5wdXREYXRlcGlja2VyQ29uZmlnKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmF1dG9DbG9zZSA9IHRydWU7XHJcbiAgICAgICAgX3RoaXMucGxhY2VtZW50ID0gWydib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnLCAndG9wLWxlZnQnLCAndG9wLXJpZ2h0J107XHJcbiAgICAgICAgX3RoaXMucmVzdG9yZUZvY3VzID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBOZ2JJbnB1dERhdGVwaWNrZXJDb25maWcuZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9LF0gfVxyXG4gICAgXTtcclxuICAgIC8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JJbnB1dERhdGVwaWNrZXJDb25maWcubmdJbmplY3RhYmxlRGVmID0gaTAuybXJtWRlZmluZUluamVjdGFibGUoeyBmYWN0b3J5OiBmdW5jdGlvbiBOZ2JJbnB1dERhdGVwaWNrZXJDb25maWdfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBOZ2JJbnB1dERhdGVwaWNrZXJDb25maWcoKTsgfSwgdG9rZW46IE5nYklucHV0RGF0ZXBpY2tlckNvbmZpZywgcHJvdmlkZWRJbjogXCJyb290XCIgfSk7XHJcbiAgICByZXR1cm4gTmdiSW5wdXREYXRlcGlja2VyQ29uZmlnO1xyXG59KE5nYkRhdGVwaWNrZXJDb25maWcpKTtcclxuZXhwb3J0IHsgTmdiSW5wdXREYXRlcGlja2VyQ29uZmlnIH07XHJcbmlmIChmYWxzZSkge1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiSW5wdXREYXRlcGlja2VyQ29uZmlnLnByb3RvdHlwZS5hdXRvQ2xvc2U7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JJbnB1dERhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLmNvbnRhaW5lcjtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYklucHV0RGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUucG9zaXRpb25UYXJnZXQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JJbnB1dERhdGVwaWNrZXJDb25maWcucHJvdG90eXBlLnBsYWNlbWVudDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYklucHV0RGF0ZXBpY2tlckNvbmZpZy5wcm90b3R5cGUucmVzdG9yZUZvY3VzO1xyXG59XHIiXX0=