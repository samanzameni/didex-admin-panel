/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [NgbAccordion](#/components/accordion/api#NgbAccordion) component.
 *
 * You can inject this service, typically in your root component, and customize its properties
 * to provide default values for all accordions used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbAccordionConfig = /** @class */ (function () {
    function NgbAccordionConfig() {
        this.closeOthers = false;
    }
    /** @nocollapse */ NgbAccordionConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbAccordionConfig_Factory() { return new NgbAccordionConfig(); }, token: NgbAccordionConfig, providedIn: "root" });
NgbAccordionConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbAccordionConfig, factory: function NgbAccordionConfig_Factory(t) { return new (t || NgbAccordionConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbAccordionConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { closeOthers: [] });
    return NgbAccordionConfig;
}());
export { NgbAccordionConfig };
if (false) {
    /** @type {?} */
    NgbAccordionConfig.prototype.closeOthers;
    /** @type {?} */
    NgbAccordionConfig.prototype.type;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9hY2NvcmRpb24vYWNjb3JkaW9uLWNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7S0FHSyxBQUdDOzs7Ozs7eURBQ29OIiwiZmlsZSI6ImFjY29yZGlvbi1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW05nYkFjY29yZGlvbl0oIy9jb21wb25lbnRzL2FjY29yZGlvbi9hcGkjTmdiQWNjb3JkaW9uKSBjb21wb25lbnQuXHJcbiAqXHJcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgaXRzIHByb3BlcnRpZXNcclxuICogdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIGFjY29yZGlvbnMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXHJcbiAqL1xyXG52YXIgTmdiQWNjb3JkaW9uQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdiQWNjb3JkaW9uQ29uZmlnKCkge1xyXG4gICAgICAgIHRoaXMuY2xvc2VPdGhlcnMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIE5nYkFjY29yZGlvbkNvbmZpZy5kZWNvcmF0b3JzID0gW1xyXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XHJcbiAgICBdO1xyXG4gICAgLyoqIEBub2NvbGxhcHNlICovIE5nYkFjY29yZGlvbkNvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYkFjY29yZGlvbkNvbmZpZ19GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE5nYkFjY29yZGlvbkNvbmZpZygpOyB9LCB0b2tlbjogTmdiQWNjb3JkaW9uQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuICAgIHJldHVybiBOZ2JBY2NvcmRpb25Db25maWc7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IE5nYkFjY29yZGlvbkNvbmZpZyB9O1xyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYkFjY29yZGlvbkNvbmZpZy5wcm90b3R5cGUuY2xvc2VPdGhlcnM7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JBY2NvcmRpb25Db25maWcucHJvdG90eXBlLnR5cGU7XHJcbn1cciJdfQ==