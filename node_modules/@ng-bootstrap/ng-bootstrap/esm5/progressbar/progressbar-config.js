/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbProgressbar`](#/components/progressbar/api#NgbProgressbar) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the progress bars used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbProgressbarConfig = /** @class */ (function () {
    function NgbProgressbarConfig() {
        this.max = 100;
        this.animated = false;
        this.striped = false;
        this.showValue = false;
    }
    /** @nocollapse */ NgbProgressbarConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbProgressbarConfig_Factory() { return new NgbProgressbarConfig(); }, token: NgbProgressbarConfig, providedIn: "root" });
NgbProgressbarConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbProgressbarConfig, factory: function NgbProgressbarConfig_Factory(t) { return new (t || NgbProgressbarConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbProgressbarConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { max: [], animated: [], striped: [], showValue: [] });
    return NgbProgressbarConfig;
}());
export { NgbProgressbarConfig };
if (false) {
    /** @type {?} */
    NgbProgressbarConfig.prototype.max;
    /** @type {?} */
    NgbProgressbarConfig.prototype.animated;
    /** @type {?} */
    NgbProgressbarConfig.prototype.striped;
    /** @type {?} */
    NgbProgressbarConfig.prototype.textType;
    /** @type {?} */
    NgbProgressbarConfig.prototype.type;
    /** @type {?} */
    NgbProgressbarConfig.prototype.showValue;
    /** @type {?} */
    NgbProgressbarConfig.prototype.height;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7O0tBTUssQUFHQzs7Ozs7OzJGQUM0TiIsImZpbGUiOiJwcm9ncmVzc2Jhci1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JQcm9ncmVzc2JhcmBdKCMvY29tcG9uZW50cy9wcm9ncmVzc2Jhci9hcGkjTmdiUHJvZ3Jlc3NiYXIpIGNvbXBvbmVudC5cclxuICpcclxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXHJcbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgcHJvZ3Jlc3MgYmFycyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuICovXHJcbnZhciBOZ2JQcm9ncmVzc2JhckNvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5nYlByb2dyZXNzYmFyQ29uZmlnKCkge1xyXG4gICAgICAgIHRoaXMubWF4ID0gMTAwO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0cmlwZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNob3dWYWx1ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgTmdiUHJvZ3Jlc3NiYXJDb25maWcuZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9LF0gfVxyXG4gICAgXTtcclxuICAgIC8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JQcm9ncmVzc2JhckNvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYlByb2dyZXNzYmFyQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiUHJvZ3Jlc3NiYXJDb25maWcoKTsgfSwgdG9rZW46IE5nYlByb2dyZXNzYmFyQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuICAgIHJldHVybiBOZ2JQcm9ncmVzc2JhckNvbmZpZztcclxufSgpKTtcclxuZXhwb3J0IHsgTmdiUHJvZ3Jlc3NiYXJDb25maWcgfTtcclxuaWYgKGZhbHNlKSB7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUubWF4O1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiUHJvZ3Jlc3NiYXJDb25maWcucHJvdG90eXBlLmFuaW1hdGVkO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiUHJvZ3Jlc3NiYXJDb25maWcucHJvdG90eXBlLnN0cmlwZWQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUudGV4dFR5cGU7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUudHlwZTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlByb2dyZXNzYmFyQ29uZmlnLnByb3RvdHlwZS5zaG93VmFsdWU7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUuaGVpZ2h0O1xyXG59XHIiXX0=