/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Options available when opening new modal windows with `NgbModal.open()` method.
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbModalOptions() { }
if (false) {
    /**
     * `aria-labelledby` attribute value to set on the modal window.
     *
     * \@since 2.2.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.ariaLabelledBy;
    /**
     * If `true`, the backdrop element will be created for a given modal.
     *
     * Alternatively, specify `'static'` for a backdrop which doesn't close the modal on click.
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdrop;
    /**
     * Callback right before the modal will be dismissed.
     *
     * If this function returns:
     * * `false`
     * * a promise resolved with `false`
     * * a promise that is rejected
     *
     * then the modal won't be dismissed.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.beforeDismiss;
    /**
     * If `true`, the modal will be centered vertically.
     *
     * Default value is `false`.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.centered;
    /**
     * A selector specifying the element all new modal windows should be appended to.
     * Since v5.3.0 it is also possible to pass the reference to an `HTMLElement`.
     *
     * If not specified, will be `body`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.container;
    /**
     * The `Injector` to use for modal content.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.injector;
    /**
     * If `true`, the modal will be closed when `Escape` key is pressed
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.keyboard;
    /**
     * Scrollable modal content (false by default).
     *
     * \@since 5.0.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.scrollable;
    /**
     * Size of a new modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.size;
    /**
     * A custom class to append to the modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.windowClass;
    /**
     * A custom class to append to the modal backdrop.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdropClass;
}
/**
 * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all modals used in the application.
 *
 * \@since 3.1.0
 */
var NgbModalConfig = /** @class */ (function () {
    function NgbModalConfig() {
        this.backdrop = true;
        this.keyboard = true;
    }
    /** @nocollapse */ NgbModalConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: "root" });
NgbModalConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbModalConfig, factory: function NgbModalConfig_Factory(t) { return new (t || NgbModalConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbModalConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { backdrop: [], keyboard: [] });
    return NgbModalConfig;
}());
export { NgbModalConfig };
if (false) {
    /** @type {?} */
    NgbModalConfig.prototype.ariaLabelledBy;
    /** @type {?} */
    NgbModalConfig.prototype.backdrop;
    /** @type {?} */
    NgbModalConfig.prototype.beforeDismiss;
    /** @type {?} */
    NgbModalConfig.prototype.centered;
    /** @type {?} */
    NgbModalConfig.prototype.container;
    /** @type {?} */
    NgbModalConfig.prototype.injector;
    /** @type {?} */
    NgbModalConfig.prototype.keyboard;
    /** @type {?} */
    NgbModalConfig.prototype.scrollable;
    /** @type {?} */
    NgbModalConfig.prototype.size;
    /** @type {?} */
    NgbModalConfig.prototype.windowClass;
    /** @type {?} */
    NgbModalConfig.prototype.backdropClass;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9tb2RhbC9tb2RhbC1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQWdHSyxBQUdDOzs7Ozs7b0VBQ29NIiwiZmlsZSI6Im1vZGFsLWNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcclxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xyXG4gKi9cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBpMCBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG4vKipcclxuICogT3B0aW9ucyBhdmFpbGFibGUgd2hlbiBvcGVuaW5nIG5ldyBtb2RhbCB3aW5kb3dzIHdpdGggYE5nYk1vZGFsLm9wZW4oKWAgbWV0aG9kLlxyXG4gKiBAcmVjb3JkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gTmdiTW9kYWxPcHRpb25zKCkgeyB9XHJcbmlmIChmYWxzZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBtb2RhbCB3aW5kb3cuXHJcbiAgICAgKlxyXG4gICAgICogXFxAc2luY2UgMi4yLjBcclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5hcmlhTGFiZWxsZWRCeTtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgZWxlbWVudCB3aWxsIGJlIGNyZWF0ZWQgZm9yIGEgZ2l2ZW4gbW9kYWwuXHJcbiAgICAgKlxyXG4gICAgICogQWx0ZXJuYXRpdmVseSwgc3BlY2lmeSBgJ3N0YXRpYydgIGZvciBhIGJhY2tkcm9wIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxyXG4gICAgICpcclxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLmJhY2tkcm9wO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayByaWdodCBiZWZvcmUgdGhlIG1vZGFsIHdpbGwgYmUgZGlzbWlzc2VkLlxyXG4gICAgICpcclxuICAgICAqIElmIHRoaXMgZnVuY3Rpb24gcmV0dXJuczpcclxuICAgICAqICogYGZhbHNlYFxyXG4gICAgICogKiBhIHByb21pc2UgcmVzb2x2ZWQgd2l0aCBgZmFsc2VgXHJcbiAgICAgKiAqIGEgcHJvbWlzZSB0aGF0IGlzIHJlamVjdGVkXHJcbiAgICAgKlxyXG4gICAgICogdGhlbiB0aGUgbW9kYWwgd29uJ3QgYmUgZGlzbWlzc2VkLlxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLmJlZm9yZURpc21pc3M7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgYmUgY2VudGVyZWQgdmVydGljYWxseS5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXHJcbiAgICAgKlxyXG4gICAgICogXFxAc2luY2UgMS4xLjBcclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5jZW50ZXJlZDtcclxuICAgIC8qKlxyXG4gICAgICogQSBzZWxlY3RvciBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IGFsbCBuZXcgbW9kYWwgd2luZG93cyBzaG91bGQgYmUgYXBwZW5kZWQgdG8uXHJcbiAgICAgKiBTaW5jZSB2NS4zLjAgaXQgaXMgYWxzbyBwb3NzaWJsZSB0byBwYXNzIHRoZSByZWZlcmVuY2UgdG8gYW4gYEhUTUxFbGVtZW50YC5cclxuICAgICAqXHJcbiAgICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB3aWxsIGJlIGBib2R5YC5cclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5jb250YWluZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBgSW5qZWN0b3JgIHRvIHVzZSBmb3IgbW9kYWwgY29udGVudC5cclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5pbmplY3RvcjtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBiZSBjbG9zZWQgd2hlbiBgRXNjYXBlYCBrZXkgaXMgcHJlc3NlZFxyXG4gICAgICpcclxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLmtleWJvYXJkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTY3JvbGxhYmxlIG1vZGFsIGNvbnRlbnQgKGZhbHNlIGJ5IGRlZmF1bHQpLlxyXG4gICAgICpcclxuICAgICAqIFxcQHNpbmNlIDUuMC4wXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuc2Nyb2xsYWJsZTtcclxuICAgIC8qKlxyXG4gICAgICogU2l6ZSBvZiBhIG5ldyBtb2RhbCB3aW5kb3cuXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuc2l6ZTtcclxuICAgIC8qKlxyXG4gICAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBtb2RhbCB3aW5kb3cuXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUud2luZG93Q2xhc3M7XHJcbiAgICAvKipcclxuICAgICAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgbW9kYWwgYmFja2Ryb3AuXHJcbiAgICAgKlxyXG4gICAgICogXFxAc2luY2UgMS4xLjBcclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5iYWNrZHJvcENsYXNzO1xyXG59XHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiTW9kYWxgXSgjL2NvbXBvbmVudHMvbW9kYWwvYXBpI05nYk1vZGFsKSBzZXJ2aWNlLlxyXG4gKlxyXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW5cclxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIG1vZGFscyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogXFxAc2luY2UgMy4xLjBcclxuICovXHJcbnZhciBOZ2JNb2RhbENvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5nYk1vZGFsQ29uZmlnKCkge1xyXG4gICAgICAgIHRoaXMuYmFja2Ryb3AgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgTmdiTW9kYWxDb25maWcuZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9LF0gfVxyXG4gICAgXTtcclxuICAgIC8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JNb2RhbENvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYk1vZGFsQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiTW9kYWxDb25maWcoKTsgfSwgdG9rZW46IE5nYk1vZGFsQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuICAgIHJldHVybiBOZ2JNb2RhbENvbmZpZztcclxufSgpKTtcclxuZXhwb3J0IHsgTmdiTW9kYWxDb25maWcgfTtcclxuaWYgKGZhbHNlKSB7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuYXJpYUxhYmVsbGVkQnk7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuYmFja2Ryb3A7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuYmVmb3JlRGlzbWlzcztcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5jZW50ZXJlZDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5jb250YWluZXI7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuaW5qZWN0b3I7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUua2V5Ym9hcmQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuc2Nyb2xsYWJsZTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5zaXplO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLndpbmRvd0NsYXNzO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLmJhY2tkcm9wQ2xhc3M7XHJcbn1cciJdfQ==