/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { NgbNav } from './nav';
/**
 * The outlet where currently active nav content will be displayed.
 *
 * \@since 5.2.0
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["ngbNavOutlet", ""];
const _c1 = ["ngFor", "", 3, "ngForOf"];
const _c2 = ["class", "tab-pane", 3, "id", "active", 4, "ngIf"];
const _c3 = [1, "tab-pane", 3, "id"];
const _c4 = [3, "ngTemplateOutlet", "ngTemplateOutletContext"];
function NgbNavOutlet_ng_template_0_div_0_ng_template_1_Template(rf, ctx) { }
const _c5 = function (a0) { return { $implicit: a0 }; };
function NgbNavOutlet_ng_template_0_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", _c3);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵtemplate(1, NgbNavOutlet_ng_template_0_div_0_ng_template_1_Template, 0, 0, "ng-template", _c4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r500 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r501 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", item_r500.active);
    ɵngcc0.ɵɵstylingApply();
    ɵngcc0.ɵɵproperty("id", item_r500.panelDomId);
    ɵngcc0.ɵɵattribute("role", ctx_r501.paneRole ? ctx_r501.paneRole : ctx_r501.nav.roles ? "tabpanel" : undefined)("aria-labelledby", item_r500.domId);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", item_r500.contentTpl == null ? null : item_r500.contentTpl.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(6, _c5, item_r500.active));
} }
function NgbNavOutlet_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, NgbNavOutlet_ng_template_0_div_0_Template, 2, 8, "div", _c2);
} if (rf & 2) {
    const item_r500 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", item_r500.isPanelInDom());
} }
export class NgbNavOutlet {
}
NgbNavOutlet.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: NgbNavOutlet, selectors: [["", "ngbNavOutlet", ""]], factory: function NgbNavOutlet_Factory(t) { return new (t || NgbNavOutlet)(); }, hostBindings: function NgbNavOutlet_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(1);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("tab-content", true);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { paneRole: "paneRole", nav: ["ngbNavOutlet", "nav"] }, attrs: _c0, consts: 1, vars: 1, template: function NgbNavOutlet_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NgbNavOutlet_ng_template_0_Template, 1, 1, "ng-template", _c1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.nav.items);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbNavOutlet, [{
        type: Component,
        args: [{
                selector: '[ngbNavOutlet]',
                host: { '[class.tab-content]': 'true' },
                encapsulation: ViewEncapsulation.None,
                template: `
      <ng-template ngFor let-item [ngForOf]="nav.items">
          <div class="tab-pane"
               *ngIf="item.isPanelInDom()"
               [id]="item.panelDomId"
               [class.active]="item.active"
               [attr.role]="paneRole ? paneRole : nav.roles ? 'tabpanel' : undefined"
               [attr.aria-labelledby]="item.domId">
              <ng-template [ngTemplateOutlet]="item.contentTpl?.templateRef" [ngTemplateOutletContext]="{$implicit: item.active}"></ng-template>
          </div>
      </ng-template>
  `
            }]
    }], null, { paneRole: [{
            type: Input
        }], nav: [{
            type: Input,
            args: ['ngbNavOutlet']
        }] });
NgbNavOutlet.propDecorators = {
    paneRole: [{ type: Input }],
    nav: [{ type: Input, args: ['ngbNavOutlet',] }]
};
if (false) {
    /**
     * A role to set on the nav pane
     * @type {?}
     */
    NgbNavOutlet.prototype.paneRole;
    /**
     * Reference to the `NgbNav`
     * @type {?}
     */
    NgbNavOutlet.prototype.nav;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9uYXYvbmF2LW91dGxldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FDQyxhQW1CQyIsImZpbGUiOiJuYXYtb3V0bGV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxyXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXHJcbiAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ2JOYXYgfSBmcm9tICcuL25hdic7XHJcbi8qKlxyXG4gKiBUaGUgb3V0bGV0IHdoZXJlIGN1cnJlbnRseSBhY3RpdmUgbmF2IGNvbnRlbnQgd2lsbCBiZSBkaXNwbGF5ZWQuXHJcbiAqXHJcbiAqIFxcQHNpbmNlIDUuMi4wXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmdiTmF2T3V0bGV0IHtcclxufVxyXG5OZ2JOYXZPdXRsZXQuZGVjb3JhdG9ycyA9IFtcclxuICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdbbmdiTmF2T3V0bGV0XScsXHJcbiAgICAgICAgICAgICAgICBob3N0OiB7ICdbY2xhc3MudGFiLWNvbnRlbnRdJzogJ3RydWUnIH0sXHJcbiAgICAgICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IGBcclxuICAgICAgPG5nLXRlbXBsYXRlIG5nRm9yIGxldC1pdGVtIFtuZ0Zvck9mXT1cIm5hdi5pdGVtc1wiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1wYW5lXCJcclxuICAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtLmlzUGFuZWxJbkRvbSgpXCJcclxuICAgICAgICAgICAgICAgW2lkXT1cIml0ZW0ucGFuZWxEb21JZFwiXHJcbiAgICAgICAgICAgICAgIFtjbGFzcy5hY3RpdmVdPVwiaXRlbS5hY3RpdmVcIlxyXG4gICAgICAgICAgICAgICBbYXR0ci5yb2xlXT1cInBhbmVSb2xlID8gcGFuZVJvbGUgOiBuYXYucm9sZXMgPyAndGFicGFuZWwnIDogdW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cIml0ZW0uZG9tSWRcIj5cclxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwiaXRlbS5jb250ZW50VHBsPy50ZW1wbGF0ZVJlZlwiIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBpdGVtLmFjdGl2ZX1cIj48L25nLXRlbXBsYXRlPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgYFxyXG4gICAgICAgICAgICB9XSB9XHJcbl07XHJcbk5nYk5hdk91dGxldC5wcm9wRGVjb3JhdG9ycyA9IHtcclxuICAgIHBhbmVSb2xlOiBbeyB0eXBlOiBJbnB1dCB9XSxcclxuICAgIG5hdjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnbmdiTmF2T3V0bGV0JyxdIH1dXHJcbn07XHJcbmlmIChmYWxzZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHJvbGUgdG8gc2V0IG9uIHRoZSBuYXYgcGFuZVxyXG4gICAgICogQHR5cGUgez99XHJcbiAgICAgKi9cclxuICAgIE5nYk5hdk91dGxldC5wcm90b3R5cGUucGFuZVJvbGU7XHJcbiAgICAvKipcclxuICAgICAqIFJlZmVyZW5jZSB0byB0aGUgYE5nYk5hdmBcclxuICAgICAqIEB0eXBlIHs/fVxyXG4gICAgICovXHJcbiAgICBOZ2JOYXZPdXRsZXQucHJvdG90eXBlLm5hdjtcclxufVxyIl19