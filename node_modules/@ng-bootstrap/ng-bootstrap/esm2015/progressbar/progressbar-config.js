/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbProgressbar`](#/components/progressbar/api#NgbProgressbar) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the progress bars used in the application.
 */
import * as ɵngcc0 from '@angular/core';
export class NgbProgressbarConfig {
    constructor() {
        this.max = 100;
        this.animated = false;
        this.striped = false;
        this.showValue = false;
    }
}
NgbProgressbarConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbProgressbarConfig, factory: function NgbProgressbarConfig_Factory(t) { return new (t || NgbProgressbarConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbProgressbarConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [], max: [], animated: [], striped: [], showValue: [] });
/** @nocollapse */ NgbProgressbarConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbProgressbarConfig_Factory() { return new NgbProgressbarConfig(); }, token: NgbProgressbarConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgbProgressbarConfig.prototype.max;
    /** @type {?} */
    NgbProgressbarConfig.prototype.animated;
    /** @type {?} */
    NgbProgressbarConfig.prototype.striped;
    /** @type {?} */
    NgbProgressbarConfig.prototype.textType;
    /** @type {?} */
    NgbProgressbarConfig.prototype.type;
    /** @type {?} */
    NgbProgressbarConfig.prototype.showValue;
    /** @type {?} */
    NgbProgressbarConfig.prototype.height;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7O0NBT0MsMkdBR0MiLCJmaWxlIjoicHJvZ3Jlc3NiYXItY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxyXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXHJcbiAqL1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIGkwIGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiUHJvZ3Jlc3NiYXJgXSgjL2NvbXBvbmVudHMvcHJvZ3Jlc3NiYXIvYXBpI05nYlByb2dyZXNzYmFyKSBjb21wb25lbnQuXHJcbiAqXHJcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgdGhlIHZhbHVlcyBvZiBpdHMgcHJvcGVydGllcyBpblxyXG4gKiBvcmRlciB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgdGhlIHByb2dyZXNzIGJhcnMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmdiUHJvZ3Jlc3NiYXJDb25maWcge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5tYXggPSAxMDA7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RyaXBlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2hvd1ZhbHVlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuTmdiUHJvZ3Jlc3NiYXJDb25maWcuZGVjb3JhdG9ycyA9IFtcclxuICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XHJcbl07XHJcbi8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JQcm9ncmVzc2JhckNvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYlByb2dyZXNzYmFyQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiUHJvZ3Jlc3NiYXJDb25maWcoKTsgfSwgdG9rZW46IE5nYlByb2dyZXNzYmFyQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuaWYgKGZhbHNlKSB7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUubWF4O1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiUHJvZ3Jlc3NiYXJDb25maWcucHJvdG90eXBlLmFuaW1hdGVkO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiUHJvZ3Jlc3NiYXJDb25maWcucHJvdG90eXBlLnN0cmlwZWQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUudGV4dFR5cGU7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUudHlwZTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlByb2dyZXNzYmFyQ29uZmlnLnByb3RvdHlwZS5zaG93VmFsdWU7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUuaGVpZ2h0O1xyXG59XHIiXX0=