/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [NgbCarousel](#/components/carousel/api#NgbCarousel) component.
 *
 * You can inject this service, typically in your root component, and customize its properties
 * to provide default values for all carousels used in the application.
 */
import * as ɵngcc0 from '@angular/core';
export class NgbCarouselConfig {
    constructor() {
        this.interval = 5000;
        this.wrap = true;
        this.keyboard = true;
        this.pauseOnHover = true;
        this.showNavigationArrows = true;
        this.showNavigationIndicators = true;
    }
}
NgbCarouselConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbCarouselConfig, factory: function NgbCarouselConfig_Factory(t) { return new (t || NgbCarouselConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbCarouselConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [], interval: [], wrap: [], keyboard: [], pauseOnHover: [], showNavigationArrows: [], showNavigationIndicators: [] });
/** @nocollapse */ NgbCarouselConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbCarouselConfig_Factory() { return new NgbCarouselConfig(); }, token: NgbCarouselConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgbCarouselConfig.prototype.interval;
    /** @type {?} */
    NgbCarouselConfig.prototype.wrap;
    /** @type {?} */
    NgbCarouselConfig.prototype.keyboard;
    /** @type {?} */
    NgbCarouselConfig.prototype.pauseOnHover;
    /** @type {?} */
    NgbCarouselConfig.prototype.showNavigationArrows;
    /** @type {?} */
    NgbCarouselConfig.prototype.showNavigationIndicators;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9jYXJvdXNlbC9jYXJvdXNlbC1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Q0FTQyx3S0FHQyIsImZpbGUiOiJjYXJvdXNlbC1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW05nYkNhcm91c2VsXSgjL2NvbXBvbmVudHMvY2Fyb3VzZWwvYXBpI05nYkNhcm91c2VsKSBjb21wb25lbnQuXHJcbiAqXHJcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgaXRzIHByb3BlcnRpZXNcclxuICogdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIGNhcm91c2VscyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOZ2JDYXJvdXNlbENvbmZpZyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmludGVydmFsID0gNTAwMDtcclxuICAgICAgICB0aGlzLndyYXAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGF1c2VPbkhvdmVyID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dOYXZpZ2F0aW9uQXJyb3dzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dOYXZpZ2F0aW9uSW5kaWNhdG9ycyA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuTmdiQ2Fyb3VzZWxDb25maWcuZGVjb3JhdG9ycyA9IFtcclxuICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XHJcbl07XHJcbi8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JDYXJvdXNlbENvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYkNhcm91c2VsQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiQ2Fyb3VzZWxDb25maWcoKTsgfSwgdG9rZW46IE5nYkNhcm91c2VsQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuaWYgKGZhbHNlKSB7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUuaW50ZXJ2YWw7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUud3JhcDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYkNhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5rZXlib2FyZDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYkNhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5wYXVzZU9uSG92ZXI7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUuc2hvd05hdmlnYXRpb25BcnJvd3M7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUuc2hvd05hdmlnYXRpb25JbmRpY2F0b3JzO1xyXG59XHIiXX0=