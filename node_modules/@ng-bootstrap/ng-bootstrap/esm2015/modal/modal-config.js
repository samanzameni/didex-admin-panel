/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Options available when opening new modal windows with `NgbModal.open()` method.
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbModalOptions() { }
if (false) {
    /**
     * `aria-labelledby` attribute value to set on the modal window.
     *
     * \@since 2.2.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.ariaLabelledBy;
    /**
     * If `true`, the backdrop element will be created for a given modal.
     *
     * Alternatively, specify `'static'` for a backdrop which doesn't close the modal on click.
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdrop;
    /**
     * Callback right before the modal will be dismissed.
     *
     * If this function returns:
     * * `false`
     * * a promise resolved with `false`
     * * a promise that is rejected
     *
     * then the modal won't be dismissed.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.beforeDismiss;
    /**
     * If `true`, the modal will be centered vertically.
     *
     * Default value is `false`.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.centered;
    /**
     * A selector specifying the element all new modal windows should be appended to.
     * Since v5.3.0 it is also possible to pass the reference to an `HTMLElement`.
     *
     * If not specified, will be `body`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.container;
    /**
     * The `Injector` to use for modal content.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.injector;
    /**
     * If `true`, the modal will be closed when `Escape` key is pressed
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.keyboard;
    /**
     * Scrollable modal content (false by default).
     *
     * \@since 5.0.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.scrollable;
    /**
     * Size of a new modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.size;
    /**
     * A custom class to append to the modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.windowClass;
    /**
     * A custom class to append to the modal backdrop.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdropClass;
}
/**
 * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all modals used in the application.
 *
 * \@since 3.1.0
 */
export class NgbModalConfig {
    constructor() {
        this.backdrop = true;
        this.keyboard = true;
    }
}
NgbModalConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbModalConfig, factory: function NgbModalConfig_Factory(t) { return new (t || NgbModalConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbModalConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [], backdrop: [], keyboard: [] });
/** @nocollapse */ NgbModalConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgbModalConfig.prototype.ariaLabelledBy;
    /** @type {?} */
    NgbModalConfig.prototype.backdrop;
    /** @type {?} */
    NgbModalConfig.prototype.beforeDismiss;
    /** @type {?} */
    NgbModalConfig.prototype.centered;
    /** @type {?} */
    NgbModalConfig.prototype.container;
    /** @type {?} */
    NgbModalConfig.prototype.injector;
    /** @type {?} */
    NgbModalConfig.prototype.keyboard;
    /** @type {?} */
    NgbModalConfig.prototype.scrollable;
    /** @type {?} */
    NgbModalConfig.prototype.size;
    /** @type {?} */
    NgbModalConfig.prototype.windowClass;
    /** @type {?} */
    NgbModalConfig.prototype.backdropClass;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9tb2RhbC9tb2RhbC1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWlHQyxvRkFHQyIsImZpbGUiOiJtb2RhbC1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIE9wdGlvbnMgYXZhaWxhYmxlIHdoZW4gb3BlbmluZyBuZXcgbW9kYWwgd2luZG93cyB3aXRoIGBOZ2JNb2RhbC5vcGVuKClgIG1ldGhvZC5cclxuICogQHJlY29yZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIE5nYk1vZGFsT3B0aW9ucygpIHsgfVxyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKlxyXG4gICAgICogYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlIHZhbHVlIHRvIHNldCBvbiB0aGUgbW9kYWwgd2luZG93LlxyXG4gICAgICpcclxuICAgICAqIFxcQHNpbmNlIDIuMi4wXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYXJpYUxhYmVsbGVkQnk7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGVsZW1lbnQgd2lsbCBiZSBjcmVhdGVkIGZvciBhIGdpdmVuIG1vZGFsLlxyXG4gICAgICpcclxuICAgICAqIEFsdGVybmF0aXZlbHksIHNwZWNpZnkgYCdzdGF0aWMnYCBmb3IgYSBiYWNrZHJvcCB3aGljaCBkb2Vzbid0IGNsb3NlIHRoZSBtb2RhbCBvbiBjbGljay5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5iYWNrZHJvcDtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgcmlnaHQgYmVmb3JlIHRoZSBtb2RhbCB3aWxsIGJlIGRpc21pc3NlZC5cclxuICAgICAqXHJcbiAgICAgKiBJZiB0aGlzIGZ1bmN0aW9uIHJldHVybnM6XHJcbiAgICAgKiAqIGBmYWxzZWBcclxuICAgICAqICogYSBwcm9taXNlIHJlc29sdmVkIHdpdGggYGZhbHNlYFxyXG4gICAgICogKiBhIHByb21pc2UgdGhhdCBpcyByZWplY3RlZFxyXG4gICAgICpcclxuICAgICAqIHRoZW4gdGhlIG1vZGFsIHdvbid0IGJlIGRpc21pc3NlZC5cclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5iZWZvcmVEaXNtaXNzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNlbnRlcmVkIHZlcnRpY2FsbHkuXHJcbiAgICAgKlxyXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxyXG4gICAgICpcclxuICAgICAqIFxcQHNpbmNlIDEuMS4wXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuY2VudGVyZWQ7XHJcbiAgICAvKipcclxuICAgICAqIEEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCBhbGwgbmV3IG1vZGFsIHdpbmRvd3Mgc2hvdWxkIGJlIGFwcGVuZGVkIHRvLlxyXG4gICAgICogU2luY2UgdjUuMy4wIGl0IGlzIGFsc28gcG9zc2libGUgdG8gcGFzcyB0aGUgcmVmZXJlbmNlIHRvIGFuIGBIVE1MRWxlbWVudGAuXHJcbiAgICAgKlxyXG4gICAgICogSWYgbm90IHNwZWNpZmllZCwgd2lsbCBiZSBgYm9keWAuXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuY29udGFpbmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYEluamVjdG9yYCB0byB1c2UgZm9yIG1vZGFsIGNvbnRlbnQuXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuaW5qZWN0b3I7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgYmUgY2xvc2VkIHdoZW4gYEVzY2FwZWAga2V5IGlzIHByZXNzZWRcclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5rZXlib2FyZDtcclxuICAgIC8qKlxyXG4gICAgICogU2Nyb2xsYWJsZSBtb2RhbCBjb250ZW50IChmYWxzZSBieSBkZWZhdWx0KS5cclxuICAgICAqXHJcbiAgICAgKiBcXEBzaW5jZSA1LjAuMFxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLnNjcm9sbGFibGU7XHJcbiAgICAvKipcclxuICAgICAqIFNpemUgb2YgYSBuZXcgbW9kYWwgd2luZG93LlxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLnNpemU7XHJcbiAgICAvKipcclxuICAgICAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgbW9kYWwgd2luZG93LlxyXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLndpbmRvd0NsYXNzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGN1c3RvbSBjbGFzcyB0byBhcHBlbmQgdG8gdGhlIG1vZGFsIGJhY2tkcm9wLlxyXG4gICAgICpcclxuICAgICAqIFxcQHNpbmNlIDEuMS4wXHJcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYmFja2Ryb3BDbGFzcztcclxufVxyXG4vKipcclxuICogQSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBbYE5nYk1vZGFsYF0oIy9jb21wb25lbnRzL21vZGFsL2FwaSNOZ2JNb2RhbCkgc2VydmljZS5cclxuICpcclxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXHJcbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCBtb2RhbHMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIFxcQHNpbmNlIDMuMS4wXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmdiTW9kYWxDb25maWcge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5iYWNrZHJvcCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZCA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuTmdiTW9kYWxDb25maWcuZGVjb3JhdG9ycyA9IFtcclxuICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XHJcbl07XHJcbi8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JNb2RhbENvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYk1vZGFsQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiTW9kYWxDb25maWcoKTsgfSwgdG9rZW46IE5nYk1vZGFsQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuaWYgKGZhbHNlKSB7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuYXJpYUxhYmVsbGVkQnk7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuYmFja2Ryb3A7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuYmVmb3JlRGlzbWlzcztcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5jZW50ZXJlZDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5jb250YWluZXI7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuaW5qZWN0b3I7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUua2V5Ym9hcmQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuc2Nyb2xsYWJsZTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5zaXplO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLndpbmRvd0NsYXNzO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLmJhY2tkcm9wQ2xhc3M7XHJcbn1cciJdfQ==