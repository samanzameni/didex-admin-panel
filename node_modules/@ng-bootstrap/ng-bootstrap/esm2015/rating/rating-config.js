/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbRating`](#/components/rating/api#NgbRating) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the ratings used in the application.
 */
import * as ɵngcc0 from '@angular/core';
export class NgbRatingConfig {
    constructor() {
        this.max = 10;
        this.readonly = false;
        this.resettable = false;
    }
}
NgbRatingConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbRatingConfig, factory: function NgbRatingConfig_Factory(t) { return new (t || NgbRatingConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbRatingConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [], max: [], readonly: [], resettable: [] });
/** @nocollapse */ NgbRatingConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbRatingConfig_Factory() { return new NgbRatingConfig(); }, token: NgbRatingConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgbRatingConfig.prototype.max;
    /** @type {?} */
    NgbRatingConfig.prototype.readonly;
    /** @type {?} */
    NgbRatingConfig.prototype.resettable;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9yYXRpbmcvcmF0aW5nLWNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7OztDQU1DLCtGQUdDIiwiZmlsZSI6InJhdGluZy1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JSYXRpbmdgXSgjL2NvbXBvbmVudHMvcmF0aW5nL2FwaSNOZ2JSYXRpbmcpIGNvbXBvbmVudC5cclxuICpcclxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXHJcbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgcmF0aW5ncyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOZ2JSYXRpbmdDb25maWcge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5tYXggPSAxMDtcclxuICAgICAgICB0aGlzLnJlYWRvbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZXNldHRhYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuTmdiUmF0aW5nQ29uZmlnLmRlY29yYXRvcnMgPSBbXHJcbiAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9LF0gfVxyXG5dO1xyXG4vKiogQG5vY29sbGFwc2UgKi8gTmdiUmF0aW5nQ29uZmlnLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTmdiUmF0aW5nQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiUmF0aW5nQ29uZmlnKCk7IH0sIHRva2VuOiBOZ2JSYXRpbmdDb25maWcsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlJhdGluZ0NvbmZpZy5wcm90b3R5cGUubWF4O1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiUmF0aW5nQ29uZmlnLnByb3RvdHlwZS5yZWFkb25seTtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlJhdGluZ0NvbmZpZy5wcm90b3R5cGUucmVzZXR0YWJsZTtcclxufVxyIl19