/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbTimepicker`](#/components/timepicker/api#NgbTimepicker) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the timepickers used in the application.
 */
import * as ɵngcc0 from '@angular/core';
export class NgbTimepickerConfig {
    constructor() {
        this.meridian = false;
        this.spinners = true;
        this.seconds = false;
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.disabled = false;
        this.readonlyInputs = false;
        this.size = 'medium';
    }
}
NgbTimepickerConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbTimepickerConfig, factory: function NgbTimepickerConfig_Factory(t) { return new (t || NgbTimepickerConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbTimepickerConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [], meridian: [], spinners: [], seconds: [], hourStep: [], minuteStep: [], secondStep: [], disabled: [], readonlyInputs: [], size: [] });
/** @nocollapse */ NgbTimepickerConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbTimepickerConfig_Factory() { return new NgbTimepickerConfig(); }, token: NgbTimepickerConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgbTimepickerConfig.prototype.meridian;
    /** @type {?} */
    NgbTimepickerConfig.prototype.spinners;
    /** @type {?} */
    NgbTimepickerConfig.prototype.seconds;
    /** @type {?} */
    NgbTimepickerConfig.prototype.hourStep;
    /** @type {?} */
    NgbTimepickerConfig.prototype.minuteStep;
    /** @type {?} */
    NgbTimepickerConfig.prototype.secondStep;
    /** @type {?} */
    NgbTimepickerConfig.prototype.disabled;
    /** @type {?} */
    NgbTimepickerConfig.prototype.readonlyInputs;
    /** @type {?} */
    NgbTimepickerConfig.prototype.size;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS90aW1lcGlja2VyL3RpbWVwaWNrZXItY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBWUMsMkxBR0MiLCJmaWxlIjoidGltZXBpY2tlci1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JUaW1lcGlja2VyYF0oIy9jb21wb25lbnRzL3RpbWVwaWNrZXIvYXBpI05nYlRpbWVwaWNrZXIpIGNvbXBvbmVudC5cclxuICpcclxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXHJcbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgdGltZXBpY2tlcnMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmdiVGltZXBpY2tlckNvbmZpZyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm1lcmlkaWFuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zcGlubmVycyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ob3VyU3RlcCA9IDE7XHJcbiAgICAgICAgdGhpcy5taW51dGVTdGVwID0gMTtcclxuICAgICAgICB0aGlzLnNlY29uZFN0ZXAgPSAxO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlYWRvbmx5SW5wdXRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaXplID0gJ21lZGl1bSc7XHJcbiAgICB9XHJcbn1cclxuTmdiVGltZXBpY2tlckNvbmZpZy5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cclxuXTtcclxuLyoqIEBub2NvbGxhcHNlICovIE5nYlRpbWVwaWNrZXJDb25maWcubmdJbmplY3RhYmxlRGVmID0gaTAuybXJtWRlZmluZUluamVjdGFibGUoeyBmYWN0b3J5OiBmdW5jdGlvbiBOZ2JUaW1lcGlja2VyQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiVGltZXBpY2tlckNvbmZpZygpOyB9LCB0b2tlbjogTmdiVGltZXBpY2tlckNvbmZpZywgcHJvdmlkZWRJbjogXCJyb290XCIgfSk7XHJcbmlmIChmYWxzZSkge1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubWVyaWRpYW47XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zcGlubmVycztcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNlY29uZHM7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5ob3VyU3RlcDtcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLm1pbnV0ZVN0ZXA7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zZWNvbmRTdGVwO1xyXG4gICAgLyoqIEB0eXBlIHs/fSAqL1xyXG4gICAgTmdiVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuZGlzYWJsZWQ7XHJcbiAgICAvKiogQHR5cGUgez99ICovXHJcbiAgICBOZ2JUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5yZWFkb25seUlucHV0cztcclxuICAgIC8qKiBAdHlwZSB7P30gKi9cclxuICAgIE5nYlRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNpemU7XHJcbn1cciJdfQ==