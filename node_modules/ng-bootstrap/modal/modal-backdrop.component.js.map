{"version":3,"file":"modal-backdrop.component.js","sourceRoot":"","sources":["../../src/modal/modal-backdrop.component.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe;OAExD,EAAE,SAAS,EAAE,MAAM,uBAAuB;OAC1C,EAAE,KAAK,EAAE,MAAM,+BAA+B;AAErD;IAGE,8BAAmB,OAA4B;QAFxC,YAAO,GAAW,IAAI,CAAC;QAG5B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IACH,2BAAC;AAAD,CAAC,AAND,IAMC;AAED,8EAA8E;AAE9E;IA4BE,gCAAmB,OAAkB,EAAE,QAAiB;QAF9C,aAAQ,GAAW,KAAK,CAAC;QAGjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IA9BD,sBAAW,8CAAU;aAArB;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;aAED,UAAsB,KAAa;YACjC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAG,SAAS,CAAC,IAAM,EAAE,KAAK,CAAC,CAAC;QACxF,CAAC;;;OALA;IAOD,sBAAW,2CAAO;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;aAED,UAAmB,KAAa;YAC9B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAG,SAAS,CAAC,EAAI,EAAE,KAAK,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAG,SAAS,CAAC,IAAM,EAAE,KAAK,CAAC,CAAC;YACxF,CAAC;QACH,CAAC;;;OARA;IAoBI,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,mBAAmB;oBAC7B,QAAQ,EAAE,EAAE;oBACZ,2BAA2B;oBAC3B,IAAI,EAAE,EAAC,OAAO,EAAE,SAAS,CAAC,QAAQ,EAAC;iBACpC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAH6F,CAG7F,CAAC;IACF,6BAAC;AAAD,CAAC,AA7CD,IA6CC","sourcesContent":["import { Component, ElementRef, Renderer } from '@angular/core';\n\nimport { ClassName } from './modal-options.class';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\n\nexport class ModalBackdropOptions {\n  public animate:boolean = true;\n\n  public constructor(options:ModalBackdropOptions) {\n    Object.assign(this, options);\n  }\n}\n\n/** This component will be added as background layout for modals if enabled */\n\nexport class ModalBackdropComponent {\n  public get isAnimated():boolean {\n    return this._isAnimated;\n  }\n\n  public set isAnimated(value:boolean) {\n    this._isAnimated = value;\n    this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);\n  }\n\n  public get isShown():boolean {\n    return this._isShown;\n  }\n\n  public set isShown(value:boolean) {\n    this._isShown = value;\n    this.renderer.setElementClass(this.element.nativeElement, `${ClassName.IN}`, value);\n    if (!isBs3()) {\n      this.renderer.setElementClass(this.element.nativeElement, `${ClassName.SHOW}`, value);\n    }\n  }\n\n  public element:ElementRef;\n  public renderer:Renderer;\n\n  protected _isAnimated:boolean;\n  protected _isShown:boolean = false;\n\n  public constructor(element:ElementRef, renderer:Renderer) {\n    this.element = element;\n    this.renderer = renderer;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'bs-modal-backdrop',\n  template: '',\n  // tslint:disable-next-line\n  host: {'class': ClassName.BACKDROP}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}