{"version":3,"file":"typeahead-utils.js","sourceRoot":"","sources":["../../src/typeahead/typeahead-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { latinMap } from './latin-map';\n\nexport class TypeaheadUtils {\n  public static latinMap:any = latinMap;\n\n  public static latinize(str:string):string {\n    if (!str) {\n      return '';\n    }\n    return str.replace(/[^A-Za-z0-9\\[\\] ]/g, function (a:string):string {\n      return TypeaheadUtils.latinMap[a] || a;\n    });\n  }\n\n  public static escapeRegexp(queryToEscape:string):string {\n    // Regex: capture the whole query string and replace it with the string\n    // that will be used to match the results, for example if the capture is\n    // 'a' the result will be \\a\n    return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n  }\n\n  /* tslint:disable */\n  public static tokenize(str:string, wordRegexDelimiters = ' ', phraseRegexDelimiters = ''):Array<string> {\n    /* tslint:enable */\n    let regexStr:string = '(?:[' + phraseRegexDelimiters + '])([^' + phraseRegexDelimiters + ']+)(?:[' + phraseRegexDelimiters + '])|([^' + wordRegexDelimiters + ']+)';\n    let preTokenized:string[] = str.split(new RegExp(regexStr, 'g'));\n    let result:string[] = [];\n    let preTokenizedLength:number = preTokenized.length;\n    let token:string;\n    let replacePhraseDelimiters = new RegExp('[' + phraseRegexDelimiters + ']+', 'g');\n\n    for (let i = 0; i < preTokenizedLength; i += 1) {\n      token = preTokenized[i];\n      if (token && token.length && token !== wordRegexDelimiters) {\n        result.push(token.replace(replacePhraseDelimiters, ''));\n      }\n    }\n\n    return result;\n  }\n\n  public static getValueFromObject(object:any, option:string):string {\n    if (!option || typeof object !== 'object') {\n      return object.toString();\n    }\n\n    if (option.endsWith('()')) {\n      let functionName = option.slice(0, option.length - 2);\n      return object[functionName]().toString();\n    }\n\n    let properties:string = option.replace(/\\[(\\w+)\\]/g, '.$1')\n      .replace(/^\\./, '');\n    let propertiesArray:string[] = properties.split('.');\n\n    for (let property of propertiesArray) {\n      if (property in object) {\n        object = object[property];\n      }\n    }\n    return object.toString();\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}