/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Compiler, Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
function unimplemented() {
    throw Error('unimplemented');
}
/**
 * Special interface to the compiler only used by testing
 *
 * @publicApi
 */
var TestingCompiler = /** @class */ (function (_super) {
    tslib_1.__extends(TestingCompiler, _super);
    function TestingCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestingCompiler.prototype, "injector", {
        get: function () { throw unimplemented(); },
        enumerable: true,
        configurable: true
    });
    TestingCompiler.prototype.overrideModule = function (module, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideComponent = function (component, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overridePipe = function (directive, overrides) {
        throw unimplemented();
    };
    /**
     * Allows to pass the compile summary from AOT compilation to the JIT compiler,
     * so that it can use the code generated by AOT.
     */
    TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };
    /**
     * Gets the component factory for the given component.
     * This assumes that the component has been compiled before calling this call using
     * `compileModuleAndAllComponents*`.
     */
    TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };
    /**
     * Returns the component type that is stored in the given error.
     * This can be used for errors created by compileModule...
     */
    TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };
TestingCompiler.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TestingCompiler, factory: function TestingCompiler_Factory(t) { return ɵTestingCompiler_BaseFactory(t || TestingCompiler); }, providedIn: null });
const ɵTestingCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{
        type: Injectable
    }], null, { injector: [], overrideModule: [], overrideDirective: [], overrideComponent: [], overridePipe: [], loadAotSummaries: [], getComponentFactory: [], getComponentFromError: [] });
    return TestingCompiler;
}(Compiler));
export { TestingCompiler };
/**
 * A factory for creating a Compiler
 *
 * @publicApi
 */
var TestingCompilerFactory = /** @class */ (function () {
    function TestingCompilerFactory() {
    }
    return TestingCompilerFactory;
}());
export { TestingCompilerFactory };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc201L3Rlc3Rpbmcvc3JjL3Rlc3RfY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tHQTZDa0c7Ozs7OzhMQUcxRSIsImZpbGUiOiJ0ZXN0X2NvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBDb21waWxlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5mdW5jdGlvbiB1bmltcGxlbWVudGVkKCkge1xyXG4gICAgdGhyb3cgRXJyb3IoJ3VuaW1wbGVtZW50ZWQnKTtcclxufVxyXG4vKipcclxuICogU3BlY2lhbCBpbnRlcmZhY2UgdG8gdGhlIGNvbXBpbGVyIG9ubHkgdXNlZCBieSB0ZXN0aW5nXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbnZhciBUZXN0aW5nQ29tcGlsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUZXN0aW5nQ29tcGlsZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUZXN0aW5nQ29tcGlsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUsIFwiaW5qZWN0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5vdmVycmlkZU1vZHVsZSA9IGZ1bmN0aW9uIChtb2R1bGUsIG92ZXJyaWRlcykge1xyXG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcclxuICAgIH07XHJcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLm92ZXJyaWRlRGlyZWN0aXZlID0gZnVuY3Rpb24gKGRpcmVjdGl2ZSwgb3ZlcnJpZGVzKSB7XHJcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xyXG4gICAgfTtcclxuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUub3ZlcnJpZGVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBvdmVycmlkZXMpIHtcclxuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XHJcbiAgICB9O1xyXG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5vdmVycmlkZVBpcGUgPSBmdW5jdGlvbiAoZGlyZWN0aXZlLCBvdmVycmlkZXMpIHtcclxuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGxvd3MgdG8gcGFzcyB0aGUgY29tcGlsZSBzdW1tYXJ5IGZyb20gQU9UIGNvbXBpbGF0aW9uIHRvIHRoZSBKSVQgY29tcGlsZXIsXHJcbiAgICAgKiBzbyB0aGF0IGl0IGNhbiB1c2UgdGhlIGNvZGUgZ2VuZXJhdGVkIGJ5IEFPVC5cclxuICAgICAqL1xyXG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5sb2FkQW90U3VtbWFyaWVzID0gZnVuY3Rpb24gKHN1bW1hcmllcykgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH07XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGNvbXBvbmVudCBmYWN0b3J5IGZvciB0aGUgZ2l2ZW4gY29tcG9uZW50LlxyXG4gICAgICogVGhpcyBhc3N1bWVzIHRoYXQgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBjb21waWxlZCBiZWZvcmUgY2FsbGluZyB0aGlzIGNhbGwgdXNpbmdcclxuICAgICAqIGBjb21waWxlTW9kdWxlQW5kQWxsQ29tcG9uZW50cypgLlxyXG4gICAgICovXHJcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLmdldENvbXBvbmVudEZhY3RvcnkgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IHR5cGUgdGhhdCBpcyBzdG9yZWQgaW4gdGhlIGdpdmVuIGVycm9yLlxyXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCBmb3IgZXJyb3JzIGNyZWF0ZWQgYnkgY29tcGlsZU1vZHVsZS4uLlxyXG4gICAgICovXHJcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLmdldENvbXBvbmVudEZyb21FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH07XHJcbiAgICBUZXN0aW5nQ29tcGlsZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGUoKVxyXG4gICAgXSwgVGVzdGluZ0NvbXBpbGVyKTtcclxuICAgIHJldHVybiBUZXN0aW5nQ29tcGlsZXI7XHJcbn0oQ29tcGlsZXIpKTtcclxuZXhwb3J0IHsgVGVzdGluZ0NvbXBpbGVyIH07XHJcbi8qKlxyXG4gKiBBIGZhY3RvcnkgZm9yIGNyZWF0aW5nIGEgQ29tcGlsZXJcclxuICpcclxuICogQHB1YmxpY0FwaVxyXG4gKi9cclxudmFyIFRlc3RpbmdDb21waWxlckZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZXN0aW5nQ29tcGlsZXJGYWN0b3J5KCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFRlc3RpbmdDb21waWxlckZhY3Rvcnk7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFRlc3RpbmdDb21waWxlckZhY3RvcnkgfTtcciJdfQ==