{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/http/src/backends/jsonp_backend.js"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsLM,AAGA;;;;;;;;;4JAKG","file":"jsonp_backend.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ResponseOptions } from '../base_response_options';\r\nimport { ReadyState, RequestMethod, ResponseType } from '../enums';\r\nimport { ConnectionBackend } from '../interfaces';\r\nimport { Response } from '../static_response';\r\nimport { BrowserJsonp } from './browser_jsonp';\r\nvar /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\nvar /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\r\n/**\r\n * Abstract base class for an in-flight JSONP request.\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nexport var JSONPConnection = (function () {\r\n    function JSONPConnection() {\r\n    }\r\n    /**\r\n     * Callback called when the JSONP request completes, to notify the application\r\n     * of the new data.\r\n     * @abstract\r\n     * @param {?=} data\r\n     * @return {?}\r\n     */\r\n    JSONPConnection.prototype.finished = function (data) { };\r\n    return JSONPConnection;\r\n}());\r\nfunction JSONPConnection_tsickle_Closure_declarations() {\r\n    /**\r\n     * The {\\@link ReadyState} of this request.\r\n     * @type {?}\r\n     */\r\n    JSONPConnection.prototype.readyState;\r\n    /**\r\n     * The outgoing HTTP request.\r\n     * @type {?}\r\n     */\r\n    JSONPConnection.prototype.request;\r\n    /**\r\n     * An observable that completes with the response, when the request is finished.\r\n     * @type {?}\r\n     */\r\n    JSONPConnection.prototype.response;\r\n}\r\nexport var JSONPConnection_ = (function (_super) {\r\n    __extends(JSONPConnection_, _super);\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} _dom\r\n     * @param {?=} baseResponseOptions\r\n     */\r\n    function JSONPConnection_(req, _dom, baseResponseOptions) {\r\n        var _this = this;\r\n        _super.call(this);\r\n        this._dom = _dom;\r\n        this.baseResponseOptions = baseResponseOptions;\r\n        this._finished = false;\r\n        if (req.method !== RequestMethod.Get) {\r\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        this.request = req;\r\n        this.response = new Observable(function (responseObserver) {\r\n            _this.readyState = ReadyState.Loading;\r\n            var id = _this._id = _dom.nextRequestID();\r\n            _dom.exposeConnection(id, _this);\r\n            // Workaround Dart\r\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\r\n            var callback = _dom.requestCallback(_this._id);\r\n            var url = req.url;\r\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\r\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\r\n            }\r\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\r\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\r\n            }\r\n            var script = _this._script = _dom.build(url);\r\n            var onLoad = function (event) {\r\n                if (_this.readyState === ReadyState.Cancelled)\r\n                    return;\r\n                _this.readyState = ReadyState.Done;\r\n                _dom.cleanup(script);\r\n                if (!_this._finished) {\r\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\r\n                    if (baseResponseOptions) {\r\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\r\n                    }\r\n                    responseObserver.error(new Response(responseOptions_1));\r\n                    return;\r\n                }\r\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\r\n                if (_this.baseResponseOptions) {\r\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\r\n                }\r\n                responseObserver.next(new Response(responseOptions));\r\n                responseObserver.complete();\r\n            };\r\n            var onError = function (error) {\r\n                if (_this.readyState === ReadyState.Cancelled)\r\n                    return;\r\n                _this.readyState = ReadyState.Done;\r\n                _dom.cleanup(script);\r\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\r\n                if (baseResponseOptions) {\r\n                    responseOptions = baseResponseOptions.merge(responseOptions);\r\n                }\r\n                responseObserver.error(new Response(responseOptions));\r\n            };\r\n            script.addEventListener('load', onLoad);\r\n            script.addEventListener('error', onError);\r\n            _dom.send(script);\r\n            return function () {\r\n                _this.readyState = ReadyState.Cancelled;\r\n                script.removeEventListener('load', onLoad);\r\n                script.removeEventListener('error', onError);\r\n                _this._dom.cleanup(script);\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * @param {?=} data\r\n     * @return {?}\r\n     */\r\n    JSONPConnection_.prototype.finished = function (data) {\r\n        // Don't leak connections\r\n        this._finished = true;\r\n        this._dom.removeConnection(this._id);\r\n        if (this.readyState === ReadyState.Cancelled)\r\n            return;\r\n        this._responseData = data;\r\n    };\r\n    return JSONPConnection_;\r\n}(JSONPConnection));\r\nfunction JSONPConnection__tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    JSONPConnection_.prototype._id;\r\n    /** @type {?} */\r\n    JSONPConnection_.prototype._script;\r\n    /** @type {?} */\r\n    JSONPConnection_.prototype._responseData;\r\n    /** @type {?} */\r\n    JSONPConnection_.prototype._finished;\r\n    /** @type {?} */\r\n    JSONPConnection_.prototype._dom;\r\n    /** @type {?} */\r\n    JSONPConnection_.prototype.baseResponseOptions;\r\n}\r\n/**\r\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nexport var JSONPBackend = (function (_super) {\r\n    __extends(JSONPBackend, _super);\r\n    function JSONPBackend() {\r\n        _super.apply(this, arguments);\r\n    }\r\n    return JSONPBackend;\r\n}(ConnectionBackend));\r\nexport var JSONPBackend_ = (function (_super) {\r\n    __extends(JSONPBackend_, _super);\r\n    /**\r\n     * @param {?} _browserJSONP\r\n     * @param {?} _baseResponseOptions\r\n     */\r\n    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\r\n        _super.call(this);\r\n        this._browserJSONP = _browserJSONP;\r\n        this._baseResponseOptions = _baseResponseOptions;\r\n    }\r\n    /**\r\n     * @param {?} request\r\n     * @return {?}\r\n     */\r\n    JSONPBackend_.prototype.createConnection = function (request) {\r\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\r\n    };\r\n    JSONPBackend_.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    JSONPBackend_.ctorParameters = function () { return [\r\n        { type: BrowserJsonp, },\r\n        { type: ResponseOptions, },\r\n    ]; };\r\n    return JSONPBackend_;\r\n}(JSONPBackend));\r\nfunction JSONPBackend__tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    JSONPBackend_.decorators;\r\n    /**\r\n     * @nocollapse\r\n     * @type {?}\r\n     */\r\n    JSONPBackend_.ctorParameters;\r\n    /** @type {?} */\r\n    JSONPBackend_.prototype._browserJSONP;\r\n    /** @type {?} */\r\n    JSONPBackend_.prototype._baseResponseOptions;\r\n}\r\n"]}