{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/http/src/backends/xhr_backend.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqPM,AAGA;;;;;;;;;;mMAMG","file":"xhr_backend.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { __platform_browser_private__ } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ResponseOptions } from '../base_response_options';\r\nimport { ContentType, RequestMethod, ResponseContentType, ResponseType } from '../enums';\r\nimport { Headers } from '../headers';\r\nimport { getResponseURL, isSuccess } from '../http_utils';\r\nimport { XSRFStrategy } from '../interfaces';\r\nimport { Response } from '../static_response';\r\nimport { BrowserXhr } from './browser_xhr';\r\nvar /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\r\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\r\n * request.\r\n *\r\n * This class would typically not be created or interacted with directly inside applications, though\r\n * the {\\@link MockConnection} may be interacted with in tests.\r\n *\r\n * \\@experimental\r\n */\r\nexport var XHRConnection = (function () {\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} browserXHR\r\n     * @param {?=} baseResponseOptions\r\n     */\r\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\r\n        var _this = this;\r\n        this.request = req;\r\n        this.response = new Observable(function (responseObserver) {\r\n            var _xhr = browserXHR.build();\r\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\r\n            if (req.withCredentials != null) {\r\n                _xhr.withCredentials = req.withCredentials;\r\n            }\r\n            // load event handler\r\n            var onLoad = function () {\r\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\r\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\r\n                var body = null;\r\n                // HTTP 204 means no content\r\n                if (status !== 204) {\r\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\r\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\r\n                    // (supported by IE10)\r\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\r\n                    // Implicitly strip a potential XSSI prefix.\r\n                    if (typeof body === 'string') {\r\n                        body = body.replace(XSSI_PREFIX, '');\r\n                    }\r\n                }\r\n                // fix status code when it is 0 (0 status is undocumented).\r\n                // Occurs when accessing file resources or on Android 4.1 stock browser\r\n                // while retrieving files from application cache.\r\n                if (status === 0) {\r\n                    status = body ? 200 : 0;\r\n                }\r\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\r\n                // IE 9 does not provide the way to get URL of response\r\n                var url = getResponseURL(_xhr) || req.url;\r\n                var statusText = _xhr.statusText || 'OK';\r\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\r\n                if (baseResponseOptions != null) {\r\n                    responseOptions = baseResponseOptions.merge(responseOptions);\r\n                }\r\n                var response = new Response(responseOptions);\r\n                response.ok = isSuccess(status);\r\n                if (response.ok) {\r\n                    responseObserver.next(response);\r\n                    // TODO(gdi2290): defer complete if array buffer until done\r\n                    responseObserver.complete();\r\n                    return;\r\n                }\r\n                responseObserver.error(response);\r\n            };\r\n            // error event handler\r\n            var onError = function (err) {\r\n                var responseOptions = new ResponseOptions({\r\n                    body: err,\r\n                    type: ResponseType.Error,\r\n                    status: _xhr.status,\r\n                    statusText: _xhr.statusText,\r\n                });\r\n                if (baseResponseOptions != null) {\r\n                    responseOptions = baseResponseOptions.merge(responseOptions);\r\n                }\r\n                responseObserver.error(new Response(responseOptions));\r\n            };\r\n            _this.setDetectedContentType(req, _xhr);\r\n            if (req.headers == null) {\r\n                req.headers = new Headers();\r\n            }\r\n            if (!req.headers.has('Accept')) {\r\n                req.headers.append('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\r\n            // Select the correct buffer type to store the response\r\n            if (req.responseType != null && _xhr.responseType != null) {\r\n                switch (req.responseType) {\r\n                    case ResponseContentType.ArrayBuffer:\r\n                        _xhr.responseType = 'arraybuffer';\r\n                        break;\r\n                    case ResponseContentType.Json:\r\n                        _xhr.responseType = 'json';\r\n                        break;\r\n                    case ResponseContentType.Text:\r\n                        _xhr.responseType = 'text';\r\n                        break;\r\n                    case ResponseContentType.Blob:\r\n                        _xhr.responseType = 'blob';\r\n                        break;\r\n                    default:\r\n                        throw new Error('The selected responseType is not supported');\r\n                }\r\n            }\r\n            _xhr.addEventListener('load', onLoad);\r\n            _xhr.addEventListener('error', onError);\r\n            _xhr.send(_this.request.getBody());\r\n            return function () {\r\n                _xhr.removeEventListener('load', onLoad);\r\n                _xhr.removeEventListener('error', onError);\r\n                _xhr.abort();\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} _xhr\r\n     * @return {?}\r\n     */\r\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\r\n        // Skip if a custom Content-Type header is provided\r\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\r\n            return;\r\n        }\r\n        // Set the detected content type\r\n        switch (req.contentType) {\r\n            case ContentType.NONE:\r\n                break;\r\n            case ContentType.JSON:\r\n                _xhr.setRequestHeader('content-type', 'application/json');\r\n                break;\r\n            case ContentType.FORM:\r\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\r\n                break;\r\n            case ContentType.TEXT:\r\n                _xhr.setRequestHeader('content-type', 'text/plain');\r\n                break;\r\n            case ContentType.BLOB:\r\n                var /** @type {?} */ blob = req.blob();\r\n                if (blob.type) {\r\n                    _xhr.setRequestHeader('content-type', blob.type);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    return XHRConnection;\r\n}());\r\nfunction XHRConnection_tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    XHRConnection.prototype.request;\r\n    /**\r\n     * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\r\n     * `XMLHttpRequest`.\r\n     * @type {?}\r\n     */\r\n    XHRConnection.prototype.response;\r\n    /** @type {?} */\r\n    XHRConnection.prototype.readyState;\r\n}\r\n/**\r\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\r\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\r\n * for more information on XSRF.\r\n *\r\n * Applications can configure custom cookie and header names by binding an instance of this class\r\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\r\n * details.\r\n *\r\n * \\@experimental\r\n */\r\nexport var CookieXSRFStrategy = (function () {\r\n    /**\r\n     * @param {?=} _cookieName\r\n     * @param {?=} _headerName\r\n     */\r\n    function CookieXSRFStrategy(_cookieName, _headerName) {\r\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\r\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\r\n        this._cookieName = _cookieName;\r\n        this._headerName = _headerName;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\r\n        var /** @type {?} */ xsrfToken = __platform_browser_private__.getDOM().getCookie(this._cookieName);\r\n        if (xsrfToken) {\r\n            req.headers.set(this._headerName, xsrfToken);\r\n        }\r\n    };\r\n    return CookieXSRFStrategy;\r\n}());\r\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    CookieXSRFStrategy.prototype._cookieName;\r\n    /** @type {?} */\r\n    CookieXSRFStrategy.prototype._headerName;\r\n}\r\n/**\r\n * Creates {\\@link XHRConnection} instances.\r\n *\r\n * This class would typically not be used by end users, but could be\r\n * overridden if a different backend implementation should be used,\r\n * such as in a node backend.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\r\n * \\@Component({\r\n *   viewProviders: [\r\n *     HTTP_PROVIDERS,\r\n *     {provide: Http, useFactory: (backend, options) => {\r\n *       return new Http(backend, options);\r\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\r\n * })\r\n * class MyComponent {\r\n *   constructor(http:Http) {\r\n *     http.request('people.json').subscribe(res => this.people = res.json());\r\n *   }\r\n * }\r\n * ```\r\n * \\@experimental\r\n */\r\nexport var XHRBackend = (function () {\r\n    /**\r\n     * @param {?} _browserXHR\r\n     * @param {?} _baseResponseOptions\r\n     * @param {?} _xsrfStrategy\r\n     */\r\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\r\n        this._browserXHR = _browserXHR;\r\n        this._baseResponseOptions = _baseResponseOptions;\r\n        this._xsrfStrategy = _xsrfStrategy;\r\n    }\r\n    /**\r\n     * @param {?} request\r\n     * @return {?}\r\n     */\r\n    XHRBackend.prototype.createConnection = function (request) {\r\n        this._xsrfStrategy.configureRequest(request);\r\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\r\n    };\r\n    XHRBackend.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    XHRBackend.ctorParameters = function () { return [\r\n        { type: BrowserXhr, },\r\n        { type: ResponseOptions, },\r\n        { type: XSRFStrategy, },\r\n    ]; };\r\n    return XHRBackend;\r\n}());\r\nfunction XHRBackend_tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    XHRBackend.decorators;\r\n    /**\r\n     * @nocollapse\r\n     * @type {?}\r\n     */\r\n    XHRBackend.ctorParameters;\r\n    /** @type {?} */\r\n    XHRBackend.prototype._browserXHR;\r\n    /** @type {?} */\r\n    XHRBackend.prototype._baseResponseOptions;\r\n    /** @type {?} */\r\n    XHRBackend.prototype._xsrfStrategy;\r\n}\r\n"]}