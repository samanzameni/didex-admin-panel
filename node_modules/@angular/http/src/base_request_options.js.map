{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/http/src/base_request_options.js"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqLK,AAGC;;;;;;0CAE6D","file":"base_request_options.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { RequestMethod } from './enums';\r\nimport { Headers } from './headers';\r\nimport { normalizeMethodName } from './http_utils';\r\nimport { URLSearchParams } from './url_search_params';\r\n/**\r\n * Creates a request options object to be optionally provided when instantiating a\r\n * {\\@link Request}.\r\n *\r\n * This class is based on the `RequestInit` description in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\r\n *\r\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\r\n * class, which sub-classes `RequestOptions`.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\r\n *\r\n * ```typescript\r\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\r\n *\r\n * var options = new RequestOptions({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * });\r\n * var req = new Request(options);\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // https://google.com\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nexport var RequestOptions = (function () {\r\n    /**\r\n     * @param {?=} __0\r\n     */\r\n    function RequestOptions(_a) {\r\n        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;\r\n        this.method = method != null ? normalizeMethodName(method) : null;\r\n        this.headers = headers != null ? headers : null;\r\n        this.body = body != null ? body : null;\r\n        this.url = url != null ? url : null;\r\n        this.search =\r\n            search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\r\n        this.withCredentials = withCredentials != null ? withCredentials : null;\r\n        this.responseType = responseType != null ? responseType : null;\r\n    }\r\n    /**\r\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\r\n     * existing values. This method will not change the values of the instance on which it is being\r\n     * called.\r\n     *\r\n     * Note that `headers` and `search` will override existing values completely if present in\r\n     * the `options` object. If these values should be merged, it should be done prior to calling\r\n     * `merge` on the `RequestOptions` instance.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\r\n     *\r\n     * ```typescript\r\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\r\n     *\r\n     * var options = new RequestOptions({\r\n     *   method: RequestMethod.Post\r\n     * });\r\n     * var req = new Request(options.merge({\r\n     *   url: 'https://google.com'\r\n     * }));\r\n     * console.log('req.method:', RequestMethod[req.method]); // Post\r\n     * console.log('options.url:', options.url); // null\r\n     * console.log('req.url:', req.url); // https://google.com\r\n     * ```\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    RequestOptions.prototype.merge = function (options) {\r\n        return new RequestOptions({\r\n            method: options && options.method != null ? options.method : this.method,\r\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\r\n            body: options && options.body != null ? options.body : this.body,\r\n            url: options && options.url != null ? options.url : this.url,\r\n            search: options && options.search != null ?\r\n                (typeof options.search === 'string' ? new URLSearchParams(options.search) :\r\n                    options.search.clone()) :\r\n                this.search,\r\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\r\n                this.withCredentials,\r\n            responseType: options && options.responseType != null ? options.responseType :\r\n                this.responseType\r\n        });\r\n    };\r\n    return RequestOptions;\r\n}());\r\nfunction RequestOptions_tsickle_Closure_declarations() {\r\n    /**\r\n     * Http method with which to execute a {\\@link Request}.\r\n     * Acceptable methods are defined in the {\\@link RequestMethod} enum.\r\n     * @type {?}\r\n     */\r\n    RequestOptions.prototype.method;\r\n    /**\r\n     * {\\@link Headers} to be attached to a {\\@link Request}.\r\n     * @type {?}\r\n     */\r\n    RequestOptions.prototype.headers;\r\n    /**\r\n     * Body to be used when creating a {\\@link Request}.\r\n     * @type {?}\r\n     */\r\n    RequestOptions.prototype.body;\r\n    /**\r\n     * Url with which to perform a {\\@link Request}.\r\n     * @type {?}\r\n     */\r\n    RequestOptions.prototype.url;\r\n    /**\r\n     * Search parameters to be included in a {\\@link Request}.\r\n     * @type {?}\r\n     */\r\n    RequestOptions.prototype.search;\r\n    /**\r\n     * Enable use credentials for a {\\@link Request}.\r\n     * @type {?}\r\n     */\r\n    RequestOptions.prototype.withCredentials;\r\n    /** @type {?} */\r\n    RequestOptions.prototype.responseType;\r\n}\r\n/**\r\n * Subclass of {\\@link RequestOptions}, with default values.\r\n *\r\n * Default values:\r\n *  * method: {\\@link RequestMethod RequestMethod.Get}\r\n *  * headers: empty {\\@link Headers} object\r\n *\r\n * This class could be extended and bound to the {\\@link RequestOptions} class\r\n * when configuring an {\\@link Injector}, in order to override the default options\r\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\r\n *\r\n * ```typescript\r\n * import {provide} from '\\@angular/core';\r\n * import {bootstrap} from '\\@angular/platform-browser/browser';\r\n * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\r\n * import {App} from './myapp';\r\n *\r\n * class MyOptions extends BaseRequestOptions {\r\n *   search: string = 'coreTeam=true';\r\n * }\r\n *\r\n * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\r\n * ```\r\n *\r\n * The options could also be extended when manually creating a {\\@link Request}\r\n * object.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\r\n *\r\n * ```\r\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\r\n *\r\n * var options = new BaseRequestOptions();\r\n * var req = new Request(options.merge({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * }));\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // null\r\n * console.log('req.url:', req.url); // https://google.com\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nexport var BaseRequestOptions = (function (_super) {\r\n    __extends(BaseRequestOptions, _super);\r\n    function BaseRequestOptions() {\r\n        _super.call(this, { method: RequestMethod.Get, headers: new Headers() });\r\n    }\r\n    BaseRequestOptions.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    BaseRequestOptions.ctorParameters = function () { return []; };\r\n    return BaseRequestOptions;\r\n}(RequestOptions));\r\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    BaseRequestOptions.decorators;\r\n    /**\r\n     * @nocollapse\r\n     * @type {?}\r\n     */\r\n    BaseRequestOptions.ctorParameters;\r\n}\r\n"]}