/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgModule } from '@angular/core';
import { BrowserJsonp } from './backends/browser_jsonp';
import { BrowserXhr } from './backends/browser_xhr';
import { JSONPBackend, JSONPBackend_ } from './backends/jsonp_backend';
import { CookieXSRFStrategy, XHRBackend } from './backends/xhr_backend';
import { BaseRequestOptions, RequestOptions } from './base_request_options';
import { BaseResponseOptions, ResponseOptions } from './base_response_options';
import { Http, Jsonp } from './http';
import { XSRFStrategy } from './interfaces';
/**
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
export function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
}
/**
 * @param {?} xhrBackend
 * @param {?} requestOptions
 * @return {?}
 */
export function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
}
/**
 * @param {?} jsonpBackend
 * @param {?} requestOptions
 * @return {?}
 */
export function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
}
/**
 * The module that includes http's providers
 *
 * \@experimental
 */
export var HttpModule = (function () {
    function HttpModule() {
    }
    /** @nocollapse */
    HttpModule.ctorParameters = function () { return []; };
HttpModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: HttpModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(HttpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
                    BrowserXhr,
                    { provide: RequestOptions, useClass: BaseRequestOptions },
                    { provide: ResponseOptions, useClass: BaseResponseOptions },
                    XHRBackend,
                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
                ]
            }]
    }], function () { return []; }, null);
HttpModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function HttpModule_Factory(t) { return new (t || HttpModule)(); }, providers: [
        // TODO(pascal): use factory type annotations once supported in DI
        // issue: https://github.com/angular/angular/issues/3183
        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
        BrowserXhr,
        { provide: RequestOptions, useClass: BaseRequestOptions },
        { provide: ResponseOptions, useClass: BaseResponseOptions },
        XHRBackend,
        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
    ] });
    return HttpModule;
}());
function HttpModule_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpModule.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    HttpModule.ctorParameters;
}
/**
 * The module that includes jsonp's providers
 *
 * \@experimental
 */
export var JsonpModule = (function () {
    function JsonpModule() {
    }
    /** @nocollapse */
    JsonpModule.ctorParameters = function () { return []; };
JsonpModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: JsonpModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(JsonpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
                    BrowserJsonp,
                    { provide: RequestOptions, useClass: BaseRequestOptions },
                    { provide: ResponseOptions, useClass: BaseResponseOptions },
                    { provide: JSONPBackend, useClass: JSONPBackend_ },
                ]
            }]
    }], function () { return []; }, null);
JsonpModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function JsonpModule_Factory(t) { return new (t || JsonpModule)(); }, providers: [
        // TODO(pascal): use factory type annotations once supported in DI
        // issue: https://github.com/angular/angular/issues/3183
        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
        BrowserJsonp,
        { provide: RequestOptions, useClass: BaseRequestOptions },
        { provide: ResponseOptions, useClass: BaseResponseOptions },
        { provide: JSONPBackend, useClass: JSONPBackend_ },
    ] });
    return JsonpModule;
}());
function JsonpModule_tsickle_Closure_declarations() {
    /** @type {?} */
    JsonpModule.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    JsonpModule.ctorParameters;
}

//# sourceMappingURL=http_module.js.map