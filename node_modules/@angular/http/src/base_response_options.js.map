{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/http/src/base_response_options.js"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwKK,AAGC;;;;;;0CAE8D","file":"base_response_options.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { ResponseType } from './enums';\r\nimport { Headers } from './headers';\r\n/**\r\n * Creates a response options object to be optionally provided when instantiating a\r\n * {\\@link Response}.\r\n *\r\n * This class is based on the `ResponseInit` description in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\r\n *\r\n * All values are null by default. Typical defaults can be found in the\r\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\r\n *\r\n * This class may be used in tests to build {\\@link Response Responses} for\r\n * mock responses (see {\\@link MockBackend}).\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\r\n *\r\n * ```typescript\r\n * import {ResponseOptions, Response} from '\\@angular/http';\r\n *\r\n * var options = new ResponseOptions({\r\n *   body: '{\"name\":\"Jeff\"}'\r\n * });\r\n * var res = new Response(options);\r\n *\r\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nexport var ResponseOptions = (function () {\r\n    /**\r\n     * @param {?=} __0\r\n     */\r\n    function ResponseOptions(_a) {\r\n        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\r\n        this.body = body != null ? body : null;\r\n        this.status = status != null ? status : null;\r\n        this.headers = headers != null ? headers : null;\r\n        this.statusText = statusText != null ? statusText : null;\r\n        this.type = type != null ? type : null;\r\n        this.url = url != null ? url : null;\r\n    }\r\n    /**\r\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\r\n     * override\r\n     * existing values. This method will not change the values of the instance on which it is being\r\n     * called.\r\n     *\r\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\r\n     * where certain properties may change from test to test.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\r\n     *\r\n     * ```typescript\r\n     * import {ResponseOptions, Response} from '\\@angular/http';\r\n     *\r\n     * var options = new ResponseOptions({\r\n     *   body: {name: 'Jeff'}\r\n     * });\r\n     * var res = new Response(options.merge({\r\n     *   url: 'https://google.com'\r\n     * }));\r\n     * console.log('options.url:', options.url); // null\r\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\r\n     * console.log('res.url:', res.url); // https://google.com\r\n     * ```\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    ResponseOptions.prototype.merge = function (options) {\r\n        return new ResponseOptions({\r\n            body: options && options.body != null ? options.body : this.body,\r\n            status: options && options.status != null ? options.status : this.status,\r\n            headers: options && options.headers != null ? options.headers : this.headers,\r\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\r\n            type: options && options.type != null ? options.type : this.type,\r\n            url: options && options.url != null ? options.url : this.url,\r\n        });\r\n    };\r\n    return ResponseOptions;\r\n}());\r\nfunction ResponseOptions_tsickle_Closure_declarations() {\r\n    /**\r\n     * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\r\n     * @type {?}\r\n     */\r\n    ResponseOptions.prototype.body;\r\n    /**\r\n     * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\r\n     * associated with the response.\r\n     * @type {?}\r\n     */\r\n    ResponseOptions.prototype.status;\r\n    /**\r\n     * Response {\\@link Headers headers}\r\n     * @type {?}\r\n     */\r\n    ResponseOptions.prototype.headers;\r\n    /**\r\n     * \\@internal\r\n     * @type {?}\r\n     */\r\n    ResponseOptions.prototype.statusText;\r\n    /**\r\n     * \\@internal\r\n     * @type {?}\r\n     */\r\n    ResponseOptions.prototype.type;\r\n    /** @type {?} */\r\n    ResponseOptions.prototype.url;\r\n}\r\n/**\r\n * Subclass of {\\@link ResponseOptions}, with default values.\r\n *\r\n * Default values:\r\n *  * status: 200\r\n *  * headers: empty {\\@link Headers} object\r\n *\r\n * This class could be extended and bound to the {\\@link ResponseOptions} class\r\n * when configuring an {\\@link Injector}, in order to override the default options\r\n * used by {\\@link Http} to create {\\@link Response Responses}.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\r\n *\r\n * ```typescript\r\n * import {provide} from '\\@angular/core';\r\n * import {bootstrap} from '\\@angular/platform-browser/browser';\r\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\r\n * '\\@angular/http';\r\n * import {App} from './myapp';\r\n *\r\n * class MyOptions extends BaseResponseOptions {\r\n *   headers:Headers = new Headers({network: 'github'});\r\n * }\r\n *\r\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\r\n * ```\r\n *\r\n * The options could also be extended when manually creating a {\\@link Response}\r\n * object.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\r\n *\r\n * ```\r\n * import {BaseResponseOptions, Response} from '\\@angular/http';\r\n *\r\n * var options = new BaseResponseOptions();\r\n * var res = new Response(options.merge({\r\n *   body: 'Angular',\r\n *   headers: new Headers({framework: 'angular'})\r\n * }));\r\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\r\n * console.log('res.text():', res.text()); // Angular;\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nexport var BaseResponseOptions = (function (_super) {\r\n    __extends(BaseResponseOptions, _super);\r\n    function BaseResponseOptions() {\r\n        _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\r\n    }\r\n    BaseResponseOptions.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    BaseResponseOptions.ctorParameters = function () { return []; };\r\n    return BaseResponseOptions;\r\n}(ResponseOptions));\r\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    BaseResponseOptions.decorators;\r\n    /**\r\n     * @nocollapse\r\n     * @type {?}\r\n     */\r\n    BaseResponseOptions.ctorParameters;\r\n}\r\n"]}