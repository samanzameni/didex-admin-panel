{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/animations/fesm5/browser/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAaA","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __extends } from 'tslib';\r\nimport { AUTO_STYLE, NoopAnimationPlayer } from '@angular/animations';\r\nimport { ɵvalidateStyleProperty, ɵmatchesElement, ɵcontainsElement, ɵinvokeQuery, ɵallowPreviousPlayerStylesMerge } from '@angular/animations/browser';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nvar MockAnimationDriver = /** @class */ (function () {\r\n    function MockAnimationDriver() {\r\n    }\r\n    MockAnimationDriver.prototype.validateStyleProperty = function (prop) { return ɵvalidateStyleProperty(prop); };\r\n    MockAnimationDriver.prototype.matchesElement = function (element, selector) {\r\n        return ɵmatchesElement(element, selector);\r\n    };\r\n    MockAnimationDriver.prototype.containsElement = function (elm1, elm2) { return ɵcontainsElement(elm1, elm2); };\r\n    MockAnimationDriver.prototype.query = function (element, selector, multi) {\r\n        return ɵinvokeQuery(element, selector, multi);\r\n    };\r\n    MockAnimationDriver.prototype.computeStyle = function (element, prop, defaultValue) {\r\n        return defaultValue || '';\r\n    };\r\n    MockAnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {\r\n        if (previousPlayers === void 0) { previousPlayers = []; }\r\n        var player = new MockAnimationPlayer(element, keyframes, duration, delay, easing, previousPlayers);\r\n        MockAnimationDriver.log.push(player);\r\n        return player;\r\n    };\r\n    MockAnimationDriver.log = [];\r\n    return MockAnimationDriver;\r\n}());\r\n/**\r\n * @publicApi\r\n */\r\nvar MockAnimationPlayer = /** @class */ (function (_super) {\r\n    __extends(MockAnimationPlayer, _super);\r\n    function MockAnimationPlayer(element, keyframes, duration, delay, easing, previousPlayers) {\r\n        var _this = _super.call(this, duration, delay) || this;\r\n        _this.element = element;\r\n        _this.keyframes = keyframes;\r\n        _this.duration = duration;\r\n        _this.delay = delay;\r\n        _this.easing = easing;\r\n        _this.previousPlayers = previousPlayers;\r\n        _this.__finished = false;\r\n        _this.__started = false;\r\n        _this.previousStyles = {};\r\n        _this._onInitFns = [];\r\n        _this.currentSnapshot = {};\r\n        if (ɵallowPreviousPlayerStylesMerge(duration, delay)) {\r\n            previousPlayers.forEach(function (player) {\r\n                if (player instanceof MockAnimationPlayer) {\r\n                    var styles_1 = player.currentSnapshot;\r\n                    Object.keys(styles_1).forEach(function (prop) { return _this.previousStyles[prop] = styles_1[prop]; });\r\n                }\r\n            });\r\n        }\r\n        return _this;\r\n    }\r\n    /* @internal */\r\n    MockAnimationPlayer.prototype.onInit = function (fn) { this._onInitFns.push(fn); };\r\n    /* @internal */\r\n    MockAnimationPlayer.prototype.init = function () {\r\n        _super.prototype.init.call(this);\r\n        this._onInitFns.forEach(function (fn) { return fn(); });\r\n        this._onInitFns = [];\r\n    };\r\n    MockAnimationPlayer.prototype.finish = function () {\r\n        _super.prototype.finish.call(this);\r\n        this.__finished = true;\r\n    };\r\n    MockAnimationPlayer.prototype.destroy = function () {\r\n        _super.prototype.destroy.call(this);\r\n        this.__finished = true;\r\n    };\r\n    /* @internal */\r\n    MockAnimationPlayer.prototype.triggerMicrotask = function () { };\r\n    MockAnimationPlayer.prototype.play = function () {\r\n        _super.prototype.play.call(this);\r\n        this.__started = true;\r\n    };\r\n    MockAnimationPlayer.prototype.hasStarted = function () { return this.__started; };\r\n    MockAnimationPlayer.prototype.beforeDestroy = function () {\r\n        var _this = this;\r\n        var captures = {};\r\n        Object.keys(this.previousStyles).forEach(function (prop) {\r\n            captures[prop] = _this.previousStyles[prop];\r\n        });\r\n        if (this.hasStarted()) {\r\n            // when assembling the captured styles, it's important that\r\n            // we build the keyframe styles in the following order:\r\n            // {other styles within keyframes, ... previousStyles }\r\n            this.keyframes.forEach(function (kf) {\r\n                Object.keys(kf).forEach(function (prop) {\r\n                    if (prop != 'offset') {\r\n                        captures[prop] = _this.__finished ? kf[prop] : AUTO_STYLE;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        this.currentSnapshot = captures;\r\n    };\r\n    return MockAnimationPlayer;\r\n}(NoopAnimationPlayer));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MockAnimationDriver, MockAnimationPlayer };\r\n\r\n"]}