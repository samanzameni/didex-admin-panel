{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/router/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyCC,+JAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0GD,iCAkBC","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { Location, LocationStrategy } from '@angular/common';\r\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\r\nimport { Injectable, Compiler, NgModule, NgModuleFactoryLoader, Injector, Optional } from '@angular/core';\r\nimport { Router, ɵflatten, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@description\r\n *\r\n * Allows to simulate the loading of ng modules in tests.\r\n *\r\n * ```\r\n * const loader = TestBed.get(NgModuleFactoryLoader);\r\n *\r\n * \\@Component({template: 'lazy-loaded'})\r\n * class LazyLoadedComponent {}\r\n * \\@NgModule({\r\n *   declarations: [LazyLoadedComponent],\r\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\r\n * })\r\n *\r\n * class LoadedModule {}\r\n *\r\n * // sets up stubbedModules\r\n * loader.stubbedModules = {lazyModule: LoadedModule};\r\n *\r\n * router.resetConfig([\r\n *   {path: 'lazy', loadChildren: 'lazyModule'},\r\n * ]);\r\n *\r\n * router.navigateByUrl('/lazy/loaded');\r\n * ```\r\n *\r\n * \\@publicApi\r\n */\r\nclass SpyNgModuleFactoryLoader {\r\n    /**\r\n     * @param {?} compiler\r\n     */\r\n    constructor(compiler) {\r\n        this.compiler = compiler;\r\n        /**\r\n         * \\@docsNotRequired\r\n         */\r\n        this._stubbedModules = {};\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @param {?} modules\r\n     * @return {?}\r\n     */\r\n    set stubbedModules(modules) {\r\n        /** @type {?} */\r\n        const res = {};\r\n        for (const t of Object.keys(modules)) {\r\n            res[t] = this.compiler.compileModuleAsync(modules[t]);\r\n        }\r\n        this._stubbedModules = res;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    get stubbedModules() { return this._stubbedModules; }\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    load(path) {\r\n        if (this._stubbedModules[path]) {\r\n            return this._stubbedModules[path];\r\n        }\r\n        else {\r\n            return (/** @type {?} */ (Promise.reject(new Error(`Cannot find module ${path}`))));\r\n        }\r\n    }\r\n}\r\nSpyNgModuleFactoryLoader.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nSpyNgModuleFactoryLoader.ctorParameters = () => [\r\n    { type: Compiler }\r\n];\r\nif (false) {\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    SpyNgModuleFactoryLoader.prototype._stubbedModules;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    SpyNgModuleFactoryLoader.prototype.compiler;\r\n}\r\n/**\r\n * @param {?} opts\r\n * @return {?}\r\n */\r\nfunction isUrlHandlingStrategy(opts) {\r\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\r\n    // runtime.\r\n    return 'shouldProcessUrl' in opts;\r\n}\r\n/**\r\n * Router setup factory function used for testing.\r\n *\r\n * \\@publicApi\r\n * @param {?} urlSerializer\r\n * @param {?} contexts\r\n * @param {?} location\r\n * @param {?} loader\r\n * @param {?} compiler\r\n * @param {?} injector\r\n * @param {?} routes\r\n * @param {?=} opts\r\n * @param {?=} urlHandlingStrategy\r\n * @return {?}\r\n */\r\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\r\n    /** @type {?} */\r\n    const router = new Router((/** @type {?} */ (null)), urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\r\n    if (opts) {\r\n        // Handle deprecated argument ordering.\r\n        if (isUrlHandlingStrategy(opts)) {\r\n            router.urlHandlingStrategy = opts;\r\n        }\r\n        else {\r\n            // Handle ExtraOptions\r\n            if (opts.malformedUriErrorHandler) {\r\n                router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\r\n            }\r\n            if (opts.paramsInheritanceStrategy) {\r\n                router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\r\n            }\r\n        }\r\n    }\r\n    if (urlHandlingStrategy) {\r\n        router.urlHandlingStrategy = urlHandlingStrategy;\r\n    }\r\n    return router;\r\n}\r\n/**\r\n * \\@description\r\n *\r\n * Sets up the router to be used for testing.\r\n *\r\n * The modules sets up the router to be used for testing.\r\n * It provides spy implementations of `Location`, `LocationStrategy`, and {\\@link\r\n * NgModuleFactoryLoader}.\r\n *\r\n * \\@usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * beforeEach(() => {\r\n *   TestBed.configureTestModule({\r\n *     imports: [\r\n *       RouterTestingModule.withRoutes(\r\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\r\n *       )\r\n *     ]\r\n *   });\r\n * });\r\n * ```\r\n *\r\n * \\@publicApi\r\n */\r\nclass RouterTestingModule {\r\n    /**\r\n     * @param {?} routes\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    static withRoutes(routes, config) {\r\n        return {\r\n            ngModule: RouterTestingModule,\r\n            providers: [\r\n                provideRoutes(routes),\r\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\r\n            ]\r\n        };\r\n    }\r\n}\r\nRouterTestingModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                exports: [RouterModule],\r\n                providers: [\r\n                    ɵROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\r\n                    { provide: LocationStrategy, useClass: MockLocationStrategy },\r\n                    { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\r\n                        provide: Router,\r\n                        useFactory: setupTestingRouter,\r\n                        deps: [\r\n                            UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\r\n                            ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\r\n                        ]\r\n                    },\r\n                    { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\r\n                ]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { setupTestingRouter, SpyNgModuleFactoryLoader, RouterTestingModule };\r\n\r\n"]}