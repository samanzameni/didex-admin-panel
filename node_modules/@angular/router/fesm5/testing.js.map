{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/router/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CA6C2C,AACtB;;;;;;+IAEY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA0EH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAkBF","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __values, __decorate, __metadata } from 'tslib';\r\nimport { Location, LocationStrategy } from '@angular/common';\r\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\r\nimport { Injectable, Compiler, NgModule, NgModuleFactoryLoader, Injector, Optional } from '@angular/core';\r\nimport { Router, ɵflatten, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @description\r\n *\r\n * Allows to simulate the loading of ng modules in tests.\r\n *\r\n * ```\r\n * const loader = TestBed.get(NgModuleFactoryLoader);\r\n *\r\n * @Component({template: 'lazy-loaded'})\r\n * class LazyLoadedComponent {}\r\n * @NgModule({\r\n *   declarations: [LazyLoadedComponent],\r\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\r\n * })\r\n *\r\n * class LoadedModule {}\r\n *\r\n * // sets up stubbedModules\r\n * loader.stubbedModules = {lazyModule: LoadedModule};\r\n *\r\n * router.resetConfig([\r\n *   {path: 'lazy', loadChildren: 'lazyModule'},\r\n * ]);\r\n *\r\n * router.navigateByUrl('/lazy/loaded');\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nvar SpyNgModuleFactoryLoader = /** @class */ (function () {\r\n    function SpyNgModuleFactoryLoader(compiler) {\r\n        this.compiler = compiler;\r\n        /**\r\n         * @docsNotRequired\r\n         */\r\n        this._stubbedModules = {};\r\n    }\r\n    Object.defineProperty(SpyNgModuleFactoryLoader.prototype, \"stubbedModules\", {\r\n        /**\r\n         * @docsNotRequired\r\n         */\r\n        get: function () { return this._stubbedModules; },\r\n        /**\r\n         * @docsNotRequired\r\n         */\r\n        set: function (modules) {\r\n            var e_1, _a;\r\n            var res = {};\r\n            try {\r\n                for (var _b = __values(Object.keys(modules)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var t = _c.value;\r\n                    res[t] = this.compiler.compileModuleAsync(modules[t]);\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            this._stubbedModules = res;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SpyNgModuleFactoryLoader.prototype.load = function (path) {\r\n        if (this._stubbedModules[path]) {\r\n            return this._stubbedModules[path];\r\n        }\r\n        else {\r\n            return Promise.reject(new Error(\"Cannot find module \" + path));\r\n        }\r\n    };\r\n    SpyNgModuleFactoryLoader = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [Compiler])\r\n    ], SpyNgModuleFactoryLoader);\r\n    return SpyNgModuleFactoryLoader;\r\n}());\r\nfunction isUrlHandlingStrategy(opts) {\r\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\r\n    // runtime.\r\n    return 'shouldProcessUrl' in opts;\r\n}\r\n/**\r\n * Router setup factory function used for testing.\r\n *\r\n * @publicApi\r\n */\r\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\r\n    var router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\r\n    if (opts) {\r\n        // Handle deprecated argument ordering.\r\n        if (isUrlHandlingStrategy(opts)) {\r\n            router.urlHandlingStrategy = opts;\r\n        }\r\n        else {\r\n            // Handle ExtraOptions\r\n            if (opts.malformedUriErrorHandler) {\r\n                router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\r\n            }\r\n            if (opts.paramsInheritanceStrategy) {\r\n                router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\r\n            }\r\n        }\r\n    }\r\n    if (urlHandlingStrategy) {\r\n        router.urlHandlingStrategy = urlHandlingStrategy;\r\n    }\r\n    return router;\r\n}\r\n/**\r\n * @description\r\n *\r\n * Sets up the router to be used for testing.\r\n *\r\n * The modules sets up the router to be used for testing.\r\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\r\n * NgModuleFactoryLoader}.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * beforeEach(() => {\r\n *   TestBed.configureTestModule({\r\n *     imports: [\r\n *       RouterTestingModule.withRoutes(\r\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\r\n *       )\r\n *     ]\r\n *   });\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nvar RouterTestingModule = /** @class */ (function () {\r\n    function RouterTestingModule() {\r\n    }\r\n    RouterTestingModule_1 = RouterTestingModule;\r\n    RouterTestingModule.withRoutes = function (routes, config) {\r\n        return {\r\n            ngModule: RouterTestingModule_1,\r\n            providers: [\r\n                provideRoutes(routes),\r\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\r\n            ]\r\n        };\r\n    };\r\n    var RouterTestingModule_1;\r\n    RouterTestingModule = RouterTestingModule_1 = __decorate([\r\n        NgModule({\r\n            exports: [RouterModule],\r\n            providers: [\r\n                ɵROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\r\n                { provide: LocationStrategy, useClass: MockLocationStrategy },\r\n                { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\r\n                    provide: Router,\r\n                    useFactory: setupTestingRouter,\r\n                    deps: [\r\n                        UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\r\n                        ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\r\n                    ]\r\n                },\r\n                { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\r\n            ]\r\n        })\r\n    ], RouterTestingModule);\r\n    return RouterTestingModule;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { SpyNgModuleFactoryLoader, setupTestingRouter, RouterTestingModule };\r\n\r\n"]}