{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/compiler/bundles/compiler-testing.umd.js"],"names":[],"mappings":"AAAA","file":"compiler-testing.umd.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\n(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler')) :\r\n    typeof define === 'function' && define.amd ? define('@angular/compiler/testing', ['exports', '@angular/compiler'], factory) :\r\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}, global.ng.compiler.testing = {}), global.ng.compiler));\r\n}(this, function (exports, compiler) { 'use strict';\r\n\r\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\r\n     * and responded to within a single test, without going to the network.\r\n     */\r\n    var MockResourceLoader = /** @class */ (function (_super) {\r\n        __extends(MockResourceLoader, _super);\r\n        function MockResourceLoader() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            _this._expectations = [];\r\n            _this._definitions = new Map();\r\n            _this._requests = [];\r\n            return _this;\r\n        }\r\n        MockResourceLoader.prototype.get = function (url) {\r\n            var request = new _PendingRequest(url);\r\n            this._requests.push(request);\r\n            return request.getPromise();\r\n        };\r\n        MockResourceLoader.prototype.hasPendingRequests = function () { return !!this._requests.length; };\r\n        /**\r\n         * Add an expectation for the given URL. Incoming requests will be checked against\r\n         * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\r\n         * can be used to check if any expectations have not yet been met.\r\n         *\r\n         * The response given will be returned if the expectation matches.\r\n         */\r\n        MockResourceLoader.prototype.expect = function (url, response) {\r\n            var expectation = new _Expectation(url, response);\r\n            this._expectations.push(expectation);\r\n        };\r\n        /**\r\n         * Add a definition for the given URL to return the given response. Unlike expectations,\r\n         * definitions have no order and will satisfy any matching request at any time. Also\r\n         * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\r\n         * to return an error.\r\n         */\r\n        MockResourceLoader.prototype.when = function (url, response) { this._definitions.set(url, response); };\r\n        /**\r\n         * Process pending requests and verify there are no outstanding expectations. Also fails\r\n         * if no requests are pending.\r\n         */\r\n        MockResourceLoader.prototype.flush = function () {\r\n            if (this._requests.length === 0) {\r\n                throw new Error('No pending requests to flush');\r\n            }\r\n            do {\r\n                this._processRequest(this._requests.shift());\r\n            } while (this._requests.length > 0);\r\n            this.verifyNoOutstandingExpectations();\r\n        };\r\n        /**\r\n         * Throw an exception if any expectations have not been satisfied.\r\n         */\r\n        MockResourceLoader.prototype.verifyNoOutstandingExpectations = function () {\r\n            if (this._expectations.length === 0)\r\n                return;\r\n            var urls = [];\r\n            for (var i = 0; i < this._expectations.length; i++) {\r\n                var expectation = this._expectations[i];\r\n                urls.push(expectation.url);\r\n            }\r\n            throw new Error(\"Unsatisfied requests: \" + urls.join(', '));\r\n        };\r\n        MockResourceLoader.prototype._processRequest = function (request) {\r\n            var url = request.url;\r\n            if (this._expectations.length > 0) {\r\n                var expectation = this._expectations[0];\r\n                if (expectation.url == url) {\r\n                    remove(this._expectations, expectation);\r\n                    request.complete(expectation.response);\r\n                    return;\r\n                }\r\n            }\r\n            if (this._definitions.has(url)) {\r\n                var response = this._definitions.get(url);\r\n                request.complete(response == null ? null : response);\r\n                return;\r\n            }\r\n            throw new Error(\"Unexpected request \" + url);\r\n        };\r\n        return MockResourceLoader;\r\n    }(compiler.ResourceLoader));\r\n    var _PendingRequest = /** @class */ (function () {\r\n        function _PendingRequest(url) {\r\n            var _this = this;\r\n            this.url = url;\r\n            this.promise = new Promise(function (res, rej) {\r\n                _this.resolve = res;\r\n                _this.reject = rej;\r\n            });\r\n        }\r\n        _PendingRequest.prototype.complete = function (response) {\r\n            if (response == null) {\r\n                this.reject(\"Failed to load \" + this.url);\r\n            }\r\n            else {\r\n                this.resolve(response);\r\n            }\r\n        };\r\n        _PendingRequest.prototype.getPromise = function () { return this.promise; };\r\n        return _PendingRequest;\r\n    }());\r\n    var _Expectation = /** @class */ (function () {\r\n        function _Expectation(url, response) {\r\n            this.url = url;\r\n            this.response = response;\r\n        }\r\n        return _Expectation;\r\n    }());\r\n    function remove(list, el) {\r\n        var index = list.indexOf(el);\r\n        if (index > -1) {\r\n            list.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var MockSchemaRegistry = /** @class */ (function () {\r\n        function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\r\n            this.existingProperties = existingProperties;\r\n            this.attrPropMapping = attrPropMapping;\r\n            this.existingElements = existingElements;\r\n            this.invalidProperties = invalidProperties;\r\n            this.invalidAttributes = invalidAttributes;\r\n        }\r\n        MockSchemaRegistry.prototype.hasProperty = function (tagName, property, schemas) {\r\n            var value = this.existingProperties[property];\r\n            return value === void 0 ? true : value;\r\n        };\r\n        MockSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {\r\n            var value = this.existingElements[tagName.toLowerCase()];\r\n            return value === void 0 ? true : value;\r\n        };\r\n        MockSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this.existingElements); };\r\n        MockSchemaRegistry.prototype.securityContext = function (selector, property, isAttribute) {\r\n            return compiler.core.SecurityContext.NONE;\r\n        };\r\n        MockSchemaRegistry.prototype.getMappedPropName = function (attrName) { return this.attrPropMapping[attrName] || attrName; };\r\n        MockSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };\r\n        MockSchemaRegistry.prototype.validateProperty = function (name) {\r\n            if (this.invalidProperties.indexOf(name) > -1) {\r\n                return { error: true, msg: \"Binding to property '\" + name + \"' is disallowed for security reasons\" };\r\n            }\r\n            else {\r\n                return { error: false };\r\n            }\r\n        };\r\n        MockSchemaRegistry.prototype.validateAttribute = function (name) {\r\n            if (this.invalidAttributes.indexOf(name) > -1) {\r\n                return {\r\n                    error: true,\r\n                    msg: \"Binding to attribute '\" + name + \"' is disallowed for security reasons\"\r\n                };\r\n            }\r\n            else {\r\n                return { error: false };\r\n            }\r\n        };\r\n        MockSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { return propName; };\r\n        MockSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {\r\n            return { error: null, value: val.toString() };\r\n        };\r\n        return MockSchemaRegistry;\r\n    }());\r\n\r\n    /**\r\n     * An implementation of {@link DirectiveResolver} that allows overriding\r\n     * various properties of directives.\r\n     */\r\n    var MockDirectiveResolver = /** @class */ (function (_super) {\r\n        __extends(MockDirectiveResolver, _super);\r\n        function MockDirectiveResolver(reflector) {\r\n            var _this = _super.call(this, reflector) || this;\r\n            _this._directives = new Map();\r\n            return _this;\r\n        }\r\n        MockDirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {\r\n            if (throwIfNotFound === void 0) { throwIfNotFound = true; }\r\n            return this._directives.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\r\n        };\r\n        /**\r\n         * Overrides the {@link core.Directive} for a directive.\r\n         */\r\n        MockDirectiveResolver.prototype.setDirective = function (type, metadata) {\r\n            this._directives.set(type, metadata);\r\n        };\r\n        return MockDirectiveResolver;\r\n    }(compiler.DirectiveResolver));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var MockNgModuleResolver = /** @class */ (function (_super) {\r\n        __extends(MockNgModuleResolver, _super);\r\n        function MockNgModuleResolver(reflector) {\r\n            var _this = _super.call(this, reflector) || this;\r\n            _this._ngModules = new Map();\r\n            return _this;\r\n        }\r\n        /**\r\n         * Overrides the {@link NgModule} for a module.\r\n         */\r\n        MockNgModuleResolver.prototype.setNgModule = function (type, metadata) {\r\n            this._ngModules.set(type, metadata);\r\n        };\r\n        /**\r\n         * Returns the {@link NgModule} for a module:\r\n         * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\r\n         * default\r\n         * `NgModuleResolver`, see `setNgModule`.\r\n         */\r\n        MockNgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {\r\n            if (throwIfNotFound === void 0) { throwIfNotFound = true; }\r\n            return this._ngModules.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\r\n        };\r\n        return MockNgModuleResolver;\r\n    }(compiler.NgModuleResolver));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var MockPipeResolver = /** @class */ (function (_super) {\r\n        __extends(MockPipeResolver, _super);\r\n        function MockPipeResolver(refector) {\r\n            var _this = _super.call(this, refector) || this;\r\n            _this._pipes = new Map();\r\n            return _this;\r\n        }\r\n        /**\r\n         * Overrides the {@link Pipe} for a pipe.\r\n         */\r\n        MockPipeResolver.prototype.setPipe = function (type, metadata) { this._pipes.set(type, metadata); };\r\n        /**\r\n         * Returns the {@link Pipe} for a pipe:\r\n         * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\r\n         * default\r\n         * `PipeResolver`, see `setPipe`.\r\n         */\r\n        MockPipeResolver.prototype.resolve = function (type, throwIfNotFound) {\r\n            if (throwIfNotFound === void 0) { throwIfNotFound = true; }\r\n            var metadata = this._pipes.get(type);\r\n            if (!metadata) {\r\n                metadata = _super.prototype.resolve.call(this, type, throwIfNotFound);\r\n            }\r\n            return metadata;\r\n        };\r\n        return MockPipeResolver;\r\n    }(compiler.PipeResolver));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    // This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n\r\n    /**\r\n     * Generated bundle index. Do not edit.\r\n     */\r\n\r\n    exports.MockResourceLoader = MockResourceLoader;\r\n    exports.MockSchemaRegistry = MockSchemaRegistry;\r\n    exports.MockDirectiveResolver = MockDirectiveResolver;\r\n    exports.MockNgModuleResolver = MockNgModuleResolver;\r\n    exports.MockPipeResolver = MockPipeResolver;\r\n\r\n    Object.defineProperty(exports, '__esModule', { value: true });\r\n\r\n}));\r\n\r\n"]}