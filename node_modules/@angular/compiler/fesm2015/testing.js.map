{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/compiler/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { ResourceLoader, core, DirectiveResolver, NgModuleResolver, PipeResolver } from '@angular/compiler';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A mock implementation of {\\@link ResourceLoader} that allows outgoing requests to be mocked\r\n * and responded to within a single test, without going to the network.\r\n */\r\nclass MockResourceLoader extends ResourceLoader {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._expectations = [];\r\n        this._definitions = new Map();\r\n        this._requests = [];\r\n    }\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) {\r\n        /** @type {?} */\r\n        const request = new _PendingRequest(url);\r\n        this._requests.push(request);\r\n        return request.getPromise();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasPendingRequests() { return !!this._requests.length; }\r\n    /**\r\n     * Add an expectation for the given URL. Incoming requests will be checked against\r\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\r\n     * can be used to check if any expectations have not yet been met.\r\n     *\r\n     * The response given will be returned if the expectation matches.\r\n     * @param {?} url\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    expect(url, response) {\r\n        /** @type {?} */\r\n        const expectation = new _Expectation(url, response);\r\n        this._expectations.push(expectation);\r\n    }\r\n    /**\r\n     * Add a definition for the given URL to return the given response. Unlike expectations,\r\n     * definitions have no order and will satisfy any matching request at any time. Also\r\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\r\n     * to return an error.\r\n     * @param {?} url\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    when(url, response) { this._definitions.set(url, response); }\r\n    /**\r\n     * Process pending requests and verify there are no outstanding expectations. Also fails\r\n     * if no requests are pending.\r\n     * @return {?}\r\n     */\r\n    flush() {\r\n        if (this._requests.length === 0) {\r\n            throw new Error('No pending requests to flush');\r\n        }\r\n        do {\r\n            this._processRequest((/** @type {?} */ (this._requests.shift())));\r\n        } while (this._requests.length > 0);\r\n        this.verifyNoOutstandingExpectations();\r\n    }\r\n    /**\r\n     * Throw an exception if any expectations have not been satisfied.\r\n     * @return {?}\r\n     */\r\n    verifyNoOutstandingExpectations() {\r\n        if (this._expectations.length === 0)\r\n            return;\r\n        /** @type {?} */\r\n        const urls = [];\r\n        for (let i = 0; i < this._expectations.length; i++) {\r\n            /** @type {?} */\r\n            const expectation = this._expectations[i];\r\n            urls.push(expectation.url);\r\n        }\r\n        throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} request\r\n     * @return {?}\r\n     */\r\n    _processRequest(request) {\r\n        /** @type {?} */\r\n        const url = request.url;\r\n        if (this._expectations.length > 0) {\r\n            /** @type {?} */\r\n            const expectation = this._expectations[0];\r\n            if (expectation.url == url) {\r\n                remove(this._expectations, expectation);\r\n                request.complete(expectation.response);\r\n                return;\r\n            }\r\n        }\r\n        if (this._definitions.has(url)) {\r\n            /** @type {?} */\r\n            const response = this._definitions.get(url);\r\n            request.complete(response == null ? null : response);\r\n            return;\r\n        }\r\n        throw new Error(`Unexpected request ${url}`);\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MockResourceLoader.prototype._expectations;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MockResourceLoader.prototype._definitions;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MockResourceLoader.prototype._requests;\r\n}\r\nclass _PendingRequest {\r\n    /**\r\n     * @param {?} url\r\n     */\r\n    constructor(url) {\r\n        this.url = url;\r\n        this.promise = new Promise((/**\r\n         * @param {?} res\r\n         * @param {?} rej\r\n         * @return {?}\r\n         */\r\n        (res, rej) => {\r\n            this.resolve = res;\r\n            this.reject = rej;\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    complete(response) {\r\n        if (response == null) {\r\n            this.reject(`Failed to load ${this.url}`);\r\n        }\r\n        else {\r\n            this.resolve(response);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPromise() { return this.promise; }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    _PendingRequest.prototype.resolve;\r\n    /** @type {?} */\r\n    _PendingRequest.prototype.reject;\r\n    /** @type {?} */\r\n    _PendingRequest.prototype.promise;\r\n    /** @type {?} */\r\n    _PendingRequest.prototype.url;\r\n}\r\nclass _Expectation {\r\n    /**\r\n     * @param {?} url\r\n     * @param {?} response\r\n     */\r\n    constructor(url, response) {\r\n        this.url = url;\r\n        this.response = response;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    _Expectation.prototype.url;\r\n    /** @type {?} */\r\n    _Expectation.prototype.response;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} list\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction remove(list, el) {\r\n    /** @type {?} */\r\n    const index = list.indexOf(el);\r\n    if (index > -1) {\r\n        list.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MockSchemaRegistry {\r\n    /**\r\n     * @param {?} existingProperties\r\n     * @param {?} attrPropMapping\r\n     * @param {?} existingElements\r\n     * @param {?} invalidProperties\r\n     * @param {?} invalidAttributes\r\n     */\r\n    constructor(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\r\n        this.existingProperties = existingProperties;\r\n        this.attrPropMapping = attrPropMapping;\r\n        this.existingElements = existingElements;\r\n        this.invalidProperties = invalidProperties;\r\n        this.invalidAttributes = invalidAttributes;\r\n    }\r\n    /**\r\n     * @param {?} tagName\r\n     * @param {?} property\r\n     * @param {?} schemas\r\n     * @return {?}\r\n     */\r\n    hasProperty(tagName, property, schemas) {\r\n        /** @type {?} */\r\n        const value = this.existingProperties[property];\r\n        return value === void 0 ? true : value;\r\n    }\r\n    /**\r\n     * @param {?} tagName\r\n     * @param {?} schemaMetas\r\n     * @return {?}\r\n     */\r\n    hasElement(tagName, schemaMetas) {\r\n        /** @type {?} */\r\n        const value = this.existingElements[tagName.toLowerCase()];\r\n        return value === void 0 ? true : value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    allKnownElementNames() { return Object.keys(this.existingElements); }\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} property\r\n     * @param {?} isAttribute\r\n     * @return {?}\r\n     */\r\n    securityContext(selector, property, isAttribute) {\r\n        return core.SecurityContext.NONE;\r\n    }\r\n    /**\r\n     * @param {?} attrName\r\n     * @return {?}\r\n     */\r\n    getMappedPropName(attrName) { return this.attrPropMapping[attrName] || attrName; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDefaultComponentElementName() { return 'ng-component'; }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    validateProperty(name) {\r\n        if (this.invalidProperties.indexOf(name) > -1) {\r\n            return { error: true, msg: `Binding to property '${name}' is disallowed for security reasons` };\r\n        }\r\n        else {\r\n            return { error: false };\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    validateAttribute(name) {\r\n        if (this.invalidAttributes.indexOf(name) > -1) {\r\n            return {\r\n                error: true,\r\n                msg: `Binding to attribute '${name}' is disallowed for security reasons`\r\n            };\r\n        }\r\n        else {\r\n            return { error: false };\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} propName\r\n     * @return {?}\r\n     */\r\n    normalizeAnimationStyleProperty(propName) { return propName; }\r\n    /**\r\n     * @param {?} camelCaseProp\r\n     * @param {?} userProvidedProp\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\r\n        return { error: (/** @type {?} */ (null)), value: val.toString() };\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    MockSchemaRegistry.prototype.existingProperties;\r\n    /** @type {?} */\r\n    MockSchemaRegistry.prototype.attrPropMapping;\r\n    /** @type {?} */\r\n    MockSchemaRegistry.prototype.existingElements;\r\n    /** @type {?} */\r\n    MockSchemaRegistry.prototype.invalidProperties;\r\n    /** @type {?} */\r\n    MockSchemaRegistry.prototype.invalidAttributes;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * An implementation of {\\@link DirectiveResolver} that allows overriding\r\n * various properties of directives.\r\n */\r\nclass MockDirectiveResolver extends DirectiveResolver {\r\n    /**\r\n     * @param {?} reflector\r\n     */\r\n    constructor(reflector) {\r\n        super(reflector);\r\n        this._directives = new Map();\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    resolve(type, throwIfNotFound = true) {\r\n        return this._directives.get(type) || super.resolve(type, throwIfNotFound);\r\n    }\r\n    /**\r\n     * Overrides the {\\@link core.Directive} for a directive.\r\n     * @param {?} type\r\n     * @param {?} metadata\r\n     * @return {?}\r\n     */\r\n    setDirective(type, metadata) {\r\n        this._directives.set(type, metadata);\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MockDirectiveResolver.prototype._directives;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MockNgModuleResolver extends NgModuleResolver {\r\n    /**\r\n     * @param {?} reflector\r\n     */\r\n    constructor(reflector) {\r\n        super(reflector);\r\n        this._ngModules = new Map();\r\n    }\r\n    /**\r\n     * Overrides the {\\@link NgModule} for a module.\r\n     * @param {?} type\r\n     * @param {?} metadata\r\n     * @return {?}\r\n     */\r\n    setNgModule(type, metadata) {\r\n        this._ngModules.set(type, metadata);\r\n    }\r\n    /**\r\n     * Returns the {\\@link NgModule} for a module:\r\n     * - Set the {\\@link NgModule} to the overridden view when it exists or fallback to the\r\n     * default\r\n     * `NgModuleResolver`, see `setNgModule`.\r\n     * @param {?} type\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    resolve(type, throwIfNotFound = true) {\r\n        return this._ngModules.get(type) || (/** @type {?} */ (super.resolve(type, throwIfNotFound)));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MockNgModuleResolver.prototype._ngModules;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MockPipeResolver extends PipeResolver {\r\n    /**\r\n     * @param {?} refector\r\n     */\r\n    constructor(refector) {\r\n        super(refector);\r\n        this._pipes = new Map();\r\n    }\r\n    /**\r\n     * Overrides the {\\@link Pipe} for a pipe.\r\n     * @param {?} type\r\n     * @param {?} metadata\r\n     * @return {?}\r\n     */\r\n    setPipe(type, metadata) { this._pipes.set(type, metadata); }\r\n    /**\r\n     * Returns the {\\@link Pipe} for a pipe:\r\n     * - Set the {\\@link Pipe} to the overridden view when it exists or fallback to the\r\n     * default\r\n     * `PipeResolver`, see `setPipe`.\r\n     * @param {?} type\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    resolve(type, throwIfNotFound = true) {\r\n        /** @type {?} */\r\n        let metadata = this._pipes.get(type);\r\n        if (!metadata) {\r\n            metadata = (/** @type {?} */ (super.resolve(type, throwIfNotFound)));\r\n        }\r\n        return metadata;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MockPipeResolver.prototype._pipes;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MockResourceLoader, MockSchemaRegistry, MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver };\r\n\r\n"]}