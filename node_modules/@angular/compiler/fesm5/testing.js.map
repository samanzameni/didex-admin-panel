{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/compiler/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAoBA","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __extends } from 'tslib';\r\nimport { ResourceLoader, core, DirectiveResolver, NgModuleResolver, PipeResolver } from '@angular/compiler';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\r\n * and responded to within a single test, without going to the network.\r\n */\r\nvar MockResourceLoader = /** @class */ (function (_super) {\r\n    __extends(MockResourceLoader, _super);\r\n    function MockResourceLoader() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._expectations = [];\r\n        _this._definitions = new Map();\r\n        _this._requests = [];\r\n        return _this;\r\n    }\r\n    MockResourceLoader.prototype.get = function (url) {\r\n        var request = new _PendingRequest(url);\r\n        this._requests.push(request);\r\n        return request.getPromise();\r\n    };\r\n    MockResourceLoader.prototype.hasPendingRequests = function () { return !!this._requests.length; };\r\n    /**\r\n     * Add an expectation for the given URL. Incoming requests will be checked against\r\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\r\n     * can be used to check if any expectations have not yet been met.\r\n     *\r\n     * The response given will be returned if the expectation matches.\r\n     */\r\n    MockResourceLoader.prototype.expect = function (url, response) {\r\n        var expectation = new _Expectation(url, response);\r\n        this._expectations.push(expectation);\r\n    };\r\n    /**\r\n     * Add a definition for the given URL to return the given response. Unlike expectations,\r\n     * definitions have no order and will satisfy any matching request at any time. Also\r\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\r\n     * to return an error.\r\n     */\r\n    MockResourceLoader.prototype.when = function (url, response) { this._definitions.set(url, response); };\r\n    /**\r\n     * Process pending requests and verify there are no outstanding expectations. Also fails\r\n     * if no requests are pending.\r\n     */\r\n    MockResourceLoader.prototype.flush = function () {\r\n        if (this._requests.length === 0) {\r\n            throw new Error('No pending requests to flush');\r\n        }\r\n        do {\r\n            this._processRequest(this._requests.shift());\r\n        } while (this._requests.length > 0);\r\n        this.verifyNoOutstandingExpectations();\r\n    };\r\n    /**\r\n     * Throw an exception if any expectations have not been satisfied.\r\n     */\r\n    MockResourceLoader.prototype.verifyNoOutstandingExpectations = function () {\r\n        if (this._expectations.length === 0)\r\n            return;\r\n        var urls = [];\r\n        for (var i = 0; i < this._expectations.length; i++) {\r\n            var expectation = this._expectations[i];\r\n            urls.push(expectation.url);\r\n        }\r\n        throw new Error(\"Unsatisfied requests: \" + urls.join(', '));\r\n    };\r\n    MockResourceLoader.prototype._processRequest = function (request) {\r\n        var url = request.url;\r\n        if (this._expectations.length > 0) {\r\n            var expectation = this._expectations[0];\r\n            if (expectation.url == url) {\r\n                remove(this._expectations, expectation);\r\n                request.complete(expectation.response);\r\n                return;\r\n            }\r\n        }\r\n        if (this._definitions.has(url)) {\r\n            var response = this._definitions.get(url);\r\n            request.complete(response == null ? null : response);\r\n            return;\r\n        }\r\n        throw new Error(\"Unexpected request \" + url);\r\n    };\r\n    return MockResourceLoader;\r\n}(ResourceLoader));\r\nvar _PendingRequest = /** @class */ (function () {\r\n    function _PendingRequest(url) {\r\n        var _this = this;\r\n        this.url = url;\r\n        this.promise = new Promise(function (res, rej) {\r\n            _this.resolve = res;\r\n            _this.reject = rej;\r\n        });\r\n    }\r\n    _PendingRequest.prototype.complete = function (response) {\r\n        if (response == null) {\r\n            this.reject(\"Failed to load \" + this.url);\r\n        }\r\n        else {\r\n            this.resolve(response);\r\n        }\r\n    };\r\n    _PendingRequest.prototype.getPromise = function () { return this.promise; };\r\n    return _PendingRequest;\r\n}());\r\nvar _Expectation = /** @class */ (function () {\r\n    function _Expectation(url, response) {\r\n        this.url = url;\r\n        this.response = response;\r\n    }\r\n    return _Expectation;\r\n}());\r\nfunction remove(list, el) {\r\n    var index = list.indexOf(el);\r\n    if (index > -1) {\r\n        list.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar MockSchemaRegistry = /** @class */ (function () {\r\n    function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\r\n        this.existingProperties = existingProperties;\r\n        this.attrPropMapping = attrPropMapping;\r\n        this.existingElements = existingElements;\r\n        this.invalidProperties = invalidProperties;\r\n        this.invalidAttributes = invalidAttributes;\r\n    }\r\n    MockSchemaRegistry.prototype.hasProperty = function (tagName, property, schemas) {\r\n        var value = this.existingProperties[property];\r\n        return value === void 0 ? true : value;\r\n    };\r\n    MockSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {\r\n        var value = this.existingElements[tagName.toLowerCase()];\r\n        return value === void 0 ? true : value;\r\n    };\r\n    MockSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this.existingElements); };\r\n    MockSchemaRegistry.prototype.securityContext = function (selector, property, isAttribute) {\r\n        return core.SecurityContext.NONE;\r\n    };\r\n    MockSchemaRegistry.prototype.getMappedPropName = function (attrName) { return this.attrPropMapping[attrName] || attrName; };\r\n    MockSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };\r\n    MockSchemaRegistry.prototype.validateProperty = function (name) {\r\n        if (this.invalidProperties.indexOf(name) > -1) {\r\n            return { error: true, msg: \"Binding to property '\" + name + \"' is disallowed for security reasons\" };\r\n        }\r\n        else {\r\n            return { error: false };\r\n        }\r\n    };\r\n    MockSchemaRegistry.prototype.validateAttribute = function (name) {\r\n        if (this.invalidAttributes.indexOf(name) > -1) {\r\n            return {\r\n                error: true,\r\n                msg: \"Binding to attribute '\" + name + \"' is disallowed for security reasons\"\r\n            };\r\n        }\r\n        else {\r\n            return { error: false };\r\n        }\r\n    };\r\n    MockSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { return propName; };\r\n    MockSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {\r\n        return { error: null, value: val.toString() };\r\n    };\r\n    return MockSchemaRegistry;\r\n}());\r\n\r\n/**\r\n * An implementation of {@link DirectiveResolver} that allows overriding\r\n * various properties of directives.\r\n */\r\nvar MockDirectiveResolver = /** @class */ (function (_super) {\r\n    __extends(MockDirectiveResolver, _super);\r\n    function MockDirectiveResolver(reflector) {\r\n        var _this = _super.call(this, reflector) || this;\r\n        _this._directives = new Map();\r\n        return _this;\r\n    }\r\n    MockDirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {\r\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\r\n        return this._directives.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\r\n    };\r\n    /**\r\n     * Overrides the {@link core.Directive} for a directive.\r\n     */\r\n    MockDirectiveResolver.prototype.setDirective = function (type, metadata) {\r\n        this._directives.set(type, metadata);\r\n    };\r\n    return MockDirectiveResolver;\r\n}(DirectiveResolver));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar MockNgModuleResolver = /** @class */ (function (_super) {\r\n    __extends(MockNgModuleResolver, _super);\r\n    function MockNgModuleResolver(reflector) {\r\n        var _this = _super.call(this, reflector) || this;\r\n        _this._ngModules = new Map();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Overrides the {@link NgModule} for a module.\r\n     */\r\n    MockNgModuleResolver.prototype.setNgModule = function (type, metadata) {\r\n        this._ngModules.set(type, metadata);\r\n    };\r\n    /**\r\n     * Returns the {@link NgModule} for a module:\r\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\r\n     * default\r\n     * `NgModuleResolver`, see `setNgModule`.\r\n     */\r\n    MockNgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {\r\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\r\n        return this._ngModules.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\r\n    };\r\n    return MockNgModuleResolver;\r\n}(NgModuleResolver));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar MockPipeResolver = /** @class */ (function (_super) {\r\n    __extends(MockPipeResolver, _super);\r\n    function MockPipeResolver(refector) {\r\n        var _this = _super.call(this, refector) || this;\r\n        _this._pipes = new Map();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Overrides the {@link Pipe} for a pipe.\r\n     */\r\n    MockPipeResolver.prototype.setPipe = function (type, metadata) { this._pipes.set(type, metadata); };\r\n    /**\r\n     * Returns the {@link Pipe} for a pipe:\r\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\r\n     * default\r\n     * `PipeResolver`, see `setPipe`.\r\n     */\r\n    MockPipeResolver.prototype.resolve = function (type, throwIfNotFound) {\r\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\r\n        var metadata = this._pipes.get(type);\r\n        if (!metadata) {\r\n            metadata = _super.prototype.resolve.call(this, type, throwIfNotFound);\r\n        }\r\n        return metadata;\r\n    };\r\n    return MockPipeResolver;\r\n}(PipeResolver));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MockResourceLoader, MockSchemaRegistry, MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver };\r\n\r\n"]}