{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/platform-browser/fesm2015/platform-browser.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAqw7DC,+SAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAwS8B,kCAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6FhE,gMAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+GD,4HAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsED,4KAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuJD,gqtBD,mIAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgJD,oGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmKD,uIAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4MD,8EAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqPD,mPAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyLD,+PAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6KD,yQAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0DD,gFAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2SD,oKAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0CD,qRAKC","file":"platform-browser.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { ɵparseCookieValue, PlatformLocation, DOCUMENT, isPlatformServer, ɵPLATFORM_BROWSER_ID, CommonModule } from '@angular/common';\r\nimport { ɵglobal, Injectable, Inject, InjectionToken, ApplicationInitStatus, APP_INITIALIZER, Injector, setTestabilityGetter, ApplicationRef, NgZone, getDebugNode, NgProbeToken, Optional, ViewEncapsulation, APP_ID, RendererStyleFlags2, PLATFORM_ID, ɵConsole, SecurityContext, ɵ_sanitizeHtml, ɵ_sanitizeStyle, ɵ_sanitizeUrl, PLATFORM_INITIALIZER, Sanitizer, createPlatformFactory, platformCore, ErrorHandler, ɵAPP_ROOT, RendererFactory2, Testability, NgModule, ApplicationModule, SkipSelf, ɵɵinject, ɵɵdefineInjectable, Version } from '@angular/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @type {?} */\r\nlet _DOM = (/** @type {?} */ (null));\r\n/**\r\n * @return {?}\r\n */\r\nfunction getDOM() {\r\n    return _DOM;\r\n}\r\n/**\r\n * @param {?} adapter\r\n * @return {?}\r\n */\r\nfunction setDOM(adapter) {\r\n    _DOM = adapter;\r\n}\r\n/**\r\n * @param {?} adapter\r\n * @return {?}\r\n */\r\nfunction setRootDomAdapter(adapter) {\r\n    if (!_DOM) {\r\n        _DOM = adapter;\r\n    }\r\n}\r\n/* tslint:disable:requireParameterType */\r\n/**\r\n * Provides DOM operations in an environment-agnostic way.\r\n *\r\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n * @abstract\r\n */\r\nclass DomAdapter {\r\n    constructor() {\r\n        this.resourceLoaderType = (/** @type {?} */ (null));\r\n    }\r\n    /**\r\n     * Maps attribute names to their corresponding property names for cases\r\n     * where attribute name doesn't match property name.\r\n     * @return {?}\r\n     */\r\n    get attrToPropMap() { return this._attrToPropMap; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set attrToPropMap(value) { this._attrToPropMap = value; }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    DomAdapter.prototype.resourceLoaderType;\r\n    /**\r\n     * \\@internal\r\n     * @type {?}\r\n     */\r\n    DomAdapter.prototype._attrToPropMap;\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.hasProperty = function (element, name) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setProperty = function (el, name, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getProperty = function (el, name) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} methodName\r\n     * @param {?} args\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.invoke = function (el, methodName, args) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.logError = function (error) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.log = function (error) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.logGroup = function (error) { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.logGroupEnd = function () { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} nodeA\r\n     * @param {?} nodeB\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.contains = function (nodeA, nodeB) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} templateHtml\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.parse = function (templateHtml) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.querySelector = function (el, selector) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.querySelectorAll = function (el, selector) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @param {?} listener\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.on = function (el, evt, listener) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @param {?} listener\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.dispatchEvent = function (el, evt) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} eventType\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createMouseEvent = function (eventType) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} eventType\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createEvent = function (eventType) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.preventDefault = function (evt) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.isPrevented = function (evt) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getInnerHTML = function (el) { };\r\n    /**\r\n     * Returns content if el is a <template> element, null otherwise.\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getTemplateContent = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getOuterHTML = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.nodeName = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.nodeValue = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.type = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.content = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.firstChild = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.nextSibling = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.parentElement = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.childNodes = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.childNodesAsList = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.clearNodes = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.appendChild = function (el, node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.removeChild = function (el, node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} newNode\r\n     * @param {?} oldNode\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.remove = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} parent\r\n     * @param {?} el\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.insertAfter = function (parent, el, node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setInnerHTML = function (el, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getText = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setText = function (el, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getValue = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setValue = function (el, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getChecked = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setChecked = function (el, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createComment = function (text) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createTemplate = function (html) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} tagName\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createElement = function (tagName, doc) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} ns\r\n     * @param {?} tagName\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} text\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createTextNode = function (text, doc) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} attrName\r\n     * @param {?} attrValue\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} css\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createStyleElement = function (css, doc) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createShadowRoot = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getShadowRoot = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getHost = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getDistributedNodes = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.clone = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getElementsByClassName = function (element, name) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getElementsByTagName = function (element, name) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.classList = function (element) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.addClass = function (element, className) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.removeClass = function (element, className) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.hasClass = function (element, className) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @param {?} styleValue\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.removeStyle = function (element, styleName) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getStyle = function (element, styleName) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @param {?=} styleValue\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.tagName = function (element) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.attributeMap = function (element) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.hasAttribute = function (element, attribute) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getAttribute = function (element, attribute) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setAttribute = function (element, name, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.removeAttribute = function (element, attribute) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.templateAwareRoot = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.createHtmlDocument = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getDefaultDocument = function () { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getBoundingClientRect = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} doc\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getTitle = function (doc) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} doc\r\n     * @param {?} newTitle\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setTitle = function (doc, newTitle) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} n\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.elementMatches = function (n, selector) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.isTemplateElement = function (el) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.isTextNode = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.isCommentNode = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.isElementNode = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.hasShadowRoot = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.isShadowRoot = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.importIntoDoc = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.adoptNode = function (node) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getHref = function (element) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getEventKey = function (event) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} baseUrl\r\n     * @param {?} href\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.supportsDOMEvents = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.supportsNativeShadowDOM = function () { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} doc\r\n     * @param {?} target\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getHistory = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getLocation = function () { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} doc\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getBaseHref = function (doc) { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.resetBaseElement = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getUserAgent = function () { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setData = function (element, name, value) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getComputedStyle = function (element) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getData = function (element, name) { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.supportsWebAnimation = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.performanceNow = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getAnimationPrefix = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getTransitionEnd = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.supportsAnimation = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.supportsCookies = function () { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.getCookie = function (name) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomAdapter.prototype.setCookie = function (name, value) { };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Provides DOM operations in any browser environment.\r\n *\r\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n * @abstract\r\n */\r\nclass GenericBrowserDomAdapter extends DomAdapter {\r\n    constructor() {\r\n        super();\r\n        this._animationPrefix = null;\r\n        this._transitionEnd = null;\r\n        try {\r\n            /** @type {?} */\r\n            const element = this.createElement('div', document);\r\n            if (this.getStyle(element, 'animationName') != null) {\r\n                this._animationPrefix = '';\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\r\n                for (let i = 0; i < domPrefixes.length; i++) {\r\n                    if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\r\n                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            /** @type {?} */\r\n            const transEndEventNames = {\r\n                WebkitTransition: 'webkitTransitionEnd',\r\n                MozTransition: 'transitionend',\r\n                OTransition: 'oTransitionEnd otransitionend',\r\n                transition: 'transitionend'\r\n            };\r\n            Object.keys(transEndEventNames).forEach((/**\r\n             * @param {?} key\r\n             * @return {?}\r\n             */\r\n            (key) => {\r\n                if (this.getStyle(element, key) != null) {\r\n                    this._transitionEnd = transEndEventNames[key];\r\n                }\r\n            }));\r\n        }\r\n        catch (_a) {\r\n            this._animationPrefix = null;\r\n            this._transitionEnd = null;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getDistributedNodes(el) { return ((/** @type {?} */ (el))).getDistributedNodes(); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} baseUrl\r\n     * @param {?} href\r\n     * @return {?}\r\n     */\r\n    resolveAndSetHref(el, baseUrl, href) {\r\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsDOMEvents() { return true; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsNativeShadowDOM() {\r\n        return typeof ((/** @type {?} */ (document.body))).createShadowRoot === 'function';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAnimationPrefix() { return this._animationPrefix ? this._animationPrefix : ''; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTransitionEnd() { return this._transitionEnd ? this._transitionEnd : ''; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsAnimation() {\r\n        return this._animationPrefix != null && this._transitionEnd != null;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    GenericBrowserDomAdapter.prototype._animationPrefix;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    GenericBrowserDomAdapter.prototype._transitionEnd;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst _attrToPropMap = {\r\n    'class': 'className',\r\n    'innerHtml': 'innerHTML',\r\n    'readonly': 'readOnly',\r\n    'tabindex': 'tabIndex',\r\n};\r\n/** @type {?} */\r\nconst DOM_KEY_LOCATION_NUMPAD = 3;\r\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\r\n/** @type {?} */\r\nconst _keyMap = {\r\n    // The following values are here for cross-browser compatibility and to match the W3C standard\r\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\r\n    '\\b': 'Backspace',\r\n    '\\t': 'Tab',\r\n    '\\x7F': 'Delete',\r\n    '\\x1B': 'Escape',\r\n    'Del': 'Delete',\r\n    'Esc': 'Escape',\r\n    'Left': 'ArrowLeft',\r\n    'Right': 'ArrowRight',\r\n    'Up': 'ArrowUp',\r\n    'Down': 'ArrowDown',\r\n    'Menu': 'ContextMenu',\r\n    'Scroll': 'ScrollLock',\r\n    'Win': 'OS'\r\n};\r\n// There is a bug in Chrome for numeric keypad keys:\r\n// https://code.google.com/p/chromium/issues/detail?id=155654\r\n// 1, 2, 3 ... are reported as A, B, C ...\r\n/** @type {?} */\r\nconst _chromeNumKeyPadMap = {\r\n    'A': '1',\r\n    'B': '2',\r\n    'C': '3',\r\n    'D': '4',\r\n    'E': '5',\r\n    'F': '6',\r\n    'G': '7',\r\n    'H': '8',\r\n    'I': '9',\r\n    'J': '*',\r\n    'K': '+',\r\n    'M': '-',\r\n    'N': '.',\r\n    'O': '/',\r\n    '\\x60': '0',\r\n    '\\x90': 'NumLock'\r\n};\r\nconst ɵ0 = /**\r\n * @return {?}\r\n */\r\n() => {\r\n    if (ɵglobal['Node']) {\r\n        return ɵglobal['Node'].prototype.contains || (/**\r\n         * @this {?}\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        function (node) {\r\n            return !!(this.compareDocumentPosition(node) & 16);\r\n        });\r\n    }\r\n    return (/** @type {?} */ (undefined));\r\n};\r\n/** @type {?} */\r\nconst nodeContains = ((ɵ0))();\r\n/**\r\n * A `DomAdapter` powered by full browser DOM APIs.\r\n *\r\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n */\r\n/* tslint:disable:requireParameterType no-console */\r\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\r\n    /**\r\n     * @param {?} templateHtml\r\n     * @return {?}\r\n     */\r\n    parse(templateHtml) { throw new Error('parse not implemented'); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    hasProperty(element, name) { return name in element; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setProperty(el, name, value) { ((/** @type {?} */ (el)))[name] = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getProperty(el, name) { return ((/** @type {?} */ (el)))[name]; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} methodName\r\n     * @param {?} args\r\n     * @return {?}\r\n     */\r\n    invoke(el, methodName, args) { ((/** @type {?} */ (el)))[methodName](...args); }\r\n    // TODO(tbosch): move this into a separate environment class once we have it\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    logError(error) {\r\n        if (window.console) {\r\n            if (console.error) {\r\n                console.error(error);\r\n            }\r\n            else {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    log(error) {\r\n        if (window.console) {\r\n            window.console.log && window.console.log(error);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    logGroup(error) {\r\n        if (window.console) {\r\n            window.console.group && window.console.group(error);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    logGroupEnd() {\r\n        if (window.console) {\r\n            window.console.groupEnd && window.console.groupEnd();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get attrToPropMap() { return _attrToPropMap; }\r\n    /**\r\n     * @param {?} nodeA\r\n     * @param {?} nodeB\r\n     * @return {?}\r\n     */\r\n    contains(nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    querySelector(el, selector) { return el.querySelector(selector); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    querySelectorAll(el, selector) { return el.querySelectorAll(selector); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @param {?} listener\r\n     * @return {?}\r\n     */\r\n    on(el, evt, listener) { el.addEventListener(evt, listener, false); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @param {?} listener\r\n     * @return {?}\r\n     */\r\n    onAndCancel(el, evt, listener) {\r\n        el.addEventListener(evt, listener, false);\r\n        // Needed to follow Dart's subscription semantic, until fix of\r\n        // https://code.google.com/p/dart/issues/detail?id=17406\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        () => { el.removeEventListener(evt, listener, false); });\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    dispatchEvent(el, evt) { el.dispatchEvent(evt); }\r\n    /**\r\n     * @param {?} eventType\r\n     * @return {?}\r\n     */\r\n    createMouseEvent(eventType) {\r\n        /** @type {?} */\r\n        const evt = this.getDefaultDocument().createEvent('MouseEvent');\r\n        evt.initEvent(eventType, true, true);\r\n        return evt;\r\n    }\r\n    /**\r\n     * @param {?} eventType\r\n     * @return {?}\r\n     */\r\n    createEvent(eventType) {\r\n        /** @type {?} */\r\n        const evt = this.getDefaultDocument().createEvent('Event');\r\n        evt.initEvent(eventType, true, true);\r\n        return evt;\r\n    }\r\n    /**\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    preventDefault(evt) {\r\n        evt.preventDefault();\r\n        evt.returnValue = false;\r\n    }\r\n    /**\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    isPrevented(evt) {\r\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getInnerHTML(el) { return el.innerHTML; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getTemplateContent(el) {\r\n        return 'content' in el && this.isTemplateElement(el) ? ((/** @type {?} */ (el))).content : null;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getOuterHTML(el) { return el.outerHTML; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nodeName(node) { return node.nodeName; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nodeValue(node) { return node.nodeValue; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    type(node) { return node.type; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    content(node) {\r\n        if (this.hasProperty(node, 'content')) {\r\n            return ((/** @type {?} */ (node))).content;\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    firstChild(el) { return el.firstChild; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    nextSibling(el) { return el.nextSibling; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    parentElement(el) { return el.parentNode; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    childNodes(el) { return el.childNodes; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    childNodesAsList(el) {\r\n        /** @type {?} */\r\n        const childNodes = el.childNodes;\r\n        /** @type {?} */\r\n        const res = new Array(childNodes.length);\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            res[i] = childNodes[i];\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    clearNodes(el) {\r\n        while (el.firstChild) {\r\n            el.removeChild(el.firstChild);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    appendChild(el, node) { el.appendChild(node); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    removeChild(el, node) { el.removeChild(node); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} newChild\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    replaceChild(el, newChild, oldChild) { el.replaceChild(newChild, oldChild); }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    remove(node) {\r\n        if (node.parentNode) {\r\n            node.parentNode.removeChild(node);\r\n        }\r\n        return node;\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    insertBefore(parent, ref, node) { parent.insertBefore(node, ref); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    insertAllBefore(parent, ref, nodes) {\r\n        nodes.forEach((/**\r\n         * @param {?} n\r\n         * @return {?}\r\n         */\r\n        (n) => parent.insertBefore(n, ref)));\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    insertAfter(parent, ref, node) { parent.insertBefore(node, ref.nextSibling); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setInnerHTML(el, value) { el.innerHTML = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getText(el) { return el.textContent; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setText(el, value) { el.textContent = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getValue(el) { return el.value; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setValue(el, value) { el.value = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getChecked(el) { return el.checked; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setChecked(el, value) { el.checked = value; }\r\n    /**\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    createComment(text) { return this.getDefaultDocument().createComment(text); }\r\n    /**\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    createTemplate(html) {\r\n        /** @type {?} */\r\n        const t = this.getDefaultDocument().createElement('template');\r\n        t.innerHTML = html;\r\n        return t;\r\n    }\r\n    /**\r\n     * @param {?} tagName\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createElement(tagName, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        return doc.createElement(tagName);\r\n    }\r\n    /**\r\n     * @param {?} ns\r\n     * @param {?} tagName\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createElementNS(ns, tagName, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        return doc.createElementNS(ns, tagName);\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createTextNode(text, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        return doc.createTextNode(text);\r\n    }\r\n    /**\r\n     * @param {?} attrName\r\n     * @param {?} attrValue\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createScriptTag(attrName, attrValue, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        /** @type {?} */\r\n        const el = (/** @type {?} */ (doc.createElement('SCRIPT')));\r\n        el.setAttribute(attrName, attrValue);\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} css\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createStyleElement(css, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        /** @type {?} */\r\n        const style = (/** @type {?} */ (doc.createElement('style')));\r\n        this.appendChild(style, this.createTextNode(css, doc));\r\n        return style;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    createShadowRoot(el) { return ((/** @type {?} */ (el))).createShadowRoot(); }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getShadowRoot(el) { return ((/** @type {?} */ (el))).shadowRoot; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getHost(el) { return ((/** @type {?} */ (el))).host; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    clone(node) { return node.cloneNode(true); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getElementsByClassName(element, name) {\r\n        return element.getElementsByClassName(name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getElementsByTagName(element, name) {\r\n        return element.getElementsByTagName(name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    classList(element) { return Array.prototype.slice.call(element.classList, 0); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    addClass(element, className) { element.classList.add(className); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    removeClass(element, className) { element.classList.remove(className); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    hasClass(element, className) {\r\n        return element.classList.contains(className);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @param {?} styleValue\r\n     * @return {?}\r\n     */\r\n    setStyle(element, styleName, styleValue) {\r\n        element.style[styleName] = styleValue;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} stylename\r\n     * @return {?}\r\n     */\r\n    removeStyle(element, stylename) {\r\n        // IE requires '' instead of null\r\n        // see https://github.com/angular/angular/issues/7916\r\n        element.style[stylename] = '';\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} stylename\r\n     * @return {?}\r\n     */\r\n    getStyle(element, stylename) { return element.style[stylename]; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @param {?=} styleValue\r\n     * @return {?}\r\n     */\r\n    hasStyle(element, styleName, styleValue) {\r\n        /** @type {?} */\r\n        const value = this.getStyle(element, styleName) || '';\r\n        return styleValue ? value == styleValue : value.length > 0;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    tagName(element) { return element.tagName; }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    attributeMap(element) {\r\n        /** @type {?} */\r\n        const res = new Map();\r\n        /** @type {?} */\r\n        const elAttrs = element.attributes;\r\n        for (let i = 0; i < elAttrs.length; i++) {\r\n            /** @type {?} */\r\n            const attrib = elAttrs.item(i);\r\n            res.set(attrib.name, attrib.value);\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    hasAttribute(element, attribute) {\r\n        return element.hasAttribute(attribute);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    hasAttributeNS(element, ns, attribute) {\r\n        return element.hasAttributeNS(ns, attribute);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    getAttribute(element, attribute) {\r\n        return element.getAttribute(attribute);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getAttributeNS(element, ns, name) {\r\n        return element.getAttributeNS(ns, name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setAttribute(element, name, value) { element.setAttribute(name, value); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setAttributeNS(element, ns, name, value) {\r\n        element.setAttributeNS(ns, name, value);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    removeAttribute(element, attribute) { element.removeAttribute(attribute); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    removeAttributeNS(element, ns, name) {\r\n        element.removeAttributeNS(ns, name);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    templateAwareRoot(el) { return this.isTemplateElement(el) ? this.content(el) : el; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    createHtmlDocument() {\r\n        return document.implementation.createHTMLDocument('fakeTitle');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDefaultDocument() { return document; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getBoundingClientRect(el) {\r\n        try {\r\n            return el.getBoundingClientRect();\r\n        }\r\n        catch (_a) {\r\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} doc\r\n     * @return {?}\r\n     */\r\n    getTitle(doc) { return doc.title; }\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} newTitle\r\n     * @return {?}\r\n     */\r\n    setTitle(doc, newTitle) { doc.title = newTitle || ''; }\r\n    /**\r\n     * @param {?} n\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    elementMatches(n, selector) {\r\n        if (this.isElementNode(n)) {\r\n            return n.matches && n.matches(selector) ||\r\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\r\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    isTemplateElement(el) {\r\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isTextNode(node) { return node.nodeType === Node.TEXT_NODE; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isCommentNode(node) { return node.nodeType === Node.COMMENT_NODE; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isElementNode(node) { return node.nodeType === Node.ELEMENT_NODE; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    hasShadowRoot(node) {\r\n        return node.shadowRoot != null && node instanceof HTMLElement;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isShadowRoot(node) { return node instanceof DocumentFragment; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    importIntoDoc(node) { return document.importNode(this.templateAwareRoot(node), true); }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    adoptNode(node) { return document.adoptNode(node); }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getHref(el) { return (/** @type {?} */ (el.getAttribute('href'))); }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    getEventKey(event) {\r\n        /** @type {?} */\r\n        let key = event.key;\r\n        if (key == null) {\r\n            key = event.keyIdentifier;\r\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\r\n            // Safari cf\r\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\r\n            if (key == null) {\r\n                return 'Unidentified';\r\n            }\r\n            if (key.startsWith('U+')) {\r\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\r\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\r\n                    // There is a bug in Chrome for numeric keypad keys:\r\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\r\n                    // 1, 2, 3 ... are reported as A, B, C ...\r\n                    key = ((/** @type {?} */ (_chromeNumKeyPadMap)))[key];\r\n                }\r\n            }\r\n        }\r\n        return _keyMap[key] || key;\r\n    }\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} target\r\n     * @return {?}\r\n     */\r\n    getGlobalEventTarget(doc, target) {\r\n        if (target === 'window') {\r\n            return window;\r\n        }\r\n        if (target === 'document') {\r\n            return doc;\r\n        }\r\n        if (target === 'body') {\r\n            return doc.body;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getHistory() { return window.history; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getLocation() { return window.location; }\r\n    /**\r\n     * @param {?} doc\r\n     * @return {?}\r\n     */\r\n    getBaseHref(doc) {\r\n        /** @type {?} */\r\n        const href = getBaseElementHref();\r\n        return href == null ? null : relativePath(href);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resetBaseElement() { baseElement = null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getUserAgent() { return window.navigator.userAgent; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setData(element, name, value) {\r\n        this.setAttribute(element, 'data-' + name, value);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getData(element, name) {\r\n        return this.getAttribute(element, 'data-' + name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    getComputedStyle(element) { return getComputedStyle(element); }\r\n    // TODO(tbosch): move this into a separate environment class once we have it\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsWebAnimation() {\r\n        return typeof ((/** @type {?} */ (Element))).prototype['animate'] === 'function';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    performanceNow() {\r\n        // performance.now() is not available in all browsers, see\r\n        // http://caniuse.com/#search=performance.now\r\n        return window.performance && window.performance.now ? window.performance.now() :\r\n            new Date().getTime();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsCookies() { return true; }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getCookie(name) { return ɵparseCookieValue(document.cookie, name); }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setCookie(name, value) {\r\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\r\n        // not clear other cookies.\r\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\r\n    }\r\n}\r\n/** @type {?} */\r\nlet baseElement = null;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getBaseElementHref() {\r\n    if (!baseElement) {\r\n        baseElement = (/** @type {?} */ (document.querySelector('base')));\r\n        if (!baseElement) {\r\n            return null;\r\n        }\r\n    }\r\n    return baseElement.getAttribute('href');\r\n}\r\n// based on urlUtils.js in AngularJS 1\r\n/** @type {?} */\r\nlet urlParsingNode;\r\n/**\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction relativePath(url) {\r\n    if (!urlParsingNode) {\r\n        urlParsingNode = document.createElement('a');\r\n    }\r\n    urlParsingNode.setAttribute('href', url);\r\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\r\n        '/' + urlParsingNode.pathname;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction supportsState() {\r\n    return !!window.history.pushState;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\r\n * This class should not be used directly by an application developer. Instead, use\r\n * {\\@link Location}.\r\n */\r\nclass BrowserPlatformLocation extends PlatformLocation {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        super();\r\n        this._doc = _doc;\r\n        this._init();\r\n    }\r\n    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _init() {\r\n        ((/** @type {?} */ (this))).location = getDOM().getLocation();\r\n        this._history = getDOM().getHistory();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getBaseHrefFromDOM() { return (/** @type {?} */ (getDOM().getBaseHref(this._doc))); }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    onPopState(fn) {\r\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    onHashChange(fn) {\r\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get href() { return this.location.href; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get protocol() { return this.location.protocol; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get hostname() { return this.location.hostname; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get port() { return this.location.port; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get pathname() { return this.location.pathname; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get search() { return this.location.search; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get hash() { return this.location.hash; }\r\n    /**\r\n     * @param {?} newPath\r\n     * @return {?}\r\n     */\r\n    set pathname(newPath) { this.location.pathname = newPath; }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    pushState(state, title, url) {\r\n        if (supportsState()) {\r\n            this._history.pushState(state, title, url);\r\n        }\r\n        else {\r\n            this.location.hash = url;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    replaceState(state, title, url) {\r\n        if (supportsState()) {\r\n            this._history.replaceState(state, title, url);\r\n        }\r\n        else {\r\n            this.location.hash = url;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    forward() { this._history.forward(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    back() { this._history.back(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getState() { return this._history.state; }\r\n}\r\nBrowserPlatformLocation.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nBrowserPlatformLocation.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nif (false) {\r\n    /** @type {?} */\r\n    BrowserPlatformLocation.prototype.location;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BrowserPlatformLocation.prototype._history;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BrowserPlatformLocation.prototype._doc;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * An id that identifies a particular application being bootstrapped, that should\r\n * match across the client/server boundary.\r\n * @type {?}\r\n */\r\nconst TRANSITION_ID = new InjectionToken('TRANSITION_ID');\r\n/**\r\n * @param {?} transitionId\r\n * @param {?} document\r\n * @param {?} injector\r\n * @return {?}\r\n */\r\nfunction appInitializerFactory(transitionId, document, injector) {\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    () => {\r\n        // Wait for all application initializers to be completed before removing the styles set by\r\n        // the server.\r\n        injector.get(ApplicationInitStatus).donePromise.then((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const dom = getDOM();\r\n            /** @type {?} */\r\n            const styles = Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\r\n            styles.filter((/**\r\n             * @param {?} el\r\n             * @return {?}\r\n             */\r\n            el => dom.getAttribute(el, 'ng-transition') === transitionId))\r\n                .forEach((/**\r\n             * @param {?} el\r\n             * @return {?}\r\n             */\r\n            el => dom.remove(el)));\r\n        }));\r\n    });\r\n}\r\n/** @type {?} */\r\nconst SERVER_TRANSITION_PROVIDERS = [\r\n    {\r\n        provide: APP_INITIALIZER,\r\n        useFactory: appInitializerFactory,\r\n        deps: [TRANSITION_ID, DOCUMENT, Injector],\r\n        multi: true\r\n    },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass BrowserGetTestability {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static init() { setTestabilityGetter(new BrowserGetTestability()); }\r\n    /**\r\n     * @param {?} registry\r\n     * @return {?}\r\n     */\r\n    addToWindow(registry) {\r\n        ɵglobal['getAngularTestability'] = (/**\r\n         * @param {?} elem\r\n         * @param {?=} findInAncestors\r\n         * @return {?}\r\n         */\r\n        (elem, findInAncestors = true) => {\r\n            /** @type {?} */\r\n            const testability = registry.findTestabilityInTree(elem, findInAncestors);\r\n            if (testability == null) {\r\n                throw new Error('Could not find testability for element.');\r\n            }\r\n            return testability;\r\n        });\r\n        ɵglobal['getAllAngularTestabilities'] = (/**\r\n         * @return {?}\r\n         */\r\n        () => registry.getAllTestabilities());\r\n        ɵglobal['getAllAngularRootElements'] = (/**\r\n         * @return {?}\r\n         */\r\n        () => registry.getAllRootElements());\r\n        /** @type {?} */\r\n        const whenAllStable = (/**\r\n         * @param {?} callback\r\n         * @return {?}\r\n         */\r\n        (callback /** TODO #9100 */) => {\r\n            /** @type {?} */\r\n            const testabilities = ɵglobal['getAllAngularTestabilities']();\r\n            /** @type {?} */\r\n            let count = testabilities.length;\r\n            /** @type {?} */\r\n            let didWork = false;\r\n            /** @type {?} */\r\n            const decrement = (/**\r\n             * @param {?} didWork_\r\n             * @return {?}\r\n             */\r\n            function (didWork_ /** TODO #9100 */) {\r\n                didWork = didWork || didWork_;\r\n                count--;\r\n                if (count == 0) {\r\n                    callback(didWork);\r\n                }\r\n            });\r\n            testabilities.forEach((/**\r\n             * @param {?} testability\r\n             * @return {?}\r\n             */\r\n            function (testability /** TODO #9100 */) {\r\n                testability.whenStable(decrement);\r\n            }));\r\n        });\r\n        if (!ɵglobal['frameworkStabilizers']) {\r\n            ɵglobal['frameworkStabilizers'] = [];\r\n        }\r\n        ɵglobal['frameworkStabilizers'].push(whenAllStable);\r\n    }\r\n    /**\r\n     * @param {?} registry\r\n     * @param {?} elem\r\n     * @param {?} findInAncestors\r\n     * @return {?}\r\n     */\r\n    findTestabilityInTree(registry, elem, findInAncestors) {\r\n        if (elem == null) {\r\n            return null;\r\n        }\r\n        /** @type {?} */\r\n        const t = registry.getTestability(elem);\r\n        if (t != null) {\r\n            return t;\r\n        }\r\n        else if (!findInAncestors) {\r\n            return null;\r\n        }\r\n        if (getDOM().isShadowRoot(elem)) {\r\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\r\n        }\r\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\r\n/** @type {?} */\r\nconst DASH_CASE_REGEXP = /-([a-z])/g;\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction camelCaseToDashCase(input) {\r\n    return input.replace(CAMEL_CASE_REGEXP, (/**\r\n     * @param {...?} m\r\n     * @return {?}\r\n     */\r\n    (...m) => '-' + m[1].toLowerCase()));\r\n}\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction dashCaseToCamelCase(input) {\r\n    return input.replace(DASH_CASE_REGEXP, (/**\r\n     * @param {...?} m\r\n     * @return {?}\r\n     */\r\n    (...m) => m[1].toUpperCase()));\r\n}\r\n/**\r\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\r\n * `name` is `'probe'`.\r\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\r\n * global `ng` object.\r\n * @param {?} value The value to export.\r\n * @return {?}\r\n */\r\nfunction exportNgVar(name, value) {\r\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\r\n        // Note: we can't export `ng` when using closure enhanced optimization as:\r\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\r\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\r\n        //   for typings for angularJS (via `goog.provide('ng....')`).\r\n        /** @type {?} */\r\n        const ng = ɵglobal['ng'] = ((/** @type {?} */ (ɵglobal['ng']))) || {};\r\n        ng[name] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nconst ɵ0$1 = /**\r\n * @return {?}\r\n */\r\n() => ({\r\n    'ApplicationRef': ApplicationRef,\r\n    'NgZone': NgZone,\r\n});\r\n/** @type {?} */\r\nconst CORE_TOKENS = ((ɵ0$1))();\r\n/** @type {?} */\r\nconst INSPECT_GLOBAL_NAME = 'probe';\r\n/** @type {?} */\r\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\r\n/**\r\n * Returns a {\\@link DebugElement} for the given native DOM element, or\r\n * null if the given native element does not have an Angular view associated\r\n * with it.\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction inspectNativeElement(element) {\r\n    return getDebugNode(element);\r\n}\r\n/**\r\n * @param {?} coreTokens\r\n * @return {?}\r\n */\r\nfunction _createNgProbe(coreTokens) {\r\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\r\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    () => inspectNativeElement);\r\n}\r\n/**\r\n * @param {?} tokens\r\n * @return {?}\r\n */\r\nfunction _ngProbeTokensToMap(tokens) {\r\n    return tokens.reduce((/**\r\n     * @param {?} prev\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    (prev, t) => (prev[t.name] = t.token, prev)), {});\r\n}\r\n/**\r\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\r\n * with more robust functionality.\r\n *\r\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\r\n * tree-shaking properly.\r\n * @type {?}\r\n */\r\nconst ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];\r\n/**\r\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\r\n * @type {?}\r\n */\r\nconst ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [\r\n    {\r\n        provide: APP_INITIALIZER,\r\n        useFactory: _createNgProbe,\r\n        deps: [\r\n            [NgProbeToken, new Optional()],\r\n        ],\r\n        multi: true,\r\n    },\r\n];\r\n/** @type {?} */\r\nconst ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__PRE_R3__;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The injection token for the event-manager plug-in service.\r\n *\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\r\n/**\r\n * An injectable service that provides event management for Angular\r\n * through a browser plug-in.\r\n *\r\n * \\@publicApi\r\n */\r\nclass EventManager {\r\n    /**\r\n     * Initializes an instance of the event-manager service.\r\n     * @param {?} plugins\r\n     * @param {?} _zone\r\n     */\r\n    constructor(plugins, _zone) {\r\n        this._zone = _zone;\r\n        this._eventNameToPlugin = new Map();\r\n        plugins.forEach((/**\r\n         * @template THIS\r\n         * @this {THIS}\r\n         * @param {?} p\r\n         * @return {THIS}\r\n         */\r\n        p => p.manager = this));\r\n        this._plugins = plugins.slice().reverse();\r\n    }\r\n    /**\r\n     * Registers a handler for a specific element and event.\r\n     *\r\n     * @param {?} element The HTML element to receive event notifications.\r\n     * @param {?} eventName The name of the event to listen for.\r\n     * @param {?} handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @return {?} A callback function that can be used to remove the handler.\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        /** @type {?} */\r\n        const plugin = this._findPluginFor(eventName);\r\n        return plugin.addEventListener(element, eventName, handler);\r\n    }\r\n    /**\r\n     * Registers a global handler for an event in a target view.\r\n     *\r\n     * @param {?} target A target for global event notifications. One of \"window\", \"document\", or \"body\".\r\n     * @param {?} eventName The name of the event to listen for.\r\n     * @param {?} handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @return {?} A callback function that can be used to remove the handler.\r\n     */\r\n    addGlobalEventListener(target, eventName, handler) {\r\n        /** @type {?} */\r\n        const plugin = this._findPluginFor(eventName);\r\n        return plugin.addGlobalEventListener(target, eventName, handler);\r\n    }\r\n    /**\r\n     * Retrieves the compilation zone in which event listeners are registered.\r\n     * @return {?}\r\n     */\r\n    getZone() { return this._zone; }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    _findPluginFor(eventName) {\r\n        /** @type {?} */\r\n        const plugin = this._eventNameToPlugin.get(eventName);\r\n        if (plugin) {\r\n            return plugin;\r\n        }\r\n        /** @type {?} */\r\n        const plugins = this._plugins;\r\n        for (let i = 0; i < plugins.length; i++) {\r\n            /** @type {?} */\r\n            const plugin = plugins[i];\r\n            if (plugin.supports(eventName)) {\r\n                this._eventNameToPlugin.set(eventName, plugin);\r\n                return plugin;\r\n            }\r\n        }\r\n        throw new Error(`No event manager plugin found for event ${eventName}`);\r\n    }\r\n}\r\nEventManager.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nEventManager.ctorParameters = () => [\r\n    { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] }] },\r\n    { type: NgZone }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    EventManager.prototype._plugins;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    EventManager.prototype._eventNameToPlugin;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    EventManager.prototype._zone;\r\n}\r\n/**\r\n * @abstract\r\n */\r\nclass EventManagerPlugin {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        this._doc = _doc;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addGlobalEventListener(element, eventName, handler) {\r\n        /** @type {?} */\r\n        const target = getDOM().getGlobalEventTarget(this._doc, element);\r\n        if (!target) {\r\n            throw new Error(`Unsupported event target ${target} for event ${eventName}`);\r\n        }\r\n        return this.addEventListener(target, eventName, handler);\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    EventManagerPlugin.prototype.manager;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    EventManagerPlugin.prototype._doc;\r\n    /**\r\n     * @abstract\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    EventManagerPlugin.prototype.supports = function (eventName) { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass SharedStylesHost {\r\n    constructor() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._stylesSet = new Set();\r\n    }\r\n    /**\r\n     * @param {?} styles\r\n     * @return {?}\r\n     */\r\n    addStyles(styles) {\r\n        /** @type {?} */\r\n        const additions = new Set();\r\n        styles.forEach((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        style => {\r\n            if (!this._stylesSet.has(style)) {\r\n                this._stylesSet.add(style);\r\n                additions.add(style);\r\n            }\r\n        }));\r\n        this.onStylesAdded(additions);\r\n    }\r\n    /**\r\n     * @param {?} additions\r\n     * @return {?}\r\n     */\r\n    onStylesAdded(additions) { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAllStyles() { return Array.from(this._stylesSet); }\r\n}\r\nSharedStylesHost.decorators = [\r\n    { type: Injectable }\r\n];\r\nif (false) {\r\n    /**\r\n     * \\@internal\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    SharedStylesHost.prototype._stylesSet;\r\n}\r\nclass DomSharedStylesHost extends SharedStylesHost {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        super();\r\n        this._doc = _doc;\r\n        this._hostNodes = new Set();\r\n        this._styleNodes = new Set();\r\n        this._hostNodes.add(_doc.head);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} styles\r\n     * @param {?} host\r\n     * @return {?}\r\n     */\r\n    _addStylesToHost(styles, host) {\r\n        styles.forEach((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        (style) => {\r\n            /** @type {?} */\r\n            const styleEl = this._doc.createElement('style');\r\n            styleEl.textContent = style;\r\n            this._styleNodes.add(host.appendChild(styleEl));\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} hostNode\r\n     * @return {?}\r\n     */\r\n    addHost(hostNode) {\r\n        this._addStylesToHost(this._stylesSet, hostNode);\r\n        this._hostNodes.add(hostNode);\r\n    }\r\n    /**\r\n     * @param {?} hostNode\r\n     * @return {?}\r\n     */\r\n    removeHost(hostNode) { this._hostNodes.delete(hostNode); }\r\n    /**\r\n     * @param {?} additions\r\n     * @return {?}\r\n     */\r\n    onStylesAdded(additions) {\r\n        this._hostNodes.forEach((/**\r\n         * @param {?} hostNode\r\n         * @return {?}\r\n         */\r\n        hostNode => this._addStylesToHost(additions, hostNode)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this._styleNodes.forEach((/**\r\n     * @param {?} styleNode\r\n     * @return {?}\r\n     */\r\n    styleNode => getDOM().remove(styleNode))); }\r\n}\r\nDomSharedStylesHost.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nDomSharedStylesHost.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomSharedStylesHost.prototype._hostNodes;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomSharedStylesHost.prototype._styleNodes;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomSharedStylesHost.prototype._doc;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NAMESPACE_URIS = {\r\n    'svg': 'http://www.w3.org/2000/svg',\r\n    'xhtml': 'http://www.w3.org/1999/xhtml',\r\n    'xlink': 'http://www.w3.org/1999/xlink',\r\n    'xml': 'http://www.w3.org/XML/1998/namespace',\r\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\r\n};\r\n/** @type {?} */\r\nconst COMPONENT_REGEX = /%COMP%/g;\r\n/** @type {?} */\r\nconst COMPONENT_VARIABLE = '%COMP%';\r\n/** @type {?} */\r\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\r\n/** @type {?} */\r\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\r\n/**\r\n * @param {?} componentShortId\r\n * @return {?}\r\n */\r\nfunction shimContentAttribute(componentShortId) {\r\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\r\n}\r\n/**\r\n * @param {?} componentShortId\r\n * @return {?}\r\n */\r\nfunction shimHostAttribute(componentShortId) {\r\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\r\n}\r\n/**\r\n * @param {?} compId\r\n * @param {?} styles\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction flattenStyles(compId, styles, target) {\r\n    for (let i = 0; i < styles.length; i++) {\r\n        /** @type {?} */\r\n        let style = styles[i];\r\n        if (Array.isArray(style)) {\r\n            flattenStyles(compId, style, target);\r\n        }\r\n        else {\r\n            style = style.replace(COMPONENT_REGEX, compId);\r\n            target.push(style);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * @param {?} eventHandler\r\n * @return {?}\r\n */\r\nfunction decoratePreventDefault(eventHandler) {\r\n    return (/**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    (event) => {\r\n        /** @type {?} */\r\n        const allowDefaultBehavior = eventHandler(event);\r\n        if (allowDefaultBehavior === false) {\r\n            // TODO(tbosch): move preventDefault into event plugins...\r\n            event.preventDefault();\r\n            event.returnValue = false;\r\n        }\r\n    });\r\n}\r\nclass DomRendererFactory2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     * @param {?} sharedStylesHost\r\n     * @param {?} appId\r\n     */\r\n    constructor(eventManager, sharedStylesHost, appId) {\r\n        this.eventManager = eventManager;\r\n        this.sharedStylesHost = sharedStylesHost;\r\n        this.appId = appId;\r\n        this.rendererByCompId = new Map();\r\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    createRenderer(element, type) {\r\n        if (!element || !type) {\r\n            return this.defaultRenderer;\r\n        }\r\n        switch (type.encapsulation) {\r\n            case ViewEncapsulation.Emulated: {\r\n                /** @type {?} */\r\n                let renderer = this.rendererByCompId.get(type.id);\r\n                if (!renderer) {\r\n                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);\r\n                    this.rendererByCompId.set(type.id, renderer);\r\n                }\r\n                ((/** @type {?} */ (renderer))).applyToHost(element);\r\n                return renderer;\r\n            }\r\n            case ViewEncapsulation.Native:\r\n            case ViewEncapsulation.ShadowDom:\r\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\r\n            default: {\r\n                if (!this.rendererByCompId.has(type.id)) {\r\n                    /** @type {?} */\r\n                    const styles = flattenStyles(type.id, type.styles, []);\r\n                    this.sharedStylesHost.addStyles(styles);\r\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\r\n                }\r\n                return this.defaultRenderer;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    begin() { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    end() { }\r\n}\r\nDomRendererFactory2.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nDomRendererFactory2.ctorParameters = () => [\r\n    { type: EventManager },\r\n    { type: DomSharedStylesHost },\r\n    { type: String, decorators: [{ type: Inject, args: [APP_ID,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomRendererFactory2.prototype.rendererByCompId;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomRendererFactory2.prototype.defaultRenderer;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomRendererFactory2.prototype.eventManager;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomRendererFactory2.prototype.sharedStylesHost;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomRendererFactory2.prototype.appId;\r\n}\r\nclass DefaultDomRenderer2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     */\r\n    constructor(eventManager) {\r\n        this.eventManager = eventManager;\r\n        this.data = Object.create(null);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() { }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    createElement(name, namespace) {\r\n        if (namespace) {\r\n            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\r\n            // will result in undefined, so we just return the namespace here.\r\n            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\r\n        }\r\n        return document.createElement(name);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    createComment(value) { return document.createComment(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    createText(value) { return document.createTextNode(value); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    appendChild(parent, newChild) { parent.appendChild(newChild); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @param {?} refChild\r\n     * @return {?}\r\n     */\r\n    insertBefore(parent, newChild, refChild) {\r\n        if (parent) {\r\n            parent.insertBefore(newChild, refChild);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    removeChild(parent, oldChild) {\r\n        if (parent) {\r\n            parent.removeChild(oldChild);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} selectorOrNode\r\n     * @param {?=} preserveContent\r\n     * @return {?}\r\n     */\r\n    selectRootElement(selectorOrNode, preserveContent) {\r\n        /** @type {?} */\r\n        let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\r\n            selectorOrNode;\r\n        if (!el) {\r\n            throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\r\n        }\r\n        if (!preserveContent) {\r\n            el.textContent = '';\r\n        }\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    parentNode(node) { return node.parentNode; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nextSibling(node) { return node.nextSibling; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    setAttribute(el, name, value, namespace) {\r\n        if (namespace) {\r\n            name = namespace + ':' + name;\r\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\r\n            // full URIs for namespaces, therefore this lookup will fail.\r\n            /** @type {?} */\r\n            const namespaceUri = NAMESPACE_URIS[namespace];\r\n            if (namespaceUri) {\r\n                el.setAttributeNS(namespaceUri, name, value);\r\n            }\r\n            else {\r\n                el.setAttribute(name, value);\r\n            }\r\n        }\r\n        else {\r\n            el.setAttribute(name, value);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    removeAttribute(el, name, namespace) {\r\n        if (namespace) {\r\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\r\n            // full URIs for namespaces, therefore this lookup will fail.\r\n            /** @type {?} */\r\n            const namespaceUri = NAMESPACE_URIS[namespace];\r\n            if (namespaceUri) {\r\n                el.removeAttributeNS(namespaceUri, name);\r\n            }\r\n            else {\r\n                // TODO(benlesh): Since ivy is passing around full URIs for namespaces\r\n                // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\r\n                // which is wrong.\r\n                el.removeAttribute(`${namespace}:${name}`);\r\n            }\r\n        }\r\n        else {\r\n            el.removeAttribute(name);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    addClass(el, name) { el.classList.add(name); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    removeClass(el, name) { el.classList.remove(name); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} value\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    setStyle(el, style, value, flags) {\r\n        if (flags & RendererStyleFlags2.DashCase) {\r\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\r\n        }\r\n        else {\r\n            el.style[style] = value;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    removeStyle(el, style, flags) {\r\n        if (flags & RendererStyleFlags2.DashCase) {\r\n            el.style.removeProperty(style);\r\n        }\r\n        else {\r\n            // IE requires '' instead of null\r\n            // see https://github.com/angular/angular/issues/7916\r\n            el.style[style] = '';\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setProperty(el, name, value) {\r\n        checkNoSyntheticProp(name, 'property');\r\n        el[name] = value;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setValue(node, value) { node.nodeValue = value; }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} event\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    listen(target, event, callback) {\r\n        checkNoSyntheticProp(event, 'listener');\r\n        if (typeof target === 'string') {\r\n            return (/** @type {?} */ (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback))));\r\n        }\r\n        return (/** @type {?} */ ((/** @type {?} */ (this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))))));\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    DefaultDomRenderer2.prototype.data;\r\n    /** @type {?} */\r\n    DefaultDomRenderer2.prototype.destroyNode;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DefaultDomRenderer2.prototype.eventManager;\r\n}\r\nconst ɵ0$2 = /**\r\n * @return {?}\r\n */\r\n() => '@'.charCodeAt(0);\r\n/** @type {?} */\r\nconst AT_CHARCODE = ((ɵ0$2))();\r\n/**\r\n * @param {?} name\r\n * @param {?} nameKind\r\n * @return {?}\r\n */\r\nfunction checkNoSyntheticProp(name, nameKind) {\r\n    if (name.charCodeAt(0) === AT_CHARCODE) {\r\n        throw new Error(`Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\r\n    }\r\n}\r\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     * @param {?} sharedStylesHost\r\n     * @param {?} component\r\n     * @param {?} appId\r\n     */\r\n    constructor(eventManager, sharedStylesHost, component, appId) {\r\n        super(eventManager);\r\n        this.component = component;\r\n        /** @type {?} */\r\n        const styles = flattenStyles(appId + '-' + component.id, component.styles, []);\r\n        sharedStylesHost.addStyles(styles);\r\n        this.contentAttr = shimContentAttribute(appId + '-' + component.id);\r\n        this.hostAttr = shimHostAttribute(appId + '-' + component.id);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    applyToHost(element) { super.setAttribute(element, this.hostAttr, ''); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    createElement(parent, name) {\r\n        /** @type {?} */\r\n        const el = super.createElement(parent, name);\r\n        super.setAttribute(el, this.contentAttr, '');\r\n        return el;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    EmulatedEncapsulationDomRenderer2.prototype.contentAttr;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    EmulatedEncapsulationDomRenderer2.prototype.hostAttr;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    EmulatedEncapsulationDomRenderer2.prototype.component;\r\n}\r\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     * @param {?} sharedStylesHost\r\n     * @param {?} hostEl\r\n     * @param {?} component\r\n     */\r\n    constructor(eventManager, sharedStylesHost, hostEl, component) {\r\n        super(eventManager);\r\n        this.sharedStylesHost = sharedStylesHost;\r\n        this.hostEl = hostEl;\r\n        this.component = component;\r\n        if (component.encapsulation === ViewEncapsulation.ShadowDom) {\r\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).attachShadow({ mode: 'open' });\r\n        }\r\n        else {\r\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).createShadowRoot();\r\n        }\r\n        this.sharedStylesHost.addHost(this.shadowRoot);\r\n        /** @type {?} */\r\n        const styles = flattenStyles(component.id, component.styles, []);\r\n        for (let i = 0; i < styles.length; i++) {\r\n            /** @type {?} */\r\n            const styleEl = document.createElement('style');\r\n            styleEl.textContent = styles[i];\r\n            this.shadowRoot.appendChild(styleEl);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nodeOrShadowRoot(node) { return node === this.hostEl ? this.shadowRoot : node; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    appendChild(parent, newChild) {\r\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @param {?} refChild\r\n     * @return {?}\r\n     */\r\n    insertBefore(parent, newChild, refChild) {\r\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    removeChild(parent, oldChild) {\r\n        return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    parentNode(node) {\r\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    ShadowDomRenderer.prototype.shadowRoot;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    ShadowDomRenderer.prototype.sharedStylesHost;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    ShadowDomRenderer.prototype.hostEl;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    ShadowDomRenderer.prototype.component;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nconst ɵ0$3 = /**\r\n * @return {?}\r\n */\r\n() => (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))['__symbol__'] ||\r\n    (/**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    function (v) { return '__zone_symbol__' + v; });\r\n/**\r\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\r\n * since Angular can do much more\r\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\r\n * addEventListener by 3x.\r\n * @type {?}\r\n */\r\nconst __symbol__ = ((ɵ0$3))();\r\n/** @type {?} */\r\nconst ADD_EVENT_LISTENER = __symbol__('addEventListener');\r\n/** @type {?} */\r\nconst REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\r\n/** @type {?} */\r\nconst symbolNames = {};\r\n/** @type {?} */\r\nconst FALSE = 'FALSE';\r\n/** @type {?} */\r\nconst ANGULAR = 'ANGULAR';\r\n/** @type {?} */\r\nconst NATIVE_ADD_LISTENER = 'addEventListener';\r\n/** @type {?} */\r\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\r\n// use the same symbol string which is used in zone.js\r\n/** @type {?} */\r\nconst stopSymbol = '__zone_symbol__propagationStopped';\r\n/** @type {?} */\r\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\r\nconst ɵ1 = /**\r\n * @return {?}\r\n */\r\n() => {\r\n    /** @type {?} */\r\n    const blackListedEvents = (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))[__symbol__('BLACK_LISTED_EVENTS')];\r\n    if (blackListedEvents) {\r\n        /** @type {?} */\r\n        const res = {};\r\n        blackListedEvents.forEach((/**\r\n         * @param {?} eventName\r\n         * @return {?}\r\n         */\r\n        eventName => { res[eventName] = eventName; }));\r\n        return res;\r\n    }\r\n    return undefined;\r\n};\r\n/** @type {?} */\r\nconst blackListedMap = ((ɵ1))();\r\n/** @type {?} */\r\nconst isBlackListedEvent = (/**\r\n * @param {?} eventName\r\n * @return {?}\r\n */\r\nfunction (eventName) {\r\n    if (!blackListedMap) {\r\n        return false;\r\n    }\r\n    return blackListedMap.hasOwnProperty(eventName);\r\n});\r\nconst ɵ2 = isBlackListedEvent;\r\n/**\r\n * @record\r\n */\r\nfunction TaskData() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    TaskData.prototype.zone;\r\n    /** @type {?} */\r\n    TaskData.prototype.handler;\r\n}\r\n// a global listener to handle all dom event,\r\n// so we do not need to create a closure every time\r\n/** @type {?} */\r\nconst globalListener = (/**\r\n * @this {?}\r\n * @param {?} event\r\n * @return {?}\r\n */\r\nfunction (event) {\r\n    /** @type {?} */\r\n    const symbolName = symbolNames[event.type];\r\n    if (!symbolName) {\r\n        return;\r\n    }\r\n    /** @type {?} */\r\n    const taskDatas = this[symbolName];\r\n    if (!taskDatas) {\r\n        return;\r\n    }\r\n    /** @type {?} */\r\n    const args = [event];\r\n    if (taskDatas.length === 1) {\r\n        // if taskDatas only have one element, just invoke it\r\n        /** @type {?} */\r\n        const taskData = taskDatas[0];\r\n        if (taskData.zone !== Zone.current) {\r\n            // only use Zone.run when Zone.current not equals to stored zone\r\n            return taskData.zone.run(taskData.handler, this, args);\r\n        }\r\n        else {\r\n            return taskData.handler.apply(this, args);\r\n        }\r\n    }\r\n    else {\r\n        // copy tasks as a snapshot to avoid event handlers remove\r\n        // itself or others\r\n        /** @type {?} */\r\n        const copiedTasks = taskDatas.slice();\r\n        for (let i = 0; i < copiedTasks.length; i++) {\r\n            // if other listener call event.stopImmediatePropagation\r\n            // just break\r\n            if (((/** @type {?} */ (event)))[stopSymbol] === true) {\r\n                break;\r\n            }\r\n            /** @type {?} */\r\n            const taskData = copiedTasks[i];\r\n            if (taskData.zone !== Zone.current) {\r\n                // only use Zone.run when Zone.current not equals to stored zone\r\n                taskData.zone.run(taskData.handler, this, args);\r\n            }\r\n            else {\r\n                taskData.handler.apply(this, args);\r\n            }\r\n        }\r\n    }\r\n});\r\nconst ɵ3 = globalListener;\r\nclass DomEventsPlugin extends EventManagerPlugin {\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} ngZone\r\n     * @param {?} platformId\r\n     */\r\n    constructor(doc, ngZone, platformId) {\r\n        super(doc);\r\n        this.ngZone = ngZone;\r\n        if (!platformId || !isPlatformServer(platformId)) {\r\n            this.patchEvent();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    patchEvent() {\r\n        if (typeof Event === 'undefined' || !Event || !Event.prototype) {\r\n            return;\r\n        }\r\n        if (((/** @type {?} */ (Event.prototype)))[stopMethodSymbol]) {\r\n            // already patched by zone.js\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const delegate = ((/** @type {?} */ (Event.prototype)))[stopMethodSymbol] =\r\n            Event.prototype.stopImmediatePropagation;\r\n        Event.prototype.stopImmediatePropagation = (/**\r\n         * @this {?}\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this) {\r\n                this[stopSymbol] = true;\r\n            }\r\n            // We should call native delegate in case in some environment part of\r\n            // the application will not use the patched Event. Also we cast the\r\n            // \"arguments\" to any since \"stopImmediatePropagation\" technically does not\r\n            // accept any arguments, but we don't know what developers pass through the\r\n            // function and we want to not break these calls.\r\n            delegate && delegate.apply(this, (/** @type {?} */ (arguments)));\r\n        });\r\n    }\r\n    // This plugin should come last in the list of plugins, because it accepts all\r\n    // events.\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    supports(eventName) { return true; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        /**\r\n         * This code is about to add a listener to the DOM. If Zone.js is present, than\r\n         * `addEventListener` has been patched. The patched code adds overhead in both\r\n         * memory and speed (3x slower) than native. For this reason if we detect that\r\n         * Zone.js is present we use a simple version of zone aware addEventListener instead.\r\n         * The result is faster registration and the zone will be restored.\r\n         * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\r\n         * will not be invoked\r\n         * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\r\n         *\r\n         * NOTE: it is possible that the element is from different iframe, and so we\r\n         * have to check before we execute the method.\r\n         * @type {?}\r\n         */\r\n        const self = this;\r\n        /** @type {?} */\r\n        const zoneJsLoaded = element[ADD_EVENT_LISTENER];\r\n        /** @type {?} */\r\n        let callback = (/** @type {?} */ (handler));\r\n        // if zonejs is loaded and current zone is not ngZone\r\n        // we keep Zone.current on target for later restoration.\r\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\r\n            /** @type {?} */\r\n            let symbolName = symbolNames[eventName];\r\n            if (!symbolName) {\r\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\r\n            }\r\n            /** @type {?} */\r\n            let taskDatas = ((/** @type {?} */ (element)))[symbolName];\r\n            /** @type {?} */\r\n            const globalListenerRegistered = taskDatas && taskDatas.length > 0;\r\n            if (!taskDatas) {\r\n                taskDatas = ((/** @type {?} */ (element)))[symbolName] = [];\r\n            }\r\n            /** @type {?} */\r\n            const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\r\n            if (taskDatas.length === 0) {\r\n                taskDatas.push({ zone: zone, handler: callback });\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                let callbackRegistered = false;\r\n                for (let i = 0; i < taskDatas.length; i++) {\r\n                    if (taskDatas[i].handler === callback) {\r\n                        callbackRegistered = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!callbackRegistered) {\r\n                    taskDatas.push({ zone: zone, handler: callback });\r\n                }\r\n            }\r\n            if (!globalListenerRegistered) {\r\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\r\n            }\r\n        }\r\n        else {\r\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\r\n        }\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        () => this.removeEventListener(element, eventName, callback));\r\n    }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} eventName\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    removeEventListener(target, eventName, callback) {\r\n        /** @type {?} */\r\n        let underlyingRemove = target[REMOVE_EVENT_LISTENER];\r\n        // zone.js not loaded, use native removeEventListener\r\n        if (!underlyingRemove) {\r\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n        }\r\n        /** @type {?} */\r\n        let symbolName = symbolNames[eventName];\r\n        /** @type {?} */\r\n        let taskDatas = symbolName && target[symbolName];\r\n        if (!taskDatas) {\r\n            // addEventListener not using patched version\r\n            // just call native removeEventListener\r\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n        }\r\n        // fix issue 20532, should be able to remove\r\n        // listener which was added inside of ngZone\r\n        /** @type {?} */\r\n        let found = false;\r\n        for (let i = 0; i < taskDatas.length; i++) {\r\n            // remove listener from taskDatas if the callback equals\r\n            if (taskDatas[i].handler === callback) {\r\n                found = true;\r\n                taskDatas.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        if (found) {\r\n            if (taskDatas.length === 0) {\r\n                // all listeners are removed, we can remove the globalListener from target\r\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\r\n            }\r\n        }\r\n        else {\r\n            // not found in taskDatas, the callback may be added inside of ngZone\r\n            // use native remove listener to remove the callback\r\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n        }\r\n    }\r\n}\r\nDomEventsPlugin.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nDomEventsPlugin.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomEventsPlugin.prototype.ngZone;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Supported HammerJS recognizer event names.\r\n * @type {?}\r\n */\r\nconst EVENT_NAMES = {\r\n    // pan\r\n    'pan': true,\r\n    'panstart': true,\r\n    'panmove': true,\r\n    'panend': true,\r\n    'pancancel': true,\r\n    'panleft': true,\r\n    'panright': true,\r\n    'panup': true,\r\n    'pandown': true,\r\n    // pinch\r\n    'pinch': true,\r\n    'pinchstart': true,\r\n    'pinchmove': true,\r\n    'pinchend': true,\r\n    'pinchcancel': true,\r\n    'pinchin': true,\r\n    'pinchout': true,\r\n    // press\r\n    'press': true,\r\n    'pressup': true,\r\n    // rotate\r\n    'rotate': true,\r\n    'rotatestart': true,\r\n    'rotatemove': true,\r\n    'rotateend': true,\r\n    'rotatecancel': true,\r\n    // swipe\r\n    'swipe': true,\r\n    'swipeleft': true,\r\n    'swiperight': true,\r\n    'swipeup': true,\r\n    'swipedown': true,\r\n    // tap\r\n    'tap': true,\r\n};\r\n/**\r\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\r\n * @see `HammerGestureConfig`\r\n *\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\r\n/**\r\n * Injection token used to provide a {\\@link HammerLoader} to Angular.\r\n *\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst HAMMER_LOADER = new InjectionToken('HammerLoader');\r\n/**\r\n * @record\r\n */\r\nfunction HammerInstance() { }\r\nif (false) {\r\n    /**\r\n     * @param {?} eventName\r\n     * @param {?=} callback\r\n     * @return {?}\r\n     */\r\n    HammerInstance.prototype.on = function (eventName, callback) { };\r\n    /**\r\n     * @param {?} eventName\r\n     * @param {?=} callback\r\n     * @return {?}\r\n     */\r\n    HammerInstance.prototype.off = function (eventName, callback) { };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HammerInstance.prototype.destroy = function () { };\r\n}\r\n/**\r\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n * for gesture recognition. Configures specific event recognition.\r\n * \\@publicApi\r\n */\r\nclass HammerGestureConfig {\r\n    constructor() {\r\n        /**\r\n         * A set of supported event names for gestures to be used in Angular.\r\n         * Angular supports all built-in recognizers, as listed in\r\n         * [HammerJS documentation](http://hammerjs.github.io/).\r\n         */\r\n        this.events = [];\r\n        /**\r\n         * Maps gesture event names to a set of configuration options\r\n         * that specify overrides to the default values for specific properties.\r\n         *\r\n         * The key is a supported event name to be configured,\r\n         * and the options object contains a set of properties, with override values\r\n         * to be applied to the named recognizer event.\r\n         * For example, to disable recognition of the rotate event, specify\r\n         *  `{\"rotate\": {\"enable\": false}}`.\r\n         *\r\n         * Properties that are not present take the HammerJS default values.\r\n         * For information about which properties are supported for which events,\r\n         * and their allowed and default values, see\r\n         * [HammerJS documentation](http://hammerjs.github.io/).\r\n         *\r\n         */\r\n        this.overrides = {};\r\n    }\r\n    /**\r\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n     * and attaches it to a given HTML element.\r\n     * @param {?} element The element that will recognize gestures.\r\n     * @return {?} A HammerJS event-manager object.\r\n     */\r\n    buildHammer(element) {\r\n        /** @type {?} */\r\n        const mc = new (/** @type {?} */ (Hammer))(element, this.options);\r\n        mc.get('pinch').set({ enable: true });\r\n        mc.get('rotate').set({ enable: true });\r\n        for (const eventName in this.overrides) {\r\n            mc.get(eventName).set(this.overrides[eventName]);\r\n        }\r\n        return mc;\r\n    }\r\n}\r\nHammerGestureConfig.decorators = [\r\n    { type: Injectable }\r\n];\r\nif (false) {\r\n    /**\r\n     * A set of supported event names for gestures to be used in Angular.\r\n     * Angular supports all built-in recognizers, as listed in\r\n     * [HammerJS documentation](http://hammerjs.github.io/).\r\n     * @type {?}\r\n     */\r\n    HammerGestureConfig.prototype.events;\r\n    /**\r\n     * Maps gesture event names to a set of configuration options\r\n     * that specify overrides to the default values for specific properties.\r\n     *\r\n     * The key is a supported event name to be configured,\r\n     * and the options object contains a set of properties, with override values\r\n     * to be applied to the named recognizer event.\r\n     * For example, to disable recognition of the rotate event, specify\r\n     *  `{\"rotate\": {\"enable\": false}}`.\r\n     *\r\n     * Properties that are not present take the HammerJS default values.\r\n     * For information about which properties are supported for which events,\r\n     * and their allowed and default values, see\r\n     * [HammerJS documentation](http://hammerjs.github.io/).\r\n     *\r\n     * @type {?}\r\n     */\r\n    HammerGestureConfig.prototype.overrides;\r\n    /**\r\n     * Properties whose default values can be overridden for a given event.\r\n     * Different sets of properties apply to different events.\r\n     * For information about which properties are supported for which events,\r\n     * and their allowed and default values, see\r\n     * [HammerJS documentation](http://hammerjs.github.io/).\r\n     * @type {?}\r\n     */\r\n    HammerGestureConfig.prototype.options;\r\n}\r\nclass HammerGesturesPlugin extends EventManagerPlugin {\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} _config\r\n     * @param {?} console\r\n     * @param {?=} loader\r\n     */\r\n    constructor(doc, _config, console, loader) {\r\n        super(doc);\r\n        this._config = _config;\r\n        this.console = console;\r\n        this.loader = loader;\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    supports(eventName) {\r\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\r\n            return false;\r\n        }\r\n        if (!((/** @type {?} */ (window))).Hammer && !this.loader) {\r\n            this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\r\n                `loaded and no custom loader has been specified.`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        /** @type {?} */\r\n        const zone = this.manager.getZone();\r\n        eventName = eventName.toLowerCase();\r\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\r\n        // until Hammer is loaded.\r\n        if (!((/** @type {?} */ (window))).Hammer && this.loader) {\r\n            // This `addEventListener` method returns a function to remove the added listener.\r\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\r\n            // than remove anything.\r\n            /** @type {?} */\r\n            let cancelRegistration = false;\r\n            /** @type {?} */\r\n            let deregister = (/**\r\n             * @return {?}\r\n             */\r\n            () => { cancelRegistration = true; });\r\n            this.loader()\r\n                .then((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\r\n                if (!((/** @type {?} */ (window))).Hammer) {\r\n                    this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\r\n                    deregister = (/**\r\n                     * @return {?}\r\n                     */\r\n                    () => { });\r\n                    return;\r\n                }\r\n                if (!cancelRegistration) {\r\n                    // Now that Hammer is loaded and the listener is being loaded for real,\r\n                    // the deregistration function changes from canceling registration to removal.\r\n                    deregister = this.addEventListener(element, eventName, handler);\r\n                }\r\n            }))\r\n                .catch((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` +\r\n                    `Hammer.JS loader failed.`);\r\n                deregister = (/**\r\n                 * @return {?}\r\n                 */\r\n                () => { });\r\n            }));\r\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\r\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\r\n            // this way allows us to avoid any additional data structures to track listener removal.\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => { deregister(); });\r\n        }\r\n        return zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // Creating the manager bind events, must be done outside of angular\r\n            /** @type {?} */\r\n            const mc = this._config.buildHammer(element);\r\n            /** @type {?} */\r\n            const callback = (/**\r\n             * @param {?} eventObj\r\n             * @return {?}\r\n             */\r\n            function (eventObj) {\r\n                zone.runGuarded((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { handler(eventObj); }));\r\n            });\r\n            mc.on(eventName, callback);\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                mc.off(eventName, callback);\r\n                // destroy mc to prevent memory leak\r\n                if (typeof mc.destroy === 'function') {\r\n                    mc.destroy();\r\n                }\r\n            });\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    isCustomEvent(eventName) { return this._config.events.indexOf(eventName) > -1; }\r\n}\r\nHammerGesturesPlugin.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nHammerGesturesPlugin.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] }] },\r\n    { type: ɵConsole },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HammerGesturesPlugin.prototype._config;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HammerGesturesPlugin.prototype.console;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HammerGesturesPlugin.prototype.loader;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Defines supported modifiers for key events.\r\n * @type {?}\r\n */\r\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\r\nconst ɵ0$4 = /**\r\n * @param {?} event\r\n * @return {?}\r\n */\r\n(event) => event.altKey, ɵ1$1 = /**\r\n * @param {?} event\r\n * @return {?}\r\n */\r\n(event) => event.ctrlKey, ɵ2$1 = /**\r\n * @param {?} event\r\n * @return {?}\r\n */\r\n(event) => event.metaKey, ɵ3$1 = /**\r\n * @param {?} event\r\n * @return {?}\r\n */\r\n(event) => event.shiftKey;\r\n/**\r\n * Retrieves modifiers from key-event objects.\r\n * @type {?}\r\n */\r\nconst MODIFIER_KEY_GETTERS = {\r\n    'alt': (ɵ0$4),\r\n    'control': (ɵ1$1),\r\n    'meta': (ɵ2$1),\r\n    'shift': (ɵ3$1)\r\n};\r\n/**\r\n * \\@publicApi\r\n * A browser plug-in that provides support for handling of key events in Angular.\r\n */\r\nclass KeyEventsPlugin extends EventManagerPlugin {\r\n    /**\r\n     * Initializes an instance of the browser plug-in.\r\n     * @param {?} doc The document in which key events will be detected.\r\n     */\r\n    constructor(doc) { super(doc); }\r\n    /**\r\n     * Reports whether a named key event is supported.\r\n     * @param {?} eventName The event name to query.\r\n     * @return {?} True if the named key event is supported.\r\n     */\r\n    supports(eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; }\r\n    /**\r\n     * Registers a handler for a specific element and key event.\r\n     * @param {?} element The HTML element to receive event notifications.\r\n     * @param {?} eventName The name of the key event to listen for.\r\n     * @param {?} handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @return {?} The key event that was registered.\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        /** @type {?} */\r\n        const parsedEvent = (/** @type {?} */ (KeyEventsPlugin.parseEventName(eventName)));\r\n        /** @type {?} */\r\n        const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\r\n        return this.manager.getZone().runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    static parseEventName(eventName) {\r\n        /** @type {?} */\r\n        const parts = eventName.toLowerCase().split('.');\r\n        /** @type {?} */\r\n        const domEventName = parts.shift();\r\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\r\n            return null;\r\n        }\r\n        /** @type {?} */\r\n        const key = KeyEventsPlugin._normalizeKey((/** @type {?} */ (parts.pop())));\r\n        /** @type {?} */\r\n        let fullKey = '';\r\n        MODIFIER_KEYS.forEach((/**\r\n         * @param {?} modifierName\r\n         * @return {?}\r\n         */\r\n        modifierName => {\r\n            /** @type {?} */\r\n            const index = parts.indexOf(modifierName);\r\n            if (index > -1) {\r\n                parts.splice(index, 1);\r\n                fullKey += modifierName + '.';\r\n            }\r\n        }));\r\n        fullKey += key;\r\n        if (parts.length != 0 || key.length === 0) {\r\n            // returning null instead of throwing to let another plugin process the event\r\n            return null;\r\n        }\r\n        /** @type {?} */\r\n        const result = {};\r\n        result['domEventName'] = domEventName;\r\n        result['fullKey'] = fullKey;\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    static getEventFullKey(event) {\r\n        /** @type {?} */\r\n        let fullKey = '';\r\n        /** @type {?} */\r\n        let key = getDOM().getEventKey(event);\r\n        key = key.toLowerCase();\r\n        if (key === ' ') {\r\n            key = 'space'; // for readability\r\n        }\r\n        else if (key === '.') {\r\n            key = 'dot'; // because '.' is used as a separator in event names\r\n        }\r\n        MODIFIER_KEYS.forEach((/**\r\n         * @param {?} modifierName\r\n         * @return {?}\r\n         */\r\n        modifierName => {\r\n            if (modifierName != key) {\r\n                /** @type {?} */\r\n                const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\r\n                if (modifierGetter(event)) {\r\n                    fullKey += modifierName + '.';\r\n                }\r\n            }\r\n        }));\r\n        fullKey += key;\r\n        return fullKey;\r\n    }\r\n    /**\r\n     * Configures a handler callback for a key event.\r\n     * @param {?} fullKey The event name that combines all simultaneous keystrokes.\r\n     * @param {?} handler The function that responds to the key event.\r\n     * @param {?} zone The zone in which the event occurred.\r\n     * @return {?} A callback function.\r\n     */\r\n    static eventCallback(fullKey, handler, zone) {\r\n        return (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event /** TODO #9100 */) => {\r\n            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\r\n                zone.runGuarded((/**\r\n                 * @return {?}\r\n                 */\r\n                () => handler(event)));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} keyName\r\n     * @return {?}\r\n     */\r\n    static _normalizeKey(keyName) {\r\n        // TODO: switch to a Map if the mapping grows too much\r\n        switch (keyName) {\r\n            case 'esc':\r\n                return 'escape';\r\n            default:\r\n                return keyName;\r\n        }\r\n    }\r\n}\r\nKeyEventsPlugin.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nKeyEventsPlugin.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Marker interface for a value that's safe to use in a particular context.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction SafeValue() { }\r\n/**\r\n * Marker interface for a value that's safe to use as HTML.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction SafeHtml() { }\r\n/**\r\n * Marker interface for a value that's safe to use as style (CSS).\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction SafeStyle() { }\r\n/**\r\n * Marker interface for a value that's safe to use as JavaScript.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction SafeScript() { }\r\n/**\r\n * Marker interface for a value that's safe to use as a URL linking to a document.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction SafeUrl() { }\r\n/**\r\n * Marker interface for a value that's safe to use as a URL to load executable code from.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction SafeResourceUrl() { }\r\n/**\r\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\r\n * values to be safe to use in the different DOM contexts.\r\n *\r\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\r\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\r\n * the website.\r\n *\r\n * In specific situations, it might be necessary to disable sanitization, for example if the\r\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\r\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\r\n * methods, and then binding to that value from the template.\r\n *\r\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\r\n * Cross Site Scripting (XSS) security bug!\r\n *\r\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\r\n * close as possible to the source of the value, to make it easy to verify no security bug is\r\n * created by its use.\r\n *\r\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\r\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\r\n * code. The sanitizer leaves safe values intact.\r\n *\r\n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\r\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\r\n * into this call. Make sure any user data is appropriately escaped for this security context.\r\n * For more detail, see the [Security Guide](http://g.co/ng/security).\r\n *\r\n * \\@publicApi\r\n * @abstract\r\n */\r\nclass DomSanitizer {\r\n}\r\nif (false) {\r\n    /**\r\n     * Sanitizes a value for use in the given SecurityContext.\r\n     *\r\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\r\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\r\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\r\n     * is responsible to make sure that the value can definitely be safely used in the given context.\r\n     * @abstract\r\n     * @param {?} context\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomSanitizer.prototype.sanitize = function (context, value) { };\r\n    /**\r\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\r\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\r\n     * leave safe HTML intact, so in most situations this method should not be used.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     * @abstract\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };\r\n    /**\r\n     * Bypass security and trust the given value to be safe style value (CSS).\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     * @abstract\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };\r\n    /**\r\n     * Bypass security and trust the given value to be safe JavaScript.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     * @abstract\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };\r\n    /**\r\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\r\n     * in hyperlinks or `<img src>`.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     * @abstract\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };\r\n    /**\r\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\r\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     * @abstract\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };\r\n}\r\nclass DomSanitizerImpl extends DomSanitizer {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        super();\r\n        this._doc = _doc;\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    sanitize(ctx, value) {\r\n        if (value == null)\r\n            return null;\r\n        switch (ctx) {\r\n            case SecurityContext.NONE:\r\n                return (/** @type {?} */ (value));\r\n            case SecurityContext.HTML:\r\n                if (value instanceof SafeHtmlImpl)\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                this.checkNotSafeValue(value, 'HTML');\r\n                return ɵ_sanitizeHtml(this._doc, String(value));\r\n            case SecurityContext.STYLE:\r\n                if (value instanceof SafeStyleImpl)\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                this.checkNotSafeValue(value, 'Style');\r\n                return ɵ_sanitizeStyle((/** @type {?} */ (value)));\r\n            case SecurityContext.SCRIPT:\r\n                if (value instanceof SafeScriptImpl)\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                this.checkNotSafeValue(value, 'Script');\r\n                throw new Error('unsafe value used in a script context');\r\n            case SecurityContext.URL:\r\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\r\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                }\r\n                this.checkNotSafeValue(value, 'URL');\r\n                return ɵ_sanitizeUrl(String(value));\r\n            case SecurityContext.RESOURCE_URL:\r\n                if (value instanceof SafeResourceUrlImpl) {\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                }\r\n                this.checkNotSafeValue(value, 'ResourceURL');\r\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\r\n            default:\r\n                throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} value\r\n     * @param {?} expectedType\r\n     * @return {?}\r\n     */\r\n    checkNotSafeValue(value, expectedType) {\r\n        if (value instanceof SafeValueImpl) {\r\n            throw new Error(`Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\r\n                `(see http://g.co/ng/security#xss)`);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustHtml(value) { return new SafeHtmlImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustStyle(value) { return new SafeStyleImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustScript(value) { return new SafeScriptImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustUrl(value) { return new SafeUrlImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustResourceUrl(value) {\r\n        return new SafeResourceUrlImpl(value);\r\n    }\r\n}\r\nDomSanitizerImpl.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nDomSanitizerImpl.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DomSanitizerImpl.prototype._doc;\r\n}\r\n/**\r\n * @abstract\r\n */\r\nclass SafeValueImpl {\r\n    /**\r\n     * @param {?} changingThisBreaksApplicationSecurity\r\n     */\r\n    constructor(changingThisBreaksApplicationSecurity) {\r\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\r\n        // empty\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\r\n            ` (see http://g.co/ng/security#xss)`;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    SafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    SafeValueImpl.prototype.getTypeName = function () { };\r\n}\r\nclass SafeHtmlImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'HTML'; }\r\n}\r\nclass SafeStyleImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'Style'; }\r\n}\r\nclass SafeScriptImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'Script'; }\r\n}\r\nclass SafeUrlImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'URL'; }\r\n}\r\nclass SafeResourceUrlImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'ResourceURL'; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nconst ɵ0$5 = ɵPLATFORM_BROWSER_ID;\r\n/** @type {?} */\r\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\r\n    { provide: PLATFORM_ID, useValue: ɵ0$5 },\r\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\r\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT] },\r\n    { provide: DOCUMENT, useFactory: _document, deps: [] },\r\n];\r\n/**\r\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\r\n * Attacker-controlled data introduced by an unsanitized provider could expose your\r\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst BROWSER_SANITIZATION_PROVIDERS = [\r\n    { provide: Sanitizer, useExisting: DomSanitizer },\r\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT] },\r\n];\r\n/**\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\r\n/**\r\n * @return {?}\r\n */\r\nfunction initDomAdapter() {\r\n    BrowserDomAdapter.makeCurrent();\r\n    BrowserGetTestability.init();\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction errorHandler() {\r\n    return new ErrorHandler();\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction _document() {\r\n    return document;\r\n}\r\n/** @type {?} */\r\nconst BROWSER_MODULE_PROVIDERS = [\r\n    BROWSER_SANITIZATION_PROVIDERS,\r\n    { provide: ɵAPP_ROOT, useValue: true },\r\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\r\n    {\r\n        provide: EVENT_MANAGER_PLUGINS,\r\n        useClass: DomEventsPlugin,\r\n        multi: true,\r\n        deps: [DOCUMENT, NgZone, PLATFORM_ID]\r\n    },\r\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT] },\r\n    {\r\n        provide: EVENT_MANAGER_PLUGINS,\r\n        useClass: HammerGesturesPlugin,\r\n        multi: true,\r\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\r\n    },\r\n    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\r\n    {\r\n        provide: DomRendererFactory2,\r\n        useClass: DomRendererFactory2,\r\n        deps: [EventManager, DomSharedStylesHost, APP_ID]\r\n    },\r\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\r\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\r\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT] },\r\n    { provide: Testability, useClass: Testability, deps: [NgZone] },\r\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\r\n    ELEMENT_PROBE_PROVIDERS,\r\n];\r\n/**\r\n * Exports required infrastructure for all Angular apps.\r\n * Included by default in all Angular apps created with the CLI\r\n * `new` command.\r\n * Re-exports `CommonModule` and `ApplicationModule`, making their\r\n * exports and providers available to all apps.\r\n *\r\n * \\@publicApi\r\n */\r\nclass BrowserModule {\r\n    /**\r\n     * @param {?} parentModule\r\n     */\r\n    constructor(parentModule) {\r\n        if (parentModule) {\r\n            throw new Error(`BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\r\n        }\r\n    }\r\n    /**\r\n     * Configures a browser-based app to transition from a server-rendered app, if\r\n     * one is present on the page.\r\n     *\r\n     * @param {?} params An object containing an identifier for the app to transition.\r\n     * The ID must match between the client and server versions of the app.\r\n     * @return {?} The reconfigured `BrowserModule` to import into the app's root `AppModule`.\r\n     */\r\n    static withServerTransition(params) {\r\n        return {\r\n            ngModule: BrowserModule,\r\n            providers: [\r\n                { provide: APP_ID, useValue: params.appId },\r\n                { provide: TRANSITION_ID, useExisting: APP_ID },\r\n                SERVER_TRANSITION_PROVIDERS,\r\n            ],\r\n        };\r\n    }\r\n}\r\nBrowserModule.decorators = [\r\n    { type: NgModule, args: [{ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] },] }\r\n];\r\n/** @nocollapse */\r\nBrowserModule.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [BrowserModule,] }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Factory to create Meta service.\r\n * @return {?}\r\n */\r\nfunction createMeta() {\r\n    return new Meta(ɵɵinject(DOCUMENT));\r\n}\r\n/**\r\n * A service that can be used to get and add meta tags.\r\n *\r\n * \\@publicApi\r\n */\r\nclass Meta {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        this._doc = _doc;\r\n        this._dom = getDOM();\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?=} forceCreation\r\n     * @return {?}\r\n     */\r\n    addTag(tag, forceCreation = false) {\r\n        if (!tag)\r\n            return null;\r\n        return this._getOrCreateElement(tag, forceCreation);\r\n    }\r\n    /**\r\n     * @param {?} tags\r\n     * @param {?=} forceCreation\r\n     * @return {?}\r\n     */\r\n    addTags(tags, forceCreation = false) {\r\n        if (!tags)\r\n            return [];\r\n        return tags.reduce((/**\r\n         * @param {?} result\r\n         * @param {?} tag\r\n         * @return {?}\r\n         */\r\n        (result, tag) => {\r\n            if (tag) {\r\n                result.push(this._getOrCreateElement(tag, forceCreation));\r\n            }\r\n            return result;\r\n        }), []);\r\n    }\r\n    /**\r\n     * @param {?} attrSelector\r\n     * @return {?}\r\n     */\r\n    getTag(attrSelector) {\r\n        if (!attrSelector)\r\n            return null;\r\n        return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\r\n    }\r\n    /**\r\n     * @param {?} attrSelector\r\n     * @return {?}\r\n     */\r\n    getTags(attrSelector) {\r\n        if (!attrSelector)\r\n            return [];\r\n        /** @type {?} */\r\n        const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\r\n        return list ? [].slice.call(list) : [];\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?=} selector\r\n     * @return {?}\r\n     */\r\n    updateTag(tag, selector) {\r\n        if (!tag)\r\n            return null;\r\n        selector = selector || this._parseSelector(tag);\r\n        /** @type {?} */\r\n        const meta = (/** @type {?} */ (this.getTag(selector)));\r\n        if (meta) {\r\n            return this._setMetaElementAttributes(tag, meta);\r\n        }\r\n        return this._getOrCreateElement(tag, true);\r\n    }\r\n    /**\r\n     * @param {?} attrSelector\r\n     * @return {?}\r\n     */\r\n    removeTag(attrSelector) { this.removeTagElement((/** @type {?} */ (this.getTag(attrSelector)))); }\r\n    /**\r\n     * @param {?} meta\r\n     * @return {?}\r\n     */\r\n    removeTagElement(meta) {\r\n        if (meta) {\r\n            this._dom.remove(meta);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} meta\r\n     * @param {?=} forceCreation\r\n     * @return {?}\r\n     */\r\n    _getOrCreateElement(meta, forceCreation = false) {\r\n        if (!forceCreation) {\r\n            /** @type {?} */\r\n            const selector = this._parseSelector(meta);\r\n            /** @type {?} */\r\n            const elem = (/** @type {?} */ (this.getTag(selector)));\r\n            // It's allowed to have multiple elements with the same name so it's not enough to\r\n            // just check that element with the same name already present on the page. We also need to\r\n            // check if element has tag attributes\r\n            if (elem && this._containsAttributes(meta, elem))\r\n                return elem;\r\n        }\r\n        /** @type {?} */\r\n        const element = (/** @type {?} */ (this._dom.createElement('meta')));\r\n        this._setMetaElementAttributes(meta, element);\r\n        /** @type {?} */\r\n        const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\r\n        this._dom.appendChild(head, element);\r\n        return element;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} tag\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    _setMetaElementAttributes(tag, el) {\r\n        Object.keys(tag).forEach((/**\r\n         * @param {?} prop\r\n         * @return {?}\r\n         */\r\n        (prop) => this._dom.setAttribute(el, prop, tag[prop])));\r\n        return el;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\r\n    _parseSelector(tag) {\r\n        /** @type {?} */\r\n        const attr = tag.name ? 'name' : 'property';\r\n        return `${attr}=\"${tag[attr]}\"`;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} tag\r\n     * @param {?} elem\r\n     * @return {?}\r\n     */\r\n    _containsAttributes(tag, elem) {\r\n        return Object.keys(tag).every((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        (key) => this._dom.getAttribute(elem, key) === tag[key]));\r\n    }\r\n}\r\nMeta.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createMeta, deps: [] },] }\r\n];\r\n/** @nocollapse */\r\nMeta.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n/** @nocollapse */ Meta.ngInjectableDef = ɵɵdefineInjectable({ factory: createMeta, token: Meta, providedIn: \"root\" });\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Meta.prototype._dom;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Meta.prototype._doc;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Factory to create Title service.\r\n * @return {?}\r\n */\r\nfunction createTitle() {\r\n    return new Title(ɵɵinject(DOCUMENT));\r\n}\r\n/**\r\n * A service that can be used to get and set the title of a current HTML document.\r\n *\r\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\r\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\r\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\r\n * title value.\r\n *\r\n * \\@publicApi\r\n */\r\nclass Title {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        this._doc = _doc;\r\n    }\r\n    /**\r\n     * Get the title of the current HTML document.\r\n     * @return {?}\r\n     */\r\n    getTitle() { return getDOM().getTitle(this._doc); }\r\n    /**\r\n     * Set the title of the current HTML document.\r\n     * @param {?} newTitle\r\n     * @return {?}\r\n     */\r\n    setTitle(newTitle) { getDOM().setTitle(this._doc, newTitle); }\r\n}\r\nTitle.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createTitle, deps: [] },] }\r\n];\r\n/** @nocollapse */\r\nTitle.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n/** @nocollapse */ Title.ngInjectableDef = ɵɵdefineInjectable({ factory: createTitle, token: Title, providedIn: \"root\" });\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Title.prototype._doc;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @type {?} */\r\nconst win = typeof window !== 'undefined' && window || (/** @type {?} */ ({}));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ChangeDetectionPerfRecord {\r\n    /**\r\n     * @param {?} msPerTick\r\n     * @param {?} numTicks\r\n     */\r\n    constructor(msPerTick, numTicks) {\r\n        this.msPerTick = msPerTick;\r\n        this.numTicks = numTicks;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    ChangeDetectionPerfRecord.prototype.msPerTick;\r\n    /** @type {?} */\r\n    ChangeDetectionPerfRecord.prototype.numTicks;\r\n}\r\n/**\r\n * Entry point for all Angular profiling-related debug tools. This object\r\n * corresponds to the `ng.profiler` in the dev console.\r\n */\r\nclass AngularProfiler {\r\n    /**\r\n     * @param {?} ref\r\n     */\r\n    constructor(ref) { this.appRef = ref.injector.get(ApplicationRef); }\r\n    // tslint:disable:no-console\r\n    /**\r\n     * Exercises change detection in a loop and then prints the average amount of\r\n     * time in milliseconds how long a single round of change detection takes for\r\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\r\n     * of 500 milliseconds.\r\n     *\r\n     * Optionally, a user may pass a `config` parameter containing a map of\r\n     * options. Supported options are:\r\n     *\r\n     * `record` (boolean) - causes the profiler to record a CPU profile while\r\n     * it exercises the change detector. Example:\r\n     *\r\n     * ```\r\n     * ng.profiler.timeChangeDetection({record: true})\r\n     * ```\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    timeChangeDetection(config) {\r\n        /** @type {?} */\r\n        const record = config && config['record'];\r\n        /** @type {?} */\r\n        const profileName = 'Change Detection';\r\n        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\r\n        /** @type {?} */\r\n        const isProfilerAvailable = win.console.profile != null;\r\n        if (record && isProfilerAvailable) {\r\n            win.console.profile(profileName);\r\n        }\r\n        /** @type {?} */\r\n        const start = getDOM().performanceNow();\r\n        /** @type {?} */\r\n        let numTicks = 0;\r\n        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\r\n            this.appRef.tick();\r\n            numTicks++;\r\n        }\r\n        /** @type {?} */\r\n        const end = getDOM().performanceNow();\r\n        if (record && isProfilerAvailable) {\r\n            win.console.profileEnd(profileName);\r\n        }\r\n        /** @type {?} */\r\n        const msPerTick = (end - start) / numTicks;\r\n        win.console.log(`ran ${numTicks} change detection cycles`);\r\n        win.console.log(`${msPerTick.toFixed(2)} ms per check`);\r\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    AngularProfiler.prototype.appRef;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst PROFILER_GLOBAL_NAME = 'profiler';\r\n/**\r\n * Enabled Angular debug tools that are accessible via your browser's\r\n * developer console.\r\n *\r\n * Usage:\r\n *\r\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\r\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\r\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\r\n *    then hit Enter.\r\n *\r\n * \\@publicApi\r\n * @template T\r\n * @param {?} ref\r\n * @return {?}\r\n */\r\nfunction enableDebugTools(ref) {\r\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\r\n    return ref;\r\n}\r\n/**\r\n * Disables Angular tools.\r\n *\r\n * \\@publicApi\r\n * @return {?}\r\n */\r\nfunction disableDebugTools() {\r\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction escapeHtml(text) {\r\n    /** @type {?} */\r\n    const escapedText = {\r\n        '&': '&a;',\r\n        '\"': '&q;',\r\n        '\\'': '&s;',\r\n        '<': '&l;',\r\n        '>': '&g;',\r\n    };\r\n    return text.replace(/[&\"'<>]/g, (/**\r\n     * @param {?} s\r\n     * @return {?}\r\n     */\r\n    s => escapedText[s]));\r\n}\r\n/**\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction unescapeHtml(text) {\r\n    /** @type {?} */\r\n    const unescapedText = {\r\n        '&a;': '&',\r\n        '&q;': '\"',\r\n        '&s;': '\\'',\r\n        '&l;': '<',\r\n        '&g;': '>',\r\n    };\r\n    return text.replace(/&[^;]+;/g, (/**\r\n     * @param {?} s\r\n     * @return {?}\r\n     */\r\n    s => unescapedText[s]));\r\n}\r\n/**\r\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * \\@publicApi\r\n * @template T\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction makeStateKey(key) {\r\n    return (/** @type {?} */ (key));\r\n}\r\n/**\r\n * A key value store that is transferred from the application on the server side to the application\r\n * on the client side.\r\n *\r\n * `TransferState` will be available as an injectable token. To use it import\r\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\r\n *\r\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\r\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\r\n * non-lossy manner.\r\n *\r\n * \\@publicApi\r\n */\r\nclass TransferState {\r\n    constructor() {\r\n        this.store = {};\r\n        this.onSerializeCallbacks = {};\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} initState\r\n     * @return {?}\r\n     */\r\n    static init(initState) {\r\n        /** @type {?} */\r\n        const transferState = new TransferState();\r\n        transferState.store = initState;\r\n        return transferState;\r\n    }\r\n    /**\r\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\r\n     * @template T\r\n     * @param {?} key\r\n     * @param {?} defaultValue\r\n     * @return {?}\r\n     */\r\n    get(key, defaultValue) {\r\n        return this.store[key] !== undefined ? (/** @type {?} */ (this.store[key])) : defaultValue;\r\n    }\r\n    /**\r\n     * Set the value corresponding to a key.\r\n     * @template T\r\n     * @param {?} key\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set(key, value) { this.store[key] = value; }\r\n    /**\r\n     * Remove a key from the store.\r\n     * @template T\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    remove(key) { delete this.store[key]; }\r\n    /**\r\n     * Test whether a key exists in the store.\r\n     * @template T\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    hasKey(key) { return this.store.hasOwnProperty(key); }\r\n    /**\r\n     * Register a callback to provide the value for a key when `toJson` is called.\r\n     * @template T\r\n     * @param {?} key\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    onSerialize(key, callback) {\r\n        this.onSerializeCallbacks[key] = callback;\r\n    }\r\n    /**\r\n     * Serialize the current state of the store to JSON.\r\n     * @return {?}\r\n     */\r\n    toJson() {\r\n        // Call the onSerialize callbacks and put those values into the store.\r\n        for (const key in this.onSerializeCallbacks) {\r\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\r\n                try {\r\n                    this.store[key] = this.onSerializeCallbacks[key]();\r\n                }\r\n                catch (e) {\r\n                    console.warn('Exception in onSerialize callback: ', e);\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.store);\r\n    }\r\n}\r\nTransferState.decorators = [\r\n    { type: Injectable }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TransferState.prototype.store;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TransferState.prototype.onSerializeCallbacks;\r\n}\r\n/**\r\n * @param {?} doc\r\n * @param {?} appId\r\n * @return {?}\r\n */\r\nfunction initTransferState(doc, appId) {\r\n    // Locate the script tag with the JSON data transferred from the server.\r\n    // The id of the script tag is set to the Angular appId + 'state'.\r\n    /** @type {?} */\r\n    const script = doc.getElementById(appId + '-state');\r\n    /** @type {?} */\r\n    let initialState = {};\r\n    if (script && script.textContent) {\r\n        try {\r\n            initialState = JSON.parse(unescapeHtml(script.textContent));\r\n        }\r\n        catch (e) {\r\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\r\n        }\r\n    }\r\n    return TransferState.init(initialState);\r\n}\r\n/**\r\n * NgModule to install on the client side while using the `TransferState` to transfer state from\r\n * server to client.\r\n *\r\n * \\@publicApi\r\n */\r\nclass BrowserTransferStateModule {\r\n}\r\nBrowserTransferStateModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT, APP_ID] }],\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Predicates for use with {\\@link DebugElement}'s query functions.\r\n *\r\n * \\@publicApi\r\n */\r\nclass By {\r\n    /**\r\n     * Match all nodes.\r\n     *\r\n     * \\@usageNotes\r\n     * ### Example\r\n     *\r\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\r\n     * @return {?}\r\n     */\r\n    static all() { return (/**\r\n     * @return {?}\r\n     */\r\n    () => true); }\r\n    /**\r\n     * Match elements by the given CSS selector.\r\n     *\r\n     * \\@usageNotes\r\n     * ### Example\r\n     *\r\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    static css(selector) {\r\n        return (/**\r\n         * @param {?} debugElement\r\n         * @return {?}\r\n         */\r\n        (debugElement) => {\r\n            return debugElement.nativeElement != null ?\r\n                getDOM().elementMatches(debugElement.nativeElement, selector) :\r\n                false;\r\n        });\r\n    }\r\n    /**\r\n     * Match nodes that have the given directive present.\r\n     *\r\n     * \\@usageNotes\r\n     * ### Example\r\n     *\r\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    static directive(type) {\r\n        return (/**\r\n         * @param {?} debugNode\r\n         * @return {?}\r\n         */\r\n        (debugNode) => (/** @type {?} */ (debugNode.providerTokens)).indexOf(type) !== -1);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst VERSION = new Version('8.2.14');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BROWSER_MODULE_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_c, _document as ɵangular_packages_platform_browser_platform_browser_b, errorHandler as ɵangular_packages_platform_browser_platform_browser_a, GenericBrowserDomAdapter as ɵangular_packages_platform_browser_platform_browser_l, createMeta as ɵangular_packages_platform_browser_platform_browser_d, SERVER_TRANSITION_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_i, appInitializerFactory as ɵangular_packages_platform_browser_platform_browser_h, createTitle as ɵangular_packages_platform_browser_platform_browser_e, initTransferState as ɵangular_packages_platform_browser_platform_browser_f, ELEMENT_PROBE_PROVIDERS__PRE_R3__ as ɵangular_packages_platform_browser_platform_browser_k, _createNgProbe as ɵangular_packages_platform_browser_platform_browser_j, EventManagerPlugin as ɵangular_packages_platform_browser_platform_browser_g, BrowserModule, platformBrowser, Meta, Title, disableDebugTools, enableDebugTools, BrowserTransferStateModule, TransferState, makeStateKey, By, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, DomSanitizer, VERSION, ELEMENT_PROBE_PROVIDERS__POST_R3__ as ɵELEMENT_PROBE_PROVIDERS__POST_R3__, BROWSER_SANITIZATION_PROVIDERS as ɵBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ɵinitDomAdapter, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserPlatformLocation as ɵBrowserPlatformLocation, TRANSITION_ID as ɵTRANSITION_ID, BrowserGetTestability as ɵBrowserGetTestability, escapeHtml as ɵescapeHtml, ELEMENT_PROBE_PROVIDERS as ɵELEMENT_PROBE_PROVIDERS, DomAdapter as ɵDomAdapter, getDOM as ɵgetDOM, setRootDomAdapter as ɵsetRootDomAdapter, DomRendererFactory2 as ɵDomRendererFactory2, NAMESPACE_URIS as ɵNAMESPACE_URIS, flattenStyles as ɵflattenStyles, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute, DomEventsPlugin as ɵDomEventsPlugin, HammerGesturesPlugin as ɵHammerGesturesPlugin, KeyEventsPlugin as ɵKeyEventsPlugin, DomSharedStylesHost as ɵDomSharedStylesHost, SharedStylesHost as ɵSharedStylesHost, DomSanitizerImpl as ɵDomSanitizerImpl };\r\n\r\n"]}