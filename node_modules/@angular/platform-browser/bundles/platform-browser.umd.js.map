{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/platform-browser/bundles/platform-browser.umd.js"],"names":[],"mappings":"AAAA;;;;;;;4LAOwI;qKACL;;mwyBS,AAClB;;;;;;;;;;mSAGQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAkMF,kCAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA8EhC,AACP;;;;;;;;;;mLAGH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAyC6E;;;;4GAGzE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CA+Ba,AACd;;;;;;;;;;iHAGI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAwFU,AACd;;;;;;;;;;gKAGI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAwYM,AACV;;;;;;;;;;;;;;;;uGAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA6GlB;;;;oFAGsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CA4EW,AACf;;;;;;;;;;;;;;;;;;;;iFAKK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAmIyB,AAC9B;;;;;;;;;;8DAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAyGW,AACX;;;;;;;;;;yNAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDA8JyB,AACiE;;;;;;;;;;;;;;;;;gRAG7F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAgGC,AACyD;;;;;;;;;;;;;;;;yPAGnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAkCW,AACyD;;;;;;;;;;;;;;;;gEAGnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA8NU;;;;oJAGF;;;;;;;;;;;;;;;;;;;;;;;;;;SA0BjB;;;;;;;;gSAK8B","file":"platform-browser.umd.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\n(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :\r\n    typeof define === 'function' && define.amd ? define('@angular/platform-browser', ['exports', '@angular/common', '@angular/core'], factory) :\r\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.platformBrowser = {}), global.ng.common, global.ng.core));\r\n}(this, function (exports, common, i0) { 'use strict';\r\n\r\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var _DOM = null;\r\n    function getDOM() {\r\n        return _DOM;\r\n    }\r\n    function setDOM(adapter) {\r\n        _DOM = adapter;\r\n    }\r\n    function setRootDomAdapter(adapter) {\r\n        if (!_DOM) {\r\n            _DOM = adapter;\r\n        }\r\n    }\r\n    /* tslint:disable:requireParameterType */\r\n    /**\r\n     * Provides DOM operations in an environment-agnostic way.\r\n     *\r\n     * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n     * can introduce XSS risks.\r\n     */\r\n    var DomAdapter = /** @class */ (function () {\r\n        function DomAdapter() {\r\n            this.resourceLoaderType = null;\r\n        }\r\n        Object.defineProperty(DomAdapter.prototype, \"attrToPropMap\", {\r\n            /**\r\n             * Maps attribute names to their corresponding property names for cases\r\n             * where attribute name doesn't match property name.\r\n             */\r\n            get: function () { return this._attrToPropMap; },\r\n            set: function (value) { this._attrToPropMap = value; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        return DomAdapter;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * Provides DOM operations in any browser environment.\r\n     *\r\n     * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n     * can introduce XSS risks.\r\n     */\r\n    var GenericBrowserDomAdapter = /** @class */ (function (_super) {\r\n        __extends(GenericBrowserDomAdapter, _super);\r\n        function GenericBrowserDomAdapter() {\r\n            var _this = _super.call(this) || this;\r\n            _this._animationPrefix = null;\r\n            _this._transitionEnd = null;\r\n            try {\r\n                var element_1 = _this.createElement('div', document);\r\n                if (_this.getStyle(element_1, 'animationName') != null) {\r\n                    _this._animationPrefix = '';\r\n                }\r\n                else {\r\n                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\r\n                    for (var i = 0; i < domPrefixes.length; i++) {\r\n                        if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {\r\n                            _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                var transEndEventNames_1 = {\r\n                    WebkitTransition: 'webkitTransitionEnd',\r\n                    MozTransition: 'transitionend',\r\n                    OTransition: 'oTransitionEnd otransitionend',\r\n                    transition: 'transitionend'\r\n                };\r\n                Object.keys(transEndEventNames_1).forEach(function (key) {\r\n                    if (_this.getStyle(element_1, key) != null) {\r\n                        _this._transitionEnd = transEndEventNames_1[key];\r\n                    }\r\n                });\r\n            }\r\n            catch (_a) {\r\n                _this._animationPrefix = null;\r\n                _this._transitionEnd = null;\r\n            }\r\n            return _this;\r\n        }\r\n        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };\r\n        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {\r\n            el.href = href == null ? baseUrl : baseUrl + '/../' + href;\r\n        };\r\n        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };\r\n        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {\r\n            return typeof document.body.createShadowRoot === 'function';\r\n        };\r\n        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };\r\n        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };\r\n        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {\r\n            return this._animationPrefix != null && this._transitionEnd != null;\r\n        };\r\n        return GenericBrowserDomAdapter;\r\n    }(DomAdapter));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var _attrToPropMap = {\r\n        'class': 'className',\r\n        'innerHtml': 'innerHTML',\r\n        'readonly': 'readOnly',\r\n        'tabindex': 'tabIndex',\r\n    };\r\n    var DOM_KEY_LOCATION_NUMPAD = 3;\r\n    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey\r\n    var _keyMap = {\r\n        // The following values are here for cross-browser compatibility and to match the W3C standard\r\n        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\r\n        '\\b': 'Backspace',\r\n        '\\t': 'Tab',\r\n        '\\x7F': 'Delete',\r\n        '\\x1B': 'Escape',\r\n        'Del': 'Delete',\r\n        'Esc': 'Escape',\r\n        'Left': 'ArrowLeft',\r\n        'Right': 'ArrowRight',\r\n        'Up': 'ArrowUp',\r\n        'Down': 'ArrowDown',\r\n        'Menu': 'ContextMenu',\r\n        'Scroll': 'ScrollLock',\r\n        'Win': 'OS'\r\n    };\r\n    // There is a bug in Chrome for numeric keypad keys:\r\n    // https://code.google.com/p/chromium/issues/detail?id=155654\r\n    // 1, 2, 3 ... are reported as A, B, C ...\r\n    var _chromeNumKeyPadMap = {\r\n        'A': '1',\r\n        'B': '2',\r\n        'C': '3',\r\n        'D': '4',\r\n        'E': '5',\r\n        'F': '6',\r\n        'G': '7',\r\n        'H': '8',\r\n        'I': '9',\r\n        'J': '*',\r\n        'K': '+',\r\n        'M': '-',\r\n        'N': '.',\r\n        'O': '/',\r\n        '\\x60': '0',\r\n        '\\x90': 'NumLock'\r\n    };\r\n    var ɵ0 = function () {\r\n        if (i0.ɵglobal['Node']) {\r\n            return i0.ɵglobal['Node'].prototype.contains || function (node) {\r\n                return !!(this.compareDocumentPosition(node) & 16);\r\n            };\r\n        }\r\n        return undefined;\r\n    };\r\n    var nodeContains = (ɵ0)();\r\n    /**\r\n     * A `DomAdapter` powered by full browser DOM APIs.\r\n     *\r\n     * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n     * can introduce XSS risks.\r\n     */\r\n    /* tslint:disable:requireParameterType no-console */\r\n    var BrowserDomAdapter = /** @class */ (function (_super) {\r\n        __extends(BrowserDomAdapter, _super);\r\n        function BrowserDomAdapter() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };\r\n        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };\r\n        BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };\r\n        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };\r\n        BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };\r\n        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {\r\n            var _a;\r\n            (_a = el)[methodName].apply(_a, __spread(args));\r\n        };\r\n        // TODO(tbosch): move this into a separate environment class once we have it\r\n        BrowserDomAdapter.prototype.logError = function (error) {\r\n            if (window.console) {\r\n                if (console.error) {\r\n                    console.error(error);\r\n                }\r\n                else {\r\n                    console.log(error);\r\n                }\r\n            }\r\n        };\r\n        BrowserDomAdapter.prototype.log = function (error) {\r\n            if (window.console) {\r\n                window.console.log && window.console.log(error);\r\n            }\r\n        };\r\n        BrowserDomAdapter.prototype.logGroup = function (error) {\r\n            if (window.console) {\r\n                window.console.group && window.console.group(error);\r\n            }\r\n        };\r\n        BrowserDomAdapter.prototype.logGroupEnd = function () {\r\n            if (window.console) {\r\n                window.console.groupEnd && window.console.groupEnd();\r\n            }\r\n        };\r\n        Object.defineProperty(BrowserDomAdapter.prototype, \"attrToPropMap\", {\r\n            get: function () { return _attrToPropMap; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };\r\n        BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };\r\n        BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };\r\n        BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };\r\n        BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {\r\n            el.addEventListener(evt, listener, false);\r\n            // Needed to follow Dart's subscription semantic, until fix of\r\n            // https://code.google.com/p/dart/issues/detail?id=17406\r\n            return function () { el.removeEventListener(evt, listener, false); };\r\n        };\r\n        BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };\r\n        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {\r\n            var evt = this.getDefaultDocument().createEvent('MouseEvent');\r\n            evt.initEvent(eventType, true, true);\r\n            return evt;\r\n        };\r\n        BrowserDomAdapter.prototype.createEvent = function (eventType) {\r\n            var evt = this.getDefaultDocument().createEvent('Event');\r\n            evt.initEvent(eventType, true, true);\r\n            return evt;\r\n        };\r\n        BrowserDomAdapter.prototype.preventDefault = function (evt) {\r\n            evt.preventDefault();\r\n            evt.returnValue = false;\r\n        };\r\n        BrowserDomAdapter.prototype.isPrevented = function (evt) {\r\n            return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\r\n        };\r\n        BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };\r\n        BrowserDomAdapter.prototype.getTemplateContent = function (el) {\r\n            return 'content' in el && this.isTemplateElement(el) ? el.content : null;\r\n        };\r\n        BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };\r\n        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };\r\n        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };\r\n        BrowserDomAdapter.prototype.type = function (node) { return node.type; };\r\n        BrowserDomAdapter.prototype.content = function (node) {\r\n            if (this.hasProperty(node, 'content')) {\r\n                return node.content;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n        };\r\n        BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };\r\n        BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };\r\n        BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };\r\n        BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };\r\n        BrowserDomAdapter.prototype.childNodesAsList = function (el) {\r\n            var childNodes = el.childNodes;\r\n            var res = new Array(childNodes.length);\r\n            for (var i = 0; i < childNodes.length; i++) {\r\n                res[i] = childNodes[i];\r\n            }\r\n            return res;\r\n        };\r\n        BrowserDomAdapter.prototype.clearNodes = function (el) {\r\n            while (el.firstChild) {\r\n                el.removeChild(el.firstChild);\r\n            }\r\n        };\r\n        BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };\r\n        BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };\r\n        BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };\r\n        BrowserDomAdapter.prototype.remove = function (node) {\r\n            if (node.parentNode) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n            return node;\r\n        };\r\n        BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };\r\n        BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {\r\n            nodes.forEach(function (n) { return parent.insertBefore(n, ref); });\r\n        };\r\n        BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };\r\n        BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };\r\n        BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };\r\n        BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };\r\n        BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };\r\n        BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };\r\n        BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };\r\n        BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };\r\n        BrowserDomAdapter.prototype.createComment = function (text) { return this.getDefaultDocument().createComment(text); };\r\n        BrowserDomAdapter.prototype.createTemplate = function (html) {\r\n            var t = this.getDefaultDocument().createElement('template');\r\n            t.innerHTML = html;\r\n            return t;\r\n        };\r\n        BrowserDomAdapter.prototype.createElement = function (tagName, doc) {\r\n            doc = doc || this.getDefaultDocument();\r\n            return doc.createElement(tagName);\r\n        };\r\n        BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {\r\n            doc = doc || this.getDefaultDocument();\r\n            return doc.createElementNS(ns, tagName);\r\n        };\r\n        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {\r\n            doc = doc || this.getDefaultDocument();\r\n            return doc.createTextNode(text);\r\n        };\r\n        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {\r\n            doc = doc || this.getDefaultDocument();\r\n            var el = doc.createElement('SCRIPT');\r\n            el.setAttribute(attrName, attrValue);\r\n            return el;\r\n        };\r\n        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {\r\n            doc = doc || this.getDefaultDocument();\r\n            var style = doc.createElement('style');\r\n            this.appendChild(style, this.createTextNode(css, doc));\r\n            return style;\r\n        };\r\n        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };\r\n        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };\r\n        BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };\r\n        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };\r\n        BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {\r\n            return element.getElementsByClassName(name);\r\n        };\r\n        BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {\r\n            return element.getElementsByTagName(name);\r\n        };\r\n        BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };\r\n        BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };\r\n        BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };\r\n        BrowserDomAdapter.prototype.hasClass = function (element, className) {\r\n            return element.classList.contains(className);\r\n        };\r\n        BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {\r\n            element.style[styleName] = styleValue;\r\n        };\r\n        BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {\r\n            // IE requires '' instead of null\r\n            // see https://github.com/angular/angular/issues/7916\r\n            element.style[stylename] = '';\r\n        };\r\n        BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };\r\n        BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {\r\n            var value = this.getStyle(element, styleName) || '';\r\n            return styleValue ? value == styleValue : value.length > 0;\r\n        };\r\n        BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };\r\n        BrowserDomAdapter.prototype.attributeMap = function (element) {\r\n            var res = new Map();\r\n            var elAttrs = element.attributes;\r\n            for (var i = 0; i < elAttrs.length; i++) {\r\n                var attrib = elAttrs.item(i);\r\n                res.set(attrib.name, attrib.value);\r\n            }\r\n            return res;\r\n        };\r\n        BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {\r\n            return element.hasAttribute(attribute);\r\n        };\r\n        BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {\r\n            return element.hasAttributeNS(ns, attribute);\r\n        };\r\n        BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {\r\n            return element.getAttribute(attribute);\r\n        };\r\n        BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {\r\n            return element.getAttributeNS(ns, name);\r\n        };\r\n        BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };\r\n        BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {\r\n            element.setAttributeNS(ns, name, value);\r\n        };\r\n        BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };\r\n        BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {\r\n            element.removeAttributeNS(ns, name);\r\n        };\r\n        BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };\r\n        BrowserDomAdapter.prototype.createHtmlDocument = function () {\r\n            return document.implementation.createHTMLDocument('fakeTitle');\r\n        };\r\n        BrowserDomAdapter.prototype.getDefaultDocument = function () { return document; };\r\n        BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {\r\n            try {\r\n                return el.getBoundingClientRect();\r\n            }\r\n            catch (_a) {\r\n                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\r\n            }\r\n        };\r\n        BrowserDomAdapter.prototype.getTitle = function (doc) { return doc.title; };\r\n        BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { doc.title = newTitle || ''; };\r\n        BrowserDomAdapter.prototype.elementMatches = function (n, selector) {\r\n            if (this.isElementNode(n)) {\r\n                return n.matches && n.matches(selector) ||\r\n                    n.msMatchesSelector && n.msMatchesSelector(selector) ||\r\n                    n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\r\n            }\r\n            return false;\r\n        };\r\n        BrowserDomAdapter.prototype.isTemplateElement = function (el) {\r\n            return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\r\n        };\r\n        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };\r\n        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };\r\n        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };\r\n        BrowserDomAdapter.prototype.hasShadowRoot = function (node) {\r\n            return node.shadowRoot != null && node instanceof HTMLElement;\r\n        };\r\n        BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };\r\n        BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };\r\n        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };\r\n        BrowserDomAdapter.prototype.getHref = function (el) { return el.getAttribute('href'); };\r\n        BrowserDomAdapter.prototype.getEventKey = function (event) {\r\n            var key = event.key;\r\n            if (key == null) {\r\n                key = event.keyIdentifier;\r\n                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\r\n                // Safari cf\r\n                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\r\n                if (key == null) {\r\n                    return 'Unidentified';\r\n                }\r\n                if (key.startsWith('U+')) {\r\n                    key = String.fromCharCode(parseInt(key.substring(2), 16));\r\n                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\r\n                        // There is a bug in Chrome for numeric keypad keys:\r\n                        // https://code.google.com/p/chromium/issues/detail?id=155654\r\n                        // 1, 2, 3 ... are reported as A, B, C ...\r\n                        key = _chromeNumKeyPadMap[key];\r\n                    }\r\n                }\r\n            }\r\n            return _keyMap[key] || key;\r\n        };\r\n        BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {\r\n            if (target === 'window') {\r\n                return window;\r\n            }\r\n            if (target === 'document') {\r\n                return doc;\r\n            }\r\n            if (target === 'body') {\r\n                return doc.body;\r\n            }\r\n            return null;\r\n        };\r\n        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };\r\n        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };\r\n        BrowserDomAdapter.prototype.getBaseHref = function (doc) {\r\n            var href = getBaseElementHref();\r\n            return href == null ? null : relativePath(href);\r\n        };\r\n        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };\r\n        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };\r\n        BrowserDomAdapter.prototype.setData = function (element, name, value) {\r\n            this.setAttribute(element, 'data-' + name, value);\r\n        };\r\n        BrowserDomAdapter.prototype.getData = function (element, name) {\r\n            return this.getAttribute(element, 'data-' + name);\r\n        };\r\n        BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };\r\n        // TODO(tbosch): move this into a separate environment class once we have it\r\n        BrowserDomAdapter.prototype.supportsWebAnimation = function () {\r\n            return typeof Element.prototype['animate'] === 'function';\r\n        };\r\n        BrowserDomAdapter.prototype.performanceNow = function () {\r\n            // performance.now() is not available in all browsers, see\r\n            // http://caniuse.com/#search=performance.now\r\n            return window.performance && window.performance.now ? window.performance.now() :\r\n                new Date().getTime();\r\n        };\r\n        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };\r\n        BrowserDomAdapter.prototype.getCookie = function (name) { return common.ɵparseCookieValue(document.cookie, name); };\r\n        BrowserDomAdapter.prototype.setCookie = function (name, value) {\r\n            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\r\n            // not clear other cookies.\r\n            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\r\n        };\r\n        return BrowserDomAdapter;\r\n    }(GenericBrowserDomAdapter));\r\n    var baseElement = null;\r\n    function getBaseElementHref() {\r\n        if (!baseElement) {\r\n            baseElement = document.querySelector('base');\r\n            if (!baseElement) {\r\n                return null;\r\n            }\r\n        }\r\n        return baseElement.getAttribute('href');\r\n    }\r\n    // based on urlUtils.js in AngularJS 1\r\n    var urlParsingNode;\r\n    function relativePath(url) {\r\n        if (!urlParsingNode) {\r\n            urlParsingNode = document.createElement('a');\r\n        }\r\n        urlParsingNode.setAttribute('href', url);\r\n        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\r\n            '/' + urlParsingNode.pathname;\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    function supportsState() {\r\n        return !!window.history.pushState;\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\r\n     * This class should not be used directly by an application developer. Instead, use\r\n     * {@link Location}.\r\n     */\r\n    var BrowserPlatformLocation = /** @class */ (function (_super) {\r\n        __extends(BrowserPlatformLocation, _super);\r\n        function BrowserPlatformLocation(_doc) {\r\n            var _this = _super.call(this) || this;\r\n            _this._doc = _doc;\r\n            _this._init();\r\n            return _this;\r\n        }\r\n        // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\r\n        /** @internal */\r\n        BrowserPlatformLocation.prototype._init = function () {\r\n            this.location = getDOM().getLocation();\r\n            this._history = getDOM().getHistory();\r\n        };\r\n        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(this._doc); };\r\n        BrowserPlatformLocation.prototype.onPopState = function (fn) {\r\n            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\r\n        };\r\n        BrowserPlatformLocation.prototype.onHashChange = function (fn) {\r\n            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\r\n        };\r\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"href\", {\r\n            get: function () { return this.location.href; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"protocol\", {\r\n            get: function () { return this.location.protocol; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"hostname\", {\r\n            get: function () { return this.location.hostname; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"port\", {\r\n            get: function () { return this.location.port; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"pathname\", {\r\n            get: function () { return this.location.pathname; },\r\n            set: function (newPath) { this.location.pathname = newPath; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"search\", {\r\n            get: function () { return this.location.search; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"hash\", {\r\n            get: function () { return this.location.hash; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {\r\n            if (supportsState()) {\r\n                this._history.pushState(state, title, url);\r\n            }\r\n            else {\r\n                this.location.hash = url;\r\n            }\r\n        };\r\n        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {\r\n            if (supportsState()) {\r\n                this._history.replaceState(state, title, url);\r\n            }\r\n            else {\r\n                this.location.hash = url;\r\n            }\r\n        };\r\n        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };\r\n        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };\r\n        BrowserPlatformLocation.prototype.getState = function () { return this._history.state; };\r\n        BrowserPlatformLocation = __decorate([\r\n            i0.Injectable(),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], BrowserPlatformLocation);\r\n        return BrowserPlatformLocation;\r\n    }(common.PlatformLocation));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * An id that identifies a particular application being bootstrapped, that should\r\n     * match across the client/server boundary.\r\n     */\r\n    var TRANSITION_ID = new i0.InjectionToken('TRANSITION_ID');\r\n    function appInitializerFactory(transitionId, document, injector) {\r\n        return function () {\r\n            // Wait for all application initializers to be completed before removing the styles set by\r\n            // the server.\r\n            injector.get(i0.ApplicationInitStatus).donePromise.then(function () {\r\n                var dom = getDOM();\r\n                var styles = Array.prototype.slice.apply(dom.querySelectorAll(document, \"style[ng-transition]\"));\r\n                styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })\r\n                    .forEach(function (el) { return dom.remove(el); });\r\n            });\r\n        };\r\n    }\r\n    var SERVER_TRANSITION_PROVIDERS = [\r\n        {\r\n            provide: i0.APP_INITIALIZER,\r\n            useFactory: appInitializerFactory,\r\n            deps: [TRANSITION_ID, common.DOCUMENT, i0.Injector],\r\n            multi: true\r\n        },\r\n    ];\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var BrowserGetTestability = /** @class */ (function () {\r\n        function BrowserGetTestability() {\r\n        }\r\n        BrowserGetTestability.init = function () { i0.setTestabilityGetter(new BrowserGetTestability()); };\r\n        BrowserGetTestability.prototype.addToWindow = function (registry) {\r\n            i0.ɵglobal['getAngularTestability'] = function (elem, findInAncestors) {\r\n                if (findInAncestors === void 0) { findInAncestors = true; }\r\n                var testability = registry.findTestabilityInTree(elem, findInAncestors);\r\n                if (testability == null) {\r\n                    throw new Error('Could not find testability for element.');\r\n                }\r\n                return testability;\r\n            };\r\n            i0.ɵglobal['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };\r\n            i0.ɵglobal['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };\r\n            var whenAllStable = function (callback /** TODO #9100 */) {\r\n                var testabilities = i0.ɵglobal['getAllAngularTestabilities']();\r\n                var count = testabilities.length;\r\n                var didWork = false;\r\n                var decrement = function (didWork_ /** TODO #9100 */) {\r\n                    didWork = didWork || didWork_;\r\n                    count--;\r\n                    if (count == 0) {\r\n                        callback(didWork);\r\n                    }\r\n                };\r\n                testabilities.forEach(function (testability /** TODO #9100 */) {\r\n                    testability.whenStable(decrement);\r\n                });\r\n            };\r\n            if (!i0.ɵglobal['frameworkStabilizers']) {\r\n                i0.ɵglobal['frameworkStabilizers'] = [];\r\n            }\r\n            i0.ɵglobal['frameworkStabilizers'].push(whenAllStable);\r\n        };\r\n        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\r\n            if (elem == null) {\r\n                return null;\r\n            }\r\n            var t = registry.getTestability(elem);\r\n            if (t != null) {\r\n                return t;\r\n            }\r\n            else if (!findInAncestors) {\r\n                return null;\r\n            }\r\n            if (getDOM().isShadowRoot(elem)) {\r\n                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\r\n            }\r\n            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\r\n        };\r\n        return BrowserGetTestability;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var CAMEL_CASE_REGEXP = /([A-Z])/g;\r\n    var DASH_CASE_REGEXP = /-([a-z])/g;\r\n    function camelCaseToDashCase(input) {\r\n        return input.replace(CAMEL_CASE_REGEXP, function () {\r\n            var m = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                m[_i] = arguments[_i];\r\n            }\r\n            return '-' + m[1].toLowerCase();\r\n        });\r\n    }\r\n    function dashCaseToCamelCase(input) {\r\n        return input.replace(DASH_CASE_REGEXP, function () {\r\n            var m = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                m[_i] = arguments[_i];\r\n            }\r\n            return m[1].toUpperCase();\r\n        });\r\n    }\r\n    /**\r\n     * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\r\n     * `name` is `'probe'`.\r\n     * @param name Name under which it will be exported. Keep in mind this will be a property of the\r\n     * global `ng` object.\r\n     * @param value The value to export.\r\n     */\r\n    function exportNgVar(name, value) {\r\n        if (typeof COMPILED === 'undefined' || !COMPILED) {\r\n            // Note: we can't export `ng` when using closure enhanced optimization as:\r\n            // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\r\n            // - we can't declare a closure extern as the namespace `ng` is already used within Google\r\n            //   for typings for angularJS (via `goog.provide('ng....')`).\r\n            var ng = i0.ɵglobal['ng'] = i0.ɵglobal['ng'] || {};\r\n            ng[name] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var ɵ0$1 = function () { return ({\r\n        'ApplicationRef': i0.ApplicationRef,\r\n        'NgZone': i0.NgZone,\r\n    }); };\r\n    var CORE_TOKENS = (ɵ0$1)();\r\n    var INSPECT_GLOBAL_NAME = 'probe';\r\n    var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\r\n    /**\r\n     * Returns a {@link DebugElement} for the given native DOM element, or\r\n     * null if the given native element does not have an Angular view associated\r\n     * with it.\r\n     */\r\n    function inspectNativeElement(element) {\r\n        return i0.getDebugNode(element);\r\n    }\r\n    function _createNgProbe(coreTokens) {\r\n        exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\r\n        exportNgVar(CORE_TOKENS_GLOBAL_NAME, __assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\r\n        return function () { return inspectNativeElement; };\r\n    }\r\n    function _ngProbeTokensToMap(tokens) {\r\n        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});\r\n    }\r\n    /**\r\n     * In Ivy, we don't support NgProbe because we have our own set of testing utilities\r\n     * with more robust functionality.\r\n     *\r\n     * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\r\n     * tree-shaking properly.\r\n     */\r\n    var ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];\r\n    /**\r\n     * Providers which support debugging Angular applications (e.g. via `ng.probe`).\r\n     */\r\n    var ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [\r\n        {\r\n            provide: i0.APP_INITIALIZER,\r\n            useFactory: _createNgProbe,\r\n            deps: [\r\n                [i0.NgProbeToken, new i0.Optional()],\r\n            ],\r\n            multi: true,\r\n        },\r\n    ];\r\n    var ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__PRE_R3__;\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * The injection token for the event-manager plug-in service.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var EVENT_MANAGER_PLUGINS = new i0.InjectionToken('EventManagerPlugins');\r\n    /**\r\n     * An injectable service that provides event management for Angular\r\n     * through a browser plug-in.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var EventManager = /** @class */ (function () {\r\n        /**\r\n         * Initializes an instance of the event-manager service.\r\n         */\r\n        function EventManager(plugins, _zone) {\r\n            var _this = this;\r\n            this._zone = _zone;\r\n            this._eventNameToPlugin = new Map();\r\n            plugins.forEach(function (p) { return p.manager = _this; });\r\n            this._plugins = plugins.slice().reverse();\r\n        }\r\n        /**\r\n         * Registers a handler for a specific element and event.\r\n         *\r\n         * @param element The HTML element to receive event notifications.\r\n         * @param eventName The name of the event to listen for.\r\n         * @param handler A function to call when the notification occurs. Receives the\r\n         * event object as an argument.\r\n         * @returns  A callback function that can be used to remove the handler.\r\n         */\r\n        EventManager.prototype.addEventListener = function (element, eventName, handler) {\r\n            var plugin = this._findPluginFor(eventName);\r\n            return plugin.addEventListener(element, eventName, handler);\r\n        };\r\n        /**\r\n         * Registers a global handler for an event in a target view.\r\n         *\r\n         * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\r\n         * @param eventName The name of the event to listen for.\r\n         * @param handler A function to call when the notification occurs. Receives the\r\n         * event object as an argument.\r\n         * @returns A callback function that can be used to remove the handler.\r\n         */\r\n        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {\r\n            var plugin = this._findPluginFor(eventName);\r\n            return plugin.addGlobalEventListener(target, eventName, handler);\r\n        };\r\n        /**\r\n         * Retrieves the compilation zone in which event listeners are registered.\r\n         */\r\n        EventManager.prototype.getZone = function () { return this._zone; };\r\n        /** @internal */\r\n        EventManager.prototype._findPluginFor = function (eventName) {\r\n            var plugin = this._eventNameToPlugin.get(eventName);\r\n            if (plugin) {\r\n                return plugin;\r\n            }\r\n            var plugins = this._plugins;\r\n            for (var i = 0; i < plugins.length; i++) {\r\n                var plugin_1 = plugins[i];\r\n                if (plugin_1.supports(eventName)) {\r\n                    this._eventNameToPlugin.set(eventName, plugin_1);\r\n                    return plugin_1;\r\n                }\r\n            }\r\n            throw new Error(\"No event manager plugin found for event \" + eventName);\r\n        };\r\n        EventManager = __decorate([\r\n            i0.Injectable(),\r\n            __param(0, i0.Inject(EVENT_MANAGER_PLUGINS)),\r\n            __metadata(\"design:paramtypes\", [Array, i0.NgZone])\r\n        ], EventManager);\r\n        return EventManager;\r\n    }());\r\n    var EventManagerPlugin = /** @class */ (function () {\r\n        function EventManagerPlugin(_doc) {\r\n            this._doc = _doc;\r\n        }\r\n        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {\r\n            var target = getDOM().getGlobalEventTarget(this._doc, element);\r\n            if (!target) {\r\n                throw new Error(\"Unsupported event target \" + target + \" for event \" + eventName);\r\n            }\r\n            return this.addEventListener(target, eventName, handler);\r\n        };\r\n        return EventManagerPlugin;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var SharedStylesHost = /** @class */ (function () {\r\n        function SharedStylesHost() {\r\n            /** @internal */\r\n            this._stylesSet = new Set();\r\n        }\r\n        SharedStylesHost.prototype.addStyles = function (styles) {\r\n            var _this = this;\r\n            var additions = new Set();\r\n            styles.forEach(function (style) {\r\n                if (!_this._stylesSet.has(style)) {\r\n                    _this._stylesSet.add(style);\r\n                    additions.add(style);\r\n                }\r\n            });\r\n            this.onStylesAdded(additions);\r\n        };\r\n        SharedStylesHost.prototype.onStylesAdded = function (additions) { };\r\n        SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };\r\n        SharedStylesHost = __decorate([\r\n            i0.Injectable()\r\n        ], SharedStylesHost);\r\n        return SharedStylesHost;\r\n    }());\r\n    var DomSharedStylesHost = /** @class */ (function (_super) {\r\n        __extends(DomSharedStylesHost, _super);\r\n        function DomSharedStylesHost(_doc) {\r\n            var _this = _super.call(this) || this;\r\n            _this._doc = _doc;\r\n            _this._hostNodes = new Set();\r\n            _this._styleNodes = new Set();\r\n            _this._hostNodes.add(_doc.head);\r\n            return _this;\r\n        }\r\n        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {\r\n            var _this = this;\r\n            styles.forEach(function (style) {\r\n                var styleEl = _this._doc.createElement('style');\r\n                styleEl.textContent = style;\r\n                _this._styleNodes.add(host.appendChild(styleEl));\r\n            });\r\n        };\r\n        DomSharedStylesHost.prototype.addHost = function (hostNode) {\r\n            this._addStylesToHost(this._stylesSet, hostNode);\r\n            this._hostNodes.add(hostNode);\r\n        };\r\n        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };\r\n        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {\r\n            var _this = this;\r\n            this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });\r\n        };\r\n        DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };\r\n        DomSharedStylesHost = __decorate([\r\n            i0.Injectable(),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DomSharedStylesHost);\r\n        return DomSharedStylesHost;\r\n    }(SharedStylesHost));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var NAMESPACE_URIS = {\r\n        'svg': 'http://www.w3.org/2000/svg',\r\n        'xhtml': 'http://www.w3.org/1999/xhtml',\r\n        'xlink': 'http://www.w3.org/1999/xlink',\r\n        'xml': 'http://www.w3.org/XML/1998/namespace',\r\n        'xmlns': 'http://www.w3.org/2000/xmlns/',\r\n    };\r\n    var COMPONENT_REGEX = /%COMP%/g;\r\n    var COMPONENT_VARIABLE = '%COMP%';\r\n    var HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\r\n    var CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\r\n    function shimContentAttribute(componentShortId) {\r\n        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\r\n    }\r\n    function shimHostAttribute(componentShortId) {\r\n        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\r\n    }\r\n    function flattenStyles(compId, styles, target) {\r\n        for (var i = 0; i < styles.length; i++) {\r\n            var style = styles[i];\r\n            if (Array.isArray(style)) {\r\n                flattenStyles(compId, style, target);\r\n            }\r\n            else {\r\n                style = style.replace(COMPONENT_REGEX, compId);\r\n                target.push(style);\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    function decoratePreventDefault(eventHandler) {\r\n        return function (event) {\r\n            var allowDefaultBehavior = eventHandler(event);\r\n            if (allowDefaultBehavior === false) {\r\n                // TODO(tbosch): move preventDefault into event plugins...\r\n                event.preventDefault();\r\n                event.returnValue = false;\r\n            }\r\n        };\r\n    }\r\n    var DomRendererFactory2 = /** @class */ (function () {\r\n        function DomRendererFactory2(eventManager, sharedStylesHost, appId) {\r\n            this.eventManager = eventManager;\r\n            this.sharedStylesHost = sharedStylesHost;\r\n            this.appId = appId;\r\n            this.rendererByCompId = new Map();\r\n            this.defaultRenderer = new DefaultDomRenderer2(eventManager);\r\n        }\r\n        DomRendererFactory2.prototype.createRenderer = function (element, type) {\r\n            if (!element || !type) {\r\n                return this.defaultRenderer;\r\n            }\r\n            switch (type.encapsulation) {\r\n                case i0.ViewEncapsulation.Emulated: {\r\n                    var renderer = this.rendererByCompId.get(type.id);\r\n                    if (!renderer) {\r\n                        renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);\r\n                        this.rendererByCompId.set(type.id, renderer);\r\n                    }\r\n                    renderer.applyToHost(element);\r\n                    return renderer;\r\n                }\r\n                case i0.ViewEncapsulation.Native:\r\n                case i0.ViewEncapsulation.ShadowDom:\r\n                    return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\r\n                default: {\r\n                    if (!this.rendererByCompId.has(type.id)) {\r\n                        var styles = flattenStyles(type.id, type.styles, []);\r\n                        this.sharedStylesHost.addStyles(styles);\r\n                        this.rendererByCompId.set(type.id, this.defaultRenderer);\r\n                    }\r\n                    return this.defaultRenderer;\r\n                }\r\n            }\r\n        };\r\n        DomRendererFactory2.prototype.begin = function () { };\r\n        DomRendererFactory2.prototype.end = function () { };\r\n        DomRendererFactory2 = __decorate([\r\n            i0.Injectable(),\r\n            __param(2, i0.Inject(i0.APP_ID)),\r\n            __metadata(\"design:paramtypes\", [EventManager, DomSharedStylesHost, String])\r\n        ], DomRendererFactory2);\r\n        return DomRendererFactory2;\r\n    }());\r\n    var DefaultDomRenderer2 = /** @class */ (function () {\r\n        function DefaultDomRenderer2(eventManager) {\r\n            this.eventManager = eventManager;\r\n            this.data = Object.create(null);\r\n        }\r\n        DefaultDomRenderer2.prototype.destroy = function () { };\r\n        DefaultDomRenderer2.prototype.createElement = function (name, namespace) {\r\n            if (namespace) {\r\n                // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\r\n                // will result in undefined, so we just return the namespace here.\r\n                return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\r\n            }\r\n            return document.createElement(name);\r\n        };\r\n        DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };\r\n        DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };\r\n        DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };\r\n        DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\r\n            if (parent) {\r\n                parent.insertBefore(newChild, refChild);\r\n            }\r\n        };\r\n        DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {\r\n            if (parent) {\r\n                parent.removeChild(oldChild);\r\n            }\r\n        };\r\n        DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\r\n            var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\r\n                selectorOrNode;\r\n            if (!el) {\r\n                throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");\r\n            }\r\n            if (!preserveContent) {\r\n                el.textContent = '';\r\n            }\r\n            return el;\r\n        };\r\n        DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };\r\n        DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };\r\n        DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\r\n            if (namespace) {\r\n                name = namespace + ':' + name;\r\n                // TODO(benlesh): Ivy may cause issues here because it's passing around\r\n                // full URIs for namespaces, therefore this lookup will fail.\r\n                var namespaceUri = NAMESPACE_URIS[namespace];\r\n                if (namespaceUri) {\r\n                    el.setAttributeNS(namespaceUri, name, value);\r\n                }\r\n                else {\r\n                    el.setAttribute(name, value);\r\n                }\r\n            }\r\n            else {\r\n                el.setAttribute(name, value);\r\n            }\r\n        };\r\n        DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {\r\n            if (namespace) {\r\n                // TODO(benlesh): Ivy may cause issues here because it's passing around\r\n                // full URIs for namespaces, therefore this lookup will fail.\r\n                var namespaceUri = NAMESPACE_URIS[namespace];\r\n                if (namespaceUri) {\r\n                    el.removeAttributeNS(namespaceUri, name);\r\n                }\r\n                else {\r\n                    // TODO(benlesh): Since ivy is passing around full URIs for namespaces\r\n                    // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\r\n                    // which is wrong.\r\n                    el.removeAttribute(namespace + \":\" + name);\r\n                }\r\n            }\r\n            else {\r\n                el.removeAttribute(name);\r\n            }\r\n        };\r\n        DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };\r\n        DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };\r\n        DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {\r\n            if (flags & i0.RendererStyleFlags2.DashCase) {\r\n                el.style.setProperty(style, value, !!(flags & i0.RendererStyleFlags2.Important) ? 'important' : '');\r\n            }\r\n            else {\r\n                el.style[style] = value;\r\n            }\r\n        };\r\n        DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {\r\n            if (flags & i0.RendererStyleFlags2.DashCase) {\r\n                el.style.removeProperty(style);\r\n            }\r\n            else {\r\n                // IE requires '' instead of null\r\n                // see https://github.com/angular/angular/issues/7916\r\n                el.style[style] = '';\r\n            }\r\n        };\r\n        DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {\r\n            checkNoSyntheticProp(name, 'property');\r\n            el[name] = value;\r\n        };\r\n        DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };\r\n        DefaultDomRenderer2.prototype.listen = function (target, event, callback) {\r\n            checkNoSyntheticProp(event, 'listener');\r\n            if (typeof target === 'string') {\r\n                return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));\r\n            }\r\n            return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));\r\n        };\r\n        return DefaultDomRenderer2;\r\n    }());\r\n    var ɵ0$2 = function () { return '@'.charCodeAt(0); };\r\n    var AT_CHARCODE = (ɵ0$2)();\r\n    function checkNoSyntheticProp(name, nameKind) {\r\n        if (name.charCodeAt(0) === AT_CHARCODE) {\r\n            throw new Error(\"Found the synthetic \" + nameKind + \" \" + name + \". Please include either \\\"BrowserAnimationsModule\\\" or \\\"NoopAnimationsModule\\\" in your application.\");\r\n        }\r\n    }\r\n    var EmulatedEncapsulationDomRenderer2 = /** @class */ (function (_super) {\r\n        __extends(EmulatedEncapsulationDomRenderer2, _super);\r\n        function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component, appId) {\r\n            var _this = _super.call(this, eventManager) || this;\r\n            _this.component = component;\r\n            var styles = flattenStyles(appId + '-' + component.id, component.styles, []);\r\n            sharedStylesHost.addStyles(styles);\r\n            _this.contentAttr = shimContentAttribute(appId + '-' + component.id);\r\n            _this.hostAttr = shimHostAttribute(appId + '-' + component.id);\r\n            return _this;\r\n        }\r\n        EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };\r\n        EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {\r\n            var el = _super.prototype.createElement.call(this, parent, name);\r\n            _super.prototype.setAttribute.call(this, el, this.contentAttr, '');\r\n            return el;\r\n        };\r\n        return EmulatedEncapsulationDomRenderer2;\r\n    }(DefaultDomRenderer2));\r\n    var ShadowDomRenderer = /** @class */ (function (_super) {\r\n        __extends(ShadowDomRenderer, _super);\r\n        function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {\r\n            var _this = _super.call(this, eventManager) || this;\r\n            _this.sharedStylesHost = sharedStylesHost;\r\n            _this.hostEl = hostEl;\r\n            _this.component = component;\r\n            if (component.encapsulation === i0.ViewEncapsulation.ShadowDom) {\r\n                _this.shadowRoot = hostEl.attachShadow({ mode: 'open' });\r\n            }\r\n            else {\r\n                _this.shadowRoot = hostEl.createShadowRoot();\r\n            }\r\n            _this.sharedStylesHost.addHost(_this.shadowRoot);\r\n            var styles = flattenStyles(component.id, component.styles, []);\r\n            for (var i = 0; i < styles.length; i++) {\r\n                var styleEl = document.createElement('style');\r\n                styleEl.textContent = styles[i];\r\n                _this.shadowRoot.appendChild(styleEl);\r\n            }\r\n            return _this;\r\n        }\r\n        ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };\r\n        ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };\r\n        ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {\r\n            return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);\r\n        };\r\n        ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\r\n            return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);\r\n        };\r\n        ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {\r\n            return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);\r\n        };\r\n        ShadowDomRenderer.prototype.parentNode = function (node) {\r\n            return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));\r\n        };\r\n        return ShadowDomRenderer;\r\n    }(DefaultDomRenderer2));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var ɵ0$3 = function () { return (typeof Zone !== 'undefined') && Zone['__symbol__'] ||\r\n        function (v) { return '__zone_symbol__' + v; }; };\r\n    /**\r\n     * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\r\n     * since Angular can do much more\r\n     * efficient bookkeeping than Zone can, because we have additional information. This speeds up\r\n     * addEventListener by 3x.\r\n     */\r\n    var __symbol__ = (ɵ0$3)();\r\n    var ADD_EVENT_LISTENER = __symbol__('addEventListener');\r\n    var REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\r\n    var symbolNames = {};\r\n    var FALSE = 'FALSE';\r\n    var ANGULAR = 'ANGULAR';\r\n    var NATIVE_ADD_LISTENER = 'addEventListener';\r\n    var NATIVE_REMOVE_LISTENER = 'removeEventListener';\r\n    // use the same symbol string which is used in zone.js\r\n    var stopSymbol = '__zone_symbol__propagationStopped';\r\n    var stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\r\n    var ɵ1 = function () {\r\n        var blackListedEvents = (typeof Zone !== 'undefined') && Zone[__symbol__('BLACK_LISTED_EVENTS')];\r\n        if (blackListedEvents) {\r\n            var res_1 = {};\r\n            blackListedEvents.forEach(function (eventName) { res_1[eventName] = eventName; });\r\n            return res_1;\r\n        }\r\n        return undefined;\r\n    };\r\n    var blackListedMap = (ɵ1)();\r\n    var isBlackListedEvent = function (eventName) {\r\n        if (!blackListedMap) {\r\n            return false;\r\n        }\r\n        return blackListedMap.hasOwnProperty(eventName);\r\n    };\r\n    var ɵ2 = isBlackListedEvent;\r\n    // a global listener to handle all dom event,\r\n    // so we do not need to create a closure every time\r\n    var globalListener = function (event) {\r\n        var symbolName = symbolNames[event.type];\r\n        if (!symbolName) {\r\n            return;\r\n        }\r\n        var taskDatas = this[symbolName];\r\n        if (!taskDatas) {\r\n            return;\r\n        }\r\n        var args = [event];\r\n        if (taskDatas.length === 1) {\r\n            // if taskDatas only have one element, just invoke it\r\n            var taskData = taskDatas[0];\r\n            if (taskData.zone !== Zone.current) {\r\n                // only use Zone.run when Zone.current not equals to stored zone\r\n                return taskData.zone.run(taskData.handler, this, args);\r\n            }\r\n            else {\r\n                return taskData.handler.apply(this, args);\r\n            }\r\n        }\r\n        else {\r\n            // copy tasks as a snapshot to avoid event handlers remove\r\n            // itself or others\r\n            var copiedTasks = taskDatas.slice();\r\n            for (var i = 0; i < copiedTasks.length; i++) {\r\n                // if other listener call event.stopImmediatePropagation\r\n                // just break\r\n                if (event[stopSymbol] === true) {\r\n                    break;\r\n                }\r\n                var taskData = copiedTasks[i];\r\n                if (taskData.zone !== Zone.current) {\r\n                    // only use Zone.run when Zone.current not equals to stored zone\r\n                    taskData.zone.run(taskData.handler, this, args);\r\n                }\r\n                else {\r\n                    taskData.handler.apply(this, args);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var ɵ3 = globalListener;\r\n    var DomEventsPlugin = /** @class */ (function (_super) {\r\n        __extends(DomEventsPlugin, _super);\r\n        function DomEventsPlugin(doc, ngZone, platformId) {\r\n            var _this = _super.call(this, doc) || this;\r\n            _this.ngZone = ngZone;\r\n            if (!platformId || !common.isPlatformServer(platformId)) {\r\n                _this.patchEvent();\r\n            }\r\n            return _this;\r\n        }\r\n        DomEventsPlugin.prototype.patchEvent = function () {\r\n            if (typeof Event === 'undefined' || !Event || !Event.prototype) {\r\n                return;\r\n            }\r\n            if (Event.prototype[stopMethodSymbol]) {\r\n                // already patched by zone.js\r\n                return;\r\n            }\r\n            var delegate = Event.prototype[stopMethodSymbol] =\r\n                Event.prototype.stopImmediatePropagation;\r\n            Event.prototype.stopImmediatePropagation = function () {\r\n                if (this) {\r\n                    this[stopSymbol] = true;\r\n                }\r\n                // We should call native delegate in case in some environment part of\r\n                // the application will not use the patched Event. Also we cast the\r\n                // \"arguments\" to any since \"stopImmediatePropagation\" technically does not\r\n                // accept any arguments, but we don't know what developers pass through the\r\n                // function and we want to not break these calls.\r\n                delegate && delegate.apply(this, arguments);\r\n            };\r\n        };\r\n        // This plugin should come last in the list of plugins, because it accepts all\r\n        // events.\r\n        DomEventsPlugin.prototype.supports = function (eventName) { return true; };\r\n        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\r\n            var _this = this;\r\n            /**\r\n             * This code is about to add a listener to the DOM. If Zone.js is present, than\r\n             * `addEventListener` has been patched. The patched code adds overhead in both\r\n             * memory and speed (3x slower) than native. For this reason if we detect that\r\n             * Zone.js is present we use a simple version of zone aware addEventListener instead.\r\n             * The result is faster registration and the zone will be restored.\r\n             * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\r\n             * will not be invoked\r\n             * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\r\n             *\r\n             * NOTE: it is possible that the element is from different iframe, and so we\r\n             * have to check before we execute the method.\r\n             */\r\n            var self = this;\r\n            var zoneJsLoaded = element[ADD_EVENT_LISTENER];\r\n            var callback = handler;\r\n            // if zonejs is loaded and current zone is not ngZone\r\n            // we keep Zone.current on target for later restoration.\r\n            if (zoneJsLoaded && (!i0.NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\r\n                var symbolName = symbolNames[eventName];\r\n                if (!symbolName) {\r\n                    symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\r\n                }\r\n                var taskDatas = element[symbolName];\r\n                var globalListenerRegistered = taskDatas && taskDatas.length > 0;\r\n                if (!taskDatas) {\r\n                    taskDatas = element[symbolName] = [];\r\n                }\r\n                var zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\r\n                if (taskDatas.length === 0) {\r\n                    taskDatas.push({ zone: zone, handler: callback });\r\n                }\r\n                else {\r\n                    var callbackRegistered = false;\r\n                    for (var i = 0; i < taskDatas.length; i++) {\r\n                        if (taskDatas[i].handler === callback) {\r\n                            callbackRegistered = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!callbackRegistered) {\r\n                        taskDatas.push({ zone: zone, handler: callback });\r\n                    }\r\n                }\r\n                if (!globalListenerRegistered) {\r\n                    element[ADD_EVENT_LISTENER](eventName, globalListener, false);\r\n                }\r\n            }\r\n            else {\r\n                element[NATIVE_ADD_LISTENER](eventName, callback, false);\r\n            }\r\n            return function () { return _this.removeEventListener(element, eventName, callback); };\r\n        };\r\n        DomEventsPlugin.prototype.removeEventListener = function (target, eventName, callback) {\r\n            var underlyingRemove = target[REMOVE_EVENT_LISTENER];\r\n            // zone.js not loaded, use native removeEventListener\r\n            if (!underlyingRemove) {\r\n                return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n            }\r\n            var symbolName = symbolNames[eventName];\r\n            var taskDatas = symbolName && target[symbolName];\r\n            if (!taskDatas) {\r\n                // addEventListener not using patched version\r\n                // just call native removeEventListener\r\n                return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n            }\r\n            // fix issue 20532, should be able to remove\r\n            // listener which was added inside of ngZone\r\n            var found = false;\r\n            for (var i = 0; i < taskDatas.length; i++) {\r\n                // remove listener from taskDatas if the callback equals\r\n                if (taskDatas[i].handler === callback) {\r\n                    found = true;\r\n                    taskDatas.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n            if (found) {\r\n                if (taskDatas.length === 0) {\r\n                    // all listeners are removed, we can remove the globalListener from target\r\n                    underlyingRemove.apply(target, [eventName, globalListener, false]);\r\n                }\r\n            }\r\n            else {\r\n                // not found in taskDatas, the callback may be added inside of ngZone\r\n                // use native remove listener to remove the callback\r\n                target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n            }\r\n        };\r\n        DomEventsPlugin = __decorate([\r\n            i0.Injectable(),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __param(2, i0.Optional()), __param(2, i0.Inject(i0.PLATFORM_ID)),\r\n            __metadata(\"design:paramtypes\", [Object, i0.NgZone, Object])\r\n        ], DomEventsPlugin);\r\n        return DomEventsPlugin;\r\n    }(EventManagerPlugin));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * Supported HammerJS recognizer event names.\r\n     */\r\n    var EVENT_NAMES = {\r\n        // pan\r\n        'pan': true,\r\n        'panstart': true,\r\n        'panmove': true,\r\n        'panend': true,\r\n        'pancancel': true,\r\n        'panleft': true,\r\n        'panright': true,\r\n        'panup': true,\r\n        'pandown': true,\r\n        // pinch\r\n        'pinch': true,\r\n        'pinchstart': true,\r\n        'pinchmove': true,\r\n        'pinchend': true,\r\n        'pinchcancel': true,\r\n        'pinchin': true,\r\n        'pinchout': true,\r\n        // press\r\n        'press': true,\r\n        'pressup': true,\r\n        // rotate\r\n        'rotate': true,\r\n        'rotatestart': true,\r\n        'rotatemove': true,\r\n        'rotateend': true,\r\n        'rotatecancel': true,\r\n        // swipe\r\n        'swipe': true,\r\n        'swipeleft': true,\r\n        'swiperight': true,\r\n        'swipeup': true,\r\n        'swipedown': true,\r\n        // tap\r\n        'tap': true,\r\n    };\r\n    /**\r\n     * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\r\n     * @see `HammerGestureConfig`\r\n     *\r\n     * @publicApi\r\n     */\r\n    var HAMMER_GESTURE_CONFIG = new i0.InjectionToken('HammerGestureConfig');\r\n    /**\r\n     * Injection token used to provide a {@link HammerLoader} to Angular.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var HAMMER_LOADER = new i0.InjectionToken('HammerLoader');\r\n    /**\r\n     * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n     * for gesture recognition. Configures specific event recognition.\r\n     * @publicApi\r\n     */\r\n    var HammerGestureConfig = /** @class */ (function () {\r\n        function HammerGestureConfig() {\r\n            /**\r\n             * A set of supported event names for gestures to be used in Angular.\r\n             * Angular supports all built-in recognizers, as listed in\r\n             * [HammerJS documentation](http://hammerjs.github.io/).\r\n             */\r\n            this.events = [];\r\n            /**\r\n            * Maps gesture event names to a set of configuration options\r\n            * that specify overrides to the default values for specific properties.\r\n            *\r\n            * The key is a supported event name to be configured,\r\n            * and the options object contains a set of properties, with override values\r\n            * to be applied to the named recognizer event.\r\n            * For example, to disable recognition of the rotate event, specify\r\n            *  `{\"rotate\": {\"enable\": false}}`.\r\n            *\r\n            * Properties that are not present take the HammerJS default values.\r\n            * For information about which properties are supported for which events,\r\n            * and their allowed and default values, see\r\n            * [HammerJS documentation](http://hammerjs.github.io/).\r\n            *\r\n            */\r\n            this.overrides = {};\r\n        }\r\n        /**\r\n         * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n         * and attaches it to a given HTML element.\r\n         * @param element The element that will recognize gestures.\r\n         * @returns A HammerJS event-manager object.\r\n         */\r\n        HammerGestureConfig.prototype.buildHammer = function (element) {\r\n            var mc = new Hammer(element, this.options);\r\n            mc.get('pinch').set({ enable: true });\r\n            mc.get('rotate').set({ enable: true });\r\n            for (var eventName in this.overrides) {\r\n                mc.get(eventName).set(this.overrides[eventName]);\r\n            }\r\n            return mc;\r\n        };\r\n        HammerGestureConfig = __decorate([\r\n            i0.Injectable()\r\n        ], HammerGestureConfig);\r\n        return HammerGestureConfig;\r\n    }());\r\n    var HammerGesturesPlugin = /** @class */ (function (_super) {\r\n        __extends(HammerGesturesPlugin, _super);\r\n        function HammerGesturesPlugin(doc, _config, console, loader) {\r\n            var _this = _super.call(this, doc) || this;\r\n            _this._config = _config;\r\n            _this.console = console;\r\n            _this.loader = loader;\r\n            return _this;\r\n        }\r\n        HammerGesturesPlugin.prototype.supports = function (eventName) {\r\n            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\r\n                return false;\r\n            }\r\n            if (!window.Hammer && !this.loader) {\r\n                this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because Hammer.JS is not \" +\r\n                    \"loaded and no custom loader has been specified.\");\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {\r\n            var _this = this;\r\n            var zone = this.manager.getZone();\r\n            eventName = eventName.toLowerCase();\r\n            // If Hammer is not present but a loader is specified, we defer adding the event listener\r\n            // until Hammer is loaded.\r\n            if (!window.Hammer && this.loader) {\r\n                // This `addEventListener` method returns a function to remove the added listener.\r\n                // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\r\n                // than remove anything.\r\n                var cancelRegistration_1 = false;\r\n                var deregister_1 = function () { cancelRegistration_1 = true; };\r\n                this.loader()\r\n                    .then(function () {\r\n                    // If Hammer isn't actually loaded when the custom loader resolves, give up.\r\n                    if (!window.Hammer) {\r\n                        _this.console.warn(\"The custom HAMMER_LOADER completed, but Hammer.JS is not present.\");\r\n                        deregister_1 = function () { };\r\n                        return;\r\n                    }\r\n                    if (!cancelRegistration_1) {\r\n                        // Now that Hammer is loaded and the listener is being loaded for real,\r\n                        // the deregistration function changes from canceling registration to removal.\r\n                        deregister_1 = _this.addEventListener(element, eventName, handler);\r\n                    }\r\n                })\r\n                    .catch(function () {\r\n                    _this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because the custom \" +\r\n                        \"Hammer.JS loader failed.\");\r\n                    deregister_1 = function () { };\r\n                });\r\n                // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\r\n                // can change the behavior of `deregister` once the listener is added. Using a closure in\r\n                // this way allows us to avoid any additional data structures to track listener removal.\r\n                return function () { deregister_1(); };\r\n            }\r\n            return zone.runOutsideAngular(function () {\r\n                // Creating the manager bind events, must be done outside of angular\r\n                var mc = _this._config.buildHammer(element);\r\n                var callback = function (eventObj) {\r\n                    zone.runGuarded(function () { handler(eventObj); });\r\n                };\r\n                mc.on(eventName, callback);\r\n                return function () {\r\n                    mc.off(eventName, callback);\r\n                    // destroy mc to prevent memory leak\r\n                    if (typeof mc.destroy === 'function') {\r\n                        mc.destroy();\r\n                    }\r\n                };\r\n            });\r\n        };\r\n        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };\r\n        HammerGesturesPlugin = __decorate([\r\n            i0.Injectable(),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __param(1, i0.Inject(HAMMER_GESTURE_CONFIG)),\r\n            __param(3, i0.Optional()), __param(3, i0.Inject(HAMMER_LOADER)),\r\n            __metadata(\"design:paramtypes\", [Object, HammerGestureConfig, i0.ɵConsole, Object])\r\n        ], HammerGesturesPlugin);\r\n        return HammerGesturesPlugin;\r\n    }(EventManagerPlugin));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * Defines supported modifiers for key events.\r\n     */\r\n    var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\r\n    var ɵ0$4 = function (event) { return event.altKey; }, ɵ1$1 = function (event) { return event.ctrlKey; }, ɵ2$1 = function (event) { return event.metaKey; }, ɵ3$1 = function (event) { return event.shiftKey; };\r\n    /**\r\n     * Retrieves modifiers from key-event objects.\r\n     */\r\n    var MODIFIER_KEY_GETTERS = {\r\n        'alt': ɵ0$4,\r\n        'control': ɵ1$1,\r\n        'meta': ɵ2$1,\r\n        'shift': ɵ3$1\r\n    };\r\n    /**\r\n     * @publicApi\r\n     * A browser plug-in that provides support for handling of key events in Angular.\r\n     */\r\n    var KeyEventsPlugin = /** @class */ (function (_super) {\r\n        __extends(KeyEventsPlugin, _super);\r\n        /**\r\n         * Initializes an instance of the browser plug-in.\r\n         * @param doc The document in which key events will be detected.\r\n         */\r\n        function KeyEventsPlugin(doc) {\r\n            return _super.call(this, doc) || this;\r\n        }\r\n        KeyEventsPlugin_1 = KeyEventsPlugin;\r\n        /**\r\n          * Reports whether a named key event is supported.\r\n          * @param eventName The event name to query.\r\n          * @return True if the named key event is supported.\r\n         */\r\n        KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin_1.parseEventName(eventName) != null; };\r\n        /**\r\n         * Registers a handler for a specific element and key event.\r\n         * @param element The HTML element to receive event notifications.\r\n         * @param eventName The name of the key event to listen for.\r\n         * @param handler A function to call when the notification occurs. Receives the\r\n         * event object as an argument.\r\n         * @returns The key event that was registered.\r\n        */\r\n        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\r\n            var parsedEvent = KeyEventsPlugin_1.parseEventName(eventName);\r\n            var outsideHandler = KeyEventsPlugin_1.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\r\n            return this.manager.getZone().runOutsideAngular(function () {\r\n                return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\r\n            });\r\n        };\r\n        KeyEventsPlugin.parseEventName = function (eventName) {\r\n            var parts = eventName.toLowerCase().split('.');\r\n            var domEventName = parts.shift();\r\n            if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\r\n                return null;\r\n            }\r\n            var key = KeyEventsPlugin_1._normalizeKey(parts.pop());\r\n            var fullKey = '';\r\n            MODIFIER_KEYS.forEach(function (modifierName) {\r\n                var index = parts.indexOf(modifierName);\r\n                if (index > -1) {\r\n                    parts.splice(index, 1);\r\n                    fullKey += modifierName + '.';\r\n                }\r\n            });\r\n            fullKey += key;\r\n            if (parts.length != 0 || key.length === 0) {\r\n                // returning null instead of throwing to let another plugin process the event\r\n                return null;\r\n            }\r\n            var result = {};\r\n            result['domEventName'] = domEventName;\r\n            result['fullKey'] = fullKey;\r\n            return result;\r\n        };\r\n        KeyEventsPlugin.getEventFullKey = function (event) {\r\n            var fullKey = '';\r\n            var key = getDOM().getEventKey(event);\r\n            key = key.toLowerCase();\r\n            if (key === ' ') {\r\n                key = 'space'; // for readability\r\n            }\r\n            else if (key === '.') {\r\n                key = 'dot'; // because '.' is used as a separator in event names\r\n            }\r\n            MODIFIER_KEYS.forEach(function (modifierName) {\r\n                if (modifierName != key) {\r\n                    var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\r\n                    if (modifierGetter(event)) {\r\n                        fullKey += modifierName + '.';\r\n                    }\r\n                }\r\n            });\r\n            fullKey += key;\r\n            return fullKey;\r\n        };\r\n        /**\r\n         * Configures a handler callback for a key event.\r\n         * @param fullKey The event name that combines all simultaneous keystrokes.\r\n         * @param handler The function that responds to the key event.\r\n         * @param zone The zone in which the event occurred.\r\n         * @returns A callback function.\r\n         */\r\n        KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {\r\n            return function (event /** TODO #9100 */) {\r\n                if (KeyEventsPlugin_1.getEventFullKey(event) === fullKey) {\r\n                    zone.runGuarded(function () { return handler(event); });\r\n                }\r\n            };\r\n        };\r\n        /** @internal */\r\n        KeyEventsPlugin._normalizeKey = function (keyName) {\r\n            // TODO: switch to a Map if the mapping grows too much\r\n            switch (keyName) {\r\n                case 'esc':\r\n                    return 'escape';\r\n                default:\r\n                    return keyName;\r\n            }\r\n        };\r\n        var KeyEventsPlugin_1;\r\n        KeyEventsPlugin = KeyEventsPlugin_1 = __decorate([\r\n            i0.Injectable(),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], KeyEventsPlugin);\r\n        return KeyEventsPlugin;\r\n    }(EventManagerPlugin));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\r\n     * values to be safe to use in the different DOM contexts.\r\n     *\r\n     * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\r\n     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\r\n     * the website.\r\n     *\r\n     * In specific situations, it might be necessary to disable sanitization, for example if the\r\n     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\r\n     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\r\n     * methods, and then binding to that value from the template.\r\n     *\r\n     * These situations should be very rare, and extraordinary care must be taken to avoid creating a\r\n     * Cross Site Scripting (XSS) security bug!\r\n     *\r\n     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\r\n     * close as possible to the source of the value, to make it easy to verify no security bug is\r\n     * created by its use.\r\n     *\r\n     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\r\n     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\r\n     * code. The sanitizer leaves safe values intact.\r\n     *\r\n     * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\r\n     * sanitization for the value passed in. Carefully check and audit all values and code paths going\r\n     * into this call. Make sure any user data is appropriately escaped for this security context.\r\n     * For more detail, see the [Security Guide](http://g.co/ng/security).\r\n     *\r\n     * @publicApi\r\n     */\r\n    var DomSanitizer = /** @class */ (function () {\r\n        function DomSanitizer() {\r\n        }\r\n        return DomSanitizer;\r\n    }());\r\n    var DomSanitizerImpl = /** @class */ (function (_super) {\r\n        __extends(DomSanitizerImpl, _super);\r\n        function DomSanitizerImpl(_doc) {\r\n            var _this = _super.call(this) || this;\r\n            _this._doc = _doc;\r\n            return _this;\r\n        }\r\n        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {\r\n            if (value == null)\r\n                return null;\r\n            switch (ctx) {\r\n                case i0.SecurityContext.NONE:\r\n                    return value;\r\n                case i0.SecurityContext.HTML:\r\n                    if (value instanceof SafeHtmlImpl)\r\n                        return value.changingThisBreaksApplicationSecurity;\r\n                    this.checkNotSafeValue(value, 'HTML');\r\n                    return i0.ɵ_sanitizeHtml(this._doc, String(value));\r\n                case i0.SecurityContext.STYLE:\r\n                    if (value instanceof SafeStyleImpl)\r\n                        return value.changingThisBreaksApplicationSecurity;\r\n                    this.checkNotSafeValue(value, 'Style');\r\n                    return i0.ɵ_sanitizeStyle(value);\r\n                case i0.SecurityContext.SCRIPT:\r\n                    if (value instanceof SafeScriptImpl)\r\n                        return value.changingThisBreaksApplicationSecurity;\r\n                    this.checkNotSafeValue(value, 'Script');\r\n                    throw new Error('unsafe value used in a script context');\r\n                case i0.SecurityContext.URL:\r\n                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\r\n                        // Allow resource URLs in URL contexts, they are strictly more trusted.\r\n                        return value.changingThisBreaksApplicationSecurity;\r\n                    }\r\n                    this.checkNotSafeValue(value, 'URL');\r\n                    return i0.ɵ_sanitizeUrl(String(value));\r\n                case i0.SecurityContext.RESOURCE_URL:\r\n                    if (value instanceof SafeResourceUrlImpl) {\r\n                        return value.changingThisBreaksApplicationSecurity;\r\n                    }\r\n                    this.checkNotSafeValue(value, 'ResourceURL');\r\n                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\r\n                default:\r\n                    throw new Error(\"Unexpected SecurityContext \" + ctx + \" (see http://g.co/ng/security#xss)\");\r\n            }\r\n        };\r\n        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {\r\n            if (value instanceof SafeValueImpl) {\r\n                throw new Error(\"Required a safe \" + expectedType + \", got a \" + value.getTypeName() + \" \" +\r\n                    \"(see http://g.co/ng/security#xss)\");\r\n            }\r\n        };\r\n        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };\r\n        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };\r\n        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };\r\n        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };\r\n        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {\r\n            return new SafeResourceUrlImpl(value);\r\n        };\r\n        DomSanitizerImpl = __decorate([\r\n            i0.Injectable(),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DomSanitizerImpl);\r\n        return DomSanitizerImpl;\r\n    }(DomSanitizer));\r\n    var SafeValueImpl = /** @class */ (function () {\r\n        function SafeValueImpl(changingThisBreaksApplicationSecurity) {\r\n            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\r\n            // empty\r\n        }\r\n        SafeValueImpl.prototype.toString = function () {\r\n            return \"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity +\r\n                \" (see http://g.co/ng/security#xss)\";\r\n        };\r\n        return SafeValueImpl;\r\n    }());\r\n    var SafeHtmlImpl = /** @class */ (function (_super) {\r\n        __extends(SafeHtmlImpl, _super);\r\n        function SafeHtmlImpl() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };\r\n        return SafeHtmlImpl;\r\n    }(SafeValueImpl));\r\n    var SafeStyleImpl = /** @class */ (function (_super) {\r\n        __extends(SafeStyleImpl, _super);\r\n        function SafeStyleImpl() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };\r\n        return SafeStyleImpl;\r\n    }(SafeValueImpl));\r\n    var SafeScriptImpl = /** @class */ (function (_super) {\r\n        __extends(SafeScriptImpl, _super);\r\n        function SafeScriptImpl() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };\r\n        return SafeScriptImpl;\r\n    }(SafeValueImpl));\r\n    var SafeUrlImpl = /** @class */ (function (_super) {\r\n        __extends(SafeUrlImpl, _super);\r\n        function SafeUrlImpl() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };\r\n        return SafeUrlImpl;\r\n    }(SafeValueImpl));\r\n    var SafeResourceUrlImpl = /** @class */ (function (_super) {\r\n        __extends(SafeResourceUrlImpl, _super);\r\n        function SafeResourceUrlImpl() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };\r\n        return SafeResourceUrlImpl;\r\n    }(SafeValueImpl));\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var ɵ0$5 = common.ɵPLATFORM_BROWSER_ID;\r\n    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\r\n        { provide: i0.PLATFORM_ID, useValue: ɵ0$5 },\r\n        { provide: i0.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\r\n        { provide: common.PlatformLocation, useClass: BrowserPlatformLocation, deps: [common.DOCUMENT] },\r\n        { provide: common.DOCUMENT, useFactory: _document, deps: [] },\r\n    ];\r\n    /**\r\n     * @security Replacing built-in sanitization providers exposes the application to XSS risks.\r\n     * Attacker-controlled data introduced by an unsanitized provider could expose your\r\n     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\r\n     * @publicApi\r\n     */\r\n    var BROWSER_SANITIZATION_PROVIDERS = [\r\n        { provide: i0.Sanitizer, useExisting: DomSanitizer },\r\n        { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [common.DOCUMENT] },\r\n    ];\r\n    /**\r\n     * @publicApi\r\n     */\r\n    var platformBrowser = i0.createPlatformFactory(i0.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\r\n    function initDomAdapter() {\r\n        BrowserDomAdapter.makeCurrent();\r\n        BrowserGetTestability.init();\r\n    }\r\n    function errorHandler() {\r\n        return new i0.ErrorHandler();\r\n    }\r\n    function _document() {\r\n        return document;\r\n    }\r\n    var BROWSER_MODULE_PROVIDERS = [\r\n        BROWSER_SANITIZATION_PROVIDERS,\r\n        { provide: i0.ɵAPP_ROOT, useValue: true },\r\n        { provide: i0.ErrorHandler, useFactory: errorHandler, deps: [] },\r\n        {\r\n            provide: EVENT_MANAGER_PLUGINS,\r\n            useClass: DomEventsPlugin,\r\n            multi: true,\r\n            deps: [common.DOCUMENT, i0.NgZone, i0.PLATFORM_ID]\r\n        },\r\n        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [common.DOCUMENT] },\r\n        {\r\n            provide: EVENT_MANAGER_PLUGINS,\r\n            useClass: HammerGesturesPlugin,\r\n            multi: true,\r\n            deps: [common.DOCUMENT, HAMMER_GESTURE_CONFIG, i0.ɵConsole, [new i0.Optional(), HAMMER_LOADER]]\r\n        },\r\n        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\r\n        {\r\n            provide: DomRendererFactory2,\r\n            useClass: DomRendererFactory2,\r\n            deps: [EventManager, DomSharedStylesHost, i0.APP_ID]\r\n        },\r\n        { provide: i0.RendererFactory2, useExisting: DomRendererFactory2 },\r\n        { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\r\n        { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [common.DOCUMENT] },\r\n        { provide: i0.Testability, useClass: i0.Testability, deps: [i0.NgZone] },\r\n        { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, i0.NgZone] },\r\n        ELEMENT_PROBE_PROVIDERS,\r\n    ];\r\n    /**\r\n     * Exports required infrastructure for all Angular apps.\r\n     * Included by default in all Angular apps created with the CLI\r\n     * `new` command.\r\n     * Re-exports `CommonModule` and `ApplicationModule`, making their\r\n     * exports and providers available to all apps.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var BrowserModule = /** @class */ (function () {\r\n        function BrowserModule(parentModule) {\r\n            if (parentModule) {\r\n                throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\");\r\n            }\r\n        }\r\n        BrowserModule_1 = BrowserModule;\r\n        /**\r\n         * Configures a browser-based app to transition from a server-rendered app, if\r\n         * one is present on the page.\r\n         *\r\n         * @param params An object containing an identifier for the app to transition.\r\n         * The ID must match between the client and server versions of the app.\r\n         * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\r\n         */\r\n        BrowserModule.withServerTransition = function (params) {\r\n            return {\r\n                ngModule: BrowserModule_1,\r\n                providers: [\r\n                    { provide: i0.APP_ID, useValue: params.appId },\r\n                    { provide: TRANSITION_ID, useExisting: i0.APP_ID },\r\n                    SERVER_TRANSITION_PROVIDERS,\r\n                ],\r\n            };\r\n        };\r\n        var BrowserModule_1;\r\n        BrowserModule = BrowserModule_1 = __decorate([\r\n            i0.NgModule({ providers: BROWSER_MODULE_PROVIDERS, exports: [common.CommonModule, i0.ApplicationModule] }),\r\n            __param(0, i0.Optional()), __param(0, i0.SkipSelf()), __param(0, i0.Inject(BrowserModule_1)),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], BrowserModule);\r\n        return BrowserModule;\r\n    }());\r\n\r\n    /**\r\n     * Factory to create Meta service.\r\n     */\r\n    function createMeta() {\r\n        return new Meta(i0.ɵɵinject(common.DOCUMENT));\r\n    }\r\n    /**\r\n     * A service that can be used to get and add meta tags.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var Meta = /** @class */ (function () {\r\n        function Meta(_doc) {\r\n            this._doc = _doc;\r\n            this._dom = getDOM();\r\n        }\r\n        Meta.prototype.addTag = function (tag, forceCreation) {\r\n            if (forceCreation === void 0) { forceCreation = false; }\r\n            if (!tag)\r\n                return null;\r\n            return this._getOrCreateElement(tag, forceCreation);\r\n        };\r\n        Meta.prototype.addTags = function (tags, forceCreation) {\r\n            var _this = this;\r\n            if (forceCreation === void 0) { forceCreation = false; }\r\n            if (!tags)\r\n                return [];\r\n            return tags.reduce(function (result, tag) {\r\n                if (tag) {\r\n                    result.push(_this._getOrCreateElement(tag, forceCreation));\r\n                }\r\n                return result;\r\n            }, []);\r\n        };\r\n        Meta.prototype.getTag = function (attrSelector) {\r\n            if (!attrSelector)\r\n                return null;\r\n            return this._dom.querySelector(this._doc, \"meta[\" + attrSelector + \"]\") || null;\r\n        };\r\n        Meta.prototype.getTags = function (attrSelector) {\r\n            if (!attrSelector)\r\n                return [];\r\n            var list /*NodeList*/ = this._dom.querySelectorAll(this._doc, \"meta[\" + attrSelector + \"]\");\r\n            return list ? [].slice.call(list) : [];\r\n        };\r\n        Meta.prototype.updateTag = function (tag, selector) {\r\n            if (!tag)\r\n                return null;\r\n            selector = selector || this._parseSelector(tag);\r\n            var meta = this.getTag(selector);\r\n            if (meta) {\r\n                return this._setMetaElementAttributes(tag, meta);\r\n            }\r\n            return this._getOrCreateElement(tag, true);\r\n        };\r\n        Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(this.getTag(attrSelector)); };\r\n        Meta.prototype.removeTagElement = function (meta) {\r\n            if (meta) {\r\n                this._dom.remove(meta);\r\n            }\r\n        };\r\n        Meta.prototype._getOrCreateElement = function (meta, forceCreation) {\r\n            if (forceCreation === void 0) { forceCreation = false; }\r\n            if (!forceCreation) {\r\n                var selector = this._parseSelector(meta);\r\n                var elem = this.getTag(selector);\r\n                // It's allowed to have multiple elements with the same name so it's not enough to\r\n                // just check that element with the same name already present on the page. We also need to\r\n                // check if element has tag attributes\r\n                if (elem && this._containsAttributes(meta, elem))\r\n                    return elem;\r\n            }\r\n            var element = this._dom.createElement('meta');\r\n            this._setMetaElementAttributes(meta, element);\r\n            var head = this._dom.getElementsByTagName(this._doc, 'head')[0];\r\n            this._dom.appendChild(head, element);\r\n            return element;\r\n        };\r\n        Meta.prototype._setMetaElementAttributes = function (tag, el) {\r\n            var _this = this;\r\n            Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });\r\n            return el;\r\n        };\r\n        Meta.prototype._parseSelector = function (tag) {\r\n            var attr = tag.name ? 'name' : 'property';\r\n            return attr + \"=\\\"\" + tag[attr] + \"\\\"\";\r\n        };\r\n        Meta.prototype._containsAttributes = function (tag, elem) {\r\n            var _this = this;\r\n            return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });\r\n        };\r\n        Meta.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: createMeta, token: Meta, providedIn: \"root\" });\r\n        Meta = __decorate([\r\n            i0.Injectable({ providedIn: 'root', useFactory: createMeta, deps: [] }),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], Meta);\r\n        return Meta;\r\n    }());\r\n\r\n    /**\r\n     * Factory to create Title service.\r\n     */\r\n    function createTitle() {\r\n        return new Title(i0.ɵɵinject(common.DOCUMENT));\r\n    }\r\n    /**\r\n     * A service that can be used to get and set the title of a current HTML document.\r\n     *\r\n     * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\r\n     * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\r\n     * (representing the `<title>` tag). Instead, this service can be used to set and get the current\r\n     * title value.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var Title = /** @class */ (function () {\r\n        function Title(_doc) {\r\n            this._doc = _doc;\r\n        }\r\n        /**\r\n         * Get the title of the current HTML document.\r\n         */\r\n        Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };\r\n        /**\r\n         * Set the title of the current HTML document.\r\n         * @param newTitle\r\n         */\r\n        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };\r\n        Title.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: createTitle, token: Title, providedIn: \"root\" });\r\n        Title = __decorate([\r\n            i0.Injectable({ providedIn: 'root', useFactory: createTitle, deps: [] }),\r\n            __param(0, i0.Inject(common.DOCUMENT)),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], Title);\r\n        return Title;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var win = typeof window !== 'undefined' && window || {};\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var ChangeDetectionPerfRecord = /** @class */ (function () {\r\n        function ChangeDetectionPerfRecord(msPerTick, numTicks) {\r\n            this.msPerTick = msPerTick;\r\n            this.numTicks = numTicks;\r\n        }\r\n        return ChangeDetectionPerfRecord;\r\n    }());\r\n    /**\r\n     * Entry point for all Angular profiling-related debug tools. This object\r\n     * corresponds to the `ng.profiler` in the dev console.\r\n     */\r\n    var AngularProfiler = /** @class */ (function () {\r\n        function AngularProfiler(ref) {\r\n            this.appRef = ref.injector.get(i0.ApplicationRef);\r\n        }\r\n        // tslint:disable:no-console\r\n        /**\r\n         * Exercises change detection in a loop and then prints the average amount of\r\n         * time in milliseconds how long a single round of change detection takes for\r\n         * the current state of the UI. It runs a minimum of 5 rounds for a minimum\r\n         * of 500 milliseconds.\r\n         *\r\n         * Optionally, a user may pass a `config` parameter containing a map of\r\n         * options. Supported options are:\r\n         *\r\n         * `record` (boolean) - causes the profiler to record a CPU profile while\r\n         * it exercises the change detector. Example:\r\n         *\r\n         * ```\r\n         * ng.profiler.timeChangeDetection({record: true})\r\n         * ```\r\n         */\r\n        AngularProfiler.prototype.timeChangeDetection = function (config) {\r\n            var record = config && config['record'];\r\n            var profileName = 'Change Detection';\r\n            // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\r\n            var isProfilerAvailable = win.console.profile != null;\r\n            if (record && isProfilerAvailable) {\r\n                win.console.profile(profileName);\r\n            }\r\n            var start = getDOM().performanceNow();\r\n            var numTicks = 0;\r\n            while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\r\n                this.appRef.tick();\r\n                numTicks++;\r\n            }\r\n            var end = getDOM().performanceNow();\r\n            if (record && isProfilerAvailable) {\r\n                win.console.profileEnd(profileName);\r\n            }\r\n            var msPerTick = (end - start) / numTicks;\r\n            win.console.log(\"ran \" + numTicks + \" change detection cycles\");\r\n            win.console.log(msPerTick.toFixed(2) + \" ms per check\");\r\n            return new ChangeDetectionPerfRecord(msPerTick, numTicks);\r\n        };\r\n        return AngularProfiler;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    var PROFILER_GLOBAL_NAME = 'profiler';\r\n    /**\r\n     * Enabled Angular debug tools that are accessible via your browser's\r\n     * developer console.\r\n     *\r\n     * Usage:\r\n     *\r\n     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\r\n     * 1. Type `ng.` (usually the console will show auto-complete suggestion)\r\n     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\r\n     *    then hit Enter.\r\n     *\r\n     * @publicApi\r\n     */\r\n    function enableDebugTools(ref) {\r\n        exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\r\n        return ref;\r\n    }\r\n    /**\r\n     * Disables Angular tools.\r\n     *\r\n     * @publicApi\r\n     */\r\n    function disableDebugTools() {\r\n        exportNgVar(PROFILER_GLOBAL_NAME, null);\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    function escapeHtml(text) {\r\n        var escapedText = {\r\n            '&': '&a;',\r\n            '\"': '&q;',\r\n            '\\'': '&s;',\r\n            '<': '&l;',\r\n            '>': '&g;',\r\n        };\r\n        return text.replace(/[&\"'<>]/g, function (s) { return escapedText[s]; });\r\n    }\r\n    function unescapeHtml(text) {\r\n        var unescapedText = {\r\n            '&a;': '&',\r\n            '&q;': '\"',\r\n            '&s;': '\\'',\r\n            '&l;': '<',\r\n            '&g;': '>',\r\n        };\r\n        return text.replace(/&[^;]+;/g, function (s) { return unescapedText[s]; });\r\n    }\r\n    /**\r\n     * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```\r\n     * const COUNTER_KEY = makeStateKey<number>('counter');\r\n     * let value = 10;\r\n     *\r\n     * transferState.set(COUNTER_KEY, value);\r\n     * ```\r\n     *\r\n     * @publicApi\r\n     */\r\n    function makeStateKey(key) {\r\n        return key;\r\n    }\r\n    /**\r\n     * A key value store that is transferred from the application on the server side to the application\r\n     * on the client side.\r\n     *\r\n     * `TransferState` will be available as an injectable token. To use it import\r\n     * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\r\n     *\r\n     * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\r\n     * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\r\n     * non-lossy manner.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var TransferState = /** @class */ (function () {\r\n        function TransferState() {\r\n            this.store = {};\r\n            this.onSerializeCallbacks = {};\r\n        }\r\n        TransferState_1 = TransferState;\r\n        /** @internal */\r\n        TransferState.init = function (initState) {\r\n            var transferState = new TransferState_1();\r\n            transferState.store = initState;\r\n            return transferState;\r\n        };\r\n        /**\r\n         * Get the value corresponding to a key. Return `defaultValue` if key is not found.\r\n         */\r\n        TransferState.prototype.get = function (key, defaultValue) {\r\n            return this.store[key] !== undefined ? this.store[key] : defaultValue;\r\n        };\r\n        /**\r\n         * Set the value corresponding to a key.\r\n         */\r\n        TransferState.prototype.set = function (key, value) { this.store[key] = value; };\r\n        /**\r\n         * Remove a key from the store.\r\n         */\r\n        TransferState.prototype.remove = function (key) { delete this.store[key]; };\r\n        /**\r\n         * Test whether a key exists in the store.\r\n         */\r\n        TransferState.prototype.hasKey = function (key) { return this.store.hasOwnProperty(key); };\r\n        /**\r\n         * Register a callback to provide the value for a key when `toJson` is called.\r\n         */\r\n        TransferState.prototype.onSerialize = function (key, callback) {\r\n            this.onSerializeCallbacks[key] = callback;\r\n        };\r\n        /**\r\n         * Serialize the current state of the store to JSON.\r\n         */\r\n        TransferState.prototype.toJson = function () {\r\n            // Call the onSerialize callbacks and put those values into the store.\r\n            for (var key in this.onSerializeCallbacks) {\r\n                if (this.onSerializeCallbacks.hasOwnProperty(key)) {\r\n                    try {\r\n                        this.store[key] = this.onSerializeCallbacks[key]();\r\n                    }\r\n                    catch (e) {\r\n                        console.warn('Exception in onSerialize callback: ', e);\r\n                    }\r\n                }\r\n            }\r\n            return JSON.stringify(this.store);\r\n        };\r\n        var TransferState_1;\r\n        TransferState = TransferState_1 = __decorate([\r\n            i0.Injectable()\r\n        ], TransferState);\r\n        return TransferState;\r\n    }());\r\n    function initTransferState(doc, appId) {\r\n        // Locate the script tag with the JSON data transferred from the server.\r\n        // The id of the script tag is set to the Angular appId + 'state'.\r\n        var script = doc.getElementById(appId + '-state');\r\n        var initialState = {};\r\n        if (script && script.textContent) {\r\n            try {\r\n                initialState = JSON.parse(unescapeHtml(script.textContent));\r\n            }\r\n            catch (e) {\r\n                console.warn('Exception while restoring TransferState for app ' + appId, e);\r\n            }\r\n        }\r\n        return TransferState.init(initialState);\r\n    }\r\n    /**\r\n     * NgModule to install on the client side while using the `TransferState` to transfer state from\r\n     * server to client.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var BrowserTransferStateModule = /** @class */ (function () {\r\n        function BrowserTransferStateModule() {\r\n        }\r\n        BrowserTransferStateModule = __decorate([\r\n            i0.NgModule({\r\n                providers: [{ provide: TransferState, useFactory: initTransferState, deps: [common.DOCUMENT, i0.APP_ID] }],\r\n            })\r\n        ], BrowserTransferStateModule);\r\n        return BrowserTransferStateModule;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * Predicates for use with {@link DebugElement}'s query functions.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var By = /** @class */ (function () {\r\n        function By() {\r\n        }\r\n        /**\r\n         * Match all nodes.\r\n         *\r\n         * @usageNotes\r\n         * ### Example\r\n         *\r\n         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\r\n         */\r\n        By.all = function () { return function () { return true; }; };\r\n        /**\r\n         * Match elements by the given CSS selector.\r\n         *\r\n         * @usageNotes\r\n         * ### Example\r\n         *\r\n         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\r\n         */\r\n        By.css = function (selector) {\r\n            return function (debugElement) {\r\n                return debugElement.nativeElement != null ?\r\n                    getDOM().elementMatches(debugElement.nativeElement, selector) :\r\n                    false;\r\n            };\r\n        };\r\n        /**\r\n         * Match nodes that have the given directive present.\r\n         *\r\n         * @usageNotes\r\n         * ### Example\r\n         *\r\n         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\r\n         */\r\n        By.directive = function (type) {\r\n            return function (debugNode) { return debugNode.providerTokens.indexOf(type) !== -1; };\r\n        };\r\n        return By;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * @publicApi\r\n     */\r\n    var VERSION = new i0.Version('8.2.14');\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    // This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n\r\n    /**\r\n     * Generated bundle index. Do not edit.\r\n     */\r\n\r\n    exports.ɵangular_packages_platform_browser_platform_browser_c = BROWSER_MODULE_PROVIDERS;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_b = _document;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_a = errorHandler;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_l = GenericBrowserDomAdapter;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_d = createMeta;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_i = SERVER_TRANSITION_PROVIDERS;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_h = appInitializerFactory;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_e = createTitle;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_f = initTransferState;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_k = ELEMENT_PROBE_PROVIDERS__PRE_R3__;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_j = _createNgProbe;\r\n    exports.ɵangular_packages_platform_browser_platform_browser_g = EventManagerPlugin;\r\n    exports.BrowserModule = BrowserModule;\r\n    exports.platformBrowser = platformBrowser;\r\n    exports.Meta = Meta;\r\n    exports.Title = Title;\r\n    exports.disableDebugTools = disableDebugTools;\r\n    exports.enableDebugTools = enableDebugTools;\r\n    exports.BrowserTransferStateModule = BrowserTransferStateModule;\r\n    exports.TransferState = TransferState;\r\n    exports.makeStateKey = makeStateKey;\r\n    exports.By = By;\r\n    exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;\r\n    exports.EventManager = EventManager;\r\n    exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;\r\n    exports.HAMMER_LOADER = HAMMER_LOADER;\r\n    exports.HammerGestureConfig = HammerGestureConfig;\r\n    exports.DomSanitizer = DomSanitizer;\r\n    exports.VERSION = VERSION;\r\n    exports.ɵELEMENT_PROBE_PROVIDERS__POST_R3__ = ELEMENT_PROBE_PROVIDERS__POST_R3__;\r\n    exports.ɵBROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS;\r\n    exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = INTERNAL_BROWSER_PLATFORM_PROVIDERS;\r\n    exports.ɵinitDomAdapter = initDomAdapter;\r\n    exports.ɵBrowserDomAdapter = BrowserDomAdapter;\r\n    exports.ɵBrowserPlatformLocation = BrowserPlatformLocation;\r\n    exports.ɵTRANSITION_ID = TRANSITION_ID;\r\n    exports.ɵBrowserGetTestability = BrowserGetTestability;\r\n    exports.ɵescapeHtml = escapeHtml;\r\n    exports.ɵELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS;\r\n    exports.ɵDomAdapter = DomAdapter;\r\n    exports.ɵgetDOM = getDOM;\r\n    exports.ɵsetRootDomAdapter = setRootDomAdapter;\r\n    exports.ɵDomRendererFactory2 = DomRendererFactory2;\r\n    exports.ɵNAMESPACE_URIS = NAMESPACE_URIS;\r\n    exports.ɵflattenStyles = flattenStyles;\r\n    exports.ɵshimContentAttribute = shimContentAttribute;\r\n    exports.ɵshimHostAttribute = shimHostAttribute;\r\n    exports.ɵDomEventsPlugin = DomEventsPlugin;\r\n    exports.ɵHammerGesturesPlugin = HammerGesturesPlugin;\r\n    exports.ɵKeyEventsPlugin = KeyEventsPlugin;\r\n    exports.ɵDomSharedStylesHost = DomSharedStylesHost;\r\n    exports.ɵSharedStylesHost = SharedStylesHost;\r\n    exports.ɵDomSanitizerImpl = DomSanitizerImpl;\r\n\r\n    Object.defineProperty(exports, '__esModule', { value: true });\r\n\r\n}));\r\n\r\n"]}