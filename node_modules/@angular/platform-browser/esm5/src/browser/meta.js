import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, ɵɵinject } from '@angular/core';
import { getDOM } from '../dom/dom_adapter';
import * as i0 from "@angular/core";
/**
 * Factory to create Meta service.
 */
import * as ɵngcc0 from '@angular/core';
export function createMeta() {
    return new Meta(ɵɵinject(DOCUMENT));
}
/**
 * A service that can be used to get and add meta tags.
 *
 * @publicApi
 */
var Meta = /** @class */ (function () {
    function Meta(_doc) {
        this._doc = _doc;
        this._dom = getDOM();
    }
    Meta.prototype.addTag = function (tag, forceCreation) {
        if (forceCreation === void 0) { forceCreation = false; }
        if (!tag)
            return null;
        return this._getOrCreateElement(tag, forceCreation);
    };
    Meta.prototype.addTags = function (tags, forceCreation) {
        var _this = this;
        if (forceCreation === void 0) { forceCreation = false; }
        if (!tags)
            return [];
        return tags.reduce(function (result, tag) {
            if (tag) {
                result.push(_this._getOrCreateElement(tag, forceCreation));
            }
            return result;
        }, []);
    };
    Meta.prototype.getTag = function (attrSelector) {
        if (!attrSelector)
            return null;
        return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]") || null;
    };
    Meta.prototype.getTags = function (attrSelector) {
        if (!attrSelector)
            return [];
        var list /*NodeList*/ = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
        return list ? [].slice.call(list) : [];
    };
    Meta.prototype.updateTag = function (tag, selector) {
        if (!tag)
            return null;
        selector = selector || this._parseSelector(tag);
        var meta = this.getTag(selector);
        if (meta) {
            return this._setMetaElementAttributes(tag, meta);
        }
        return this._getOrCreateElement(tag, true);
    };
    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(this.getTag(attrSelector)); };
    Meta.prototype.removeTagElement = function (meta) {
        if (meta) {
            this._dom.remove(meta);
        }
    };
    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
        if (forceCreation === void 0) { forceCreation = false; }
        if (!forceCreation) {
            var selector = this._parseSelector(meta);
            var elem = this.getTag(selector);
            // It's allowed to have multiple elements with the same name so it's not enough to
            // just check that element with the same name already present on the page. We also need to
            // check if element has tag attributes
            if (elem && this._containsAttributes(meta, elem))
                return elem;
        }
        var element = this._dom.createElement('meta');
        this._setMetaElementAttributes(meta, element);
        var head = this._dom.getElementsByTagName(this._doc, 'head')[0];
        this._dom.appendChild(head, element);
        return element;
    };
    Meta.prototype._setMetaElementAttributes = function (tag, el) {
        var _this = this;
        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
        return el;
    };
    Meta.prototype._parseSelector = function (tag) {
        var attr = tag.name ? 'name' : 'property';
        return attr + "=\"" + tag[attr] + "\"";
    };
    Meta.prototype._containsAttributes = function (tag, elem) {
        var _this = this;
        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
    };
    Meta.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: createMeta, token: Meta, providedIn: "root" });
    Meta = tslib_1.__decorate([
        tslib_1.__param(0, Inject(DOCUMENT)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], Meta);
Meta.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: Meta, factory: function Meta_Factory(t) { var r = null; if (t) {
        r = new t(ɵngcc0.ɵɵinject(DOCUMENT));
    }
    else {
        r = createMeta();
    } return r; }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(Meta, [{
        type: Injectable,
        args: [{ providedIn: 'root', useFactory: createMeta, deps: [] }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { _doc: [], _dom: [], addTag: [], addTags: [], getTag: [], getTags: [], updateTag: [], removeTag: [], removeTagElement: [], _getOrCreateElement: [], _setMetaElementAttributes: [], _parseSelector: [], _containsAttributes: [] });
    return Meta;
}());
export { Meta };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9lc201L3NyYy9icm93c2VyL21ldGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBeUYrQixBQUM4Qzs7Ozs7Ozs7Ozs7Ozs7Ozt5UEFHaEUiLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIMm1ybVpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZ2V0RE9NIH0gZnJvbSAnLi4vZG9tL2RvbV9hZGFwdGVyJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuLyoqXHJcbiAqIEZhY3RvcnkgdG8gY3JlYXRlIE1ldGEgc2VydmljZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXRhKCkge1xyXG4gICAgcmV0dXJuIG5ldyBNZXRhKMm1ybVpbmplY3QoRE9DVU1FTlQpKTtcclxufVxyXG4vKipcclxuICogQSBzZXJ2aWNlIHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2V0IGFuZCBhZGQgbWV0YSB0YWdzLlxyXG4gKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG52YXIgTWV0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1ldGEoX2RvYykge1xyXG4gICAgICAgIHRoaXMuX2RvYyA9IF9kb2M7XHJcbiAgICAgICAgdGhpcy5fZG9tID0gZ2V0RE9NKCk7XHJcbiAgICB9XHJcbiAgICBNZXRhLnByb3RvdHlwZS5hZGRUYWcgPSBmdW5jdGlvbiAodGFnLCBmb3JjZUNyZWF0aW9uKSB7XHJcbiAgICAgICAgaWYgKGZvcmNlQ3JlYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZUNyZWF0aW9uID0gZmFsc2U7IH1cclxuICAgICAgICBpZiAoIXRhZylcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlRWxlbWVudCh0YWcsIGZvcmNlQ3JlYXRpb24pO1xyXG4gICAgfTtcclxuICAgIE1ldGEucHJvdG90eXBlLmFkZFRhZ3MgPSBmdW5jdGlvbiAodGFncywgZm9yY2VDcmVhdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGZvcmNlQ3JlYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZUNyZWF0aW9uID0gZmFsc2U7IH1cclxuICAgICAgICBpZiAoIXRhZ3MpXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICByZXR1cm4gdGFncy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgdGFnKSB7XHJcbiAgICAgICAgICAgIGlmICh0YWcpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKF90aGlzLl9nZXRPckNyZWF0ZUVsZW1lbnQodGFnLCBmb3JjZUNyZWF0aW9uKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LCBbXSk7XHJcbiAgICB9O1xyXG4gICAgTWV0YS5wcm90b3R5cGUuZ2V0VGFnID0gZnVuY3Rpb24gKGF0dHJTZWxlY3Rvcikge1xyXG4gICAgICAgIGlmICghYXR0clNlbGVjdG9yKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZG9tLnF1ZXJ5U2VsZWN0b3IodGhpcy5fZG9jLCBcIm1ldGFbXCIgKyBhdHRyU2VsZWN0b3IgKyBcIl1cIikgfHwgbnVsbDtcclxuICAgIH07XHJcbiAgICBNZXRhLnByb3RvdHlwZS5nZXRUYWdzID0gZnVuY3Rpb24gKGF0dHJTZWxlY3Rvcikge1xyXG4gICAgICAgIGlmICghYXR0clNlbGVjdG9yKVxyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgdmFyIGxpc3QgLypOb2RlTGlzdCovID0gdGhpcy5fZG9tLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fZG9jLCBcIm1ldGFbXCIgKyBhdHRyU2VsZWN0b3IgKyBcIl1cIik7XHJcbiAgICAgICAgcmV0dXJuIGxpc3QgPyBbXS5zbGljZS5jYWxsKGxpc3QpIDogW107XHJcbiAgICB9O1xyXG4gICAgTWV0YS5wcm90b3R5cGUudXBkYXRlVGFnID0gZnVuY3Rpb24gKHRhZywgc2VsZWN0b3IpIHtcclxuICAgICAgICBpZiAoIXRhZylcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCB0aGlzLl9wYXJzZVNlbGVjdG9yKHRhZyk7XHJcbiAgICAgICAgdmFyIG1ldGEgPSB0aGlzLmdldFRhZyhzZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NldE1ldGFFbGVtZW50QXR0cmlidXRlcyh0YWcsIG1ldGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3JDcmVhdGVFbGVtZW50KHRhZywgdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgTWV0YS5wcm90b3R5cGUucmVtb3ZlVGFnID0gZnVuY3Rpb24gKGF0dHJTZWxlY3RvcikgeyB0aGlzLnJlbW92ZVRhZ0VsZW1lbnQodGhpcy5nZXRUYWcoYXR0clNlbGVjdG9yKSk7IH07XHJcbiAgICBNZXRhLnByb3RvdHlwZS5yZW1vdmVUYWdFbGVtZW50ID0gZnVuY3Rpb24gKG1ldGEpIHtcclxuICAgICAgICBpZiAobWV0YSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kb20ucmVtb3ZlKG1ldGEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNZXRhLnByb3RvdHlwZS5fZ2V0T3JDcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKG1ldGEsIGZvcmNlQ3JlYXRpb24pIHtcclxuICAgICAgICBpZiAoZm9yY2VDcmVhdGlvbiA9PT0gdm9pZCAwKSB7IGZvcmNlQ3JlYXRpb24gPSBmYWxzZTsgfVxyXG4gICAgICAgIGlmICghZm9yY2VDcmVhdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLl9wYXJzZVNlbGVjdG9yKG1ldGEpO1xyXG4gICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXMuZ2V0VGFnKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgLy8gSXQncyBhbGxvd2VkIHRvIGhhdmUgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgc2FtZSBuYW1lIHNvIGl0J3Mgbm90IGVub3VnaCB0b1xyXG4gICAgICAgICAgICAvLyBqdXN0IGNoZWNrIHRoYXQgZWxlbWVudCB3aXRoIHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBwcmVzZW50IG9uIHRoZSBwYWdlLiBXZSBhbHNvIG5lZWQgdG9cclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgZWxlbWVudCBoYXMgdGFnIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgaWYgKGVsZW0gJiYgdGhpcy5fY29udGFpbnNBdHRyaWJ1dGVzKG1ldGEsIGVsZW0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fZG9tLmNyZWF0ZUVsZW1lbnQoJ21ldGEnKTtcclxuICAgICAgICB0aGlzLl9zZXRNZXRhRWxlbWVudEF0dHJpYnV0ZXMobWV0YSwgZWxlbWVudCk7XHJcbiAgICAgICAgdmFyIGhlYWQgPSB0aGlzLl9kb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUodGhpcy5fZG9jLCAnaGVhZCcpWzBdO1xyXG4gICAgICAgIHRoaXMuX2RvbS5hcHBlbmRDaGlsZChoZWFkLCBlbGVtZW50KTtcclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH07XHJcbiAgICBNZXRhLnByb3RvdHlwZS5fc2V0TWV0YUVsZW1lbnRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKHRhZywgZWwpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRhZykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gX3RoaXMuX2RvbS5zZXRBdHRyaWJ1dGUoZWwsIHByb3AsIHRhZ1twcm9wXSk7IH0pO1xyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH07XHJcbiAgICBNZXRhLnByb3RvdHlwZS5fcGFyc2VTZWxlY3RvciA9IGZ1bmN0aW9uICh0YWcpIHtcclxuICAgICAgICB2YXIgYXR0ciA9IHRhZy5uYW1lID8gJ25hbWUnIDogJ3Byb3BlcnR5JztcclxuICAgICAgICByZXR1cm4gYXR0ciArIFwiPVxcXCJcIiArIHRhZ1thdHRyXSArIFwiXFxcIlwiO1xyXG4gICAgfTtcclxuICAgIE1ldGEucHJvdG90eXBlLl9jb250YWluc0F0dHJpYnV0ZXMgPSBmdW5jdGlvbiAodGFnLCBlbGVtKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGFnKS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBfdGhpcy5fZG9tLmdldEF0dHJpYnV0ZShlbGVtLCBrZXkpID09PSB0YWdba2V5XTsgfSk7XHJcbiAgICB9O1xyXG4gICAgTWV0YS5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGNyZWF0ZU1ldGEsIHRva2VuOiBNZXRhLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuICAgIE1ldGEgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcsIHVzZUZhY3Rvcnk6IGNyZWF0ZU1ldGEsIGRlcHM6IFtdIH0pLFxyXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgwLCBJbmplY3QoRE9DVU1FTlQpKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIE1ldGEpO1xyXG4gICAgcmV0dXJuIE1ldGE7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IE1ldGEgfTtcciJdfQ==