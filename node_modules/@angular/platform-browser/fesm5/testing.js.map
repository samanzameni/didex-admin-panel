{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/platform-browser/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsOK;;;;;;;;;;;;;;;;;;mCAUwB","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __values, __decorate } from 'tslib';\r\nimport { ɵglobal, NgZone, PLATFORM_INITIALIZER, createPlatformFactory, platformCore, NgModule, APP_ID } from '@angular/core';\r\nimport { ɵgetDOM, ɵBrowserDomAdapter, BrowserModule, ɵELEMENT_PROBE_PROVIDERS } from '@angular/platform-browser';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar browserDetection;\r\nvar BrowserDetection = /** @class */ (function () {\r\n    function BrowserDetection(ua) {\r\n        this._overrideUa = ua;\r\n    }\r\n    Object.defineProperty(BrowserDetection.prototype, \"_ua\", {\r\n        get: function () {\r\n            if (typeof this._overrideUa === 'string') {\r\n                return this._overrideUa;\r\n            }\r\n            return ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    BrowserDetection.setup = function () { browserDetection = new BrowserDetection(null); };\r\n    Object.defineProperty(BrowserDetection.prototype, \"isFirefox\", {\r\n        get: function () { return this._ua.indexOf('Firefox') > -1; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isAndroid\", {\r\n        get: function () {\r\n            return this._ua.indexOf('Mozilla/5.0') > -1 && this._ua.indexOf('Android') > -1 &&\r\n                this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Chrome') == -1 &&\r\n                this._ua.indexOf('IEMobile') == -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isEdge\", {\r\n        get: function () { return this._ua.indexOf('Edge') > -1; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isIE\", {\r\n        get: function () { return this._ua.indexOf('Trident') > -1; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isWebkit\", {\r\n        get: function () {\r\n            return this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Edge') == -1 &&\r\n                this._ua.indexOf('IEMobile') == -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isIOS7\", {\r\n        get: function () {\r\n            return (this._ua.indexOf('iPhone OS 7') > -1 || this._ua.indexOf('iPad OS 7') > -1) &&\r\n                this._ua.indexOf('IEMobile') == -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isSlow\", {\r\n        get: function () { return this.isAndroid || this.isIE || this.isIOS7; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"supportsNativeIntlApi\", {\r\n        // The Intl API is only natively supported in Chrome, Firefox, IE11 and Edge.\r\n        // This detector is needed in tests to make the difference between:\r\n        // 1) IE11/Edge: they have a native Intl API, but with some discrepancies\r\n        // 2) IE9/IE10: they use the polyfill, and so no discrepancies\r\n        get: function () {\r\n            return !!ɵglobal.Intl && ɵglobal.Intl !== ɵglobal.IntlPolyfill;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isChromeDesktop\", {\r\n        get: function () {\r\n            return this._ua.indexOf('Chrome') > -1 && this._ua.indexOf('Mobile Safari') == -1 &&\r\n                this._ua.indexOf('Edge') == -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"isOldChrome\", {\r\n        // \"Old Chrome\" means Chrome 3X, where there are some discrepancies in the Intl API.\r\n        // Android 4.4 and 5.X have such browsers by default (respectively 30 and 39).\r\n        get: function () {\r\n            return this._ua.indexOf('Chrome') > -1 && this._ua.indexOf('Chrome/3') > -1 &&\r\n                this._ua.indexOf('Edge') == -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"supportsCustomElements\", {\r\n        get: function () { return (typeof ɵglobal.customElements !== 'undefined'); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"supportsDeprecatedCustomCustomElementsV0\", {\r\n        get: function () {\r\n            return (typeof document.registerElement !== 'undefined');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"supportsRegExUnicodeFlag\", {\r\n        get: function () { return RegExp.prototype.hasOwnProperty('unicode'); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"supportsShadowDom\", {\r\n        get: function () {\r\n            var testEl = document.createElement('div');\r\n            return (typeof testEl.attachShadow !== 'undefined');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BrowserDetection.prototype, \"supportsDeprecatedShadowDomV0\", {\r\n        get: function () {\r\n            var testEl = document.createElement('div');\r\n            return (typeof testEl.createShadowRoot !== 'undefined');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return BrowserDetection;\r\n}());\r\nBrowserDetection.setup();\r\nfunction dispatchEvent(element, eventType) {\r\n    ɵgetDOM().dispatchEvent(element, ɵgetDOM().createEvent(eventType));\r\n}\r\nfunction el(html) {\r\n    return ɵgetDOM().firstChild(ɵgetDOM().content(ɵgetDOM().createTemplate(html)));\r\n}\r\nfunction normalizeCSS(css) {\r\n    return css.replace(/\\s+/g, ' ')\r\n        .replace(/:\\s/g, ':')\r\n        .replace(/'/g, '\"')\r\n        .replace(/ }/g, '}')\r\n        .replace(/url\\((\\\"|\\s)(.+)(\\\"|\\s)\\)(\\s*)/g, function () {\r\n        var match = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            match[_i] = arguments[_i];\r\n        }\r\n        return \"url(\\\"\" + match[2] + \"\\\")\";\r\n    })\r\n        .replace(/\\[(.+)=([^\"\\]]+)\\]/g, function () {\r\n        var match = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            match[_i] = arguments[_i];\r\n        }\r\n        return \"[\" + match[1] + \"=\\\"\" + match[2] + \"\\\"]\";\r\n    });\r\n}\r\nvar _selfClosingTags = ['br', 'hr', 'input'];\r\nfunction stringifyElement(el /** TODO #9100 */) {\r\n    var e_1, _a;\r\n    var result = '';\r\n    if (ɵgetDOM().isElementNode(el)) {\r\n        var tagName = ɵgetDOM().tagName(el).toLowerCase();\r\n        // Opening tag\r\n        result += \"<\" + tagName;\r\n        // Attributes in an ordered way\r\n        var attributeMap = ɵgetDOM().attributeMap(el);\r\n        var sortedKeys = Array.from(attributeMap.keys()).sort();\r\n        try {\r\n            for (var sortedKeys_1 = __values(sortedKeys), sortedKeys_1_1 = sortedKeys_1.next(); !sortedKeys_1_1.done; sortedKeys_1_1 = sortedKeys_1.next()) {\r\n                var key = sortedKeys_1_1.value;\r\n                var lowerCaseKey = key.toLowerCase();\r\n                var attValue = attributeMap.get(key);\r\n                if (typeof attValue !== 'string') {\r\n                    result += \" \" + lowerCaseKey;\r\n                }\r\n                else {\r\n                    // Browsers order style rules differently. Order them alphabetically for consistency.\r\n                    if (lowerCaseKey === 'style') {\r\n                        attValue = attValue.split(/; ?/).filter(function (s) { return !!s; }).sort().map(function (s) { return s + \";\"; }).join(' ');\r\n                    }\r\n                    result += \" \" + lowerCaseKey + \"=\\\"\" + attValue + \"\\\"\";\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (sortedKeys_1_1 && !sortedKeys_1_1.done && (_a = sortedKeys_1.return)) _a.call(sortedKeys_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        result += '>';\r\n        // Children\r\n        var childrenRoot = ɵgetDOM().templateAwareRoot(el);\r\n        var children = childrenRoot ? ɵgetDOM().childNodes(childrenRoot) : [];\r\n        for (var j = 0; j < children.length; j++) {\r\n            result += stringifyElement(children[j]);\r\n        }\r\n        // Closing tag\r\n        if (_selfClosingTags.indexOf(tagName) == -1) {\r\n            result += \"</\" + tagName + \">\";\r\n        }\r\n    }\r\n    else if (ɵgetDOM().isCommentNode(el)) {\r\n        result += \"<!--\" + ɵgetDOM().nodeValue(el) + \"-->\";\r\n    }\r\n    else {\r\n        result += ɵgetDOM().getText(el);\r\n    }\r\n    return result;\r\n}\r\nfunction createNgZone() {\r\n    return new NgZone({ enableLongStackTrace: true });\r\n}\r\n\r\nfunction initBrowserTests() {\r\n    ɵBrowserDomAdapter.makeCurrent();\r\n    BrowserDetection.setup();\r\n}\r\nvar _TEST_BROWSER_PLATFORM_PROVIDERS = [{ provide: PLATFORM_INITIALIZER, useValue: initBrowserTests, multi: true }];\r\n/**\r\n * Platform for testing\r\n *\r\n * @publicApi\r\n */\r\nvar platformBrowserTesting = createPlatformFactory(platformCore, 'browserTesting', _TEST_BROWSER_PLATFORM_PROVIDERS);\r\nvar ɵ0 = createNgZone;\r\n/**\r\n * NgModule for testing.\r\n *\r\n * @publicApi\r\n */\r\nvar BrowserTestingModule = /** @class */ (function () {\r\n    function BrowserTestingModule() {\r\n    }\r\n    BrowserTestingModule = __decorate([\r\n        NgModule({\r\n            exports: [BrowserModule],\r\n            providers: [\r\n                { provide: APP_ID, useValue: 'a' },\r\n                ɵELEMENT_PROBE_PROVIDERS,\r\n                { provide: NgZone, useFactory: ɵ0 },\r\n            ]\r\n        })\r\n    ], BrowserTestingModule);\r\n    return BrowserTestingModule;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { createNgZone as ɵangular_packages_platform_browser_testing_testing_a, platformBrowserTesting, BrowserTestingModule, ɵ0 };\r\n\r\n"]}