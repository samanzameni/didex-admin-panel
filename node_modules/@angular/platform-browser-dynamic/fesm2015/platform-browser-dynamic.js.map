{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgijBC,0BAGC","file":"platform-browser-dynamic.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { getUrlScheme, syntaxError, Identifiers, JitCompiler, ProviderMeta, CompileReflector, ResourceLoader, JitSummaryResolver, SummaryResolver, Lexer, Parser, HtmlParser, I18NHtmlParser, CompilerConfig, TemplateParser, ElementSchemaRegistry, JitEvaluator, DirectiveNormalizer, UrlResolver, CompileMetadataResolver, NgModuleResolver, DirectiveResolver, PipeResolver, StaticSymbolCache, StyleCompiler, ViewCompiler, NgModuleCompiler, DomElementSchemaRegistry } from '@angular/compiler';\r\nimport { ɵReflectionCapabilities, ɵstringify, ANALYZE_FOR_ENTRY_COMPONENTS, ElementRef, NgModuleRef, ViewContainerRef, ChangeDetectorRef, Renderer2, QueryList, TemplateRef, ɵCodegenComponentFactoryResolver, ComponentFactoryResolver, ComponentFactory, ComponentRef, NgModuleFactory, ɵcmf, ɵmod, ɵmpd, ɵregisterModuleFactory, Injector, ViewEncapsulation, ChangeDetectionStrategy, SecurityContext, LOCALE_ID, TRANSLATIONS_FORMAT, ɵinlineInterpolate, ɵinterpolate, ɵEMPTY_ARRAY, ɵEMPTY_MAP, Renderer, ɵvid, ɵeld, ɵand, ɵted, ɵdid, ɵprd, ɵqud, ɵpad, ɵpod, ɵppd, ɵpid, ɵnov, ɵncd, ɵunv, ɵcrt, ɵccf, InjectionToken, PACKAGE_ROOT_URL, Compiler, ɵConsole, MissingTranslationStrategy, Optional, Inject, TRANSLATIONS, isDevMode, createPlatformFactory, platformCore, COMPILER_OPTIONS, CompilerFactory, Injectable, PLATFORM_ID, ɵglobal, Version } from '@angular/core';\r\nimport { ɵPLATFORM_BROWSER_ID } from '@angular/common';\r\nimport { ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS } from '@angular/platform-browser';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst MODULE_SUFFIX = '';\r\n/** @type {?} */\r\nconst builtinExternalReferences = createBuiltinExternalReferencesMap();\r\nclass JitReflector {\r\n    constructor() {\r\n        this.reflectionCapabilities = new ɵReflectionCapabilities();\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} cmpMetadata\r\n     * @return {?}\r\n     */\r\n    componentModuleUrl(type, cmpMetadata) {\r\n        /** @type {?} */\r\n        const moduleId = cmpMetadata.moduleId;\r\n        if (typeof moduleId === 'string') {\r\n            /** @type {?} */\r\n            const scheme = getUrlScheme(moduleId);\r\n            return scheme ? moduleId : `package:${moduleId}${MODULE_SUFFIX}`;\r\n        }\r\n        else if (moduleId !== null && moduleId !== void 0) {\r\n            throw syntaxError(`moduleId should be a string in \"${ɵstringify(type)}\". See https://goo.gl/wIDDiL for more information.\\n` +\r\n                `If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.`);\r\n        }\r\n        return `./${ɵstringify(type)}`;\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    parameters(typeOrFunc) {\r\n        return this.reflectionCapabilities.parameters(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    tryAnnotations(typeOrFunc) { return this.annotations(typeOrFunc); }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    annotations(typeOrFunc) {\r\n        return this.reflectionCapabilities.annotations(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    shallowAnnotations(typeOrFunc) {\r\n        throw new Error('Not supported in JIT mode');\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    propMetadata(typeOrFunc) {\r\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    hasLifecycleHook(type, lcProperty) {\r\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    guards(type) { return this.reflectionCapabilities.guards(type); }\r\n    /**\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    resolveExternalReference(ref) {\r\n        return builtinExternalReferences.get(ref) || ref.runtime;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    JitReflector.prototype.reflectionCapabilities;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createBuiltinExternalReferencesMap() {\r\n    /** @type {?} */\r\n    const map = new Map();\r\n    map.set(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, ANALYZE_FOR_ENTRY_COMPONENTS);\r\n    map.set(Identifiers.ElementRef, ElementRef);\r\n    map.set(Identifiers.NgModuleRef, NgModuleRef);\r\n    map.set(Identifiers.ViewContainerRef, ViewContainerRef);\r\n    map.set(Identifiers.ChangeDetectorRef, ChangeDetectorRef);\r\n    map.set(Identifiers.Renderer2, Renderer2);\r\n    map.set(Identifiers.QueryList, QueryList);\r\n    map.set(Identifiers.TemplateRef, TemplateRef);\r\n    map.set(Identifiers.CodegenComponentFactoryResolver, ɵCodegenComponentFactoryResolver);\r\n    map.set(Identifiers.ComponentFactoryResolver, ComponentFactoryResolver);\r\n    map.set(Identifiers.ComponentFactory, ComponentFactory);\r\n    map.set(Identifiers.ComponentRef, ComponentRef);\r\n    map.set(Identifiers.NgModuleFactory, NgModuleFactory);\r\n    map.set(Identifiers.createModuleFactory, ɵcmf);\r\n    map.set(Identifiers.moduleDef, ɵmod);\r\n    map.set(Identifiers.moduleProviderDef, ɵmpd);\r\n    map.set(Identifiers.RegisterModuleFactoryFn, ɵregisterModuleFactory);\r\n    map.set(Identifiers.Injector, Injector);\r\n    map.set(Identifiers.ViewEncapsulation, ViewEncapsulation);\r\n    map.set(Identifiers.ChangeDetectionStrategy, ChangeDetectionStrategy);\r\n    map.set(Identifiers.SecurityContext, SecurityContext);\r\n    map.set(Identifiers.LOCALE_ID, LOCALE_ID);\r\n    map.set(Identifiers.TRANSLATIONS_FORMAT, TRANSLATIONS_FORMAT);\r\n    map.set(Identifiers.inlineInterpolate, ɵinlineInterpolate);\r\n    map.set(Identifiers.interpolate, ɵinterpolate);\r\n    map.set(Identifiers.EMPTY_ARRAY, ɵEMPTY_ARRAY);\r\n    map.set(Identifiers.EMPTY_MAP, ɵEMPTY_MAP);\r\n    map.set(Identifiers.Renderer, Renderer);\r\n    map.set(Identifiers.viewDef, ɵvid);\r\n    map.set(Identifiers.elementDef, ɵeld);\r\n    map.set(Identifiers.anchorDef, ɵand);\r\n    map.set(Identifiers.textDef, ɵted);\r\n    map.set(Identifiers.directiveDef, ɵdid);\r\n    map.set(Identifiers.providerDef, ɵprd);\r\n    map.set(Identifiers.queryDef, ɵqud);\r\n    map.set(Identifiers.pureArrayDef, ɵpad);\r\n    map.set(Identifiers.pureObjectDef, ɵpod);\r\n    map.set(Identifiers.purePipeDef, ɵppd);\r\n    map.set(Identifiers.pipeDef, ɵpid);\r\n    map.set(Identifiers.nodeValue, ɵnov);\r\n    map.set(Identifiers.ngContentDef, ɵncd);\r\n    map.set(Identifiers.unwrapValue, ɵunv);\r\n    map.set(Identifiers.createRendererType2, ɵcrt);\r\n    map.set(Identifiers.createComponentFactory, ɵccf);\r\n    return map;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');\r\n/**\r\n * A default provider for {\\@link PACKAGE_ROOT_URL} that maps to '/'.\r\n * @type {?}\r\n */\r\nconst DEFAULT_PACKAGE_URL_PROVIDER = {\r\n    provide: PACKAGE_ROOT_URL,\r\n    useValue: '/'\r\n};\r\n/** @type {?} */\r\nconst _NO_RESOURCE_LOADER = {\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) {\r\n        throw new Error(`No ResourceLoader implementation has been provided. Can't read the url \"${url}\"`);\r\n    }\r\n};\r\n/** @type {?} */\r\nconst baseHtmlParser = new InjectionToken('HtmlParser');\r\nclass CompilerImpl {\r\n    /**\r\n     * @param {?} injector\r\n     * @param {?} _metadataResolver\r\n     * @param {?} templateParser\r\n     * @param {?} styleCompiler\r\n     * @param {?} viewCompiler\r\n     * @param {?} ngModuleCompiler\r\n     * @param {?} summaryResolver\r\n     * @param {?} compileReflector\r\n     * @param {?} jitEvaluator\r\n     * @param {?} compilerConfig\r\n     * @param {?} console\r\n     */\r\n    constructor(injector, _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console) {\r\n        this._metadataResolver = _metadataResolver;\r\n        this._delegate = new JitCompiler(_metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console, this.getExtraNgModuleProviders.bind(this));\r\n        this.injector = injector;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getExtraNgModuleProviders() {\r\n        return [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, { useValue: this }))];\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleSync(moduleType) {\r\n        return (/** @type {?} */ (this._delegate.compileModuleSync(moduleType)));\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAsync(moduleType) {\r\n        return (/** @type {?} */ (this._delegate.compileModuleAsync(moduleType)));\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsSync(moduleType) {\r\n        /** @type {?} */\r\n        const result = this._delegate.compileModuleAndAllComponentsSync(moduleType);\r\n        return {\r\n            ngModuleFactory: (/** @type {?} */ (result.ngModuleFactory)),\r\n            componentFactories: (/** @type {?} */ (result.componentFactories)),\r\n        };\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsAsync(moduleType) {\r\n        return this._delegate.compileModuleAndAllComponentsAsync(moduleType)\r\n            .then((/**\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        (result) => ({\r\n            ngModuleFactory: (/** @type {?} */ (result.ngModuleFactory)),\r\n            componentFactories: (/** @type {?} */ (result.componentFactories)),\r\n        })));\r\n    }\r\n    /**\r\n     * @param {?} summaries\r\n     * @return {?}\r\n     */\r\n    loadAotSummaries(summaries) { this._delegate.loadAotSummaries(summaries); }\r\n    /**\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    hasAotSummary(ref) { return this._delegate.hasAotSummary(ref); }\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    getComponentFactory(component) {\r\n        return (/** @type {?} */ (this._delegate.getComponentFactory(component)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearCache() { this._delegate.clearCache(); }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    clearCacheFor(type) { this._delegate.clearCacheFor(type); }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    getModuleId(moduleType) {\r\n        /** @type {?} */\r\n        const meta = this._metadataResolver.getNgModuleMetadata(moduleType);\r\n        return meta && meta.id || undefined;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CompilerImpl.prototype._delegate;\r\n    /** @type {?} */\r\n    CompilerImpl.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CompilerImpl.prototype._metadataResolver;\r\n}\r\n/**\r\n * A set of providers that provide `JitCompiler` and its dependencies to use for\r\n * template compilation.\r\n * @type {?}\r\n */\r\nconst COMPILER_PROVIDERS = (/** @type {?} */ ([\r\n    { provide: CompileReflector, useValue: new JitReflector() },\r\n    { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },\r\n    { provide: JitSummaryResolver, deps: [] },\r\n    { provide: SummaryResolver, useExisting: JitSummaryResolver },\r\n    { provide: ɵConsole, deps: [] },\r\n    { provide: Lexer, deps: [] },\r\n    { provide: Parser, deps: [Lexer] },\r\n    {\r\n        provide: baseHtmlParser,\r\n        useClass: HtmlParser,\r\n        deps: [],\r\n    },\r\n    {\r\n        provide: I18NHtmlParser,\r\n        useFactory: (/**\r\n         * @param {?} parser\r\n         * @param {?} translations\r\n         * @param {?} format\r\n         * @param {?} config\r\n         * @param {?} console\r\n         * @return {?}\r\n         */\r\n        (parser, translations, format, config, console) => {\r\n            translations = translations || '';\r\n            /** @type {?} */\r\n            const missingTranslation = translations ? (/** @type {?} */ (config.missingTranslation)) : MissingTranslationStrategy.Ignore;\r\n            return new I18NHtmlParser(parser, translations, format, missingTranslation, console);\r\n        }),\r\n        deps: [\r\n            baseHtmlParser,\r\n            [new Optional(), new Inject(TRANSLATIONS)],\r\n            [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\r\n            [CompilerConfig],\r\n            [ɵConsole],\r\n        ]\r\n    },\r\n    {\r\n        provide: HtmlParser,\r\n        useExisting: I18NHtmlParser,\r\n    },\r\n    {\r\n        provide: TemplateParser, deps: [CompilerConfig, CompileReflector,\r\n            Parser, ElementSchemaRegistry,\r\n            I18NHtmlParser, ɵConsole]\r\n    },\r\n    { provide: JitEvaluator, useClass: JitEvaluator, deps: [] },\r\n    { provide: DirectiveNormalizer, deps: [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig] },\r\n    { provide: CompileMetadataResolver, deps: [CompilerConfig, HtmlParser, NgModuleResolver,\r\n            DirectiveResolver, PipeResolver,\r\n            SummaryResolver,\r\n            ElementSchemaRegistry,\r\n            DirectiveNormalizer, ɵConsole,\r\n            [Optional, StaticSymbolCache],\r\n            CompileReflector,\r\n            [Optional, ERROR_COLLECTOR_TOKEN]] },\r\n    DEFAULT_PACKAGE_URL_PROVIDER,\r\n    { provide: StyleCompiler, deps: [UrlResolver] },\r\n    { provide: ViewCompiler, deps: [CompileReflector] },\r\n    { provide: NgModuleCompiler, deps: [CompileReflector] },\r\n    { provide: CompilerConfig, useValue: new CompilerConfig() },\r\n    { provide: Compiler, useClass: CompilerImpl, deps: [Injector, CompileMetadataResolver,\r\n            TemplateParser, StyleCompiler,\r\n            ViewCompiler, NgModuleCompiler,\r\n            SummaryResolver, CompileReflector, JitEvaluator, CompilerConfig,\r\n            ɵConsole] },\r\n    { provide: DomElementSchemaRegistry, deps: [] },\r\n    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },\r\n    { provide: UrlResolver, deps: [PACKAGE_ROOT_URL] },\r\n    { provide: DirectiveResolver, deps: [CompileReflector] },\r\n    { provide: PipeResolver, deps: [CompileReflector] },\r\n    { provide: NgModuleResolver, deps: [CompileReflector] },\r\n]));\r\n/**\r\n * \\@publicApi\r\n */\r\nclass JitCompilerFactory {\r\n    /* @internal */\r\n    /**\r\n     * @param {?} defaultOptions\r\n     */\r\n    constructor(defaultOptions) {\r\n        /** @type {?} */\r\n        const compilerOptions = {\r\n            useJit: true,\r\n            defaultEncapsulation: ViewEncapsulation.Emulated,\r\n            missingTranslation: MissingTranslationStrategy.Warning,\r\n        };\r\n        this._defaultOptions = [compilerOptions, ...defaultOptions];\r\n    }\r\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    createCompiler(options = []) {\r\n        /** @type {?} */\r\n        const opts = _mergeOptions(this._defaultOptions.concat(options));\r\n        /** @type {?} */\r\n        const injector = Injector.create([\r\n            COMPILER_PROVIDERS, {\r\n                provide: CompilerConfig,\r\n                useFactory: (/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    return new CompilerConfig({\r\n                        // let explicit values from the compiler options overwrite options\r\n                        // from the app providers\r\n                        useJit: opts.useJit,\r\n                        jitDevMode: isDevMode(),\r\n                        // let explicit values from the compiler options overwrite options\r\n                        // from the app providers\r\n                        defaultEncapsulation: opts.defaultEncapsulation,\r\n                        missingTranslation: opts.missingTranslation,\r\n                        preserveWhitespaces: opts.preserveWhitespaces,\r\n                    });\r\n                }),\r\n                deps: []\r\n            },\r\n            (/** @type {?} */ (opts.providers))\r\n        ]);\r\n        return injector.get(Compiler);\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    JitCompilerFactory.prototype._defaultOptions;\r\n}\r\n/**\r\n * @param {?} optionsArr\r\n * @return {?}\r\n */\r\nfunction _mergeOptions(optionsArr) {\r\n    return {\r\n        useJit: _lastDefined(optionsArr.map((/**\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        options => options.useJit))),\r\n        defaultEncapsulation: _lastDefined(optionsArr.map((/**\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        options => options.defaultEncapsulation))),\r\n        providers: _mergeArrays(optionsArr.map((/**\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        options => (/** @type {?} */ (options.providers))))),\r\n        missingTranslation: _lastDefined(optionsArr.map((/**\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        options => options.missingTranslation))),\r\n        preserveWhitespaces: _lastDefined(optionsArr.map((/**\r\n         * @param {?} options\r\n         * @return {?}\r\n         */\r\n        options => options.preserveWhitespaces))),\r\n    };\r\n}\r\n/**\r\n * @template T\r\n * @param {?} args\r\n * @return {?}\r\n */\r\nfunction _lastDefined(args) {\r\n    for (let i = args.length - 1; i >= 0; i--) {\r\n        if (args[i] !== undefined) {\r\n            return args[i];\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * @param {?} parts\r\n * @return {?}\r\n */\r\nfunction _mergeArrays(parts) {\r\n    /** @type {?} */\r\n    const result = [];\r\n    parts.forEach((/**\r\n     * @param {?} part\r\n     * @return {?}\r\n     */\r\n    (part) => part && result.push(...part)));\r\n    return result;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nconst ɵ0 = {};\r\n/**\r\n * A platform that included corePlatform and the compiler.\r\n *\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\r\n    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true },\r\n    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },\r\n]);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ResourceLoaderImpl extends ResourceLoader {\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) {\r\n        /** @type {?} */\r\n        let resolve;\r\n        /** @type {?} */\r\n        let reject;\r\n        /** @type {?} */\r\n        const promise = new Promise((/**\r\n         * @param {?} res\r\n         * @param {?} rej\r\n         * @return {?}\r\n         */\r\n        (res, rej) => {\r\n            resolve = res;\r\n            reject = rej;\r\n        }));\r\n        /** @type {?} */\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url, true);\r\n        xhr.responseType = 'text';\r\n        xhr.onload = (/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // responseText is the old-school way of retrieving response (supported by IE8 & 9)\r\n            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\r\n            // by IE10)\r\n            /** @type {?} */\r\n            const response = xhr.response || xhr.responseText;\r\n            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\r\n            /** @type {?} */\r\n            let status = xhr.status === 1223 ? 204 : xhr.status;\r\n            // fix status code when it is 0 (0 status is undocumented).\r\n            // Occurs when accessing file resources or on Android 4.1 stock browser\r\n            // while retrieving files from application cache.\r\n            if (status === 0) {\r\n                status = response ? 200 : 0;\r\n            }\r\n            if (200 <= status && status <= 300) {\r\n                resolve(response);\r\n            }\r\n            else {\r\n                reject(`Failed to load ${url}`);\r\n            }\r\n        });\r\n        xhr.onerror = (/**\r\n         * @return {?}\r\n         */\r\n        function () { reject(`Failed to load ${url}`); });\r\n        xhr.send();\r\n        return promise;\r\n    }\r\n}\r\nResourceLoaderImpl.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nconst ɵ0$1 = { providers: [{ provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] }, ɵ1 = ɵPLATFORM_BROWSER_ID;\r\n/**\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [\r\n    ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,\r\n    {\r\n        provide: COMPILER_OPTIONS,\r\n        useValue: ɵ0$1,\r\n        multi: true\r\n    },\r\n    { provide: PLATFORM_ID, useValue: ɵ1 },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\r\n * ResourceLoader.\r\n *\r\n * The template cache needs to be built and loaded into window.$templateCache\r\n * via a separate mechanism.\r\n *\r\n * \\@publicApi\r\n */\r\nclass CachedResourceLoader extends ResourceLoader {\r\n    constructor() {\r\n        super();\r\n        this._cache = ((/** @type {?} */ (ɵglobal))).$templateCache;\r\n        if (this._cache == null) {\r\n            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) {\r\n        if (this._cache.hasOwnProperty(url)) {\r\n            return Promise.resolve(this._cache[url]);\r\n        }\r\n        else {\r\n            return (/** @type {?} */ (Promise.reject('CachedResourceLoader: Did not find cached template for ' + url)));\r\n        }\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CachedResourceLoader.prototype._cache;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst VERSION = new Version('8.2.14');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst RESOURCE_CACHE_PROVIDER = [{ provide: ResourceLoader, useClass: CachedResourceLoader, deps: [] }];\r\n/**\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CachedResourceLoader as ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a, VERSION, JitCompilerFactory, RESOURCE_CACHE_PROVIDER, platformBrowserDynamic, CompilerImpl as ɵCompilerImpl, platformCoreDynamic as ɵplatformCoreDynamic, INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, ResourceLoaderImpl as ɵResourceLoaderImpl };\r\n\r\n"]}