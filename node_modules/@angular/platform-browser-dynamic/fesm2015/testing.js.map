{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/platform-browser-dynamic/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuBC,2EAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+QD,yCAQC","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\r\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\r\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\r\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ɵgetDOM } from '@angular/platform-browser';\r\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\r\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A DOM based implementation of the TestComponentRenderer.\r\n */\r\nclass DOMTestComponentRenderer extends TestComponentRenderer {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        super();\r\n        this._doc = _doc;\r\n    }\r\n    /**\r\n     * @param {?} rootElId\r\n     * @return {?}\r\n     */\r\n    insertRootElement(rootElId) {\r\n        /** @type {?} */\r\n        const rootEl = (/** @type {?} */ (ɵgetDOM().firstChild(ɵgetDOM().content(ɵgetDOM().createTemplate(`<div id=\"${rootElId}\"></div>`)))));\r\n        // TODO(juliemr): can/should this be optional?\r\n        /** @type {?} */\r\n        const oldRoots = ɵgetDOM().querySelectorAll(this._doc, '[id^=root]');\r\n        for (let i = 0; i < oldRoots.length; i++) {\r\n            ɵgetDOM().remove(oldRoots[i]);\r\n        }\r\n        ɵgetDOM().appendChild(this._doc.body, rootEl);\r\n    }\r\n}\r\nDOMTestComponentRenderer.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nDOMTestComponentRenderer.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DOMTestComponentRenderer.prototype._doc;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst COMPILER_PROVIDERS = [\r\n    { provide: MockPipeResolver, deps: [CompileReflector] },\r\n    { provide: PipeResolver, useExisting: MockPipeResolver },\r\n    { provide: MockDirectiveResolver, deps: [CompileReflector] },\r\n    { provide: DirectiveResolver, useExisting: MockDirectiveResolver },\r\n    { provide: MockNgModuleResolver, deps: [CompileReflector] },\r\n    { provide: NgModuleResolver, useExisting: MockNgModuleResolver },\r\n];\r\nclass TestingCompilerFactoryImpl {\r\n    /**\r\n     * @param {?} _injector\r\n     * @param {?} _compilerFactory\r\n     */\r\n    constructor(_injector, _compilerFactory) {\r\n        this._injector = _injector;\r\n        this._compilerFactory = _compilerFactory;\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    createTestingCompiler(options) {\r\n        /** @type {?} */\r\n        const compiler = (/** @type {?} */ (this._compilerFactory.createCompiler(options)));\r\n        return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestingCompilerFactoryImpl.prototype._injector;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestingCompilerFactoryImpl.prototype._compilerFactory;\r\n}\r\nclass TestingCompilerImpl {\r\n    /**\r\n     * @param {?} _compiler\r\n     * @param {?} _directiveResolver\r\n     * @param {?} _pipeResolver\r\n     * @param {?} _moduleResolver\r\n     */\r\n    constructor(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\r\n        this._compiler = _compiler;\r\n        this._directiveResolver = _directiveResolver;\r\n        this._pipeResolver = _pipeResolver;\r\n        this._moduleResolver = _moduleResolver;\r\n        this._overrider = new ɵMetadataOverrider();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get injector() { return this._compiler.injector; }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleSync(moduleType) {\r\n        return this._compiler.compileModuleSync(moduleType);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAsync(moduleType) {\r\n        return this._compiler.compileModuleAsync(moduleType);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsSync(moduleType) {\r\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsAsync(moduleType) {\r\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    getComponentFactory(component) {\r\n        return this._compiler.getComponentFactory(component);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    checkOverrideAllowed(type) {\r\n        if (this._compiler.hasAotSummary(type)) {\r\n            throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} override\r\n     * @return {?}\r\n     */\r\n    overrideModule(ngModule, override) {\r\n        this.checkOverrideAllowed(ngModule);\r\n        /** @type {?} */\r\n        const oldMetadata = this._moduleResolver.resolve(ngModule, false);\r\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\r\n        this.clearCacheFor(ngModule);\r\n    }\r\n    /**\r\n     * @param {?} directive\r\n     * @param {?} override\r\n     * @return {?}\r\n     */\r\n    overrideDirective(directive, override) {\r\n        this.checkOverrideAllowed(directive);\r\n        /** @type {?} */\r\n        const oldMetadata = this._directiveResolver.resolve(directive, false);\r\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, (/** @type {?} */ (oldMetadata)), override));\r\n        this.clearCacheFor(directive);\r\n    }\r\n    /**\r\n     * @param {?} component\r\n     * @param {?} override\r\n     * @return {?}\r\n     */\r\n    overrideComponent(component, override) {\r\n        this.checkOverrideAllowed(component);\r\n        /** @type {?} */\r\n        const oldMetadata = this._directiveResolver.resolve(component, false);\r\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, (/** @type {?} */ (oldMetadata)), override));\r\n        this.clearCacheFor(component);\r\n    }\r\n    /**\r\n     * @param {?} pipe\r\n     * @param {?} override\r\n     * @return {?}\r\n     */\r\n    overridePipe(pipe, override) {\r\n        this.checkOverrideAllowed(pipe);\r\n        /** @type {?} */\r\n        const oldMetadata = this._pipeResolver.resolve(pipe, false);\r\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\r\n        this.clearCacheFor(pipe);\r\n    }\r\n    /**\r\n     * @param {?} summaries\r\n     * @return {?}\r\n     */\r\n    loadAotSummaries(summaries) { this._compiler.loadAotSummaries(summaries); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearCache() { this._compiler.clearCache(); }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    clearCacheFor(type) { this._compiler.clearCacheFor(type); }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    getComponentFromError(error) { return ((/** @type {?} */ (error)))[ERROR_COMPONENT_TYPE] || null; }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    getModuleId(moduleType) {\r\n        return this._moduleResolver.resolve(moduleType, true).id;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestingCompilerImpl.prototype._overrider;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestingCompilerImpl.prototype._compiler;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestingCompilerImpl.prototype._directiveResolver;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestingCompilerImpl.prototype._pipeResolver;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestingCompilerImpl.prototype._moduleResolver;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nconst ɵ0 = { providers: COMPILER_PROVIDERS };\r\n/**\r\n * Platform for dynamic tests\r\n *\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [\r\n    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true }, {\r\n        provide: ɵTestingCompilerFactory,\r\n        useClass: TestingCompilerFactoryImpl,\r\n        deps: [Injector, CompilerFactory]\r\n    }\r\n]);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\r\n/**\r\n * NgModule for testing.\r\n *\r\n * \\@publicApi\r\n */\r\nclass BrowserDynamicTestingModule {\r\n}\r\nBrowserDynamicTestingModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                exports: [BrowserTestingModule],\r\n                providers: [\r\n                    { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\r\n                ]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b, platformBrowserDynamicTesting, BrowserDynamicTestingModule, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };\r\n\r\n"]}