{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/platform-browser-dynamic/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;2CAgB2C,AACtB;;;;;;;;;;iDAGY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwJ5B;;;;;;;;;;;;;;0CAQ+B","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __extends, __decorate, __param, __metadata } from 'tslib';\r\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\r\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\r\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\r\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ɵgetDOM } from '@angular/platform-browser';\r\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\r\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A DOM based implementation of the TestComponentRenderer.\r\n */\r\nvar DOMTestComponentRenderer = /** @class */ (function (_super) {\r\n    __extends(DOMTestComponentRenderer, _super);\r\n    function DOMTestComponentRenderer(_doc) {\r\n        var _this = _super.call(this) || this;\r\n        _this._doc = _doc;\r\n        return _this;\r\n    }\r\n    DOMTestComponentRenderer.prototype.insertRootElement = function (rootElId) {\r\n        var rootEl = ɵgetDOM().firstChild(ɵgetDOM().content(ɵgetDOM().createTemplate(\"<div id=\\\"\" + rootElId + \"\\\"></div>\")));\r\n        // TODO(juliemr): can/should this be optional?\r\n        var oldRoots = ɵgetDOM().querySelectorAll(this._doc, '[id^=root]');\r\n        for (var i = 0; i < oldRoots.length; i++) {\r\n            ɵgetDOM().remove(oldRoots[i]);\r\n        }\r\n        ɵgetDOM().appendChild(this._doc.body, rootEl);\r\n    };\r\n    DOMTestComponentRenderer = __decorate([\r\n        Injectable(),\r\n        __param(0, Inject(DOCUMENT)),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DOMTestComponentRenderer);\r\n    return DOMTestComponentRenderer;\r\n}(TestComponentRenderer));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar COMPILER_PROVIDERS = [\r\n    { provide: MockPipeResolver, deps: [CompileReflector] },\r\n    { provide: PipeResolver, useExisting: MockPipeResolver },\r\n    { provide: MockDirectiveResolver, deps: [CompileReflector] },\r\n    { provide: DirectiveResolver, useExisting: MockDirectiveResolver },\r\n    { provide: MockNgModuleResolver, deps: [CompileReflector] },\r\n    { provide: NgModuleResolver, useExisting: MockNgModuleResolver },\r\n];\r\nvar TestingCompilerFactoryImpl = /** @class */ (function () {\r\n    function TestingCompilerFactoryImpl(_injector, _compilerFactory) {\r\n        this._injector = _injector;\r\n        this._compilerFactory = _compilerFactory;\r\n    }\r\n    TestingCompilerFactoryImpl.prototype.createTestingCompiler = function (options) {\r\n        var compiler = this._compilerFactory.createCompiler(options);\r\n        return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\r\n    };\r\n    return TestingCompilerFactoryImpl;\r\n}());\r\nvar TestingCompilerImpl = /** @class */ (function () {\r\n    function TestingCompilerImpl(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\r\n        this._compiler = _compiler;\r\n        this._directiveResolver = _directiveResolver;\r\n        this._pipeResolver = _pipeResolver;\r\n        this._moduleResolver = _moduleResolver;\r\n        this._overrider = new ɵMetadataOverrider();\r\n    }\r\n    Object.defineProperty(TestingCompilerImpl.prototype, \"injector\", {\r\n        get: function () { return this._compiler.injector; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TestingCompilerImpl.prototype.compileModuleSync = function (moduleType) {\r\n        return this._compiler.compileModuleSync(moduleType);\r\n    };\r\n    TestingCompilerImpl.prototype.compileModuleAsync = function (moduleType) {\r\n        return this._compiler.compileModuleAsync(moduleType);\r\n    };\r\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\r\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\r\n    };\r\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\r\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\r\n    };\r\n    TestingCompilerImpl.prototype.getComponentFactory = function (component) {\r\n        return this._compiler.getComponentFactory(component);\r\n    };\r\n    TestingCompilerImpl.prototype.checkOverrideAllowed = function (type) {\r\n        if (this._compiler.hasAotSummary(type)) {\r\n            throw new Error(ɵstringify(type) + \" was AOT compiled, so its metadata cannot be changed.\");\r\n        }\r\n    };\r\n    TestingCompilerImpl.prototype.overrideModule = function (ngModule, override) {\r\n        this.checkOverrideAllowed(ngModule);\r\n        var oldMetadata = this._moduleResolver.resolve(ngModule, false);\r\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\r\n        this.clearCacheFor(ngModule);\r\n    };\r\n    TestingCompilerImpl.prototype.overrideDirective = function (directive, override) {\r\n        this.checkOverrideAllowed(directive);\r\n        var oldMetadata = this._directiveResolver.resolve(directive, false);\r\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\r\n        this.clearCacheFor(directive);\r\n    };\r\n    TestingCompilerImpl.prototype.overrideComponent = function (component, override) {\r\n        this.checkOverrideAllowed(component);\r\n        var oldMetadata = this._directiveResolver.resolve(component, false);\r\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, oldMetadata, override));\r\n        this.clearCacheFor(component);\r\n    };\r\n    TestingCompilerImpl.prototype.overridePipe = function (pipe, override) {\r\n        this.checkOverrideAllowed(pipe);\r\n        var oldMetadata = this._pipeResolver.resolve(pipe, false);\r\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\r\n        this.clearCacheFor(pipe);\r\n    };\r\n    TestingCompilerImpl.prototype.loadAotSummaries = function (summaries) { this._compiler.loadAotSummaries(summaries); };\r\n    TestingCompilerImpl.prototype.clearCache = function () { this._compiler.clearCache(); };\r\n    TestingCompilerImpl.prototype.clearCacheFor = function (type) { this._compiler.clearCacheFor(type); };\r\n    TestingCompilerImpl.prototype.getComponentFromError = function (error) { return error[ERROR_COMPONENT_TYPE] || null; };\r\n    TestingCompilerImpl.prototype.getModuleId = function (moduleType) {\r\n        return this._moduleResolver.resolve(moduleType, true).id;\r\n    };\r\n    return TestingCompilerImpl;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar ɵ0 = { providers: COMPILER_PROVIDERS };\r\n/**\r\n * Platform for dynamic tests\r\n *\r\n * @publicApi\r\n */\r\nvar platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [\r\n    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true }, {\r\n        provide: ɵTestingCompilerFactory,\r\n        useClass: TestingCompilerFactoryImpl,\r\n        deps: [Injector, CompilerFactory]\r\n    }\r\n]);\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @publicApi\r\n */\r\nvar platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\r\n/**\r\n * NgModule for testing.\r\n *\r\n * @publicApi\r\n */\r\nvar BrowserDynamicTestingModule = /** @class */ (function () {\r\n    function BrowserDynamicTestingModule() {\r\n    }\r\n    BrowserDynamicTestingModule = __decorate([\r\n        NgModule({\r\n            exports: [BrowserTestingModule],\r\n            providers: [\r\n                { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\r\n            ]\r\n        })\r\n    ], BrowserDynamicTestingModule);\r\n    return BrowserDynamicTestingModule;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b, platformBrowserDynamicTesting, BrowserDynamicTestingModule, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };\r\n\r\n"]}