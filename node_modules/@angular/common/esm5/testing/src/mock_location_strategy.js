/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { LocationStrategy } from '@angular/common';
import { EventEmitter, Injectable } from '@angular/core';
/**
 * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated
 * location events.
 *
 * @publicApi
 */
import * as ɵngcc0 from '@angular/core';
var MockLocationStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(MockLocationStrategy, _super);
    function MockLocationStrategy() {
        var _this = _super.call(this) || this;
        _this.internalBaseHref = '/';
        _this.internalPath = '/';
        _this.internalTitle = '';
        _this.urlChanges = [];
        /** @internal */
        _this._subject = new EventEmitter();
        _this.stateChanges = [];
        return _this;
    }
    MockLocationStrategy.prototype.simulatePopState = function (url) {
        this.internalPath = url;
        this._subject.emit(new _MockPopStateEvent(this.path()));
    };
    MockLocationStrategy.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        return this.internalPath;
    };
    MockLocationStrategy.prototype.prepareExternalUrl = function (internal) {
        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {
            return this.internalBaseHref + internal.substring(1);
        }
        return this.internalBaseHref + internal;
    };
    MockLocationStrategy.prototype.pushState = function (ctx, title, path, query) {
        // Add state change to changes array
        this.stateChanges.push(ctx);
        this.internalTitle = title;
        var url = path + (query.length > 0 ? ('?' + query) : '');
        this.internalPath = url;
        var externalUrl = this.prepareExternalUrl(url);
        this.urlChanges.push(externalUrl);
    };
    MockLocationStrategy.prototype.replaceState = function (ctx, title, path, query) {
        // Reset the last index of stateChanges to the ctx (state) object
        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;
        this.internalTitle = title;
        var url = path + (query.length > 0 ? ('?' + query) : '');
        this.internalPath = url;
        var externalUrl = this.prepareExternalUrl(url);
        this.urlChanges.push('replace: ' + externalUrl);
    };
    MockLocationStrategy.prototype.onPopState = function (fn) { this._subject.subscribe({ next: fn }); };
    MockLocationStrategy.prototype.getBaseHref = function () { return this.internalBaseHref; };
    MockLocationStrategy.prototype.back = function () {
        if (this.urlChanges.length > 0) {
            this.urlChanges.pop();
            this.stateChanges.pop();
            var nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';
            this.simulatePopState(nextUrl);
        }
    };
    MockLocationStrategy.prototype.forward = function () { throw 'not implemented'; };
    MockLocationStrategy.prototype.getState = function () { return this.stateChanges[(this.stateChanges.length || 1) - 1]; };
    MockLocationStrategy = tslib_1.__decorate([
        tslib_1.__metadata("design:paramtypes", [])
    ], MockLocationStrategy);
MockLocationStrategy.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: MockLocationStrategy, factory: function MockLocationStrategy_Factory(t) { return new (t || MockLocationStrategy)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MockLocationStrategy, [{
        type: Injectable
    }], function () { return []; }, { simulatePopState: [], internalPath: [], path: [], prepareExternalUrl: [], pushState: [], internalTitle: [], replaceState: [], onPopState: [], getBaseHref: [], back: [], forward: [], getState: [] });
    return MockLocationStrategy;
}(LocationStrategy));
export { MockLocationStrategy };
var _MockPopStateEvent = /** @class */ (function () {
    function _MockPopStateEvent(newUrl) {
        this.newUrl = newUrl;
        this.pop = true;
        this.type = 'popstate';
    }
    return _MockPopStateEvent;
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L0FuZ3VsYXIgUHJvamVjdC9EaWRleC9kaWRleC1hZG1pbi1wYW5lbC9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29tbW9uL2VzbTUvdGVzdGluZy9zcmMvbW9ja19sb2NhdGlvbl9zdHJhdGVneS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0F5RCtDLEFBQzFCOzs7Ozs7NE9BRVEiLCJmaWxlIjoibW9ja19sb2NhdGlvbl9zdHJhdGVneS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQSBtb2NrIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBMb2NhdGlvblN0cmF0ZWd5fSB0aGF0IGFsbG93cyB0ZXN0cyB0byBmaXJlIHNpbXVsYXRlZFxyXG4gKiBsb2NhdGlvbiBldmVudHMuXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbnZhciBNb2NrTG9jYXRpb25TdHJhdGVneSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKE1vY2tMb2NhdGlvblN0cmF0ZWd5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTW9ja0xvY2F0aW9uU3RyYXRlZ3koKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5pbnRlcm5hbEJhc2VIcmVmID0gJy8nO1xyXG4gICAgICAgIF90aGlzLmludGVybmFsUGF0aCA9ICcvJztcclxuICAgICAgICBfdGhpcy5pbnRlcm5hbFRpdGxlID0gJyc7XHJcbiAgICAgICAgX3RoaXMudXJsQ2hhbmdlcyA9IFtdO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBfdGhpcy5fc3ViamVjdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICBfdGhpcy5zdGF0ZUNoYW5nZXMgPSBbXTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBNb2NrTG9jYXRpb25TdHJhdGVneS5wcm90b3R5cGUuc2ltdWxhdGVQb3BTdGF0ZSA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICB0aGlzLmludGVybmFsUGF0aCA9IHVybDtcclxuICAgICAgICB0aGlzLl9zdWJqZWN0LmVtaXQobmV3IF9Nb2NrUG9wU3RhdGVFdmVudCh0aGlzLnBhdGgoKSkpO1xyXG4gICAgfTtcclxuICAgIE1vY2tMb2NhdGlvblN0cmF0ZWd5LnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gKGluY2x1ZGVIYXNoKSB7XHJcbiAgICAgICAgaWYgKGluY2x1ZGVIYXNoID09PSB2b2lkIDApIHsgaW5jbHVkZUhhc2ggPSBmYWxzZTsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsUGF0aDtcclxuICAgIH07XHJcbiAgICBNb2NrTG9jYXRpb25TdHJhdGVneS5wcm90b3R5cGUucHJlcGFyZUV4dGVybmFsVXJsID0gZnVuY3Rpb24gKGludGVybmFsKSB7XHJcbiAgICAgICAgaWYgKGludGVybmFsLnN0YXJ0c1dpdGgoJy8nKSAmJiB0aGlzLmludGVybmFsQmFzZUhyZWYuZW5kc1dpdGgoJy8nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEJhc2VIcmVmICsgaW50ZXJuYWwuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEJhc2VIcmVmICsgaW50ZXJuYWw7XHJcbiAgICB9O1xyXG4gICAgTW9ja0xvY2F0aW9uU3RyYXRlZ3kucHJvdG90eXBlLnB1c2hTdGF0ZSA9IGZ1bmN0aW9uIChjdHgsIHRpdGxlLCBwYXRoLCBxdWVyeSkge1xyXG4gICAgICAgIC8vIEFkZCBzdGF0ZSBjaGFuZ2UgdG8gY2hhbmdlcyBhcnJheVxyXG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLnB1c2goY3R4KTtcclxuICAgICAgICB0aGlzLmludGVybmFsVGl0bGUgPSB0aXRsZTtcclxuICAgICAgICB2YXIgdXJsID0gcGF0aCArIChxdWVyeS5sZW5ndGggPiAwID8gKCc/JyArIHF1ZXJ5KSA6ICcnKTtcclxuICAgICAgICB0aGlzLmludGVybmFsUGF0aCA9IHVybDtcclxuICAgICAgICB2YXIgZXh0ZXJuYWxVcmwgPSB0aGlzLnByZXBhcmVFeHRlcm5hbFVybCh1cmwpO1xyXG4gICAgICAgIHRoaXMudXJsQ2hhbmdlcy5wdXNoKGV4dGVybmFsVXJsKTtcclxuICAgIH07XHJcbiAgICBNb2NrTG9jYXRpb25TdHJhdGVneS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gKGN0eCwgdGl0bGUsIHBhdGgsIHF1ZXJ5KSB7XHJcbiAgICAgICAgLy8gUmVzZXQgdGhlIGxhc3QgaW5kZXggb2Ygc3RhdGVDaGFuZ2VzIHRvIHRoZSBjdHggKHN0YXRlKSBvYmplY3RcclxuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlc1sodGhpcy5zdGF0ZUNoYW5nZXMubGVuZ3RoIHx8IDEpIC0gMV0gPSBjdHg7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbFRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdmFyIHVybCA9IHBhdGggKyAocXVlcnkubGVuZ3RoID4gMCA/ICgnPycgKyBxdWVyeSkgOiAnJyk7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbFBhdGggPSB1cmw7XHJcbiAgICAgICAgdmFyIGV4dGVybmFsVXJsID0gdGhpcy5wcmVwYXJlRXh0ZXJuYWxVcmwodXJsKTtcclxuICAgICAgICB0aGlzLnVybENoYW5nZXMucHVzaCgncmVwbGFjZTogJyArIGV4dGVybmFsVXJsKTtcclxuICAgIH07XHJcbiAgICBNb2NrTG9jYXRpb25TdHJhdGVneS5wcm90b3R5cGUub25Qb3BTdGF0ZSA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLl9zdWJqZWN0LnN1YnNjcmliZSh7IG5leHQ6IGZuIH0pOyB9O1xyXG4gICAgTW9ja0xvY2F0aW9uU3RyYXRlZ3kucHJvdG90eXBlLmdldEJhc2VIcmVmID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbnRlcm5hbEJhc2VIcmVmOyB9O1xyXG4gICAgTW9ja0xvY2F0aW9uU3RyYXRlZ3kucHJvdG90eXBlLmJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXJsQ2hhbmdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXJsQ2hhbmdlcy5wb3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZXMucG9wKCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0VXJsID0gdGhpcy51cmxDaGFuZ2VzLmxlbmd0aCA+IDAgPyB0aGlzLnVybENoYW5nZXNbdGhpcy51cmxDaGFuZ2VzLmxlbmd0aCAtIDFdIDogJyc7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltdWxhdGVQb3BTdGF0ZShuZXh0VXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTW9ja0xvY2F0aW9uU3RyYXRlZ3kucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiAoKSB7IHRocm93ICdub3QgaW1wbGVtZW50ZWQnOyB9O1xyXG4gICAgTW9ja0xvY2F0aW9uU3RyYXRlZ3kucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5zdGF0ZUNoYW5nZXNbKHRoaXMuc3RhdGVDaGFuZ2VzLmxlbmd0aCB8fCAxKSAtIDFdOyB9O1xyXG4gICAgTW9ja0xvY2F0aW9uU3RyYXRlZ3kgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGUoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbXSlcclxuICAgIF0sIE1vY2tMb2NhdGlvblN0cmF0ZWd5KTtcclxuICAgIHJldHVybiBNb2NrTG9jYXRpb25TdHJhdGVneTtcclxufShMb2NhdGlvblN0cmF0ZWd5KSk7XHJcbmV4cG9ydCB7IE1vY2tMb2NhdGlvblN0cmF0ZWd5IH07XHJcbnZhciBfTW9ja1BvcFN0YXRlRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfTW9ja1BvcFN0YXRlRXZlbnQobmV3VXJsKSB7XHJcbiAgICAgICAgdGhpcy5uZXdVcmwgPSBuZXdVcmw7XHJcbiAgICAgICAgdGhpcy5wb3AgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdwb3BzdGF0ZSc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX01vY2tQb3BTdGF0ZUV2ZW50O1xyXG59KCkpO1xyIl19