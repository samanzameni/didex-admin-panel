{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/common/fesm2015/http/testing.js"],"names":[],"mappingsqhBC,4KAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,aAYC","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpEventType, HttpClientModule, HttpBackend } from '@angular/common/http';\r\nimport { Injectable, NgModule } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Defines a matcher for requests based on URL, method, or both.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction RequestMatch() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    RequestMatch.prototype.method;\r\n    /** @type {?|undefined} */\r\n    RequestMatch.prototype.url;\r\n}\r\n/**\r\n * Controller to be injected into tests, that allows for mocking and flushing\r\n * of requests.\r\n *\r\n * \\@publicApi\r\n * @abstract\r\n */\r\nclass HttpTestingController {\r\n}\r\nif (false) {\r\n    /**\r\n     * Search for requests that match the given parameter, without any expectations.\r\n     * @abstract\r\n     * @param {?} match\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.match = function (match) { };\r\n    /**\r\n     * Expect that a single request has been made which matches the given URL, and return its\r\n     * mock.\r\n     *\r\n     * If no such request has been made, or more than one such request has been made, fail with an\r\n     * error message including the given request description, if any.\r\n     * @abstract\r\n     * @param {?} url\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectOne = function (url, description) { };\r\n    /**\r\n     * Expect that a single request has been made which matches the given parameters, and return\r\n     * its mock.\r\n     *\r\n     * If no such request has been made, or more than one such request has been made, fail with an\r\n     * error message including the given request description, if any.\r\n     * @abstract\r\n     * @param {?} params\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectOne = function (params, description) { };\r\n    /**\r\n     * Expect that a single request has been made which matches the given predicate function, and\r\n     * return its mock.\r\n     *\r\n     * If no such request has been made, or more than one such request has been made, fail with an\r\n     * error message including the given request description, if any.\r\n     * @abstract\r\n     * @param {?} matchFn\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectOne = function (matchFn, description) { };\r\n    /**\r\n     * Expect that a single request has been made which matches the given condition, and return\r\n     * its mock.\r\n     *\r\n     * If no such request has been made, or more than one such request has been made, fail with an\r\n     * error message including the given request description, if any.\r\n     * @abstract\r\n     * @param {?} match\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectOne = function (match, description) { };\r\n    /**\r\n     * Expect that no requests have been made which match the given URL.\r\n     *\r\n     * If a matching request has been made, fail with an error message including the given request\r\n     * description, if any.\r\n     * @abstract\r\n     * @param {?} url\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectNone = function (url, description) { };\r\n    /**\r\n     * Expect that no requests have been made which match the given parameters.\r\n     *\r\n     * If a matching request has been made, fail with an error message including the given request\r\n     * description, if any.\r\n     * @abstract\r\n     * @param {?} params\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectNone = function (params, description) { };\r\n    /**\r\n     * Expect that no requests have been made which match the given predicate function.\r\n     *\r\n     * If a matching request has been made, fail with an error message including the given request\r\n     * description, if any.\r\n     * @abstract\r\n     * @param {?} matchFn\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectNone = function (matchFn, description) { };\r\n    /**\r\n     * Expect that no requests have been made which match the given condition.\r\n     *\r\n     * If a matching request has been made, fail with an error message including the given request\r\n     * description, if any.\r\n     * @abstract\r\n     * @param {?} match\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.expectNone = function (match, description) { };\r\n    /**\r\n     * Verify that no unmatched requests are outstanding.\r\n     *\r\n     * If any requests are outstanding, fail with an error message indicating which requests were not\r\n     * handled.\r\n     *\r\n     * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\r\n     * were not explicitly matched.\r\n     * @abstract\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    HttpTestingController.prototype.verify = function (opts) { };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A mock requests that was received and is ready to be answered.\r\n *\r\n * This interface allows access to the underlying `HttpRequest`, and allows\r\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\r\n *\r\n * \\@publicApi\r\n */\r\nclass TestRequest {\r\n    /**\r\n     * @param {?} request\r\n     * @param {?} observer\r\n     */\r\n    constructor(request, observer) {\r\n        this.request = request;\r\n        this.observer = observer;\r\n        /**\r\n         * \\@internal set by `HttpClientTestingBackend`\r\n         */\r\n        this._cancelled = false;\r\n    }\r\n    /**\r\n     * Whether the request was cancelled after it was sent.\r\n     * @return {?}\r\n     */\r\n    get cancelled() { return this._cancelled; }\r\n    /**\r\n     * Resolve the request by returning a body plus additional HTTP information (such as response\r\n     * headers) if provided.\r\n     * If the request specifies an expected body type, the body is converted into the requested type.\r\n     * Otherwise, the body is converted to `JSON` by default.\r\n     *\r\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\r\n     * @param {?} body\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    flush(body, opts = {}) {\r\n        if (this.cancelled) {\r\n            throw new Error(`Cannot flush a cancelled request.`);\r\n        }\r\n        /** @type {?} */\r\n        const url = this.request.urlWithParams;\r\n        /** @type {?} */\r\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\r\n        body = _maybeConvertBody(this.request.responseType, body);\r\n        /** @type {?} */\r\n        let statusText = opts.statusText;\r\n        /** @type {?} */\r\n        let status = opts.status !== undefined ? opts.status : 200;\r\n        if (opts.status === undefined) {\r\n            if (body === null) {\r\n                status = 204;\r\n                statusText = statusText || 'No Content';\r\n            }\r\n            else {\r\n                statusText = statusText || 'OK';\r\n            }\r\n        }\r\n        if (statusText === undefined) {\r\n            throw new Error('statusText is required when setting a custom status.');\r\n        }\r\n        if (status >= 200 && status < 300) {\r\n            this.observer.next(new HttpResponse({ body, headers, status, statusText, url }));\r\n            this.observer.complete();\r\n        }\r\n        else {\r\n            this.observer.error(new HttpErrorResponse({ error: body, headers, status, statusText, url }));\r\n        }\r\n    }\r\n    /**\r\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\r\n     * @param {?} error\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    error(error, opts = {}) {\r\n        if (this.cancelled) {\r\n            throw new Error(`Cannot return an error for a cancelled request.`);\r\n        }\r\n        if (opts.status && opts.status >= 200 && opts.status < 300) {\r\n            throw new Error(`error() called with a successful status.`);\r\n        }\r\n        /** @type {?} */\r\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\r\n        this.observer.error(new HttpErrorResponse({\r\n            error,\r\n            headers,\r\n            status: opts.status || 0,\r\n            statusText: opts.statusText || '',\r\n            url: this.request.urlWithParams,\r\n        }));\r\n    }\r\n    /**\r\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\r\n     * request.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    event(event) {\r\n        if (this.cancelled) {\r\n            throw new Error(`Cannot send events to a cancelled request.`);\r\n        }\r\n        this.observer.next(event);\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * \\@internal set by `HttpClientTestingBackend`\r\n     * @type {?}\r\n     */\r\n    TestRequest.prototype._cancelled;\r\n    /** @type {?} */\r\n    TestRequest.prototype.request;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    TestRequest.prototype.observer;\r\n}\r\n/**\r\n * Helper function to convert a response body to an ArrayBuffer.\r\n * @param {?} body\r\n * @return {?}\r\n */\r\nfunction _toArrayBufferBody(body) {\r\n    if (typeof ArrayBuffer === 'undefined') {\r\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\r\n    }\r\n    if (body instanceof ArrayBuffer) {\r\n        return body;\r\n    }\r\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\r\n}\r\n/**\r\n * Helper function to convert a response body to a Blob.\r\n * @param {?} body\r\n * @return {?}\r\n */\r\nfunction _toBlob(body) {\r\n    if (typeof Blob === 'undefined') {\r\n        throw new Error('Blob responses are not supported on this platform.');\r\n    }\r\n    if (body instanceof Blob) {\r\n        return body;\r\n    }\r\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\r\n        return new Blob([body]);\r\n    }\r\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\r\n}\r\n/**\r\n * Helper function to convert a response body to JSON data.\r\n * @param {?} body\r\n * @param {?=} format\r\n * @return {?}\r\n */\r\nfunction _toJsonBody(body, format = 'JSON') {\r\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\r\n        throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\r\n    }\r\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\r\n        throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\r\n    }\r\n    if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\r\n        Array.isArray(body)) {\r\n        return body;\r\n    }\r\n    throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\r\n}\r\n/**\r\n * Helper function to convert a response body to a string.\r\n * @param {?} body\r\n * @return {?}\r\n */\r\nfunction _toTextBody(body) {\r\n    if (typeof body === 'string') {\r\n        return body;\r\n    }\r\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\r\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\r\n    }\r\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\r\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\r\n    }\r\n    return JSON.stringify(_toJsonBody(body, 'text'));\r\n}\r\n/**\r\n * Convert a response body to the requested type.\r\n * @param {?} responseType\r\n * @param {?} body\r\n * @return {?}\r\n */\r\nfunction _maybeConvertBody(responseType, body) {\r\n    if (body === null) {\r\n        return null;\r\n    }\r\n    switch (responseType) {\r\n        case 'arraybuffer':\r\n            return _toArrayBufferBody(body);\r\n        case 'blob':\r\n            return _toBlob(body);\r\n        case 'json':\r\n            return _toJsonBody(body);\r\n        case 'text':\r\n            return _toTextBody(body);\r\n        default:\r\n            throw new Error(`Unsupported responseType: ${responseType}`);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\r\n * and as the `HttpTestingController`.\r\n *\r\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\r\n * As requests come in, they're added to the list. Users can assert that specific\r\n * requests were made and then flush them. In the end, a verify() method asserts\r\n * that no unexpected requests were made.\r\n *\r\n *\r\n */\r\nclass HttpClientTestingBackend {\r\n    constructor() {\r\n        /**\r\n         * List of pending requests which have not yet been expected.\r\n         */\r\n        this.open = [];\r\n    }\r\n    /**\r\n     * Handle an incoming request by queueing it in the list of open requests.\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    handle(req) {\r\n        return new Observable((/**\r\n         * @param {?} observer\r\n         * @return {?}\r\n         */\r\n        (observer) => {\r\n            /** @type {?} */\r\n            const testReq = new TestRequest(req, observer);\r\n            this.open.push(testReq);\r\n            observer.next((/** @type {?} */ ({ type: HttpEventType.Sent })));\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => { testReq._cancelled = true; });\r\n        }));\r\n    }\r\n    /**\r\n     * Helper function to search for requests in the list of open requests.\r\n     * @private\r\n     * @param {?} match\r\n     * @return {?}\r\n     */\r\n    _match(match) {\r\n        if (typeof match === 'string') {\r\n            return this.open.filter((/**\r\n             * @param {?} testReq\r\n             * @return {?}\r\n             */\r\n            testReq => testReq.request.urlWithParams === match));\r\n        }\r\n        else if (typeof match === 'function') {\r\n            return this.open.filter((/**\r\n             * @param {?} testReq\r\n             * @return {?}\r\n             */\r\n            testReq => match(testReq.request)));\r\n        }\r\n        else {\r\n            return this.open.filter((/**\r\n             * @param {?} testReq\r\n             * @return {?}\r\n             */\r\n            testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\r\n                (!match.url || testReq.request.urlWithParams === match.url)));\r\n        }\r\n    }\r\n    /**\r\n     * Search for requests in the list of open requests, and return all that match\r\n     * without asserting anything about the number of matches.\r\n     * @param {?} match\r\n     * @return {?}\r\n     */\r\n    match(match) {\r\n        /** @type {?} */\r\n        const results = this._match(match);\r\n        results.forEach((/**\r\n         * @param {?} result\r\n         * @return {?}\r\n         */\r\n        result => {\r\n            /** @type {?} */\r\n            const index = this.open.indexOf(result);\r\n            if (index !== -1) {\r\n                this.open.splice(index, 1);\r\n            }\r\n        }));\r\n        return results;\r\n    }\r\n    /**\r\n     * Expect that a single outstanding request matches the given matcher, and return\r\n     * it.\r\n     *\r\n     * Requests returned through this API will no longer be in the list of open requests,\r\n     * and thus will not match twice.\r\n     * @param {?} match\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    expectOne(match, description) {\r\n        description = description || this.descriptionFromMatcher(match);\r\n        /** @type {?} */\r\n        const matches = this.match(match);\r\n        if (matches.length > 1) {\r\n            throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\r\n        }\r\n        if (matches.length === 0) {\r\n            throw new Error(`Expected one matching request for criteria \"${description}\", found none.`);\r\n        }\r\n        return matches[0];\r\n    }\r\n    /**\r\n     * Expect that no outstanding requests match the given matcher, and throw an error\r\n     * if any do.\r\n     * @param {?} match\r\n     * @param {?=} description\r\n     * @return {?}\r\n     */\r\n    expectNone(match, description) {\r\n        description = description || this.descriptionFromMatcher(match);\r\n        /** @type {?} */\r\n        const matches = this.match(match);\r\n        if (matches.length > 0) {\r\n            throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\r\n        }\r\n    }\r\n    /**\r\n     * Validate that there are no outstanding requests.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    verify(opts = {}) {\r\n        /** @type {?} */\r\n        let open = this.open;\r\n        // It's possible that some requests may be cancelled, and this is expected.\r\n        // The user can ask to ignore open requests which have been cancelled.\r\n        if (opts.ignoreCancelled) {\r\n            open = open.filter((/**\r\n             * @param {?} testReq\r\n             * @return {?}\r\n             */\r\n            testReq => !testReq.cancelled));\r\n        }\r\n        if (open.length > 0) {\r\n            // Show the methods and URLs of open requests in the error, for convenience.\r\n            /** @type {?} */\r\n            const requests = open.map((/**\r\n             * @param {?} testReq\r\n             * @return {?}\r\n             */\r\n            testReq => {\r\n                /** @type {?} */\r\n                const url = testReq.request.urlWithParams.split('?')[0];\r\n                /** @type {?} */\r\n                const method = testReq.request.method;\r\n                return `${method} ${url}`;\r\n            }))\r\n                .join(', ');\r\n            throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} matcher\r\n     * @return {?}\r\n     */\r\n    descriptionFromMatcher(matcher) {\r\n        if (typeof matcher === 'string') {\r\n            return `Match URL: ${matcher}`;\r\n        }\r\n        else if (typeof matcher === 'object') {\r\n            /** @type {?} */\r\n            const method = matcher.method || '(any)';\r\n            /** @type {?} */\r\n            const url = matcher.url || '(any)';\r\n            return `Match method: ${method}, URL: ${url}`;\r\n        }\r\n        else {\r\n            return `Match by function: ${matcher.name}`;\r\n        }\r\n    }\r\n}\r\nHttpClientTestingBackend.decorators = [\r\n    { type: Injectable }\r\n];\r\nif (false) {\r\n    /**\r\n     * List of pending requests which have not yet been expected.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpClientTestingBackend.prototype.open;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\r\n *\r\n * Inject `HttpTestingController` to expect and flush requests in your tests.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpClientTestingModule {\r\n}\r\nHttpClientTestingModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    HttpClientModule,\r\n                ],\r\n                providers: [\r\n                    HttpClientTestingBackend,\r\n                    { provide: HttpBackend, useExisting: HttpClientTestingBackend },\r\n                    { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\r\n                ],\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HttpClientTestingBackend as ɵangular_packages_common_http_testing_testing_a, HttpTestingController, HttpClientTestingModule, TestRequest };\r\n\r\n"]}