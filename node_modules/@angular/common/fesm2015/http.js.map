{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/common/fesm2015/http.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmwDC,4LAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6GD,gCAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsND,uGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CD,8GAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2DD,mEAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8TD,wGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2ED,oJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2ED,2FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2DD,mJAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuGD,QAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAWD,aAyBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAaD,QASC","file":"http.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { concatMap, filter, map } from 'rxjs/operators';\r\nimport { DOCUMENT, ÉµparseCookieValue } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * \\@publicApi\r\n * @abstract\r\n */\r\nclass HttpHandler {\r\n}\r\nif (false) {\r\n    /**\r\n     * @abstract\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    HttpHandler.prototype.handle = function (req) { };\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * \\@publicApi\r\n * @abstract\r\n */\r\nclass HttpBackend {\r\n}\r\nif (false) {\r\n    /**\r\n     * @abstract\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    HttpBackend.prototype.handle = function (req) { };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\nfunction Update() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    Update.prototype.name;\r\n    /** @type {?|undefined} */\r\n    Update.prototype.value;\r\n    /** @type {?} */\r\n    Update.prototype.op;\r\n}\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**\r\n     * Constructs a new HTTP header object with the given values.\r\n     * @param {?=} headers\r\n     */\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach((/**\r\n                 * @param {?} line\r\n                 * @return {?}\r\n                 */\r\n                line => {\r\n                    /** @type {?} */\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        /** @type {?} */\r\n                        const name = line.slice(0, index);\r\n                        /** @type {?} */\r\n                        const key = name.toLowerCase();\r\n                        /** @type {?} */\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                }));\r\n            });\r\n        }\r\n        else {\r\n            this.lazyInit = (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach((/**\r\n                 * @param {?} name\r\n                 * @return {?}\r\n                 */\r\n                name => {\r\n                    /** @type {?} */\r\n                    let values = headers[name];\r\n                    /** @type {?} */\r\n                    const key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                }));\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param {?} name The header name to check for existence.\r\n     *\r\n     * @return {?} True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param {?} name The header name.\r\n     *\r\n     * @return {?} The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        /** @type {?} */\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @return {?} A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param {?} name The header name from which to retrieve values.\r\n     *\r\n     * @return {?} A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param {?} name The header name for which to append the value or values.\r\n     * @param {?} value The new value or array of values.\r\n     *\r\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param {?} name The header name.\r\n     * @param {?} value The value or values to set or overide for the given header.\r\n     *\r\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param {?} name The header name.\r\n     * @param {?=} value The value or values to delete for the given header.\r\n     *\r\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} name\r\n     * @param {?} lcName\r\n     * @return {?}\r\n     */\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach((/**\r\n                 * @param {?} update\r\n                 * @return {?}\r\n                 */\r\n                update => this.applyUpdate(update)));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        key => {\r\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\r\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    clone(update) {\r\n        /** @type {?} */\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    applyUpdate(update) {\r\n        /** @type {?} */\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                /** @type {?} */\r\n                let value = (/** @type {?} */ (update.value));\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                /** @type {?} */\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                /** @type {?} */\r\n                const toDelete = (/** @type {?} */ (update.value));\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    /** @type {?} */\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter((/**\r\n                     * @param {?} value\r\n                     * @return {?}\r\n                     */\r\n                    value => toDelete.indexOf(value) === -1));\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * Internal map of lowercase header names to values.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpHeaders.prototype.headers;\r\n    /**\r\n     * Internal map of lowercased header names to the normalized\r\n     * form of the name (the form seen first).\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpHeaders.prototype.normalizedNames;\r\n    /**\r\n     * Complete the lazy initialization of this object (needed before reading).\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpHeaders.prototype.lazyInit;\r\n    /**\r\n     * Queued updates to be materialized the next initialization.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpHeaders.prototype.lazyUpdate;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A codec for encoding and decoding parameters in URLs.\r\n *\r\n * Used by `HttpParams`.\r\n *\r\n * \\@publicApi\r\n *\r\n * @record\r\n */\r\nfunction HttpParameterCodec() { }\r\nif (false) {\r\n    /**\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\r\n    /**\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\r\n}\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param {?} key The key name.\r\n     * @return {?} The encoded key name.\r\n     */\r\n    encodeKey(key) { return standardEncoding(key); }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param {?} value The value.\r\n     * @return {?} The encoded value.\r\n     */\r\n    encodeValue(value) { return standardEncoding(value); }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param {?} key The encoded key name.\r\n     * @return {?} The decoded key name.\r\n     */\r\n    decodeKey(key) { return decodeURIComponent(key); }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param {?} value The encoded value.\r\n     * @return {?} The decoded value.\r\n     */\r\n    decodeValue(value) { return decodeURIComponent(value); }\r\n}\r\n/**\r\n * @param {?} rawParams\r\n * @param {?} codec\r\n * @return {?}\r\n */\r\nfunction paramParser(rawParams, codec) {\r\n    /** @type {?} */\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        /** @type {?} */\r\n        const params = rawParams.split('&');\r\n        params.forEach((/**\r\n         * @param {?} param\r\n         * @return {?}\r\n         */\r\n        (param) => {\r\n            /** @type {?} */\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            /** @type {?} */\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        }));\r\n    }\r\n    return map;\r\n}\r\n/**\r\n * @param {?} v\r\n * @return {?}\r\n */\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction Update$1() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    Update$1.prototype.param;\r\n    /** @type {?|undefined} */\r\n    Update$1.prototype.value;\r\n    /** @type {?} */\r\n    Update$1.prototype.op;\r\n}\r\n/**\r\n * Options used to construct an `HttpParams` instance.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction HttpParamsOptions() { }\r\nif (false) {\r\n    /**\r\n     * String representation of the HTTP parameters in URL-query-string format.\r\n     * Mutually exclusive with `fromObject`.\r\n     * @type {?|undefined}\r\n     */\r\n    HttpParamsOptions.prototype.fromString;\r\n    /**\r\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\r\n     * @type {?|undefined}\r\n     */\r\n    HttpParamsOptions.prototype.fromObject;\r\n    /**\r\n     * Encoding codec used to parse and serialize the parameters.\r\n     * @type {?|undefined}\r\n     */\r\n    HttpParamsOptions.prototype.encoder;\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpParams {\r\n    /**\r\n     * @param {?=} options\r\n     */\r\n    constructor(options = (/** @type {?} */ ({}))) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach((/**\r\n             * @param {?} key\r\n             * @return {?}\r\n             */\r\n            key => {\r\n                /** @type {?} */\r\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\r\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\r\n            }));\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param {?} param The parameter name.\r\n     * @return {?} True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return (/** @type {?} */ (this.map)).has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param {?} param The parameter name.\r\n     * @return {?} The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        /** @type {?} */\r\n        const res = (/** @type {?} */ (this.map)).get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param {?} param The parameter name.\r\n     * @return {?} All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return (/** @type {?} */ (this.map)).get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @return {?} The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from((/** @type {?} */ (this.map)).keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param {?} param The parameter name.\r\n     * @param {?} value The new value to add.\r\n     * @return {?} A new body with the appended value.\r\n     */\r\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param {?} param The parameter name.\r\n     * @param {?} value The new value.\r\n     * @return {?} A new body with the new value.\r\n     */\r\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param {?} param The parameter name.\r\n     * @param {?=} value The value to remove, if provided.\r\n     * @return {?} A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map((/**\r\n         * @param {?} key\r\n         * @return {?}\r\n         */\r\n        key => {\r\n            /** @type {?} */\r\n            const eKey = this.encoder.encodeKey(key);\r\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            value => eKey + '=' + this.encoder.encodeValue(value)))\r\n                .join('&');\r\n        }))\r\n            .join('&');\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    clone(update) {\r\n        /** @type {?} */\r\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat([update]);\r\n        return clone;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach((/**\r\n             * @param {?} key\r\n             * @return {?}\r\n             */\r\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\r\n            (/** @type {?} */ (this.updates)).forEach((/**\r\n             * @param {?} update\r\n             * @return {?}\r\n             */\r\n            update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        /** @type {?} */\r\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\r\n                        base.push((/** @type {?} */ (update.value)));\r\n                        (/** @type {?} */ (this.map)).set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            /** @type {?} */\r\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\r\n                            /** @type {?} */\r\n                            const idx = base.indexOf(update.value);\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                (/** @type {?} */ (this.map)).set(update.param, base);\r\n                            }\r\n                            else {\r\n                                (/** @type {?} */ (this.map)).delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            (/** @type {?} */ (this.map)).delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            }));\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpParams.prototype.map;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpParams.prototype.encoder;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpParams.prototype.updates;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpParams.prototype.cloneFrom;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Construction interface for `HttpRequest`s.\r\n *\r\n * All values are optional and will override default values if provided.\r\n * @record\r\n */\r\nfunction HttpRequestInit() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    HttpRequestInit.prototype.headers;\r\n    /** @type {?|undefined} */\r\n    HttpRequestInit.prototype.reportProgress;\r\n    /** @type {?|undefined} */\r\n    HttpRequestInit.prototype.params;\r\n    /** @type {?|undefined} */\r\n    HttpRequestInit.prototype.responseType;\r\n    /** @type {?|undefined} */\r\n    HttpRequestInit.prototype.withCredentials;\r\n}\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n * @param {?} method\r\n * @return {?}\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * \\@publicApi\r\n * @template T\r\n */\r\nclass HttpRequest {\r\n    /**\r\n     * @param {?} method\r\n     * @param {?} url\r\n     * @param {?=} third\r\n     * @param {?=} fourth\r\n     */\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        /** @type {?} */\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = (/** @type {?} */ (third));\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            /** @type {?} */\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                /** @type {?} */\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                /** @type {?} */\r\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     * @return {?}\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return ((/** @type {?} */ (this.body))).toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     * @return {?}\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            Array.isArray(this.body)) {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    clone(update = {}) {\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        /** @type {?} */\r\n        const method = update.method || this.method;\r\n        /** @type {?} */\r\n        const url = update.url || this.url;\r\n        /** @type {?} */\r\n        const responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        /** @type {?} */\r\n        const body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        /** @type {?} */\r\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        /** @type {?} */\r\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        /** @type {?} */\r\n        let headers = update.headers || this.headers;\r\n        /** @type {?} */\r\n        let params = update.params || this.params;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((/**\r\n                 * @param {?} headers\r\n                 * @param {?} name\r\n                 * @return {?}\r\n                 */\r\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((/**\r\n             * @param {?} params\r\n             * @param {?} param\r\n             * @return {?}\r\n             */\r\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params, headers, reportProgress, responseType, withCredentials,\r\n        });\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * The request body, or `null` if one isn't set.\r\n     *\r\n     * Bodies are not enforced to be immutable, as they can include a reference to any\r\n     * user-defined data type. However, interceptors should take care to preserve\r\n     * idempotence by treating them as such.\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.body;\r\n    /**\r\n     * Outgoing headers for this request.\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.headers;\r\n    /**\r\n     * Whether this request should be made in a way that exposes progress events.\r\n     *\r\n     * Progress events are expensive (change detection runs on each event) and so\r\n     * they should only be requested if the consumer intends to monitor them.\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.reportProgress;\r\n    /**\r\n     * Whether this request should be sent with outgoing credentials (cookies).\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.withCredentials;\r\n    /**\r\n     * The expected response type of the server.\r\n     *\r\n     * This is used to parse the response appropriately before returning it to\r\n     * the requestee.\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.responseType;\r\n    /**\r\n     * The outgoing HTTP request method.\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.method;\r\n    /**\r\n     * Outgoing URL parameters.\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.params;\r\n    /**\r\n     * The outgoing URL with all URL parameters set.\r\n     * @type {?}\r\n     */\r\n    HttpRequest.prototype.urlWithParams;\r\n    /** @type {?} */\r\n    HttpRequest.prototype.url;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst HttpEventType = {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    Sent: 0,\r\n    /**\r\n     * An upload progress event was received.\r\n     */\r\n    UploadProgress: 1,\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    ResponseHeader: 2,\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    DownloadProgress: 3,\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    Response: 4,\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    User: 5,\r\n};\r\nHttpEventType[HttpEventType.Sent] = 'Sent';\r\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\r\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\r\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\r\nHttpEventType[HttpEventType.Response] = 'Response';\r\nHttpEventType[HttpEventType.User] = 'User';\r\n/**\r\n * Base interface for progress events.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction HttpProgressEvent() { }\r\nif (false) {\r\n    /**\r\n     * Progress event type is either upload or download.\r\n     * @type {?}\r\n     */\r\n    HttpProgressEvent.prototype.type;\r\n    /**\r\n     * Number of bytes uploaded or downloaded.\r\n     * @type {?}\r\n     */\r\n    HttpProgressEvent.prototype.loaded;\r\n    /**\r\n     * Total number of bytes to upload or download. Depending on the request or\r\n     * response, this may not be computable and thus may not be present.\r\n     * @type {?|undefined}\r\n     */\r\n    HttpProgressEvent.prototype.total;\r\n}\r\n/**\r\n * A download progress event.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction HttpDownloadProgressEvent() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    HttpDownloadProgressEvent.prototype.type;\r\n    /**\r\n     * The partial response body as downloaded so far.\r\n     *\r\n     * Only present if the responseType was `text`.\r\n     * @type {?|undefined}\r\n     */\r\n    HttpDownloadProgressEvent.prototype.partialText;\r\n}\r\n/**\r\n * An upload progress event.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction HttpUploadProgressEvent() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    HttpUploadProgressEvent.prototype.type;\r\n}\r\n/**\r\n * An event indicating that the request was sent to the server. Useful\r\n * when a request may be retried multiple times, to distinguish between\r\n * retries on the final event stream.\r\n *\r\n * \\@publicApi\r\n * @record\r\n */\r\nfunction HttpSentEvent() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    HttpSentEvent.prototype.type;\r\n}\r\n/**\r\n * A user-defined event.\r\n *\r\n * Grouping all custom events under this type ensures they will be handled\r\n * and forwarded by all implementations of interceptors.\r\n *\r\n * \\@publicApi\r\n * @record\r\n * @template T\r\n */\r\nfunction HttpUserEvent() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    HttpUserEvent.prototype.type;\r\n}\r\n/**\r\n * An error that represents a failed attempt to JSON.parse text coming back\r\n * from the server.\r\n *\r\n * It bundles the Error object with the actual response body that failed to parse.\r\n *\r\n *\r\n * @record\r\n */\r\nfunction HttpJsonParseError() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    HttpJsonParseError.prototype.error;\r\n    /** @type {?} */\r\n    HttpJsonParseError.prototype.text;\r\n}\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * \\@publicApi\r\n * @abstract\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     * @param {?} init\r\n     * @param {?=} defaultStatus\r\n     * @param {?=} defaultStatusText\r\n     */\r\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * All response headers.\r\n     * @type {?}\r\n     */\r\n    HttpResponseBase.prototype.headers;\r\n    /**\r\n     * Response status code.\r\n     * @type {?}\r\n     */\r\n    HttpResponseBase.prototype.status;\r\n    /**\r\n     * Textual description of response status code.\r\n     *\r\n     * Do not depend on this.\r\n     * @type {?}\r\n     */\r\n    HttpResponseBase.prototype.statusText;\r\n    /**\r\n     * URL of the resource retrieved, or null if not available.\r\n     * @type {?}\r\n     */\r\n    HttpResponseBase.prototype.url;\r\n    /**\r\n     * Whether the status code falls in the 2xx range.\r\n     * @type {?}\r\n     */\r\n    HttpResponseBase.prototype.ok;\r\n    /**\r\n     * Type of the response, narrowed to either the full response or the header.\r\n     * @type {?}\r\n     */\r\n    HttpResponseBase.prototype.type;\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     * @param {?=} init\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HttpHeaderResponse.prototype.type;\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * \\@publicApi\r\n * @template T\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     * @param {?=} init\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * The response body, or `null` if one was not returned.\r\n     * @type {?}\r\n     */\r\n    HttpResponse.prototype.body;\r\n    /** @type {?} */\r\n    HttpResponse.prototype.type;\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    /**\r\n     * @param {?} init\r\n     */\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message =\r\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HttpErrorResponse.prototype.name;\r\n    /** @type {?} */\r\n    HttpErrorResponse.prototype.message;\r\n    /** @type {?} */\r\n    HttpErrorResponse.prototype.error;\r\n    /**\r\n     * Errors are never okay, even when the status code is in the 2xx success range.\r\n     * @type {?}\r\n     */\r\n    HttpErrorResponse.prototype.ok;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n * @template T\r\n * @param {?} options\r\n * @param {?} body\r\n * @return {?}\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n * \\@usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpClient {\r\n    /**\r\n     * @param {?} handler\r\n     */\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     * @param {?} first\r\n     * @param {?=} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    request(first, url, options = {}) {\r\n        /** @type {?} */\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = (/** @type {?} */ (first));\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            /** @type {?} */\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            /** @type {?} */\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        /** @type {?} */\r\n        const events$ = of(req).pipe(concatMap((/**\r\n         * @param {?} req\r\n         * @return {?}\r\n         */\r\n        (req) => this.handler.handle(req))));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        /** @type {?} */\r\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event) => event instanceof HttpResponse)))));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((/**\r\n                         * @param {?} res\r\n                         * @return {?}\r\n                         */\r\n                        (res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        })));\r\n                    case 'blob':\r\n                        return res$.pipe(map((/**\r\n                         * @param {?} res\r\n                         * @return {?}\r\n                         */\r\n                        (res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        })));\r\n                    case 'text':\r\n                        return res$.pipe(map((/**\r\n                         * @param {?} res\r\n                         * @return {?}\r\n                         */\r\n                        (res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        })));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((/**\r\n                         * @param {?} res\r\n                         * @return {?}\r\n                         */\r\n                        (res) => res.body)));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param {?} url     The endpoint URL.\r\n     * @param {?=} options The HTTP options to send with the request.\r\n     *\r\n     * @return {?}\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, (/** @type {?} */ (options)));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @template T\r\n     * @param {?} url The resource URL.\r\n     * @param {?} callbackParam The callback function name.\r\n     *\r\n     * @return {?}\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nHttpClient.ctorParameters = () => [\r\n    { type: HttpHandler }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpClient.prototype.handler;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\r\n *\r\n * Most interceptors transform the outgoing request before passing it to the\r\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\r\n * An interceptor may transform the\r\n * response event stream as well, by applying additional RxJS operators on the stream\r\n * returned by `next.handle()`.\r\n *\r\n * More rarely, an interceptor may handle the request entirely,\r\n * and compose a new event stream instead of invoking `next.handle()`. This is an\r\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\r\n *\r\n * It is also rare but valid for an interceptor to return multiple responses on the\r\n * event stream for a single request.\r\n *\r\n * \\@publicApi\r\n *\r\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\r\n *\r\n * \\@usageNotes\r\n *\r\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\r\n * only in your `AppModule`, and add the interceptors to the root application injector .\r\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\r\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\r\n * provided in the root module.\r\n *\r\n * @record\r\n */\r\nfunction HttpInterceptor() { }\r\nif (false) {\r\n    /**\r\n     * Identifies and handles a given HTTP request.\r\n     * @param {?} req The outgoing request object to handle.\r\n     * @param {?} next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @return {?} An observable of the event stream.\r\n     */\r\n    HttpInterceptor.prototype.intercept = function (req, next) { };\r\n}\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n *\r\n */\r\nclass HttpInterceptorHandler {\r\n    /**\r\n     * @param {?} next\r\n     * @param {?} interceptor\r\n     */\r\n    constructor(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    handle(req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpInterceptorHandler.prototype.next;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpInterceptorHandler.prototype.interceptor;\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nclass NoopInterceptor {\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    intercept(req, next) {\r\n        return next.handle(req);\r\n    }\r\n}\r\nNoopInterceptor.decorators = [\r\n    { type: Injectable }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\n/** @type {?} */\r\nlet nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\n/** @type {?} */\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\n/** @type {?} */\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\n/** @type {?} */\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n * @abstract\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * \\@publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    /**\r\n     * @param {?} callbackMap\r\n     * @param {?} document\r\n     */\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param {?} req The request object.\r\n     * @return {?} An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((/**\r\n         * @param {?} observer\r\n         * @return {?}\r\n         */\r\n        (observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            /** @type {?} */\r\n            const callback = this.nextCallback();\r\n            /** @type {?} */\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            /** @type {?} */\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            /** @type {?} */\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            /** @type {?} */\r\n            let finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            /** @type {?} */\r\n            let cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (/**\r\n             * @param {?=} data\r\n             * @return {?}\r\n             */\r\n            (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            });\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            /** @type {?} */\r\n            const cleanup = (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            });\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            /** @type {?} */\r\n            const onLoad = (/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            (event) => {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Cleanup the page.\r\n                cleanup();\r\n                // Check whether the response callback has run.\r\n                if (!finished) {\r\n                    // It hasn't, something went wrong with the request. Return an error via\r\n                    // the Observable error path. All JSONP errors have status 0.\r\n                    observer.error(new HttpErrorResponse({\r\n                        url,\r\n                        status: 0,\r\n                        statusText: 'JSONP Error',\r\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                    }));\r\n                    return;\r\n                }\r\n                // Success. body either contains the response body or null if none was\r\n                // returned.\r\n                observer.next(new HttpResponse({\r\n                    body,\r\n                    status: 200,\r\n                    statusText: 'OK', url,\r\n                }));\r\n                // Complete the stream, the response is over.\r\n                observer.complete();\r\n            });\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            /** @type {?} */\r\n            const onError = (/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            (error) => {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error', url,\r\n                }));\r\n            });\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            });\r\n        }));\r\n    }\r\n}\r\nJsonpClientBackend.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nJsonpClientBackend.ctorParameters = () => [\r\n    { type: JsonpCallbackContext },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    JsonpClientBackend.prototype.callbackMap;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    JsonpClientBackend.prototype.document;\r\n}\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * \\@publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    /**\r\n     * @param {?} jsonp\r\n     */\r\n    constructor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param {?} req The outgoing request object to handle.\r\n     * @param {?} next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @return {?} An observable of the event stream.\r\n     */\r\n    intercept(req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle((/** @type {?} */ (req)));\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    }\r\n}\r\nJsonpInterceptor.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nJsonpInterceptor.ctorParameters = () => [\r\n    { type: JsonpClientBackend }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    JsonpInterceptor.prototype.jsonp;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n * @param {?} xhr\r\n * @return {?}\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * \\@publicApi\r\n * @abstract\r\n */\r\nclass XhrFactory {\r\n}\r\nif (false) {\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    XhrFactory.prototype.build = function () { };\r\n}\r\n/**\r\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\r\n *\r\n */\r\nclass BrowserXhr {\r\n    constructor() { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\r\n}\r\nBrowserXhr.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nBrowserXhr.ctorParameters = () => [];\r\n/**\r\n * Tracks a response from the server that does not yet have a body.\r\n * @record\r\n */\r\nfunction PartialResponse() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    PartialResponse.prototype.headers;\r\n    /** @type {?} */\r\n    PartialResponse.prototype.status;\r\n    /** @type {?} */\r\n    PartialResponse.prototype.statusText;\r\n    /** @type {?} */\r\n    PartialResponse.prototype.url;\r\n}\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    /**\r\n     * @param {?} xhrFactory\r\n     */\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param {?} req The request object.\r\n     * @return {?} An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the JsonpClientModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((/**\r\n         * @param {?} observer\r\n         * @return {?}\r\n         */\r\n        (observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            /** @type {?} */\r\n            const xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((/**\r\n             * @param {?} name\r\n             * @param {?} values\r\n             * @return {?}\r\n             */\r\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                /** @type {?} */\r\n                const detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                /** @type {?} */\r\n                const responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            /** @type {?} */\r\n            const reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            /** @type {?} */\r\n            let headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            /** @type {?} */\r\n            const partialFromXhr = (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\r\n                /** @type {?} */\r\n                const status = xhr.status === 1223 ? 204 : xhr.status;\r\n                /** @type {?} */\r\n                const statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                /** @type {?} */\r\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                /** @type {?} */\r\n                const url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\r\n                return headerResponse;\r\n            });\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            /** @type {?} */\r\n            const onLoad = (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                /** @type {?} */\r\n                let body = null;\r\n                if (status !== 204) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                /** @type {?} */\r\n                let ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    /** @type {?} */\r\n                    const originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = (/** @type {?} */ ({ error, text: body }));\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            });\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            /** @type {?} */\r\n            const onError = (/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            (error) => {\r\n                const { url } = partialFromXhr();\r\n                /** @type {?} */\r\n                const res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                    url: url || undefined,\r\n                });\r\n                observer.error(res);\r\n            });\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            /** @type {?} */\r\n            let sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            /** @type {?} */\r\n            const onDownProgress = (/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                /** @type {?} */\r\n                let progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            });\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            /** @type {?} */\r\n            const onUpProgress = (/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                /** @type {?} */\r\n                let progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            });\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send((/** @type {?} */ (reqBody)));\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                xhr.abort();\r\n            });\r\n        }));\r\n    }\r\n}\r\nHttpXhrBackend.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nHttpXhrBackend.ctorParameters = () => [\r\n    { type: XhrFactory }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXhrBackend.prototype.xhrFactory;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\n/** @type {?} */\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * \\@publicApi\r\n * @abstract\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\nif (false) {\r\n    /**\r\n     * Get the XSRF token to use with an outgoing request.\r\n     *\r\n     * Will be called for every request, so the token may change between requests.\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} platform\r\n     * @param {?} cookieName\r\n     */\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * \\@internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        /** @type {?} */\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nHttpXsrfCookieExtractor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXsrfCookieExtractor.prototype.lastToken;\r\n    /**\r\n     * \\@internal for testing\r\n     * @type {?}\r\n     */\r\n    HttpXsrfCookieExtractor.prototype.parseCount;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXsrfCookieExtractor.prototype.doc;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXsrfCookieExtractor.prototype.platform;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXsrfCookieExtractor.prototype.cookieName;\r\n}\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    /**\r\n     * @param {?} tokenService\r\n     * @param {?} headerName\r\n     */\r\n    constructor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    intercept(req, next) {\r\n        /** @type {?} */\r\n        const lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        /** @type {?} */\r\n        const token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}\r\nHttpXsrfInterceptor.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nHttpXsrfInterceptor.ctorParameters = () => [\r\n    { type: HttpXsrfTokenExtractor },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXsrfInterceptor.prototype.tokenService;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpXsrfInterceptor.prototype.headerName;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * An injectable `HttpHandler` that applies multiple interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n * @see `HttpInterceptor`\r\n */\r\nclass HttpInterceptingHandler {\r\n    /**\r\n     * @param {?} backend\r\n     * @param {?} injector\r\n     */\r\n    constructor(backend, injector) {\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    handle(req) {\r\n        if (this.chain === null) {\r\n            /** @type {?} */\r\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\r\n            this.chain = interceptors.reduceRight((/**\r\n             * @param {?} next\r\n             * @param {?} interceptor\r\n             * @return {?}\r\n             */\r\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\r\n        }\r\n        return this.chain.handle(req);\r\n    }\r\n}\r\nHttpInterceptingHandler.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nHttpInterceptingHandler.ctorParameters = () => [\r\n    { type: HttpBackend },\r\n    { type: Injector }\r\n];\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpInterceptingHandler.prototype.chain;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpInterceptingHandler.prototype.backend;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HttpInterceptingHandler.prototype.injector;\r\n}\r\n/**\r\n * Constructs an `HttpHandler` that applies interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Use as a factory function within `HttpClientModule`.\r\n *\r\n *\r\n * @param {?} backend\r\n * @param {?=} interceptors\r\n * @return {?}\r\n */\r\nfunction interceptingHandler(backend, interceptors = []) {\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight((/**\r\n     * @param {?} next\r\n     * @param {?} interceptor\r\n     * @return {?}\r\n     */\r\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n * @return {?}\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     * @return {?}\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param {?=} options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     * @return {?}\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [\r\n                    HttpXsrfInterceptor,\r\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                ],\r\n            },] }\r\n];\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                /**\r\n                 * Optional configuration for XSRF protection.\r\n                 */\r\n                imports: [\r\n                    HttpClientXsrfModule.withOptions({\r\n                        cookieName: 'XSRF-TOKEN',\r\n                        headerName: 'X-XSRF-TOKEN',\r\n                    }),\r\n                ],\r\n                /**\r\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n                 * with supporting services for HTTP communications.\r\n                 */\r\n                providers: [\r\n                    HttpClient,\r\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n                    HttpXhrBackend,\r\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                    BrowserXhr,\r\n                    { provide: XhrFactory, useExisting: BrowserXhr },\r\n                ],\r\n            },] }\r\n];\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * \\@publicApi\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [\r\n                    JsonpClientBackend,\r\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                ],\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { NoopInterceptor as Éµangular_packages_common_http_http_a, JsonpCallbackContext as Éµangular_packages_common_http_http_b, jsonpCallbackContext as Éµangular_packages_common_http_http_c, BrowserXhr as Éµangular_packages_common_http_http_d, HttpXsrfCookieExtractor as Éµangular_packages_common_http_http_g, HttpXsrfInterceptor as Éµangular_packages_common_http_http_h, XSRF_COOKIE_NAME as Éµangular_packages_common_http_http_e, XSRF_HEADER_NAME as Éµangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ÉµHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\r\n\r\n"]}