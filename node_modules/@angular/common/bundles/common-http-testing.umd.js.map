{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/common/bundles/common-http-testing.umd.js"],"names":[],"mappings":"AAAA;;;;;;;uNAO8J;0LACX;;yDAExwgBjC;;;;4JAG2B;;;;;;;;;;;;;;;;;;;;SAoB5B;;;;;;;;;;;;;;;;;;;;;;cAY2B","file":"common-http-testing.umd.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\n(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('rxjs')) :\r\n    typeof define === 'function' && define.amd ? define('@angular/common/http/testing', ['exports', '@angular/common/http', '@angular/core', 'rxjs'], factory) :\r\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.http = global.ng.common.http || {}, global.ng.common.http.testing = {}), global.ng.common.http, global.ng.core, global.rxjs));\r\n}(this, function (exports, http, core, rxjs) { 'use strict';\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * Controller to be injected into tests, that allows for mocking and flushing\r\n     * of requests.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var HttpTestingController = /** @class */ (function () {\r\n        function HttpTestingController() {\r\n        }\r\n        return HttpTestingController;\r\n    }());\r\n\r\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * A mock requests that was received and is ready to be answered.\r\n     *\r\n     * This interface allows access to the underlying `HttpRequest`, and allows\r\n     * responding with `HttpEvent`s or `HttpErrorResponse`s.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var TestRequest = /** @class */ (function () {\r\n        function TestRequest(request, observer) {\r\n            this.request = request;\r\n            this.observer = observer;\r\n            /**\r\n             * @internal set by `HttpClientTestingBackend`\r\n             */\r\n            this._cancelled = false;\r\n        }\r\n        Object.defineProperty(TestRequest.prototype, \"cancelled\", {\r\n            /**\r\n             * Whether the request was cancelled after it was sent.\r\n             */\r\n            get: function () { return this._cancelled; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Resolve the request by returning a body plus additional HTTP information (such as response\r\n         * headers) if provided.\r\n         * If the request specifies an expected body type, the body is converted into the requested type.\r\n         * Otherwise, the body is converted to `JSON` by default.\r\n         *\r\n         * Both successful and unsuccessful responses can be delivered via `flush()`.\r\n         */\r\n        TestRequest.prototype.flush = function (body, opts) {\r\n            if (opts === void 0) { opts = {}; }\r\n            if (this.cancelled) {\r\n                throw new Error(\"Cannot flush a cancelled request.\");\r\n            }\r\n            var url = this.request.urlWithParams;\r\n            var headers = (opts.headers instanceof http.HttpHeaders) ? opts.headers : new http.HttpHeaders(opts.headers);\r\n            body = _maybeConvertBody(this.request.responseType, body);\r\n            var statusText = opts.statusText;\r\n            var status = opts.status !== undefined ? opts.status : 200;\r\n            if (opts.status === undefined) {\r\n                if (body === null) {\r\n                    status = 204;\r\n                    statusText = statusText || 'No Content';\r\n                }\r\n                else {\r\n                    statusText = statusText || 'OK';\r\n                }\r\n            }\r\n            if (statusText === undefined) {\r\n                throw new Error('statusText is required when setting a custom status.');\r\n            }\r\n            if (status >= 200 && status < 300) {\r\n                this.observer.next(new http.HttpResponse({ body: body, headers: headers, status: status, statusText: statusText, url: url }));\r\n                this.observer.complete();\r\n            }\r\n            else {\r\n                this.observer.error(new http.HttpErrorResponse({ error: body, headers: headers, status: status, statusText: statusText, url: url }));\r\n            }\r\n        };\r\n        /**\r\n         * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\r\n         */\r\n        TestRequest.prototype.error = function (error, opts) {\r\n            if (opts === void 0) { opts = {}; }\r\n            if (this.cancelled) {\r\n                throw new Error(\"Cannot return an error for a cancelled request.\");\r\n            }\r\n            if (opts.status && opts.status >= 200 && opts.status < 300) {\r\n                throw new Error(\"error() called with a successful status.\");\r\n            }\r\n            var headers = (opts.headers instanceof http.HttpHeaders) ? opts.headers : new http.HttpHeaders(opts.headers);\r\n            this.observer.error(new http.HttpErrorResponse({\r\n                error: error,\r\n                headers: headers,\r\n                status: opts.status || 0,\r\n                statusText: opts.statusText || '',\r\n                url: this.request.urlWithParams,\r\n            }));\r\n        };\r\n        /**\r\n         * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\r\n         * request.\r\n         */\r\n        TestRequest.prototype.event = function (event) {\r\n            if (this.cancelled) {\r\n                throw new Error(\"Cannot send events to a cancelled request.\");\r\n            }\r\n            this.observer.next(event);\r\n        };\r\n        return TestRequest;\r\n    }());\r\n    /**\r\n     * Helper function to convert a response body to an ArrayBuffer.\r\n     */\r\n    function _toArrayBufferBody(body) {\r\n        if (typeof ArrayBuffer === 'undefined') {\r\n            throw new Error('ArrayBuffer responses are not supported on this platform.');\r\n        }\r\n        if (body instanceof ArrayBuffer) {\r\n            return body;\r\n        }\r\n        throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\r\n    }\r\n    /**\r\n     * Helper function to convert a response body to a Blob.\r\n     */\r\n    function _toBlob(body) {\r\n        if (typeof Blob === 'undefined') {\r\n            throw new Error('Blob responses are not supported on this platform.');\r\n        }\r\n        if (body instanceof Blob) {\r\n            return body;\r\n        }\r\n        if (ArrayBuffer && body instanceof ArrayBuffer) {\r\n            return new Blob([body]);\r\n        }\r\n        throw new Error('Automatic conversion to Blob is not supported for response type.');\r\n    }\r\n    /**\r\n     * Helper function to convert a response body to JSON data.\r\n     */\r\n    function _toJsonBody(body, format) {\r\n        if (format === void 0) { format = 'JSON'; }\r\n        if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\r\n            throw new Error(\"Automatic conversion to \" + format + \" is not supported for ArrayBuffers.\");\r\n        }\r\n        if (typeof Blob !== 'undefined' && body instanceof Blob) {\r\n            throw new Error(\"Automatic conversion to \" + format + \" is not supported for Blobs.\");\r\n        }\r\n        if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\r\n            Array.isArray(body)) {\r\n            return body;\r\n        }\r\n        throw new Error(\"Automatic conversion to \" + format + \" is not supported for response type.\");\r\n    }\r\n    /**\r\n     * Helper function to convert a response body to a string.\r\n     */\r\n    function _toTextBody(body) {\r\n        if (typeof body === 'string') {\r\n            return body;\r\n        }\r\n        if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\r\n            throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\r\n        }\r\n        if (typeof Blob !== 'undefined' && body instanceof Blob) {\r\n            throw new Error('Automatic conversion to text is not supported for Blobs.');\r\n        }\r\n        return JSON.stringify(_toJsonBody(body, 'text'));\r\n    }\r\n    /**\r\n     * Convert a response body to the requested type.\r\n     */\r\n    function _maybeConvertBody(responseType, body) {\r\n        if (body === null) {\r\n            return null;\r\n        }\r\n        switch (responseType) {\r\n            case 'arraybuffer':\r\n                return _toArrayBufferBody(body);\r\n            case 'blob':\r\n                return _toBlob(body);\r\n            case 'json':\r\n                return _toJsonBody(body);\r\n            case 'text':\r\n                return _toTextBody(body);\r\n            default:\r\n                throw new Error(\"Unsupported responseType: \" + responseType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * A testing backend for `HttpClient` which both acts as an `HttpBackend`\r\n     * and as the `HttpTestingController`.\r\n     *\r\n     * `HttpClientTestingBackend` works by keeping a list of all open requests.\r\n     * As requests come in, they're added to the list. Users can assert that specific\r\n     * requests were made and then flush them. In the end, a verify() method asserts\r\n     * that no unexpected requests were made.\r\n     *\r\n     *\r\n     */\r\n    var HttpClientTestingBackend = /** @class */ (function () {\r\n        function HttpClientTestingBackend() {\r\n            /**\r\n             * List of pending requests which have not yet been expected.\r\n             */\r\n            this.open = [];\r\n        }\r\n        /**\r\n         * Handle an incoming request by queueing it in the list of open requests.\r\n         */\r\n        HttpClientTestingBackend.prototype.handle = function (req) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                var testReq = new TestRequest(req, observer);\r\n                _this.open.push(testReq);\r\n                observer.next({ type: http.HttpEventType.Sent });\r\n                return function () { testReq._cancelled = true; };\r\n            });\r\n        };\r\n        /**\r\n         * Helper function to search for requests in the list of open requests.\r\n         */\r\n        HttpClientTestingBackend.prototype._match = function (match) {\r\n            if (typeof match === 'string') {\r\n                return this.open.filter(function (testReq) { return testReq.request.urlWithParams === match; });\r\n            }\r\n            else if (typeof match === 'function') {\r\n                return this.open.filter(function (testReq) { return match(testReq.request); });\r\n            }\r\n            else {\r\n                return this.open.filter(function (testReq) { return (!match.method || testReq.request.method === match.method.toUpperCase()) &&\r\n                    (!match.url || testReq.request.urlWithParams === match.url); });\r\n            }\r\n        };\r\n        /**\r\n         * Search for requests in the list of open requests, and return all that match\r\n         * without asserting anything about the number of matches.\r\n         */\r\n        HttpClientTestingBackend.prototype.match = function (match) {\r\n            var _this = this;\r\n            var results = this._match(match);\r\n            results.forEach(function (result) {\r\n                var index = _this.open.indexOf(result);\r\n                if (index !== -1) {\r\n                    _this.open.splice(index, 1);\r\n                }\r\n            });\r\n            return results;\r\n        };\r\n        /**\r\n         * Expect that a single outstanding request matches the given matcher, and return\r\n         * it.\r\n         *\r\n         * Requests returned through this API will no longer be in the list of open requests,\r\n         * and thus will not match twice.\r\n         */\r\n        HttpClientTestingBackend.prototype.expectOne = function (match, description) {\r\n            description = description || this.descriptionFromMatcher(match);\r\n            var matches = this.match(match);\r\n            if (matches.length > 1) {\r\n                throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found \" + matches.length + \" requests.\");\r\n            }\r\n            if (matches.length === 0) {\r\n                throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found none.\");\r\n            }\r\n            return matches[0];\r\n        };\r\n        /**\r\n         * Expect that no outstanding requests match the given matcher, and throw an error\r\n         * if any do.\r\n         */\r\n        HttpClientTestingBackend.prototype.expectNone = function (match, description) {\r\n            description = description || this.descriptionFromMatcher(match);\r\n            var matches = this.match(match);\r\n            if (matches.length > 0) {\r\n                throw new Error(\"Expected zero matching requests for criteria \\\"\" + description + \"\\\", found \" + matches.length + \".\");\r\n            }\r\n        };\r\n        /**\r\n         * Validate that there are no outstanding requests.\r\n         */\r\n        HttpClientTestingBackend.prototype.verify = function (opts) {\r\n            if (opts === void 0) { opts = {}; }\r\n            var open = this.open;\r\n            // It's possible that some requests may be cancelled, and this is expected.\r\n            // The user can ask to ignore open requests which have been cancelled.\r\n            if (opts.ignoreCancelled) {\r\n                open = open.filter(function (testReq) { return !testReq.cancelled; });\r\n            }\r\n            if (open.length > 0) {\r\n                // Show the methods and URLs of open requests in the error, for convenience.\r\n                var requests = open.map(function (testReq) {\r\n                    var url = testReq.request.urlWithParams.split('?')[0];\r\n                    var method = testReq.request.method;\r\n                    return method + \" \" + url;\r\n                })\r\n                    .join(', ');\r\n                throw new Error(\"Expected no open requests, found \" + open.length + \": \" + requests);\r\n            }\r\n        };\r\n        HttpClientTestingBackend.prototype.descriptionFromMatcher = function (matcher) {\r\n            if (typeof matcher === 'string') {\r\n                return \"Match URL: \" + matcher;\r\n            }\r\n            else if (typeof matcher === 'object') {\r\n                var method = matcher.method || '(any)';\r\n                var url = matcher.url || '(any)';\r\n                return \"Match method: \" + method + \", URL: \" + url;\r\n            }\r\n            else {\r\n                return \"Match by function: \" + matcher.name;\r\n            }\r\n        };\r\n        HttpClientTestingBackend = __decorate([\r\n            core.Injectable()\r\n        ], HttpClientTestingBackend);\r\n        return HttpClientTestingBackend;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\r\n     *\r\n     * Inject `HttpTestingController` to expect and flush requests in your tests.\r\n     *\r\n     * @publicApi\r\n     */\r\n    var HttpClientTestingModule = /** @class */ (function () {\r\n        function HttpClientTestingModule() {\r\n        }\r\n        HttpClientTestingModule = __decorate([\r\n            core.NgModule({\r\n                imports: [\r\n                    http.HttpClientModule,\r\n                ],\r\n                providers: [\r\n                    HttpClientTestingBackend,\r\n                    { provide: http.HttpBackend, useExisting: HttpClientTestingBackend },\r\n                    { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\r\n                ],\r\n            })\r\n        ], HttpClientTestingModule);\r\n        return HttpClientTestingModule;\r\n    }());\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n\r\n    /**\r\n     * Generated bundle index. Do not edit.\r\n     */\r\n\r\n    exports.ɵangular_packages_common_http_testing_testing_a = HttpClientTestingBackend;\r\n    exports.HttpTestingController = HttpTestingController;\r\n    exports.HttpClientTestingModule = HttpClientTestingModule;\r\n    exports.TestRequest = TestRequest;\r\n\r\n    Object.defineProperty(exports, '__esModule', { value: true });\r\n\r\n}));\r\n\r\n"]}