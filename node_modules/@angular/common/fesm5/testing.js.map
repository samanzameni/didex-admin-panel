{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/common/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sEAiGsE;;;;udAGlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAkFmB,AAClB;;;;;;4OAEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAuLU,AAClB;;;;;;;;;;;;kUAGQ","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __decorate, __extends, __metadata, __assign, __param } from 'tslib';\r\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\r\nimport { LocationStrategy } from '@angular/common';\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A spy for {@link Location} that allows tests to fire simulated location events.\r\n *\r\n * @publicApi\r\n */\r\nvar SpyLocation = /** @class */ (function () {\r\n    function SpyLocation() {\r\n        this.urlChanges = [];\r\n        this._history = [new LocationState('', '', null)];\r\n        this._historyIndex = 0;\r\n        /** @internal */\r\n        this._subject = new EventEmitter();\r\n        /** @internal */\r\n        this._baseHref = '';\r\n        /** @internal */\r\n        this._platformStrategy = null;\r\n        /** @internal */\r\n        this._platformLocation = null;\r\n        /** @internal */\r\n        this._urlChangeListeners = [];\r\n    }\r\n    SpyLocation.prototype.setInitialPath = function (url) { this._history[this._historyIndex].path = url; };\r\n    SpyLocation.prototype.setBaseHref = function (url) { this._baseHref = url; };\r\n    SpyLocation.prototype.path = function () { return this._history[this._historyIndex].path; };\r\n    SpyLocation.prototype.getState = function () { return this._history[this._historyIndex].state; };\r\n    SpyLocation.prototype.isCurrentPathEqualTo = function (path, query) {\r\n        if (query === void 0) { query = ''; }\r\n        var givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\r\n        var currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\r\n        return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\r\n    };\r\n    SpyLocation.prototype.simulateUrlPop = function (pathname) {\r\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\r\n    };\r\n    SpyLocation.prototype.simulateHashChange = function (pathname) {\r\n        // Because we don't prevent the native event, the browser will independently update the path\r\n        this.setInitialPath(pathname);\r\n        this.urlChanges.push('hash: ' + pathname);\r\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\r\n    };\r\n    SpyLocation.prototype.prepareExternalUrl = function (url) {\r\n        if (url.length > 0 && !url.startsWith('/')) {\r\n            url = '/' + url;\r\n        }\r\n        return this._baseHref + url;\r\n    };\r\n    SpyLocation.prototype.go = function (path, query, state) {\r\n        if (query === void 0) { query = ''; }\r\n        if (state === void 0) { state = null; }\r\n        path = this.prepareExternalUrl(path);\r\n        if (this._historyIndex > 0) {\r\n            this._history.splice(this._historyIndex + 1);\r\n        }\r\n        this._history.push(new LocationState(path, query, state));\r\n        this._historyIndex = this._history.length - 1;\r\n        var locationState = this._history[this._historyIndex - 1];\r\n        if (locationState.path == path && locationState.query == query) {\r\n            return;\r\n        }\r\n        var url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.urlChanges.push(url);\r\n        this._subject.emit({ 'url': url, 'pop': false });\r\n    };\r\n    SpyLocation.prototype.replaceState = function (path, query, state) {\r\n        if (query === void 0) { query = ''; }\r\n        if (state === void 0) { state = null; }\r\n        path = this.prepareExternalUrl(path);\r\n        var history = this._history[this._historyIndex];\r\n        if (history.path == path && history.query == query) {\r\n            return;\r\n        }\r\n        history.path = path;\r\n        history.query = query;\r\n        history.state = state;\r\n        var url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.urlChanges.push('replace: ' + url);\r\n    };\r\n    SpyLocation.prototype.forward = function () {\r\n        if (this._historyIndex < (this._history.length - 1)) {\r\n            this._historyIndex++;\r\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });\r\n        }\r\n    };\r\n    SpyLocation.prototype.back = function () {\r\n        if (this._historyIndex > 0) {\r\n            this._historyIndex--;\r\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });\r\n        }\r\n    };\r\n    SpyLocation.prototype.onUrlChange = function (fn) {\r\n        var _this = this;\r\n        this._urlChangeListeners.push(fn);\r\n        this.subscribe(function (v) { _this._notifyUrlChangeListeners(v.url, v.state); });\r\n    };\r\n    /** @internal */\r\n    SpyLocation.prototype._notifyUrlChangeListeners = function (url, state) {\r\n        if (url === void 0) { url = ''; }\r\n        this._urlChangeListeners.forEach(function (fn) { return fn(url, state); });\r\n    };\r\n    SpyLocation.prototype.subscribe = function (onNext, onThrow, onReturn) {\r\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\r\n    };\r\n    SpyLocation.prototype.normalize = function (url) { return null; };\r\n    SpyLocation = __decorate([\r\n        Injectable()\r\n    ], SpyLocation);\r\n    return SpyLocation;\r\n}());\r\nvar LocationState = /** @class */ (function () {\r\n    function LocationState(path, query, state) {\r\n        this.path = path;\r\n        this.query = query;\r\n        this.state = state;\r\n    }\r\n    return LocationState;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\r\n * location events.\r\n *\r\n * @publicApi\r\n */\r\nvar MockLocationStrategy = /** @class */ (function (_super) {\r\n    __extends(MockLocationStrategy, _super);\r\n    function MockLocationStrategy() {\r\n        var _this = _super.call(this) || this;\r\n        _this.internalBaseHref = '/';\r\n        _this.internalPath = '/';\r\n        _this.internalTitle = '';\r\n        _this.urlChanges = [];\r\n        /** @internal */\r\n        _this._subject = new EventEmitter();\r\n        _this.stateChanges = [];\r\n        return _this;\r\n    }\r\n    MockLocationStrategy.prototype.simulatePopState = function (url) {\r\n        this.internalPath = url;\r\n        this._subject.emit(new _MockPopStateEvent(this.path()));\r\n    };\r\n    MockLocationStrategy.prototype.path = function (includeHash) {\r\n        if (includeHash === void 0) { includeHash = false; }\r\n        return this.internalPath;\r\n    };\r\n    MockLocationStrategy.prototype.prepareExternalUrl = function (internal) {\r\n        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\r\n            return this.internalBaseHref + internal.substring(1);\r\n        }\r\n        return this.internalBaseHref + internal;\r\n    };\r\n    MockLocationStrategy.prototype.pushState = function (ctx, title, path, query) {\r\n        // Add state change to changes array\r\n        this.stateChanges.push(ctx);\r\n        this.internalTitle = title;\r\n        var url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.internalPath = url;\r\n        var externalUrl = this.prepareExternalUrl(url);\r\n        this.urlChanges.push(externalUrl);\r\n    };\r\n    MockLocationStrategy.prototype.replaceState = function (ctx, title, path, query) {\r\n        // Reset the last index of stateChanges to the ctx (state) object\r\n        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\r\n        this.internalTitle = title;\r\n        var url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.internalPath = url;\r\n        var externalUrl = this.prepareExternalUrl(url);\r\n        this.urlChanges.push('replace: ' + externalUrl);\r\n    };\r\n    MockLocationStrategy.prototype.onPopState = function (fn) { this._subject.subscribe({ next: fn }); };\r\n    MockLocationStrategy.prototype.getBaseHref = function () { return this.internalBaseHref; };\r\n    MockLocationStrategy.prototype.back = function () {\r\n        if (this.urlChanges.length > 0) {\r\n            this.urlChanges.pop();\r\n            this.stateChanges.pop();\r\n            var nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\r\n            this.simulatePopState(nextUrl);\r\n        }\r\n    };\r\n    MockLocationStrategy.prototype.forward = function () { throw 'not implemented'; };\r\n    MockLocationStrategy.prototype.getState = function () { return this.stateChanges[(this.stateChanges.length || 1) - 1]; };\r\n    MockLocationStrategy = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [])\r\n    ], MockLocationStrategy);\r\n    return MockLocationStrategy;\r\n}(LocationStrategy));\r\nvar _MockPopStateEvent = /** @class */ (function () {\r\n    function _MockPopStateEvent(newUrl) {\r\n        this.newUrl = newUrl;\r\n        this.pop = true;\r\n        this.type = 'popstate';\r\n    }\r\n    return _MockPopStateEvent;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\r\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\r\n *  12            3  4          5       6  7        8 9\r\n *\r\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\r\n *\r\n * Results in:\r\n *\r\n * $1 = http:\r\n * $2 = http\r\n * $3 = //www.ics.uci.edu\r\n * $4 = www.ics.uci.edu\r\n * $5 = /pub/ietf/uri/\r\n * $6 = <undefined>\r\n * $7 = <undefined>\r\n * $8 = #Related\r\n * $9 = Related\r\n */\r\nvar urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\r\nfunction parseUrl(urlStr, baseHref) {\r\n    var verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\r\n    var serverBase;\r\n    // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\r\n    // an arbitrary base URL which can be removed afterward.\r\n    if (!verifyProtocol.test(urlStr)) {\r\n        serverBase = 'http://empty.com/';\r\n    }\r\n    var parsedUrl;\r\n    try {\r\n        parsedUrl = new URL(urlStr, serverBase);\r\n    }\r\n    catch (e) {\r\n        var result = urlParse.exec(serverBase || '' + urlStr);\r\n        if (!result) {\r\n            throw new Error(\"Invalid URL: \" + urlStr + \" with base: \" + baseHref);\r\n        }\r\n        var hostSplit = result[4].split(':');\r\n        parsedUrl = {\r\n            protocol: result[1],\r\n            hostname: hostSplit[0],\r\n            port: hostSplit[1] || '',\r\n            pathname: result[5],\r\n            search: result[6],\r\n            hash: result[8],\r\n        };\r\n    }\r\n    if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\r\n        parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\r\n    }\r\n    return {\r\n        hostname: !serverBase && parsedUrl.hostname || '',\r\n        protocol: !serverBase && parsedUrl.protocol || '',\r\n        port: !serverBase && parsedUrl.port || '',\r\n        pathname: parsedUrl.pathname || '/',\r\n        search: parsedUrl.search || '',\r\n        hash: parsedUrl.hash || '',\r\n    };\r\n}\r\n/**\r\n * Provider for mock platform location config\r\n *\r\n * @publicApi\r\n */\r\nvar MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\r\n/**\r\n * Mock implementation of URL state.\r\n *\r\n * @publicApi\r\n */\r\nvar MockPlatformLocation = /** @class */ (function () {\r\n    function MockPlatformLocation(config) {\r\n        this.baseHref = '';\r\n        this.hashUpdate = new Subject();\r\n        this.urlChanges = [{ hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null }];\r\n        if (config) {\r\n            this.baseHref = config.appBaseHref || '';\r\n            var parsedChanges = this.parseChanges(null, config.startUrl || 'http://<empty>/', this.baseHref);\r\n            this.urlChanges[0] = __assign({}, parsedChanges);\r\n        }\r\n    }\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"hostname\", {\r\n        get: function () { return this.urlChanges[0].hostname; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"protocol\", {\r\n        get: function () { return this.urlChanges[0].protocol; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"port\", {\r\n        get: function () { return this.urlChanges[0].port; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"pathname\", {\r\n        get: function () { return this.urlChanges[0].pathname; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"search\", {\r\n        get: function () { return this.urlChanges[0].search; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"hash\", {\r\n        get: function () { return this.urlChanges[0].hash; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"state\", {\r\n        get: function () { return this.urlChanges[0].state; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MockPlatformLocation.prototype.getBaseHrefFromDOM = function () { return this.baseHref; };\r\n    MockPlatformLocation.prototype.onPopState = function (fn) {\r\n        // No-op: a state stack is not implemented, so\r\n        // no events will ever come.\r\n    };\r\n    MockPlatformLocation.prototype.onHashChange = function (fn) { this.hashUpdate.subscribe(fn); };\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"href\", {\r\n        get: function () {\r\n            var url = this.protocol + \"//\" + this.hostname + (this.port ? ':' + this.port : '');\r\n            url += \"\" + (this.pathname === '/' ? '' : this.pathname) + this.search + this.hash;\r\n            return url;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MockPlatformLocation.prototype, \"url\", {\r\n        get: function () { return \"\" + this.pathname + this.search + this.hash; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MockPlatformLocation.prototype.parseChanges = function (state, url, baseHref) {\r\n        if (baseHref === void 0) { baseHref = ''; }\r\n        // When the `history.state` value is stored, it is always copied.\r\n        state = JSON.parse(JSON.stringify(state));\r\n        return __assign({}, parseUrl(url, baseHref), { state: state });\r\n    };\r\n    MockPlatformLocation.prototype.replaceState = function (state, title, newUrl) {\r\n        var _a = this.parseChanges(state, newUrl), pathname = _a.pathname, search = _a.search, parsedState = _a.state, hash = _a.hash;\r\n        this.urlChanges[0] = __assign({}, this.urlChanges[0], { pathname: pathname, search: search, hash: hash, state: parsedState });\r\n    };\r\n    MockPlatformLocation.prototype.pushState = function (state, title, newUrl) {\r\n        var _a = this.parseChanges(state, newUrl), pathname = _a.pathname, search = _a.search, parsedState = _a.state, hash = _a.hash;\r\n        this.urlChanges.unshift(__assign({}, this.urlChanges[0], { pathname: pathname, search: search, hash: hash, state: parsedState }));\r\n    };\r\n    MockPlatformLocation.prototype.forward = function () { throw new Error('Not implemented'); };\r\n    MockPlatformLocation.prototype.back = function () {\r\n        var _this = this;\r\n        var oldUrl = this.url;\r\n        var oldHash = this.hash;\r\n        this.urlChanges.shift();\r\n        var newHash = this.hash;\r\n        if (oldHash !== newHash) {\r\n            scheduleMicroTask(function () { return _this.hashUpdate.next({\r\n                type: 'hashchange', state: null, oldUrl: oldUrl, newUrl: _this.url\r\n            }); });\r\n        }\r\n    };\r\n    MockPlatformLocation.prototype.getState = function () { return this.state; };\r\n    MockPlatformLocation = __decorate([\r\n        Injectable(),\r\n        __param(0, Inject(MOCK_PLATFORM_LOCATION_CONFIG)), __param(0, Optional()),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], MockPlatformLocation);\r\n    return MockPlatformLocation;\r\n}());\r\nfunction scheduleMicroTask(cb) {\r\n    Promise.resolve(null).then(cb);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { SpyLocation, MockLocationStrategy, MOCK_PLATFORM_LOCATION_CONFIG, MockPlatformLocation };\r\n\r\n"]}