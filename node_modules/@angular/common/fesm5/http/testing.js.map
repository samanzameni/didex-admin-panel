{"version":3,"sources":["d:/Angular Project/Didex/didex-admin-panel/node_modules/@angular/common/fesm5/http/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8TM;;;;4JAG2B;;;;;;;;;;;;;;;;;;;;KAoB5B;;;;;;;;;;;;;;;;;;;;;;cAY2B","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v8.2.14\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __decorate } from 'tslib';\r\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpEventType, HttpClientModule, HttpBackend } from '@angular/common/http';\r\nimport { Injectable, NgModule } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Controller to be injected into tests, that allows for mocking and flushing\r\n * of requests.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpTestingController = /** @class */ (function () {\r\n    function HttpTestingController() {\r\n    }\r\n    return HttpTestingController;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A mock requests that was received and is ready to be answered.\r\n *\r\n * This interface allows access to the underlying `HttpRequest`, and allows\r\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\r\n *\r\n * @publicApi\r\n */\r\nvar TestRequest = /** @class */ (function () {\r\n    function TestRequest(request, observer) {\r\n        this.request = request;\r\n        this.observer = observer;\r\n        /**\r\n         * @internal set by `HttpClientTestingBackend`\r\n         */\r\n        this._cancelled = false;\r\n    }\r\n    Object.defineProperty(TestRequest.prototype, \"cancelled\", {\r\n        /**\r\n         * Whether the request was cancelled after it was sent.\r\n         */\r\n        get: function () { return this._cancelled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Resolve the request by returning a body plus additional HTTP information (such as response\r\n     * headers) if provided.\r\n     * If the request specifies an expected body type, the body is converted into the requested type.\r\n     * Otherwise, the body is converted to `JSON` by default.\r\n     *\r\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\r\n     */\r\n    TestRequest.prototype.flush = function (body, opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        if (this.cancelled) {\r\n            throw new Error(\"Cannot flush a cancelled request.\");\r\n        }\r\n        var url = this.request.urlWithParams;\r\n        var headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\r\n        body = _maybeConvertBody(this.request.responseType, body);\r\n        var statusText = opts.statusText;\r\n        var status = opts.status !== undefined ? opts.status : 200;\r\n        if (opts.status === undefined) {\r\n            if (body === null) {\r\n                status = 204;\r\n                statusText = statusText || 'No Content';\r\n            }\r\n            else {\r\n                statusText = statusText || 'OK';\r\n            }\r\n        }\r\n        if (statusText === undefined) {\r\n            throw new Error('statusText is required when setting a custom status.');\r\n        }\r\n        if (status >= 200 && status < 300) {\r\n            this.observer.next(new HttpResponse({ body: body, headers: headers, status: status, statusText: statusText, url: url }));\r\n            this.observer.complete();\r\n        }\r\n        else {\r\n            this.observer.error(new HttpErrorResponse({ error: body, headers: headers, status: status, statusText: statusText, url: url }));\r\n        }\r\n    };\r\n    /**\r\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\r\n     */\r\n    TestRequest.prototype.error = function (error, opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        if (this.cancelled) {\r\n            throw new Error(\"Cannot return an error for a cancelled request.\");\r\n        }\r\n        if (opts.status && opts.status >= 200 && opts.status < 300) {\r\n            throw new Error(\"error() called with a successful status.\");\r\n        }\r\n        var headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\r\n        this.observer.error(new HttpErrorResponse({\r\n            error: error,\r\n            headers: headers,\r\n            status: opts.status || 0,\r\n            statusText: opts.statusText || '',\r\n            url: this.request.urlWithParams,\r\n        }));\r\n    };\r\n    /**\r\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\r\n     * request.\r\n     */\r\n    TestRequest.prototype.event = function (event) {\r\n        if (this.cancelled) {\r\n            throw new Error(\"Cannot send events to a cancelled request.\");\r\n        }\r\n        this.observer.next(event);\r\n    };\r\n    return TestRequest;\r\n}());\r\n/**\r\n * Helper function to convert a response body to an ArrayBuffer.\r\n */\r\nfunction _toArrayBufferBody(body) {\r\n    if (typeof ArrayBuffer === 'undefined') {\r\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\r\n    }\r\n    if (body instanceof ArrayBuffer) {\r\n        return body;\r\n    }\r\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\r\n}\r\n/**\r\n * Helper function to convert a response body to a Blob.\r\n */\r\nfunction _toBlob(body) {\r\n    if (typeof Blob === 'undefined') {\r\n        throw new Error('Blob responses are not supported on this platform.');\r\n    }\r\n    if (body instanceof Blob) {\r\n        return body;\r\n    }\r\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\r\n        return new Blob([body]);\r\n    }\r\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\r\n}\r\n/**\r\n * Helper function to convert a response body to JSON data.\r\n */\r\nfunction _toJsonBody(body, format) {\r\n    if (format === void 0) { format = 'JSON'; }\r\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\r\n        throw new Error(\"Automatic conversion to \" + format + \" is not supported for ArrayBuffers.\");\r\n    }\r\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\r\n        throw new Error(\"Automatic conversion to \" + format + \" is not supported for Blobs.\");\r\n    }\r\n    if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\r\n        Array.isArray(body)) {\r\n        return body;\r\n    }\r\n    throw new Error(\"Automatic conversion to \" + format + \" is not supported for response type.\");\r\n}\r\n/**\r\n * Helper function to convert a response body to a string.\r\n */\r\nfunction _toTextBody(body) {\r\n    if (typeof body === 'string') {\r\n        return body;\r\n    }\r\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\r\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\r\n    }\r\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\r\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\r\n    }\r\n    return JSON.stringify(_toJsonBody(body, 'text'));\r\n}\r\n/**\r\n * Convert a response body to the requested type.\r\n */\r\nfunction _maybeConvertBody(responseType, body) {\r\n    if (body === null) {\r\n        return null;\r\n    }\r\n    switch (responseType) {\r\n        case 'arraybuffer':\r\n            return _toArrayBufferBody(body);\r\n        case 'blob':\r\n            return _toBlob(body);\r\n        case 'json':\r\n            return _toJsonBody(body);\r\n        case 'text':\r\n            return _toTextBody(body);\r\n        default:\r\n            throw new Error(\"Unsupported responseType: \" + responseType);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\r\n * and as the `HttpTestingController`.\r\n *\r\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\r\n * As requests come in, they're added to the list. Users can assert that specific\r\n * requests were made and then flush them. In the end, a verify() method asserts\r\n * that no unexpected requests were made.\r\n *\r\n *\r\n */\r\nvar HttpClientTestingBackend = /** @class */ (function () {\r\n    function HttpClientTestingBackend() {\r\n        /**\r\n         * List of pending requests which have not yet been expected.\r\n         */\r\n        this.open = [];\r\n    }\r\n    /**\r\n     * Handle an incoming request by queueing it in the list of open requests.\r\n     */\r\n    HttpClientTestingBackend.prototype.handle = function (req) {\r\n        var _this = this;\r\n        return new Observable(function (observer) {\r\n            var testReq = new TestRequest(req, observer);\r\n            _this.open.push(testReq);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            return function () { testReq._cancelled = true; };\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to search for requests in the list of open requests.\r\n     */\r\n    HttpClientTestingBackend.prototype._match = function (match) {\r\n        if (typeof match === 'string') {\r\n            return this.open.filter(function (testReq) { return testReq.request.urlWithParams === match; });\r\n        }\r\n        else if (typeof match === 'function') {\r\n            return this.open.filter(function (testReq) { return match(testReq.request); });\r\n        }\r\n        else {\r\n            return this.open.filter(function (testReq) { return (!match.method || testReq.request.method === match.method.toUpperCase()) &&\r\n                (!match.url || testReq.request.urlWithParams === match.url); });\r\n        }\r\n    };\r\n    /**\r\n     * Search for requests in the list of open requests, and return all that match\r\n     * without asserting anything about the number of matches.\r\n     */\r\n    HttpClientTestingBackend.prototype.match = function (match) {\r\n        var _this = this;\r\n        var results = this._match(match);\r\n        results.forEach(function (result) {\r\n            var index = _this.open.indexOf(result);\r\n            if (index !== -1) {\r\n                _this.open.splice(index, 1);\r\n            }\r\n        });\r\n        return results;\r\n    };\r\n    /**\r\n     * Expect that a single outstanding request matches the given matcher, and return\r\n     * it.\r\n     *\r\n     * Requests returned through this API will no longer be in the list of open requests,\r\n     * and thus will not match twice.\r\n     */\r\n    HttpClientTestingBackend.prototype.expectOne = function (match, description) {\r\n        description = description || this.descriptionFromMatcher(match);\r\n        var matches = this.match(match);\r\n        if (matches.length > 1) {\r\n            throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found \" + matches.length + \" requests.\");\r\n        }\r\n        if (matches.length === 0) {\r\n            throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found none.\");\r\n        }\r\n        return matches[0];\r\n    };\r\n    /**\r\n     * Expect that no outstanding requests match the given matcher, and throw an error\r\n     * if any do.\r\n     */\r\n    HttpClientTestingBackend.prototype.expectNone = function (match, description) {\r\n        description = description || this.descriptionFromMatcher(match);\r\n        var matches = this.match(match);\r\n        if (matches.length > 0) {\r\n            throw new Error(\"Expected zero matching requests for criteria \\\"\" + description + \"\\\", found \" + matches.length + \".\");\r\n        }\r\n    };\r\n    /**\r\n     * Validate that there are no outstanding requests.\r\n     */\r\n    HttpClientTestingBackend.prototype.verify = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var open = this.open;\r\n        // It's possible that some requests may be cancelled, and this is expected.\r\n        // The user can ask to ignore open requests which have been cancelled.\r\n        if (opts.ignoreCancelled) {\r\n            open = open.filter(function (testReq) { return !testReq.cancelled; });\r\n        }\r\n        if (open.length > 0) {\r\n            // Show the methods and URLs of open requests in the error, for convenience.\r\n            var requests = open.map(function (testReq) {\r\n                var url = testReq.request.urlWithParams.split('?')[0];\r\n                var method = testReq.request.method;\r\n                return method + \" \" + url;\r\n            })\r\n                .join(', ');\r\n            throw new Error(\"Expected no open requests, found \" + open.length + \": \" + requests);\r\n        }\r\n    };\r\n    HttpClientTestingBackend.prototype.descriptionFromMatcher = function (matcher) {\r\n        if (typeof matcher === 'string') {\r\n            return \"Match URL: \" + matcher;\r\n        }\r\n        else if (typeof matcher === 'object') {\r\n            var method = matcher.method || '(any)';\r\n            var url = matcher.url || '(any)';\r\n            return \"Match method: \" + method + \", URL: \" + url;\r\n        }\r\n        else {\r\n            return \"Match by function: \" + matcher.name;\r\n        }\r\n    };\r\n    HttpClientTestingBackend = __decorate([\r\n        Injectable()\r\n    ], HttpClientTestingBackend);\r\n    return HttpClientTestingBackend;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\r\n *\r\n * Inject `HttpTestingController` to expect and flush requests in your tests.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpClientTestingModule = /** @class */ (function () {\r\n    function HttpClientTestingModule() {\r\n    }\r\n    HttpClientTestingModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                HttpClientModule,\r\n            ],\r\n            providers: [\r\n                HttpClientTestingBackend,\r\n                { provide: HttpBackend, useExisting: HttpClientTestingBackend },\r\n                { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\r\n            ],\r\n        })\r\n    ], HttpClientTestingModule);\r\n    return HttpClientTestingModule;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HttpClientTestingBackend as ɵangular_packages_common_http_testing_testing_a, HttpTestingController, HttpClientTestingModule, TestRequest };\r\n\r\n"]}